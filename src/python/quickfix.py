# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_quickfix', [dirname(__file__)])
        except ImportError:
            import _quickfix
            return _quickfix
        if fp is not None:
            try:
                _mod = imp.load_module('_quickfix', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _quickfix = swig_import_helper()
    del swig_import_helper
else:
    import _quickfix
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class IntArray(_object):
    """Proxy of C++ IntArray class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        """
        __init__(IntArray self, size_t nelements) -> IntArray

        Parameters:
            nelements: size_t

        """
        this = _quickfix.new_IntArray(nelements)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IntArray
    __del__ = lambda self: None

    def __getitem__(self, index: 'size_t') -> "int":
        """
        __getitem__(IntArray self, size_t index) -> int

        Parameters:
            index: size_t

        """
        return _quickfix.IntArray___getitem__(self, index)


    def __setitem__(self, index: 'size_t', value: 'int') -> "void":
        """
        __setitem__(IntArray self, size_t index, int value)

        Parameters:
            index: size_t
            value: int

        """
        return _quickfix.IntArray___setitem__(self, index, value)


    def cast(self) -> "int *":
        """
        cast(IntArray self) -> int *

        Parameters:
            self: IntArray *

        """
        return _quickfix.IntArray_cast(self)


    def frompointer(t: 'int *') -> "IntArray *":
        """
        frompointer(int * t) -> IntArray

        Parameters:
            t: int *

        """
        return _quickfix.IntArray_frompointer(t)

    if _newclass:
        frompointer = staticmethod(frompointer)
    __swig_getmethods__["frompointer"] = lambda x: frompointer
IntArray_swigregister = _quickfix.IntArray_swigregister
IntArray_swigregister(IntArray)

def IntArray_frompointer(t: 'int *') -> "IntArray *":
    """
    IntArray_frompointer(int * t) -> IntArray

    Parameters:
        t: int *

    """
    return _quickfix.IntArray_frompointer(t)

class Exception(Exception):
    """Proxy of C++ FIX::Exception class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr

    def __init__(self, t: 'std::string const &', d: 'std::string const &'):
        """
        __init__(FIX::Exception self, std::string const & t, std::string const & d) -> Exception

        Parameters:
            t: std::string const &
            d: std::string const &

        """
        this = _quickfix.new_Exception(t, d)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Exception
    __del__ = lambda self: None
    __swig_setmethods__["type"] = _quickfix.Exception_type_set
    __swig_getmethods__["type"] = _quickfix.Exception_type_get
    __swig_setmethods__["detail"] = _quickfix.Exception_detail_set
    __swig_getmethods__["detail"] = _quickfix.Exception_detail_get

    def __str__(self) -> "std::string":
        """
        __str__(Exception self) -> std::string

        Parameters:
            self: FIX::Exception *

        """
        return _quickfix.Exception___str__(self)

Exception_swigregister = _quickfix.Exception_swigregister
Exception_swigregister(Exception)

class DataDictionaryNotFound(Exception):
    """Proxy of C++ FIX::DataDictionaryNotFound class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataDictionaryNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataDictionaryNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DataDictionaryNotFound self, std::string const & v, std::string const & what) -> DataDictionaryNotFound

        Parameters:
            v: std::string const &
            what: std::string const &

        __init__(FIX::DataDictionaryNotFound self, std::string const & v) -> DataDictionaryNotFound

        Parameters:
            v: std::string const &

        """
        this = _quickfix.new_DataDictionaryNotFound(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DataDictionaryNotFound
    __del__ = lambda self: None
    __swig_setmethods__["version"] = _quickfix.DataDictionaryNotFound_version_set
    __swig_getmethods__["version"] = _quickfix.DataDictionaryNotFound_version_get
    if _newclass:
        version = _swig_property(_quickfix.DataDictionaryNotFound_version_get, _quickfix.DataDictionaryNotFound_version_set)
DataDictionaryNotFound_swigregister = _quickfix.DataDictionaryNotFound_swigregister
DataDictionaryNotFound_swigregister(DataDictionaryNotFound)

class FieldNotFound(Exception):
    """Proxy of C++ FIX::FieldNotFound class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FieldNotFound self, int f=0, std::string const & what) -> FieldNotFound

        Parameters:
            f: int
            what: std::string const &

        __init__(FIX::FieldNotFound self, int f=0) -> FieldNotFound

        Parameters:
            f: int

        __init__(FIX::FieldNotFound self) -> FieldNotFound
        """
        this = _quickfix.new_FieldNotFound(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["field"] = _quickfix.FieldNotFound_field_set
    __swig_getmethods__["field"] = _quickfix.FieldNotFound_field_get
    __swig_destroy__ = _quickfix.delete_FieldNotFound
    __del__ = lambda self: None
FieldNotFound_swigregister = _quickfix.FieldNotFound_swigregister
FieldNotFound_swigregister(FieldNotFound)

class FieldConvertError(Exception):
    """Proxy of C++ FIX::FieldConvertError class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldConvertError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FieldConvertError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FieldConvertError self, std::string const & what) -> FieldConvertError

        Parameters:
            what: std::string const &

        __init__(FIX::FieldConvertError self) -> FieldConvertError
        """
        this = _quickfix.new_FieldConvertError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FieldConvertError
    __del__ = lambda self: None
FieldConvertError_swigregister = _quickfix.FieldConvertError_swigregister
FieldConvertError_swigregister(FieldConvertError)

class MessageParseError(Exception):
    """Proxy of C++ FIX::MessageParseError class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageParseError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageParseError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MessageParseError self, std::string const & what) -> MessageParseError

        Parameters:
            what: std::string const &

        __init__(FIX::MessageParseError self) -> MessageParseError
        """
        this = _quickfix.new_MessageParseError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MessageParseError
    __del__ = lambda self: None
MessageParseError_swigregister = _quickfix.MessageParseError_swigregister
MessageParseError_swigregister(MessageParseError)

class InvalidMessage(Exception):
    """Proxy of C++ FIX::InvalidMessage class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidMessage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InvalidMessage self, std::string const & what) -> InvalidMessage

        Parameters:
            what: std::string const &

        __init__(FIX::InvalidMessage self) -> InvalidMessage
        """
        this = _quickfix.new_InvalidMessage(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InvalidMessage
    __del__ = lambda self: None
InvalidMessage_swigregister = _quickfix.InvalidMessage_swigregister
InvalidMessage_swigregister(InvalidMessage)

class ConfigError(Exception):
    """Proxy of C++ FIX::ConfigError class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ConfigError self, std::string const & what) -> ConfigError

        Parameters:
            what: std::string const &

        __init__(FIX::ConfigError self) -> ConfigError
        """
        this = _quickfix.new_ConfigError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ConfigError
    __del__ = lambda self: None
ConfigError_swigregister = _quickfix.ConfigError_swigregister
ConfigError_swigregister(ConfigError)

class RuntimeError(Exception):
    """Proxy of C++ FIX::RuntimeError class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuntimeError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RuntimeError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RuntimeError self, std::string const & what) -> RuntimeError

        Parameters:
            what: std::string const &

        __init__(FIX::RuntimeError self) -> RuntimeError
        """
        this = _quickfix.new_RuntimeError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RuntimeError
    __del__ = lambda self: None
RuntimeError_swigregister = _quickfix.RuntimeError_swigregister
RuntimeError_swigregister(RuntimeError)

class InvalidTagNumber(Exception):
    """Proxy of C++ FIX::InvalidTagNumber class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidTagNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidTagNumber, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InvalidTagNumber self, int f=0, std::string const & what) -> InvalidTagNumber

        Parameters:
            f: int
            what: std::string const &

        __init__(FIX::InvalidTagNumber self, int f=0) -> InvalidTagNumber

        Parameters:
            f: int

        __init__(FIX::InvalidTagNumber self) -> InvalidTagNumber
        """
        this = _quickfix.new_InvalidTagNumber(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["field"] = _quickfix.InvalidTagNumber_field_set
    __swig_getmethods__["field"] = _quickfix.InvalidTagNumber_field_get
    __swig_destroy__ = _quickfix.delete_InvalidTagNumber
    __del__ = lambda self: None
InvalidTagNumber_swigregister = _quickfix.InvalidTagNumber_swigregister
InvalidTagNumber_swigregister(InvalidTagNumber)

class RequiredTagMissing(Exception):
    """Proxy of C++ FIX::RequiredTagMissing class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RequiredTagMissing, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RequiredTagMissing, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RequiredTagMissing self, int f=0, std::string const & what) -> RequiredTagMissing

        Parameters:
            f: int
            what: std::string const &

        __init__(FIX::RequiredTagMissing self, int f=0) -> RequiredTagMissing

        Parameters:
            f: int

        __init__(FIX::RequiredTagMissing self) -> RequiredTagMissing
        """
        this = _quickfix.new_RequiredTagMissing(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["field"] = _quickfix.RequiredTagMissing_field_set
    __swig_getmethods__["field"] = _quickfix.RequiredTagMissing_field_get
    __swig_destroy__ = _quickfix.delete_RequiredTagMissing
    __del__ = lambda self: None
RequiredTagMissing_swigregister = _quickfix.RequiredTagMissing_swigregister
RequiredTagMissing_swigregister(RequiredTagMissing)

class TagNotDefinedForMessage(Exception):
    """Proxy of C++ FIX::TagNotDefinedForMessage class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagNotDefinedForMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TagNotDefinedForMessage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TagNotDefinedForMessage self, int f=0, std::string const & what) -> TagNotDefinedForMessage

        Parameters:
            f: int
            what: std::string const &

        __init__(FIX::TagNotDefinedForMessage self, int f=0) -> TagNotDefinedForMessage

        Parameters:
            f: int

        __init__(FIX::TagNotDefinedForMessage self) -> TagNotDefinedForMessage
        """
        this = _quickfix.new_TagNotDefinedForMessage(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["field"] = _quickfix.TagNotDefinedForMessage_field_set
    __swig_getmethods__["field"] = _quickfix.TagNotDefinedForMessage_field_get
    __swig_destroy__ = _quickfix.delete_TagNotDefinedForMessage
    __del__ = lambda self: None
TagNotDefinedForMessage_swigregister = _quickfix.TagNotDefinedForMessage_swigregister
TagNotDefinedForMessage_swigregister(TagNotDefinedForMessage)

class NoTagValue(Exception):
    """Proxy of C++ FIX::NoTagValue class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTagValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTagValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoTagValue self, int f=0, std::string const & what) -> NoTagValue

        Parameters:
            f: int
            what: std::string const &

        __init__(FIX::NoTagValue self, int f=0) -> NoTagValue

        Parameters:
            f: int

        __init__(FIX::NoTagValue self) -> NoTagValue
        """
        this = _quickfix.new_NoTagValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["field"] = _quickfix.NoTagValue_field_set
    __swig_getmethods__["field"] = _quickfix.NoTagValue_field_get
    __swig_destroy__ = _quickfix.delete_NoTagValue
    __del__ = lambda self: None
NoTagValue_swigregister = _quickfix.NoTagValue_swigregister
NoTagValue_swigregister(NoTagValue)

class IncorrectTagValue(Exception):
    """Proxy of C++ FIX::IncorrectTagValue class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectTagValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectTagValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IncorrectTagValue self, int f=0, std::string const & what) -> IncorrectTagValue

        Parameters:
            f: int
            what: std::string const &

        __init__(FIX::IncorrectTagValue self, int f=0) -> IncorrectTagValue

        Parameters:
            f: int

        __init__(FIX::IncorrectTagValue self) -> IncorrectTagValue
        """
        this = _quickfix.new_IncorrectTagValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["field"] = _quickfix.IncorrectTagValue_field_set
    __swig_getmethods__["field"] = _quickfix.IncorrectTagValue_field_get
    __swig_destroy__ = _quickfix.delete_IncorrectTagValue
    __del__ = lambda self: None
IncorrectTagValue_swigregister = _quickfix.IncorrectTagValue_swigregister
IncorrectTagValue_swigregister(IncorrectTagValue)

class IncorrectDataFormat(Exception):
    """Proxy of C++ FIX::IncorrectDataFormat class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectDataFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectDataFormat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IncorrectDataFormat self, int f=0, std::string const & what) -> IncorrectDataFormat

        Parameters:
            f: int
            what: std::string const &

        __init__(FIX::IncorrectDataFormat self, int f=0) -> IncorrectDataFormat

        Parameters:
            f: int

        __init__(FIX::IncorrectDataFormat self) -> IncorrectDataFormat
        """
        this = _quickfix.new_IncorrectDataFormat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["field"] = _quickfix.IncorrectDataFormat_field_set
    __swig_getmethods__["field"] = _quickfix.IncorrectDataFormat_field_get
    __swig_destroy__ = _quickfix.delete_IncorrectDataFormat
    __del__ = lambda self: None
IncorrectDataFormat_swigregister = _quickfix.IncorrectDataFormat_swigregister
IncorrectDataFormat_swigregister(IncorrectDataFormat)

class IncorrectMessageStructure(Exception):
    """Proxy of C++ FIX::IncorrectMessageStructure class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncorrectMessageStructure, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncorrectMessageStructure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IncorrectMessageStructure self, std::string const & what) -> IncorrectMessageStructure

        Parameters:
            what: std::string const &

        __init__(FIX::IncorrectMessageStructure self) -> IncorrectMessageStructure
        """
        this = _quickfix.new_IncorrectMessageStructure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IncorrectMessageStructure
    __del__ = lambda self: None
IncorrectMessageStructure_swigregister = _quickfix.IncorrectMessageStructure_swigregister
IncorrectMessageStructure_swigregister(IncorrectMessageStructure)

class DuplicateFieldNumber(Exception):
    """Proxy of C++ FIX::DuplicateFieldNumber class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuplicateFieldNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DuplicateFieldNumber, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DuplicateFieldNumber self, std::string const & what) -> DuplicateFieldNumber

        Parameters:
            what: std::string const &

        __init__(FIX::DuplicateFieldNumber self) -> DuplicateFieldNumber
        """
        this = _quickfix.new_DuplicateFieldNumber(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DuplicateFieldNumber
    __del__ = lambda self: None
DuplicateFieldNumber_swigregister = _quickfix.DuplicateFieldNumber_swigregister
DuplicateFieldNumber_swigregister(DuplicateFieldNumber)

class InvalidMessageType(Exception):
    """Proxy of C++ FIX::InvalidMessageType class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidMessageType, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidMessageType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InvalidMessageType self, std::string const & what) -> InvalidMessageType

        Parameters:
            what: std::string const &

        __init__(FIX::InvalidMessageType self) -> InvalidMessageType
        """
        this = _quickfix.new_InvalidMessageType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InvalidMessageType
    __del__ = lambda self: None
InvalidMessageType_swigregister = _quickfix.InvalidMessageType_swigregister
InvalidMessageType_swigregister(InvalidMessageType)

class UnsupportedMessageType(Exception):
    """Proxy of C++ FIX::UnsupportedMessageType class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsupportedMessageType, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnsupportedMessageType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnsupportedMessageType self, std::string const & what) -> UnsupportedMessageType

        Parameters:
            what: std::string const &

        __init__(FIX::UnsupportedMessageType self) -> UnsupportedMessageType
        """
        this = _quickfix.new_UnsupportedMessageType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnsupportedMessageType
    __del__ = lambda self: None
UnsupportedMessageType_swigregister = _quickfix.UnsupportedMessageType_swigregister
UnsupportedMessageType_swigregister(UnsupportedMessageType)

class UnsupportedVersion(Exception):
    """Proxy of C++ FIX::UnsupportedVersion class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsupportedVersion, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnsupportedVersion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnsupportedVersion self, std::string const & what) -> UnsupportedVersion

        Parameters:
            what: std::string const &

        __init__(FIX::UnsupportedVersion self) -> UnsupportedVersion
        """
        this = _quickfix.new_UnsupportedVersion(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnsupportedVersion
    __del__ = lambda self: None
UnsupportedVersion_swigregister = _quickfix.UnsupportedVersion_swigregister
UnsupportedVersion_swigregister(UnsupportedVersion)

class TagOutOfOrder(Exception):
    """Proxy of C++ FIX::TagOutOfOrder class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TagOutOfOrder, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TagOutOfOrder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TagOutOfOrder self, int f=0, std::string const & what) -> TagOutOfOrder

        Parameters:
            f: int
            what: std::string const &

        __init__(FIX::TagOutOfOrder self, int f=0) -> TagOutOfOrder

        Parameters:
            f: int

        __init__(FIX::TagOutOfOrder self) -> TagOutOfOrder
        """
        this = _quickfix.new_TagOutOfOrder(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["field"] = _quickfix.TagOutOfOrder_field_set
    __swig_getmethods__["field"] = _quickfix.TagOutOfOrder_field_get
    if _newclass:
        field = _swig_property(_quickfix.TagOutOfOrder_field_get, _quickfix.TagOutOfOrder_field_set)
    __swig_destroy__ = _quickfix.delete_TagOutOfOrder
    __del__ = lambda self: None
TagOutOfOrder_swigregister = _quickfix.TagOutOfOrder_swigregister
TagOutOfOrder_swigregister(TagOutOfOrder)

class RepeatedTag(Exception):
    """Proxy of C++ FIX::RepeatedTag class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepeatedTag, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepeatedTag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RepeatedTag self, int f=0, std::string const & what) -> RepeatedTag

        Parameters:
            f: int
            what: std::string const &

        __init__(FIX::RepeatedTag self, int f=0) -> RepeatedTag

        Parameters:
            f: int

        __init__(FIX::RepeatedTag self) -> RepeatedTag
        """
        this = _quickfix.new_RepeatedTag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["field"] = _quickfix.RepeatedTag_field_set
    __swig_getmethods__["field"] = _quickfix.RepeatedTag_field_get
    __swig_destroy__ = _quickfix.delete_RepeatedTag
    __del__ = lambda self: None
RepeatedTag_swigregister = _quickfix.RepeatedTag_swigregister
RepeatedTag_swigregister(RepeatedTag)

class RepeatingGroupCountMismatch(Exception):
    """Proxy of C++ FIX::RepeatingGroupCountMismatch class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepeatingGroupCountMismatch, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepeatingGroupCountMismatch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RepeatingGroupCountMismatch self, int f=0, std::string const & what) -> RepeatingGroupCountMismatch

        Parameters:
            f: int
            what: std::string const &

        __init__(FIX::RepeatingGroupCountMismatch self, int f=0) -> RepeatingGroupCountMismatch

        Parameters:
            f: int

        __init__(FIX::RepeatingGroupCountMismatch self) -> RepeatingGroupCountMismatch
        """
        this = _quickfix.new_RepeatingGroupCountMismatch(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["field"] = _quickfix.RepeatingGroupCountMismatch_field_set
    __swig_getmethods__["field"] = _quickfix.RepeatingGroupCountMismatch_field_get
    __swig_destroy__ = _quickfix.delete_RepeatingGroupCountMismatch
    __del__ = lambda self: None
RepeatingGroupCountMismatch_swigregister = _quickfix.RepeatingGroupCountMismatch_swigregister
RepeatingGroupCountMismatch_swigregister(RepeatingGroupCountMismatch)

class DoNotSend(Exception):
    """Proxy of C++ FIX::DoNotSend class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoNotSend, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoNotSend, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DoNotSend self, std::string const & what) -> DoNotSend

        Parameters:
            what: std::string const &

        __init__(FIX::DoNotSend self) -> DoNotSend
        """
        this = _quickfix.new_DoNotSend(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DoNotSend
    __del__ = lambda self: None
DoNotSend_swigregister = _quickfix.DoNotSend_swigregister
DoNotSend_swigregister(DoNotSend)

class RejectLogon(Exception):
    """Proxy of C++ FIX::RejectLogon class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RejectLogon, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RejectLogon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RejectLogon self, std::string const & what) -> RejectLogon

        Parameters:
            what: std::string const &

        __init__(FIX::RejectLogon self) -> RejectLogon
        """
        this = _quickfix.new_RejectLogon(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RejectLogon
    __del__ = lambda self: None
RejectLogon_swigregister = _quickfix.RejectLogon_swigregister
RejectLogon_swigregister(RejectLogon)

class SessionNotFound(Exception):
    """Proxy of C++ FIX::SessionNotFound class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SessionNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SessionNotFound self, std::string const & what) -> SessionNotFound

        Parameters:
            what: std::string const &

        __init__(FIX::SessionNotFound self) -> SessionNotFound
        """
        this = _quickfix.new_SessionNotFound(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SessionNotFound
    __del__ = lambda self: None
SessionNotFound_swigregister = _quickfix.SessionNotFound_swigregister
SessionNotFound_swigregister(SessionNotFound)

class IOException(Exception):
    """Proxy of C++ FIX::IOException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOException self, std::string const & what) -> IOException

        Parameters:
            what: std::string const &

        __init__(FIX::IOException self) -> IOException
        """
        this = _quickfix.new_IOException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOException
    __del__ = lambda self: None
IOException_swigregister = _quickfix.IOException_swigregister
IOException_swigregister(IOException)

class SocketException(Exception):
    """Proxy of C++ FIX::SocketException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SocketException self) -> SocketException
        __init__(FIX::SocketException self, std::string const & what) -> SocketException

        Parameters:
            what: std::string const &

        """
        this = _quickfix.new_SocketException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def errorToWhat(self) -> "std::string":
        """
        errorToWhat(SocketException self) -> std::string

        Parameters:
            self: FIX::SocketException *

        """
        return _quickfix.SocketException_errorToWhat(self)

    __swig_setmethods__["error"] = _quickfix.SocketException_error_set
    __swig_getmethods__["error"] = _quickfix.SocketException_error_get
    if _newclass:
        error = _swig_property(_quickfix.SocketException_error_get, _quickfix.SocketException_error_set)
    __swig_destroy__ = _quickfix.delete_SocketException
    __del__ = lambda self: None
SocketException_swigregister = _quickfix.SocketException_swigregister
SocketException_swigregister(SocketException)

class SocketSendFailed(SocketException):
    """Proxy of C++ FIX::SocketSendFailed class"""
    __swig_setmethods__ = {}
    for _s in [SocketException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketSendFailed, name, value)
    __swig_getmethods__ = {}
    for _s in [SocketException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketSendFailed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SocketSendFailed self) -> SocketSendFailed
        __init__(FIX::SocketSendFailed self, std::string const & what) -> SocketSendFailed

        Parameters:
            what: std::string const &

        """
        this = _quickfix.new_SocketSendFailed(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SocketSendFailed
    __del__ = lambda self: None
SocketSendFailed_swigregister = _quickfix.SocketSendFailed_swigregister
SocketSendFailed_swigregister(SocketSendFailed)

class SocketRecvFailed(SocketException):
    """Proxy of C++ FIX::SocketRecvFailed class"""
    __swig_setmethods__ = {}
    for _s in [SocketException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketRecvFailed, name, value)
    __swig_getmethods__ = {}
    for _s in [SocketException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketRecvFailed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SocketRecvFailed self, ssize_t size) -> SocketRecvFailed

        Parameters:
            size: ssize_t

        __init__(FIX::SocketRecvFailed self, std::string const & what) -> SocketRecvFailed

        Parameters:
            what: std::string const &

        """
        this = _quickfix.new_SocketRecvFailed(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SocketRecvFailed
    __del__ = lambda self: None
SocketRecvFailed_swigregister = _quickfix.SocketRecvFailed_swigregister
SocketRecvFailed_swigregister(SocketRecvFailed)

class SocketCloseFailed(SocketException):
    """Proxy of C++ FIX::SocketCloseFailed class"""
    __swig_setmethods__ = {}
    for _s in [SocketException]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketCloseFailed, name, value)
    __swig_getmethods__ = {}
    for _s in [SocketException]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketCloseFailed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SocketCloseFailed self) -> SocketCloseFailed
        __init__(FIX::SocketCloseFailed self, std::string const & what) -> SocketCloseFailed

        Parameters:
            what: std::string const &

        """
        this = _quickfix.new_SocketCloseFailed(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SocketCloseFailed
    __del__ = lambda self: None
SocketCloseFailed_swigregister = _quickfix.SocketCloseFailed_swigregister
SocketCloseFailed_swigregister(SocketCloseFailed)

class FieldBase(_object):
    """Proxy of C++ FIX::FieldBase class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldBase, name)
    __repr__ = _swig_repr

    def __init__(self, tag: 'int', string: 'std::string const &'):
        """
        __init__(FIX::FieldBase self, int tag, std::string const & string) -> FieldBase

        Parameters:
            tag: int
            string: std::string const &

        """
        this = _quickfix.new_FieldBase(tag, string)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FieldBase
    __del__ = lambda self: None

    def setTag(self, tag: 'int') -> "void":
        """
        setTag(FieldBase self, int tag)

        Parameters:
            tag: int

        """
        return _quickfix.FieldBase_setTag(self, tag)


    def setField(self, field: 'int') -> "void":
        """
        setField(FieldBase self, int field)

        Parameters:
            field: int

        """
        return _quickfix.FieldBase_setField(self, field)


    def setString(self, string: 'std::string const &') -> "void":
        """
        setString(FieldBase self, std::string const & string)

        Parameters:
            string: std::string const &

        """
        return _quickfix.FieldBase_setString(self, string)


    def getTag(self) -> "int":
        """
        getTag(FieldBase self) -> int

        Parameters:
            self: FIX::FieldBase const *

        """
        return _quickfix.FieldBase_getTag(self)


    def getField(self) -> "int":
        """
        getField(FieldBase self) -> int

        Parameters:
            self: FIX::FieldBase const *

        """
        return _quickfix.FieldBase_getField(self)


    def getString(self) -> "std::string const &":
        """
        getString(FieldBase self) -> std::string const &

        Parameters:
            self: FIX::FieldBase const *

        """
        return _quickfix.FieldBase_getString(self)


    def getFixString(self) -> "std::string const &":
        """
        getFixString(FieldBase self) -> std::string const &

        Parameters:
            self: FIX::FieldBase const *

        """
        return _quickfix.FieldBase_getFixString(self)


    def getLength(self) -> "size_t":
        """
        getLength(FieldBase self) -> size_t

        Parameters:
            self: FIX::FieldBase const *

        """
        return _quickfix.FieldBase_getLength(self)


    def getTotal(self) -> "int":
        """
        getTotal(FieldBase self) -> int

        Parameters:
            self: FIX::FieldBase const *

        """
        return _quickfix.FieldBase_getTotal(self)


    def __lt__(self, field: 'FieldBase') -> "bool":
        """
        __lt__(FieldBase self, FieldBase field) -> bool

        Parameters:
            field: FIX::FieldBase const &

        """
        return _quickfix.FieldBase___lt__(self, field)


    def __str__(self) -> "std::string":
        """
        __str__(FieldBase self) -> std::string

        Parameters:
            self: FIX::FieldBase *

        """
        return _quickfix.FieldBase___str__(self)

FieldBase_swigregister = _quickfix.FieldBase_swigregister
FieldBase_swigregister(FieldBase)

class StringField(FieldBase):
    """Proxy of C++ FIX::StringField class"""
    __swig_setmethods__ = {}
    for _s in [FieldBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StringField self, int field, std::string const & data) -> StringField

        Parameters:
            field: int
            data: std::string const &

        __init__(FIX::StringField self, int field) -> StringField

        Parameters:
            field: int

        """
        this = _quickfix.new_StringField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setValue(self, value: 'std::string const &') -> "void":
        """
        setValue(StringField self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _quickfix.StringField_setValue(self, value)


    def getValue(self) -> "std::string const &":
        """
        getValue(StringField self) -> std::string const &

        Parameters:
            self: FIX::StringField const *

        """
        return _quickfix.StringField_getValue(self)


    def __lt__(self, rhs: 'StringField') -> "bool":
        """
        __lt__(StringField self, StringField rhs) -> bool

        Parameters:
            rhs: FIX::StringField const &

        """
        return _quickfix.StringField___lt__(self, rhs)


    def __gt__(self, rhs: 'StringField') -> "bool":
        """
        __gt__(StringField self, StringField rhs) -> bool

        Parameters:
            rhs: FIX::StringField const &

        """
        return _quickfix.StringField___gt__(self, rhs)


    def __eq__(self, rhs: 'StringField') -> "bool":
        """
        __eq__(StringField self, StringField rhs) -> bool

        Parameters:
            rhs: FIX::StringField const &

        """
        return _quickfix.StringField___eq__(self, rhs)


    def __ne__(self, rhs: 'StringField') -> "bool":
        """
        __ne__(StringField self, StringField rhs) -> bool

        Parameters:
            rhs: FIX::StringField const &

        """
        return _quickfix.StringField___ne__(self, rhs)


    def __le__(self, rhs: 'StringField') -> "bool":
        """
        __le__(StringField self, StringField rhs) -> bool

        Parameters:
            rhs: FIX::StringField const &

        """
        return _quickfix.StringField___le__(self, rhs)


    def __ge__(self, rhs: 'StringField') -> "bool":
        """
        __ge__(StringField self, StringField rhs) -> bool

        Parameters:
            rhs: FIX::StringField const &

        """
        return _quickfix.StringField___ge__(self, rhs)

    __swig_destroy__ = _quickfix.delete_StringField
    __del__ = lambda self: None
StringField_swigregister = _quickfix.StringField_swigregister
StringField_swigregister(StringField)


def __gt__(*args) -> "std::string &":
    """
    __gt__(StringField lhs, char const * rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: char const *

    __gt__(char const * lhs, StringField rhs) -> bool

    Parameters:
        lhs: char const *
        rhs: FIX::StringField const &

    __gt__(StringField lhs, std::string const & rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: std::string const &

    __gt__(std::string const & lhs, StringField rhs) -> bool

    Parameters:
        lhs: std::string const &
        rhs: FIX::StringField const &

    """
    return _quickfix.__gt__(*args)

def __le__(*args) -> "std::string &":
    """
    __le__(StringField lhs, char const * rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: char const *

    __le__(char const * lhs, StringField rhs) -> bool

    Parameters:
        lhs: char const *
        rhs: FIX::StringField const &

    __le__(StringField lhs, std::string const & rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: std::string const &

    __le__(std::string const & lhs, StringField rhs) -> bool

    Parameters:
        lhs: std::string const &
        rhs: FIX::StringField const &

    """
    return _quickfix.__le__(*args)

def __ge__(*args) -> "std::string &":
    """
    __ge__(StringField lhs, char const * rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: char const *

    __ge__(char const * lhs, StringField rhs) -> bool

    Parameters:
        lhs: char const *
        rhs: FIX::StringField const &

    __ge__(StringField lhs, std::string const & rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: std::string const &

    __ge__(std::string const & lhs, StringField rhs) -> bool

    Parameters:
        lhs: std::string const &
        rhs: FIX::StringField const &

    """
    return _quickfix.__ge__(*args)
class CharField(FieldBase):
    """Proxy of C++ FIX::CharField class"""
    __swig_setmethods__ = {}
    for _s in [FieldBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CharField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CharField self, int field, char data) -> CharField

        Parameters:
            field: int
            data: char

        __init__(FIX::CharField self, int field) -> CharField

        Parameters:
            field: int

        """
        this = _quickfix.new_CharField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setValue(self, value: 'char') -> "void":
        """
        setValue(CharField self, char value)

        Parameters:
            value: char

        """
        return _quickfix.CharField_setValue(self, value)


    def getValue(self) -> "char":
        """
        getValue(CharField self) -> char

        Parameters:
            self: FIX::CharField const *

        """
        return _quickfix.CharField_getValue(self)

    __swig_destroy__ = _quickfix.delete_CharField
    __del__ = lambda self: None
CharField_swigregister = _quickfix.CharField_swigregister
CharField_swigregister(CharField)

class DoubleField(FieldBase):
    """Proxy of C++ FIX::DoubleField class"""
    __swig_setmethods__ = {}
    for _s in [FieldBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DoubleField self, int field, double data, int padding=0) -> DoubleField

        Parameters:
            field: int
            data: double
            padding: int

        __init__(FIX::DoubleField self, int field, double data) -> DoubleField

        Parameters:
            field: int
            data: double

        __init__(FIX::DoubleField self, int field) -> DoubleField

        Parameters:
            field: int

        """
        this = _quickfix.new_DoubleField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setValue(self, value: 'double', padding: 'int'=0) -> "void":
        """
        setValue(DoubleField self, double value, int padding=0)

        Parameters:
            value: double
            padding: int

        setValue(DoubleField self, double value)

        Parameters:
            value: double

        """
        return _quickfix.DoubleField_setValue(self, value, padding)


    def getValue(self) -> "double":
        """
        getValue(DoubleField self) -> double

        Parameters:
            self: FIX::DoubleField const *

        """
        return _quickfix.DoubleField_getValue(self)

    __swig_destroy__ = _quickfix.delete_DoubleField
    __del__ = lambda self: None
DoubleField_swigregister = _quickfix.DoubleField_swigregister
DoubleField_swigregister(DoubleField)

class IntField(FieldBase):
    """Proxy of C++ FIX::IntField class"""
    __swig_setmethods__ = {}
    for _s in [FieldBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IntField self, int field, int data) -> IntField

        Parameters:
            field: int
            data: int

        __init__(FIX::IntField self, int field) -> IntField

        Parameters:
            field: int

        """
        this = _quickfix.new_IntField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setValue(self, value: 'int') -> "void":
        """
        setValue(IntField self, int value)

        Parameters:
            value: int

        """
        return _quickfix.IntField_setValue(self, value)


    def getValue(self) -> "int":
        """
        getValue(IntField self) -> int

        Parameters:
            self: FIX::IntField const *

        """
        return _quickfix.IntField_getValue(self)

    __swig_destroy__ = _quickfix.delete_IntField
    __del__ = lambda self: None
IntField_swigregister = _quickfix.IntField_swigregister
IntField_swigregister(IntField)

class BoolField(FieldBase):
    """Proxy of C++ FIX::BoolField class"""
    __swig_setmethods__ = {}
    for _s in [FieldBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoolField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BoolField self, int field, bool data) -> BoolField

        Parameters:
            field: int
            data: bool

        __init__(FIX::BoolField self, int field) -> BoolField

        Parameters:
            field: int

        """
        this = _quickfix.new_BoolField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setValue(self, value: 'bool') -> "void":
        """
        setValue(BoolField self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.BoolField_setValue(self, value)


    def getValue(self) -> "bool":
        """
        getValue(BoolField self) -> bool

        Parameters:
            self: FIX::BoolField const *

        """
        return _quickfix.BoolField_getValue(self)

    def __nonzero__(self):
        return _quickfix.BoolField___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _quickfix.delete_BoolField
    __del__ = lambda self: None
BoolField_swigregister = _quickfix.BoolField_swigregister
BoolField_swigregister(BoolField)

class UtcTimeStampField(FieldBase):
    """Proxy of C++ FIX::UtcTimeStampField class"""
    __swig_setmethods__ = {}
    for _s in [FieldBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtcTimeStampField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UtcTimeStampField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UtcTimeStampField self, int field, UtcTimeStamp const & data, bool showMilliseconds=False) -> UtcTimeStampField

        Parameters:
            field: int
            data: UtcTimeStamp const &
            showMilliseconds: bool

        __init__(FIX::UtcTimeStampField self, int field, UtcTimeStamp const & data) -> UtcTimeStampField

        Parameters:
            field: int
            data: UtcTimeStamp const &

        __init__(FIX::UtcTimeStampField self, int field, bool showMilliseconds=False) -> UtcTimeStampField

        Parameters:
            field: int
            showMilliseconds: bool

        __init__(FIX::UtcTimeStampField self, int field) -> UtcTimeStampField

        Parameters:
            field: int

        """
        this = _quickfix.new_UtcTimeStampField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setValue(self, value: 'UtcTimeStamp const &') -> "void":
        """
        setValue(UtcTimeStampField self, UtcTimeStamp const & value)

        Parameters:
            value: UtcTimeStamp const &

        """
        return _quickfix.UtcTimeStampField_setValue(self, value)


    def getValue(self) -> "UtcTimeStamp":
        """
        getValue(UtcTimeStampField self) -> UtcTimeStamp

        Parameters:
            self: FIX::UtcTimeStampField const *

        """
        return _quickfix.UtcTimeStampField_getValue(self)


    def __lt__(self, rhs: 'UtcTimeStampField') -> "bool":
        """
        __lt__(UtcTimeStampField self, UtcTimeStampField rhs) -> bool

        Parameters:
            rhs: FIX::UtcTimeStampField const &

        """
        return _quickfix.UtcTimeStampField___lt__(self, rhs)


    def __eq__(self, rhs: 'UtcTimeStampField') -> "bool":
        """
        __eq__(UtcTimeStampField self, UtcTimeStampField rhs) -> bool

        Parameters:
            rhs: FIX::UtcTimeStampField const &

        """
        return _quickfix.UtcTimeStampField___eq__(self, rhs)


    def __ne__(self, rhs: 'UtcTimeStampField') -> "bool":
        """
        __ne__(UtcTimeStampField self, UtcTimeStampField rhs) -> bool

        Parameters:
            rhs: FIX::UtcTimeStampField const &

        """
        return _quickfix.UtcTimeStampField___ne__(self, rhs)

    __swig_destroy__ = _quickfix.delete_UtcTimeStampField
    __del__ = lambda self: None
UtcTimeStampField_swigregister = _quickfix.UtcTimeStampField_swigregister
UtcTimeStampField_swigregister(UtcTimeStampField)

class UtcDateField(FieldBase):
    """Proxy of C++ FIX::UtcDateField class"""
    __swig_setmethods__ = {}
    for _s in [FieldBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtcDateField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UtcDateField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UtcDateField self, int field, UtcDate const & data) -> UtcDateField

        Parameters:
            field: int
            data: UtcDate const &

        __init__(FIX::UtcDateField self, int field) -> UtcDateField

        Parameters:
            field: int

        """
        this = _quickfix.new_UtcDateField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setValue(self, value: 'UtcDate const &') -> "void":
        """
        setValue(UtcDateField self, UtcDate const & value)

        Parameters:
            value: UtcDate const &

        """
        return _quickfix.UtcDateField_setValue(self, value)


    def getValue(self) -> "UtcDate":
        """
        getValue(UtcDateField self) -> UtcDate

        Parameters:
            self: FIX::UtcDateField const *

        """
        return _quickfix.UtcDateField_getValue(self)


    def __lt__(self, rhs: 'UtcDateField') -> "bool":
        """
        __lt__(UtcDateField self, UtcDateField rhs) -> bool

        Parameters:
            rhs: FIX::UtcDateField const &

        """
        return _quickfix.UtcDateField___lt__(self, rhs)


    def __eq__(self, rhs: 'UtcDateField') -> "bool":
        """
        __eq__(UtcDateField self, UtcDateField rhs) -> bool

        Parameters:
            rhs: FIX::UtcDateField const &

        """
        return _quickfix.UtcDateField___eq__(self, rhs)


    def __ne__(self, rhs: 'UtcDateField') -> "bool":
        """
        __ne__(UtcDateField self, UtcDateField rhs) -> bool

        Parameters:
            rhs: FIX::UtcDateField const &

        """
        return _quickfix.UtcDateField___ne__(self, rhs)

    __swig_destroy__ = _quickfix.delete_UtcDateField
    __del__ = lambda self: None
UtcDateField_swigregister = _quickfix.UtcDateField_swigregister
UtcDateField_swigregister(UtcDateField)

class UtcTimeOnlyField(FieldBase):
    """Proxy of C++ FIX::UtcTimeOnlyField class"""
    __swig_setmethods__ = {}
    for _s in [FieldBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UtcTimeOnlyField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UtcTimeOnlyField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UtcTimeOnlyField self, int field, UtcTimeOnly const & data, bool showMilliseconds=False) -> UtcTimeOnlyField

        Parameters:
            field: int
            data: UtcTimeOnly const &
            showMilliseconds: bool

        __init__(FIX::UtcTimeOnlyField self, int field, UtcTimeOnly const & data) -> UtcTimeOnlyField

        Parameters:
            field: int
            data: UtcTimeOnly const &

        __init__(FIX::UtcTimeOnlyField self, int field, bool showMilliseconds=False) -> UtcTimeOnlyField

        Parameters:
            field: int
            showMilliseconds: bool

        __init__(FIX::UtcTimeOnlyField self, int field) -> UtcTimeOnlyField

        Parameters:
            field: int

        """
        this = _quickfix.new_UtcTimeOnlyField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setValue(self, value: 'UtcTimeOnly const &') -> "void":
        """
        setValue(UtcTimeOnlyField self, UtcTimeOnly const & value)

        Parameters:
            value: UtcTimeOnly const &

        """
        return _quickfix.UtcTimeOnlyField_setValue(self, value)


    def getValue(self) -> "UtcTimeOnly":
        """
        getValue(UtcTimeOnlyField self) -> UtcTimeOnly

        Parameters:
            self: FIX::UtcTimeOnlyField const *

        """
        return _quickfix.UtcTimeOnlyField_getValue(self)


    def __lt__(self, rhs: 'UtcTimeOnlyField') -> "bool":
        """
        __lt__(UtcTimeOnlyField self, UtcTimeOnlyField rhs) -> bool

        Parameters:
            rhs: FIX::UtcTimeOnlyField const &

        """
        return _quickfix.UtcTimeOnlyField___lt__(self, rhs)


    def __eq__(self, rhs: 'UtcTimeOnlyField') -> "bool":
        """
        __eq__(UtcTimeOnlyField self, UtcTimeOnlyField rhs) -> bool

        Parameters:
            rhs: FIX::UtcTimeOnlyField const &

        """
        return _quickfix.UtcTimeOnlyField___eq__(self, rhs)


    def __ne__(self, rhs: 'UtcTimeOnlyField') -> "bool":
        """
        __ne__(UtcTimeOnlyField self, UtcTimeOnlyField rhs) -> bool

        Parameters:
            rhs: FIX::UtcTimeOnlyField const &

        """
        return _quickfix.UtcTimeOnlyField___ne__(self, rhs)

    __swig_destroy__ = _quickfix.delete_UtcTimeOnlyField
    __del__ = lambda self: None
UtcTimeOnlyField_swigregister = _quickfix.UtcTimeOnlyField_swigregister
UtcTimeOnlyField_swigregister(UtcTimeOnlyField)

class CheckSumField(FieldBase):
    """Proxy of C++ FIX::CheckSumField class"""
    __swig_setmethods__ = {}
    for _s in [FieldBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckSumField, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheckSumField, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CheckSumField self, int field, int data) -> CheckSumField

        Parameters:
            field: int
            data: int

        __init__(FIX::CheckSumField self, int field) -> CheckSumField

        Parameters:
            field: int

        """
        this = _quickfix.new_CheckSumField(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setValue(self, value: 'int') -> "void":
        """
        setValue(CheckSumField self, int value)

        Parameters:
            value: int

        """
        return _quickfix.CheckSumField_setValue(self, value)


    def getValue(self) -> "int":
        """
        getValue(CheckSumField self) -> int

        Parameters:
            self: FIX::CheckSumField const *

        """
        return _quickfix.CheckSumField_getValue(self)

    __swig_destroy__ = _quickfix.delete_CheckSumField
    __del__ = lambda self: None
CheckSumField_swigregister = _quickfix.CheckSumField_swigregister
CheckSumField_swigregister(CheckSumField)

class FieldMap(_object):
    """Proxy of C++ FIX::FieldMap class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldMap, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FieldMap self, message_order const & order) -> FieldMap

        Parameters:
            order: message_order const &

        __init__(FIX::FieldMap self) -> FieldMap
        __init__(FIX::FieldMap self, int const [] order) -> FieldMap

        Parameters:
            order: int const []

        __init__(FIX::FieldMap self, FieldMap copy) -> FieldMap

        Parameters:
            copy: FIX::FieldMap const &

        """
        this = _quickfix.new_FieldMap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FieldMap
    __del__ = lambda self: None

    def setField(self, *args) -> "void":
        """
        setField(FieldMap self, FieldBase field, bool overwrite=True)

        Parameters:
            field: FIX::FieldBase const &
            overwrite: bool

        setField(FieldMap self, FieldBase field)

        Parameters:
            field: FIX::FieldBase const &

        setField(FieldMap self, int tag, std::string const & value)

        Parameters:
            tag: int
            value: std::string const &

        """
        return _quickfix.FieldMap_setField(self, *args)


    def getFieldIfSet(self, field: 'FieldBase') -> "bool":
        """
        getFieldIfSet(FieldMap self, FieldBase field) -> bool

        Parameters:
            field: FIX::FieldBase &

        """
        return _quickfix.FieldMap_getFieldIfSet(self, field)


    def getField(self, *args) -> "std::string const &":
        """
        getField(FieldMap self, FieldBase field) -> FieldBase

        Parameters:
            field: FIX::FieldBase &

        getField(FieldMap self, int tag) -> std::string const &

        Parameters:
            tag: int

        """
        return _quickfix.FieldMap_getField(self, *args)


    def getFieldRef(self, tag: 'int') -> "FIX::FieldBase const &":
        """
        getFieldRef(FieldMap self, int tag) -> FieldBase

        Parameters:
            tag: int

        """
        return _quickfix.FieldMap_getFieldRef(self, tag)


    def getFieldPtr(self, tag: 'int') -> "FIX::FieldBase const *const":
        """
        getFieldPtr(FieldMap self, int tag) -> FieldBase

        Parameters:
            tag: int

        """
        return _quickfix.FieldMap_getFieldPtr(self, tag)


    def isSetField(self, *args) -> "bool":
        """
        isSetField(FieldMap self, FieldBase field) -> bool

        Parameters:
            field: FIX::FieldBase const &

        isSetField(FieldMap self, int tag) -> bool

        Parameters:
            tag: int

        """
        return _quickfix.FieldMap_isSetField(self, *args)


    def removeField(self, tag: 'int') -> "void":
        """
        removeField(FieldMap self, int tag)

        Parameters:
            tag: int

        """
        return _quickfix.FieldMap_removeField(self, tag)


    def addGroup(self, tag: 'int', group: 'FieldMap', setCount: 'bool'=True) -> "void":
        """
        addGroup(FieldMap self, int tag, FieldMap group, bool setCount=True)

        Parameters:
            tag: int
            group: FIX::FieldMap const &
            setCount: bool

        addGroup(FieldMap self, int tag, FieldMap group)

        Parameters:
            tag: int
            group: FIX::FieldMap const &

        """
        return _quickfix.FieldMap_addGroup(self, tag, group, setCount)


    def addGroupPtr(self, tag: 'int', group: 'FieldMap', setCount: 'bool'=True) -> "void":
        """
        addGroupPtr(FieldMap self, int tag, FieldMap group, bool setCount=True)

        Parameters:
            tag: int
            group: FIX::FieldMap *
            setCount: bool

        addGroupPtr(FieldMap self, int tag, FieldMap group)

        Parameters:
            tag: int
            group: FIX::FieldMap *

        """
        return _quickfix.FieldMap_addGroupPtr(self, tag, group, setCount)


    def replaceGroup(self, num: 'int', tag: 'int', group: 'FieldMap') -> "void":
        """
        replaceGroup(FieldMap self, int num, int tag, FieldMap group)

        Parameters:
            num: int
            tag: int
            group: FIX::FieldMap const &

        """
        return _quickfix.FieldMap_replaceGroup(self, num, tag, group)


    def getGroup(self, num: 'int', tag: 'int', group: 'FieldMap') -> "FIX::FieldMap &":
        """
        getGroup(FieldMap self, int num, int tag, FieldMap group) -> FieldMap

        Parameters:
            num: int
            tag: int
            group: FIX::FieldMap &

        """
        return _quickfix.FieldMap_getGroup(self, num, tag, group)


    def getGroupRef(self, num: 'int', tag: 'int') -> "FIX::FieldMap &":
        """
        getGroupRef(FieldMap self, int num, int tag) -> FieldMap

        Parameters:
            num: int
            tag: int

        """
        return _quickfix.FieldMap_getGroupRef(self, num, tag)


    def getGroupPtr(self, num: 'int', tag: 'int') -> "FIX::FieldMap *":
        """
        getGroupPtr(FieldMap self, int num, int tag) -> FieldMap

        Parameters:
            num: int
            tag: int

        """
        return _quickfix.FieldMap_getGroupPtr(self, num, tag)


    def removeGroup(self, *args) -> "void":
        """
        removeGroup(FieldMap self, int num, int tag)

        Parameters:
            num: int
            tag: int

        removeGroup(FieldMap self, int tag)

        Parameters:
            tag: int

        """
        return _quickfix.FieldMap_removeGroup(self, *args)


    def hasGroup(self, *args) -> "bool":
        """
        hasGroup(FieldMap self, int tag) -> bool

        Parameters:
            tag: int

        hasGroup(FieldMap self, int num, int tag) -> bool

        Parameters:
            num: int
            tag: int

        """
        return _quickfix.FieldMap_hasGroup(self, *args)


    def groupCount(self, tag: 'int') -> "size_t":
        """
        groupCount(FieldMap self, int tag) -> size_t

        Parameters:
            tag: int

        """
        return _quickfix.FieldMap_groupCount(self, tag)


    def clear(self) -> "void":
        """
        clear(FieldMap self)

        Parameters:
            self: FIX::FieldMap *

        """
        return _quickfix.FieldMap_clear(self)


    def isEmpty(self) -> "bool":
        """
        isEmpty(FieldMap self) -> bool

        Parameters:
            self: FIX::FieldMap *

        """
        return _quickfix.FieldMap_isEmpty(self)


    def totalFields(self) -> "size_t":
        """
        totalFields(FieldMap self) -> size_t

        Parameters:
            self: FIX::FieldMap const *

        """
        return _quickfix.FieldMap_totalFields(self)


    def calculateString(self, arg2: 'std::string &') -> "std::string &":
        """
        calculateString(FieldMap self, std::string & arg2) -> std::string &

        Parameters:
            arg2: std::string &

        """
        return _quickfix.FieldMap_calculateString(self, arg2)


    def calculateLength(self, *args) -> "int":
        """
        calculateLength(FieldMap self, int beginStringField, int bodyLengthField, int checkSumField) -> int

        Parameters:
            beginStringField: int
            bodyLengthField: int
            checkSumField: int

        calculateLength(FieldMap self, int beginStringField, int bodyLengthField) -> int

        Parameters:
            beginStringField: int
            bodyLengthField: int

        calculateLength(FieldMap self, int beginStringField) -> int

        Parameters:
            beginStringField: int

        calculateLength(FieldMap self) -> int

        Parameters:
            self: FIX::FieldMap const *

        """
        return _quickfix.FieldMap_calculateLength(self, *args)


    def calculateTotal(self, *args) -> "int":
        """
        calculateTotal(FieldMap self, int checkSumField) -> int

        Parameters:
            checkSumField: int

        calculateTotal(FieldMap self) -> int

        Parameters:
            self: FIX::FieldMap const *

        """
        return _quickfix.FieldMap_calculateTotal(self, *args)


    def begin(self) -> "FIX::FieldMap::iterator":
        """
        begin(FieldMap self) -> FIX::FieldMap::iterator

        Parameters:
            self: FIX::FieldMap const *

        """
        return _quickfix.FieldMap_begin(self)


    def end(self) -> "FIX::FieldMap::iterator":
        """
        end(FieldMap self) -> FIX::FieldMap::iterator

        Parameters:
            self: FIX::FieldMap const *

        """
        return _quickfix.FieldMap_end(self)


    def g_begin(self) -> "FIX::FieldMap::g_iterator":
        """
        g_begin(FieldMap self) -> FIX::FieldMap::g_iterator

        Parameters:
            self: FIX::FieldMap const *

        """
        return _quickfix.FieldMap_g_begin(self)


    def g_end(self) -> "FIX::FieldMap::g_iterator":
        """
        g_end(FieldMap self) -> FIX::FieldMap::g_iterator

        Parameters:
            self: FIX::FieldMap const *

        """
        return _quickfix.FieldMap_g_end(self)

FieldMap_swigregister = _quickfix.FieldMap_swigregister
FieldMap_swigregister(FieldMap)

class Header(FieldMap):
    """Proxy of C++ FIX::Header class"""
    __swig_setmethods__ = {}
    for _s in [FieldMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Header, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Header, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FIX::Header self) -> Header"""
        this = _quickfix.new_Header()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Header
    __del__ = lambda self: None
Header_swigregister = _quickfix.Header_swigregister
Header_swigregister(Header)

class Trailer(FieldMap):
    """Proxy of C++ FIX::Trailer class"""
    __swig_setmethods__ = {}
    for _s in [FieldMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Trailer, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Trailer, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FIX::Trailer self) -> Trailer"""
        this = _quickfix.new_Trailer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Trailer
    __del__ = lambda self: None
Trailer_swigregister = _quickfix.Trailer_swigregister
Trailer_swigregister(Trailer)

class Message(FieldMap):
    """Proxy of C++ FIX::Message class"""
    __swig_setmethods__ = {}
    for _s in [FieldMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Message self) -> Message
        __init__(FIX::Message self, std::string const & string, bool validate=True) -> Message

        Parameters:
            string: std::string const &
            validate: bool

        __init__(FIX::Message self, std::string const & string) -> Message

        Parameters:
            string: std::string const &

        __init__(FIX::Message self, std::string const & string, DataDictionary dataDictionary, bool validate=True) -> Message

        Parameters:
            string: std::string const &
            dataDictionary: FIX::DataDictionary const &
            validate: bool

        __init__(FIX::Message self, std::string const & string, DataDictionary dataDictionary) -> Message

        Parameters:
            string: std::string const &
            dataDictionary: FIX::DataDictionary const &

        __init__(FIX::Message self, std::string const & string, DataDictionary sessionDataDictionary, DataDictionary applicationDataDictionary, bool validate=True) -> Message

        Parameters:
            string: std::string const &
            sessionDataDictionary: FIX::DataDictionary const &
            applicationDataDictionary: FIX::DataDictionary const &
            validate: bool

        __init__(FIX::Message self, std::string const & string, DataDictionary sessionDataDictionary, DataDictionary applicationDataDictionary) -> Message

        Parameters:
            string: std::string const &
            sessionDataDictionary: FIX::DataDictionary const &
            applicationDataDictionary: FIX::DataDictionary const &

        __init__(FIX::Message self, Message copy) -> Message

        Parameters:
            copy: FIX::Message const &

        """
        this = _quickfix.new_Message(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def InitializeXML(string: 'std::string const &') -> "std::string &":
        """
        InitializeXML(std::string const & string) -> bool

        Parameters:
            string: std::string const &

        """
        return _quickfix.Message_InitializeXML(string)

    if _newclass:
        InitializeXML = staticmethod(InitializeXML)
    __swig_getmethods__["InitializeXML"] = lambda x: InitializeXML

    def addGroup(self, group: 'Group') -> "void":
        """
        addGroup(Message self, Group group)

        Parameters:
            group: FIX::Group const &

        """
        return _quickfix.Message_addGroup(self, group)


    def replaceGroup(self, num: 'unsigned int', group: 'Group') -> "void":
        """
        replaceGroup(Message self, unsigned int num, Group group)

        Parameters:
            num: unsigned int
            group: FIX::Group const &

        """
        return _quickfix.Message_replaceGroup(self, num, group)


    def getGroup(self, num: 'unsigned int', group: 'Group') -> "Group &":
        """
        getGroup(Message self, unsigned int num, Group group) -> Group &

        Parameters:
            num: unsigned int
            group: FIX::Group &

        """
        return _quickfix.Message_getGroup(self, num, group)


    def removeGroup(self, *args) -> "void":
        """
        removeGroup(Message self, unsigned int num, Group group)

        Parameters:
            num: unsigned int
            group: FIX::Group const &

        removeGroup(Message self, Group group)

        Parameters:
            group: FIX::Group const &

        """
        return _quickfix.Message_removeGroup(self, *args)


    def hasGroup(self, *args) -> "bool":
        """
        hasGroup(Message self, Group group) -> bool

        Parameters:
            group: FIX::Group const &

        hasGroup(Message self, unsigned int num, Group group) -> bool

        Parameters:
            num: unsigned int
            group: FIX::Group const &

        """
        return _quickfix.Message_hasGroup(self, *args)


    def toString(self, *args) -> "std::string &":
        """
        toString(Message self, int beginStringField, int bodyLengthField, int checkSumField) -> std::string

        Parameters:
            beginStringField: int
            bodyLengthField: int
            checkSumField: int

        toString(Message self, int beginStringField, int bodyLengthField) -> std::string

        Parameters:
            beginStringField: int
            bodyLengthField: int

        toString(Message self, int beginStringField) -> std::string

        Parameters:
            beginStringField: int

        toString(Message self) -> std::string
        toString(Message self, std::string & arg2, int beginStringField, int bodyLengthField, int checkSumField) -> std::string

        Parameters:
            arg2: std::string &
            beginStringField: int
            bodyLengthField: int
            checkSumField: int

        toString(Message self, std::string & arg2, int beginStringField, int bodyLengthField) -> std::string

        Parameters:
            arg2: std::string &
            beginStringField: int
            bodyLengthField: int

        toString(Message self, std::string & arg2, int beginStringField) -> std::string

        Parameters:
            arg2: std::string &
            beginStringField: int

        toString(Message self, std::string & arg2) -> std::string &

        Parameters:
            arg2: std::string &

        """
        return _quickfix.Message_toString(self, *args)


    def toXML(self, *args) -> "std::string &":
        """
        toXML(Message self) -> std::string
        toXML(Message self, std::string & arg2) -> std::string &

        Parameters:
            arg2: std::string &

        """
        return _quickfix.Message_toXML(self, *args)


    def reverseRoute(self, arg2: 'Header') -> "void":
        """
        reverseRoute(Message self, Header arg2)

        Parameters:
            arg2: FIX::Header const &

        """
        return _quickfix.Message_reverseRoute(self, arg2)


    def setString(self, *args) -> "void":
        """
        setString(Message self, std::string const & string)

        Parameters:
            string: std::string const &

        setString(Message self, std::string const & string, bool validate)

        Parameters:
            string: std::string const &
            validate: bool

        setString(Message self, std::string const & string, bool validate, DataDictionary pDataDictionary)

        Parameters:
            string: std::string const &
            validate: bool
            pDataDictionary: FIX::DataDictionary const *

        setString(Message self, std::string const & string, bool validate, DataDictionary pSessionDataDictionary, DataDictionary pApplicationDataDictionary)

        Parameters:
            string: std::string const &
            validate: bool
            pSessionDataDictionary: FIX::DataDictionary const *
            pApplicationDataDictionary: FIX::DataDictionary const *

        """
        return _quickfix.Message_setString(self, *args)


    def setGroup(self, msg: 'std::string const &', field: 'FieldBase', string: 'std::string const &', pos: 'std::string::size_type &', map: 'FieldMap', dataDictionary: 'DataDictionary const &') -> "void":
        """
        setGroup(Message self, std::string const & msg, FieldBase field, std::string const & string, std::string::size_type & pos, FieldMap map, DataDictionary const & dataDictionary)

        Parameters:
            msg: std::string const &
            field: FIX::FieldBase const &
            string: std::string const &
            pos: std::string::size_type &
            map: FIX::FieldMap &
            dataDictionary: DataDictionary const &

        """
        return _quickfix.Message_setGroup(self, msg, field, string, pos, map, dataDictionary)


    def setStringHeader(self, string: 'std::string const &') -> "bool":
        """
        setStringHeader(Message self, std::string const & string) -> bool

        Parameters:
            string: std::string const &

        """
        return _quickfix.Message_setStringHeader(self, string)


    def getHeader(self, *args) -> "FIX::Header &":
        """
        getHeader(Message self) -> Header
        getHeader(Message self) -> Header

        Parameters:
            self: FIX::Message *

        """
        return _quickfix.Message_getHeader(self, *args)


    def getTrailer(self, *args) -> "FIX::Trailer &":
        """
        getTrailer(Message self) -> Trailer
        getTrailer(Message self) -> Trailer

        Parameters:
            self: FIX::Message *

        """
        return _quickfix.Message_getTrailer(self, *args)


    def hasValidStructure(self, tag: 'int &') -> "bool":
        """
        hasValidStructure(Message self, int & tag) -> bool

        Parameters:
            tag: int &

        """
        return _quickfix.Message_hasValidStructure(self, tag)


    def bodyLength(self, *args) -> "int":
        """
        bodyLength(Message self, int beginStringField, int bodyLengthField, int checkSumField) -> int

        Parameters:
            beginStringField: int
            bodyLengthField: int
            checkSumField: int

        bodyLength(Message self, int beginStringField, int bodyLengthField) -> int

        Parameters:
            beginStringField: int
            bodyLengthField: int

        bodyLength(Message self, int beginStringField) -> int

        Parameters:
            beginStringField: int

        bodyLength(Message self) -> int

        Parameters:
            self: FIX::Message const *

        """
        return _quickfix.Message_bodyLength(self, *args)


    def checkSum(self, *args) -> "int":
        """
        checkSum(Message self, int checkSumField) -> int

        Parameters:
            checkSumField: int

        checkSum(Message self) -> int

        Parameters:
            self: FIX::Message const *

        """
        return _quickfix.Message_checkSum(self, *args)


    def isAdmin(self) -> "bool":
        """
        isAdmin(Message self) -> bool

        Parameters:
            self: FIX::Message const *

        """
        return _quickfix.Message_isAdmin(self)


    def isApp(self) -> "bool":
        """
        isApp(Message self) -> bool

        Parameters:
            self: FIX::Message const *

        """
        return _quickfix.Message_isApp(self)


    def isEmpty(self) -> "bool":
        """
        isEmpty(Message self) -> bool

        Parameters:
            self: FIX::Message *

        """
        return _quickfix.Message_isEmpty(self)


    def clear(self) -> "void":
        """
        clear(Message self)

        Parameters:
            self: FIX::Message *

        """
        return _quickfix.Message_clear(self)


    def isAdminMsgType(msgType: 'MsgType const &') -> "bool":
        """
        isAdminMsgType(MsgType const & msgType) -> bool

        Parameters:
            msgType: MsgType const &

        """
        return _quickfix.Message_isAdminMsgType(msgType)

    if _newclass:
        isAdminMsgType = staticmethod(isAdminMsgType)
    __swig_getmethods__["isAdminMsgType"] = lambda x: isAdminMsgType

    def toApplVerID(value: 'BeginString const &') -> "ApplVerID":
        """
        toApplVerID(BeginString const & value) -> ApplVerID

        Parameters:
            value: BeginString const &

        """
        return _quickfix.Message_toApplVerID(value)

    if _newclass:
        toApplVerID = staticmethod(toApplVerID)
    __swig_getmethods__["toApplVerID"] = lambda x: toApplVerID

    def toBeginString(applVerID: 'ApplVerID const &') -> "BeginString":
        """
        toBeginString(ApplVerID const & applVerID) -> BeginString

        Parameters:
            applVerID: ApplVerID const &

        """
        return _quickfix.Message_toBeginString(applVerID)

    if _newclass:
        toBeginString = staticmethod(toBeginString)
    __swig_getmethods__["toBeginString"] = lambda x: toBeginString

    def isHeaderField(*args) -> "bool":
        """
        isHeaderField(int field) -> bool

        Parameters:
            field: int

        isHeaderField(FieldBase field, DataDictionary const * pD=None) -> bool

        Parameters:
            field: FIX::FieldBase const &
            pD: DataDictionary const *

        isHeaderField(FieldBase field) -> bool

        Parameters:
            field: FIX::FieldBase const &

        """
        return _quickfix.Message_isHeaderField(*args)

    if _newclass:
        isHeaderField = staticmethod(isHeaderField)
    __swig_getmethods__["isHeaderField"] = lambda x: isHeaderField

    def isTrailerField(*args) -> "bool":
        """
        isTrailerField(int field) -> bool

        Parameters:
            field: int

        isTrailerField(FieldBase field, DataDictionary const * pD=None) -> bool

        Parameters:
            field: FIX::FieldBase const &
            pD: DataDictionary const *

        isTrailerField(FieldBase field) -> bool

        Parameters:
            field: FIX::FieldBase const &

        """
        return _quickfix.Message_isTrailerField(*args)

    if _newclass:
        isTrailerField = staticmethod(isTrailerField)
    __swig_getmethods__["isTrailerField"] = lambda x: isTrailerField

    def getSessionID(self, *args) -> "SessionID":
        """
        getSessionID(Message self, std::string const & qualifier) -> SessionID

        Parameters:
            qualifier: std::string const &

        getSessionID(Message self) -> SessionID

        Parameters:
            self: FIX::Message const *

        """
        return _quickfix.Message_getSessionID(self, *args)


    def setSessionID(self, sessionID: 'SessionID const &') -> "void":
        """
        setSessionID(Message self, SessionID const & sessionID)

        Parameters:
            sessionID: SessionID const &

        """
        return _quickfix.Message_setSessionID(self, sessionID)


    def __str__(self) -> "std::string":
        """
        __str__(Message self) -> std::string

        Parameters:
            self: FIX::Message *

        """
        return _quickfix.Message___str__(self)

    __swig_destroy__ = _quickfix.delete_Message
    __del__ = lambda self: None
Message_swigregister = _quickfix.Message_swigregister
Message_swigregister(Message)

def Message_InitializeXML(string: 'std::string const &') -> "std::string &":
    """
    Message_InitializeXML(std::string const & string) -> bool

    Parameters:
        string: std::string const &

    """
    return _quickfix.Message_InitializeXML(string)

def Message_isAdminMsgType(msgType: 'MsgType const &') -> "bool":
    """
    Message_isAdminMsgType(MsgType const & msgType) -> bool

    Parameters:
        msgType: MsgType const &

    """
    return _quickfix.Message_isAdminMsgType(msgType)

def Message_toApplVerID(value: 'BeginString const &') -> "ApplVerID":
    """
    Message_toApplVerID(BeginString const & value) -> ApplVerID

    Parameters:
        value: BeginString const &

    """
    return _quickfix.Message_toApplVerID(value)

def Message_toBeginString(applVerID: 'ApplVerID const &') -> "BeginString":
    """
    Message_toBeginString(ApplVerID const & applVerID) -> BeginString

    Parameters:
        applVerID: ApplVerID const &

    """
    return _quickfix.Message_toBeginString(applVerID)

def Message_isHeaderField(*args) -> "bool":
    """
    isHeaderField(int field) -> bool

    Parameters:
        field: int

    isHeaderField(FieldBase field, DataDictionary const * pD=None) -> bool

    Parameters:
        field: FIX::FieldBase const &
        pD: DataDictionary const *

    Message_isHeaderField(FieldBase field) -> bool

    Parameters:
        field: FIX::FieldBase const &

    """
    return _quickfix.Message_isHeaderField(*args)

def Message_isTrailerField(*args) -> "bool":
    """
    isTrailerField(int field) -> bool

    Parameters:
        field: int

    isTrailerField(FieldBase field, DataDictionary const * pD=None) -> bool

    Parameters:
        field: FIX::FieldBase const &
        pD: DataDictionary const *

    Message_isTrailerField(FieldBase field) -> bool

    Parameters:
        field: FIX::FieldBase const &

    """
    return _quickfix.Message_isTrailerField(*args)


def identifyType(message: 'std::string const &') -> "std::string &":
    """
    identifyType(std::string const & message) -> MsgType

    Parameters:
        message: std::string const &

    """
    return _quickfix.identifyType(message)
class Group(FieldMap):
    """Proxy of C++ FIX::Group class"""
    __swig_setmethods__ = {}
    for _s in [FieldMap]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldMap]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Group self, int field, int delim) -> Group

        Parameters:
            field: int
            delim: int

        __init__(FIX::Group self, int field, int delim, int const [] order) -> Group

        Parameters:
            field: int
            delim: int
            order: int const []

        __init__(FIX::Group self, int field, int delim, message_order const & order) -> Group

        Parameters:
            field: int
            delim: int
            order: message_order const &

        __init__(FIX::Group self, Group copy) -> Group

        Parameters:
            copy: FIX::Group const &

        """
        this = _quickfix.new_Group(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def field(self) -> "int":
        """
        field(Group self) -> int

        Parameters:
            self: FIX::Group const *

        """
        return _quickfix.Group_field(self)


    def delim(self) -> "int":
        """
        delim(Group self) -> int

        Parameters:
            self: FIX::Group const *

        """
        return _quickfix.Group_delim(self)


    def addGroup(self, group: 'Group') -> "void":
        """
        addGroup(Group self, Group group)

        Parameters:
            group: FIX::Group const &

        """
        return _quickfix.Group_addGroup(self, group)


    def replaceGroup(self, num: 'unsigned int', group: 'Group') -> "void":
        """
        replaceGroup(Group self, unsigned int num, Group group)

        Parameters:
            num: unsigned int
            group: FIX::Group const &

        """
        return _quickfix.Group_replaceGroup(self, num, group)


    def getGroup(self, num: 'unsigned int', group: 'Group') -> "FIX::Group &":
        """
        getGroup(Group self, unsigned int num, Group group) -> Group

        Parameters:
            num: unsigned int
            group: FIX::Group &

        """
        return _quickfix.Group_getGroup(self, num, group)


    def removeGroup(self, *args) -> "void":
        """
        removeGroup(Group self, unsigned int num, Group group)

        Parameters:
            num: unsigned int
            group: FIX::Group const &

        removeGroup(Group self, Group group)

        Parameters:
            group: FIX::Group const &

        """
        return _quickfix.Group_removeGroup(self, *args)


    def hasGroup(self, *args) -> "bool":
        """
        hasGroup(Group self, Group group) -> bool

        Parameters:
            group: FIX::Group const &

        hasGroup(Group self, unsigned int num, Group group) -> bool

        Parameters:
            num: unsigned int
            group: FIX::Group const &

        """
        return _quickfix.Group_hasGroup(self, *args)

    __swig_destroy__ = _quickfix.delete_Group
    __del__ = lambda self: None
Group_swigregister = _quickfix.Group_swigregister
Group_swigregister(Group)

class BeginSeqNo(IntField):
    """Proxy of C++ FIX::BeginSeqNo class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BeginSeqNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BeginSeqNo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BeginSeqNo self) -> BeginSeqNo
        __init__(FIX::BeginSeqNo self, FIX::SEQNUM const & value) -> BeginSeqNo

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_BeginSeqNo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BeginSeqNo
    __del__ = lambda self: None
BeginSeqNo_swigregister = _quickfix.BeginSeqNo_swigregister
BeginSeqNo_swigregister(BeginSeqNo)

class BeginString(StringField):
    """Proxy of C++ FIX::BeginString class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BeginString, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BeginString, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BeginString self) -> BeginString
        __init__(FIX::BeginString self, FIX::STRING const & value) -> BeginString

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_BeginString(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BeginString
    __del__ = lambda self: None
BeginString_swigregister = _quickfix.BeginString_swigregister
BeginString_swigregister(BeginString)

class BodyLength(IntField):
    """Proxy of C++ FIX::BodyLength class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BodyLength, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BodyLength, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BodyLength self) -> BodyLength
        __init__(FIX::BodyLength self, FIX::LENGTH const & value) -> BodyLength

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_BodyLength(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BodyLength
    __del__ = lambda self: None
BodyLength_swigregister = _quickfix.BodyLength_swigregister
BodyLength_swigregister(BodyLength)

class CheckSum(CheckSumField):
    """Proxy of C++ FIX::CheckSum class"""
    __swig_setmethods__ = {}
    for _s in [CheckSumField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheckSum, name, value)
    __swig_getmethods__ = {}
    for _s in [CheckSumField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheckSum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CheckSum self) -> CheckSum
        __init__(FIX::CheckSum self, FIX::INT const & value) -> CheckSum

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CheckSum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CheckSum
    __del__ = lambda self: None
CheckSum_swigregister = _quickfix.CheckSum_swigregister
CheckSum_swigregister(CheckSum)

class EndSeqNo(IntField):
    """Proxy of C++ FIX::EndSeqNo class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndSeqNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EndSeqNo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EndSeqNo self) -> EndSeqNo
        __init__(FIX::EndSeqNo self, FIX::SEQNUM const & value) -> EndSeqNo

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_EndSeqNo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EndSeqNo
    __del__ = lambda self: None
EndSeqNo_swigregister = _quickfix.EndSeqNo_swigregister
EndSeqNo_swigregister(EndSeqNo)

class MsgSeqNum(IntField):
    """Proxy of C++ FIX::MsgSeqNum class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MsgSeqNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MsgSeqNum self) -> MsgSeqNum
        __init__(FIX::MsgSeqNum self, FIX::SEQNUM const & value) -> MsgSeqNum

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_MsgSeqNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MsgSeqNum
    __del__ = lambda self: None
MsgSeqNum_swigregister = _quickfix.MsgSeqNum_swigregister
MsgSeqNum_swigregister(MsgSeqNum)

class MsgType(StringField):
    """Proxy of C++ FIX::MsgType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MsgType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MsgType self) -> MsgType
        __init__(FIX::MsgType self, FIX::STRING const & value) -> MsgType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MsgType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MsgType
    __del__ = lambda self: None
MsgType_swigregister = _quickfix.MsgType_swigregister
MsgType_swigregister(MsgType)

class NewSeqNo(IntField):
    """Proxy of C++ FIX::NewSeqNo class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewSeqNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewSeqNo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NewSeqNo self) -> NewSeqNo
        __init__(FIX::NewSeqNo self, FIX::SEQNUM const & value) -> NewSeqNo

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_NewSeqNo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NewSeqNo
    __del__ = lambda self: None
NewSeqNo_swigregister = _quickfix.NewSeqNo_swigregister
NewSeqNo_swigregister(NewSeqNo)

class PossDupFlag(BoolField):
    """Proxy of C++ FIX::PossDupFlag class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PossDupFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PossDupFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PossDupFlag self) -> PossDupFlag
        __init__(FIX::PossDupFlag self, FIX::BOOLEAN const & value) -> PossDupFlag

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_PossDupFlag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PossDupFlag
    __del__ = lambda self: None
PossDupFlag_swigregister = _quickfix.PossDupFlag_swigregister
PossDupFlag_swigregister(PossDupFlag)

class RefSeqNum(IntField):
    """Proxy of C++ FIX::RefSeqNum class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefSeqNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefSeqNum self) -> RefSeqNum
        __init__(FIX::RefSeqNum self, FIX::SEQNUM const & value) -> RefSeqNum

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_RefSeqNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefSeqNum
    __del__ = lambda self: None
RefSeqNum_swigregister = _quickfix.RefSeqNum_swigregister
RefSeqNum_swigregister(RefSeqNum)

class SenderCompID(StringField):
    """Proxy of C++ FIX::SenderCompID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SenderCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SenderCompID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SenderCompID self) -> SenderCompID
        __init__(FIX::SenderCompID self, FIX::STRING const & value) -> SenderCompID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SenderCompID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SenderCompID
    __del__ = lambda self: None
SenderCompID_swigregister = _quickfix.SenderCompID_swigregister
SenderCompID_swigregister(SenderCompID)

class SenderSubID(StringField):
    """Proxy of C++ FIX::SenderSubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SenderSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SenderSubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SenderSubID self) -> SenderSubID
        __init__(FIX::SenderSubID self, FIX::STRING const & value) -> SenderSubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SenderSubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SenderSubID
    __del__ = lambda self: None
SenderSubID_swigregister = _quickfix.SenderSubID_swigregister
SenderSubID_swigregister(SenderSubID)

class SendingTime(UtcTimeStampField):
    """Proxy of C++ FIX::SendingTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SendingTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SendingTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SendingTime self) -> SendingTime
        __init__(FIX::SendingTime self, bool showMilliseconds) -> SendingTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::SendingTime self, FIX::UTCTIMESTAMP const & value) -> SendingTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::SendingTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> SendingTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_SendingTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SendingTime
    __del__ = lambda self: None
SendingTime_swigregister = _quickfix.SendingTime_swigregister
SendingTime_swigregister(SendingTime)

class TargetCompID(StringField):
    """Proxy of C++ FIX::TargetCompID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TargetCompID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TargetCompID self) -> TargetCompID
        __init__(FIX::TargetCompID self, FIX::STRING const & value) -> TargetCompID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TargetCompID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TargetCompID
    __del__ = lambda self: None
TargetCompID_swigregister = _quickfix.TargetCompID_swigregister
TargetCompID_swigregister(TargetCompID)

class TargetSubID(StringField):
    """Proxy of C++ FIX::TargetSubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TargetSubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TargetSubID self) -> TargetSubID
        __init__(FIX::TargetSubID self, FIX::STRING const & value) -> TargetSubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TargetSubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TargetSubID
    __del__ = lambda self: None
TargetSubID_swigregister = _quickfix.TargetSubID_swigregister
TargetSubID_swigregister(TargetSubID)

class Text(StringField):
    """Proxy of C++ FIX::Text class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Text self) -> Text
        __init__(FIX::Text self, FIX::STRING const & value) -> Text

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Text(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Text
    __del__ = lambda self: None
Text_swigregister = _quickfix.Text_swigregister
Text_swigregister(Text)

class Signature(StringField):
    """Proxy of C++ FIX::Signature class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Signature, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Signature, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Signature self) -> Signature
        __init__(FIX::Signature self, FIX::DATA const & value) -> Signature

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_Signature(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Signature
    __del__ = lambda self: None
Signature_swigregister = _quickfix.Signature_swigregister
Signature_swigregister(Signature)

class SecureDataLen(IntField):
    """Proxy of C++ FIX::SecureDataLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecureDataLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecureDataLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecureDataLen self) -> SecureDataLen
        __init__(FIX::SecureDataLen self, FIX::LENGTH const & value) -> SecureDataLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_SecureDataLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecureDataLen
    __del__ = lambda self: None
SecureDataLen_swigregister = _quickfix.SecureDataLen_swigregister
SecureDataLen_swigregister(SecureDataLen)

class SecureData(StringField):
    """Proxy of C++ FIX::SecureData class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecureData, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecureData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecureData self) -> SecureData
        __init__(FIX::SecureData self, FIX::DATA const & value) -> SecureData

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_SecureData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecureData
    __del__ = lambda self: None
SecureData_swigregister = _quickfix.SecureData_swigregister
SecureData_swigregister(SecureData)

class SignatureLength(IntField):
    """Proxy of C++ FIX::SignatureLength class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SignatureLength, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SignatureLength, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SignatureLength self) -> SignatureLength
        __init__(FIX::SignatureLength self, FIX::LENGTH const & value) -> SignatureLength

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_SignatureLength(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SignatureLength
    __del__ = lambda self: None
SignatureLength_swigregister = _quickfix.SignatureLength_swigregister
SignatureLength_swigregister(SignatureLength)

class RawDataLength(IntField):
    """Proxy of C++ FIX::RawDataLength class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawDataLength, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawDataLength, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RawDataLength self) -> RawDataLength
        __init__(FIX::RawDataLength self, FIX::LENGTH const & value) -> RawDataLength

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_RawDataLength(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RawDataLength
    __del__ = lambda self: None
RawDataLength_swigregister = _quickfix.RawDataLength_swigregister
RawDataLength_swigregister(RawDataLength)

class RawData(StringField):
    """Proxy of C++ FIX::RawData class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawData, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RawData self) -> RawData
        __init__(FIX::RawData self, FIX::DATA const & value) -> RawData

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_RawData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RawData
    __del__ = lambda self: None
RawData_swigregister = _quickfix.RawData_swigregister
RawData_swigregister(RawData)

class PossResend(BoolField):
    """Proxy of C++ FIX::PossResend class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PossResend, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PossResend, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PossResend self) -> PossResend
        __init__(FIX::PossResend self, FIX::BOOLEAN const & value) -> PossResend

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_PossResend(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PossResend
    __del__ = lambda self: None
PossResend_swigregister = _quickfix.PossResend_swigregister
PossResend_swigregister(PossResend)

class EncryptMethod(IntField):
    """Proxy of C++ FIX::EncryptMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncryptMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncryptMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncryptMethod self) -> EncryptMethod
        __init__(FIX::EncryptMethod self, FIX::INT const & value) -> EncryptMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_EncryptMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncryptMethod
    __del__ = lambda self: None
EncryptMethod_swigregister = _quickfix.EncryptMethod_swigregister
EncryptMethod_swigregister(EncryptMethod)

class HeartBtInt(IntField):
    """Proxy of C++ FIX::HeartBtInt class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeartBtInt, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HeartBtInt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::HeartBtInt self) -> HeartBtInt
        __init__(FIX::HeartBtInt self, FIX::INT const & value) -> HeartBtInt

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_HeartBtInt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_HeartBtInt
    __del__ = lambda self: None
HeartBtInt_swigregister = _quickfix.HeartBtInt_swigregister
HeartBtInt_swigregister(HeartBtInt)

class TestReqID(StringField):
    """Proxy of C++ FIX::TestReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TestReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TestReqID self) -> TestReqID
        __init__(FIX::TestReqID self, FIX::STRING const & value) -> TestReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TestReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TestReqID
    __del__ = lambda self: None
TestReqID_swigregister = _quickfix.TestReqID_swigregister
TestReqID_swigregister(TestReqID)

class OnBehalfOfCompID(StringField):
    """Proxy of C++ FIX::OnBehalfOfCompID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnBehalfOfCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OnBehalfOfCompID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OnBehalfOfCompID self) -> OnBehalfOfCompID
        __init__(FIX::OnBehalfOfCompID self, FIX::STRING const & value) -> OnBehalfOfCompID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OnBehalfOfCompID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OnBehalfOfCompID
    __del__ = lambda self: None
OnBehalfOfCompID_swigregister = _quickfix.OnBehalfOfCompID_swigregister
OnBehalfOfCompID_swigregister(OnBehalfOfCompID)

class OnBehalfOfSubID(StringField):
    """Proxy of C++ FIX::OnBehalfOfSubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnBehalfOfSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OnBehalfOfSubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OnBehalfOfSubID self) -> OnBehalfOfSubID
        __init__(FIX::OnBehalfOfSubID self, FIX::STRING const & value) -> OnBehalfOfSubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OnBehalfOfSubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OnBehalfOfSubID
    __del__ = lambda self: None
OnBehalfOfSubID_swigregister = _quickfix.OnBehalfOfSubID_swigregister
OnBehalfOfSubID_swigregister(OnBehalfOfSubID)

class OrigSendingTime(UtcTimeStampField):
    """Proxy of C++ FIX::OrigSendingTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigSendingTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigSendingTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigSendingTime self) -> OrigSendingTime
        __init__(FIX::OrigSendingTime self, bool showMilliseconds) -> OrigSendingTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::OrigSendingTime self, FIX::UTCTIMESTAMP const & value) -> OrigSendingTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::OrigSendingTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> OrigSendingTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_OrigSendingTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigSendingTime
    __del__ = lambda self: None
OrigSendingTime_swigregister = _quickfix.OrigSendingTime_swigregister
OrigSendingTime_swigregister(OrigSendingTime)

class GapFillFlag(BoolField):
    """Proxy of C++ FIX::GapFillFlag class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GapFillFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GapFillFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::GapFillFlag self) -> GapFillFlag
        __init__(FIX::GapFillFlag self, FIX::BOOLEAN const & value) -> GapFillFlag

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_GapFillFlag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_GapFillFlag
    __del__ = lambda self: None
GapFillFlag_swigregister = _quickfix.GapFillFlag_swigregister
GapFillFlag_swigregister(GapFillFlag)

class DeliverToCompID(StringField):
    """Proxy of C++ FIX::DeliverToCompID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliverToCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeliverToCompID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeliverToCompID self) -> DeliverToCompID
        __init__(FIX::DeliverToCompID self, FIX::STRING const & value) -> DeliverToCompID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DeliverToCompID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeliverToCompID
    __del__ = lambda self: None
DeliverToCompID_swigregister = _quickfix.DeliverToCompID_swigregister
DeliverToCompID_swigregister(DeliverToCompID)

class DeliverToSubID(StringField):
    """Proxy of C++ FIX::DeliverToSubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliverToSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeliverToSubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeliverToSubID self) -> DeliverToSubID
        __init__(FIX::DeliverToSubID self, FIX::STRING const & value) -> DeliverToSubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DeliverToSubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeliverToSubID
    __del__ = lambda self: None
DeliverToSubID_swigregister = _quickfix.DeliverToSubID_swigregister
DeliverToSubID_swigregister(DeliverToSubID)

class ResetSeqNumFlag(BoolField):
    """Proxy of C++ FIX::ResetSeqNumFlag class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResetSeqNumFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResetSeqNumFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ResetSeqNumFlag self) -> ResetSeqNumFlag
        __init__(FIX::ResetSeqNumFlag self, FIX::BOOLEAN const & value) -> ResetSeqNumFlag

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_ResetSeqNumFlag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ResetSeqNumFlag
    __del__ = lambda self: None
ResetSeqNumFlag_swigregister = _quickfix.ResetSeqNumFlag_swigregister
ResetSeqNumFlag_swigregister(ResetSeqNumFlag)

class SenderLocationID(StringField):
    """Proxy of C++ FIX::SenderLocationID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SenderLocationID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SenderLocationID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SenderLocationID self) -> SenderLocationID
        __init__(FIX::SenderLocationID self, FIX::STRING const & value) -> SenderLocationID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SenderLocationID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SenderLocationID
    __del__ = lambda self: None
SenderLocationID_swigregister = _quickfix.SenderLocationID_swigregister
SenderLocationID_swigregister(SenderLocationID)

class TargetLocationID(StringField):
    """Proxy of C++ FIX::TargetLocationID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetLocationID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TargetLocationID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TargetLocationID self) -> TargetLocationID
        __init__(FIX::TargetLocationID self, FIX::STRING const & value) -> TargetLocationID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TargetLocationID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TargetLocationID
    __del__ = lambda self: None
TargetLocationID_swigregister = _quickfix.TargetLocationID_swigregister
TargetLocationID_swigregister(TargetLocationID)

class OnBehalfOfLocationID(StringField):
    """Proxy of C++ FIX::OnBehalfOfLocationID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnBehalfOfLocationID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OnBehalfOfLocationID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OnBehalfOfLocationID self) -> OnBehalfOfLocationID
        __init__(FIX::OnBehalfOfLocationID self, FIX::STRING const & value) -> OnBehalfOfLocationID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OnBehalfOfLocationID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OnBehalfOfLocationID
    __del__ = lambda self: None
OnBehalfOfLocationID_swigregister = _quickfix.OnBehalfOfLocationID_swigregister
OnBehalfOfLocationID_swigregister(OnBehalfOfLocationID)

class DeliverToLocationID(StringField):
    """Proxy of C++ FIX::DeliverToLocationID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliverToLocationID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeliverToLocationID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeliverToLocationID self) -> DeliverToLocationID
        __init__(FIX::DeliverToLocationID self, FIX::STRING const & value) -> DeliverToLocationID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DeliverToLocationID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeliverToLocationID
    __del__ = lambda self: None
DeliverToLocationID_swigregister = _quickfix.DeliverToLocationID_swigregister
DeliverToLocationID_swigregister(DeliverToLocationID)

class XmlDataLen(IntField):
    """Proxy of C++ FIX::XmlDataLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlDataLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlDataLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::XmlDataLen self) -> XmlDataLen
        __init__(FIX::XmlDataLen self, FIX::LENGTH const & value) -> XmlDataLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_XmlDataLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_XmlDataLen
    __del__ = lambda self: None
XmlDataLen_swigregister = _quickfix.XmlDataLen_swigregister
XmlDataLen_swigregister(XmlDataLen)

class XmlData(StringField):
    """Proxy of C++ FIX::XmlData class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlData, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::XmlData self) -> XmlData
        __init__(FIX::XmlData self, FIX::DATA const & value) -> XmlData

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_XmlData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_XmlData
    __del__ = lambda self: None
XmlData_swigregister = _quickfix.XmlData_swigregister
XmlData_swigregister(XmlData)

class MessageEncoding(StringField):
    """Proxy of C++ FIX::MessageEncoding class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageEncoding, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageEncoding, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MessageEncoding self) -> MessageEncoding
        __init__(FIX::MessageEncoding self, FIX::STRING const & value) -> MessageEncoding

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MessageEncoding(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MessageEncoding
    __del__ = lambda self: None
MessageEncoding_swigregister = _quickfix.MessageEncoding_swigregister
MessageEncoding_swigregister(MessageEncoding)

class EncodedTextLen(IntField):
    """Proxy of C++ FIX::EncodedTextLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedTextLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedTextLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedTextLen self) -> EncodedTextLen
        __init__(FIX::EncodedTextLen self, FIX::LENGTH const & value) -> EncodedTextLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedTextLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedTextLen
    __del__ = lambda self: None
EncodedTextLen_swigregister = _quickfix.EncodedTextLen_swigregister
EncodedTextLen_swigregister(EncodedTextLen)

class EncodedText(StringField):
    """Proxy of C++ FIX::EncodedText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedText self) -> EncodedText
        __init__(FIX::EncodedText self, FIX::DATA const & value) -> EncodedText

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedText
    __del__ = lambda self: None
EncodedText_swigregister = _quickfix.EncodedText_swigregister
EncodedText_swigregister(EncodedText)

class LastMsgSeqNumProcessed(IntField):
    """Proxy of C++ FIX::LastMsgSeqNumProcessed class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastMsgSeqNumProcessed, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastMsgSeqNumProcessed, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastMsgSeqNumProcessed self) -> LastMsgSeqNumProcessed
        __init__(FIX::LastMsgSeqNumProcessed self, FIX::SEQNUM const & value) -> LastMsgSeqNumProcessed

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_LastMsgSeqNumProcessed(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastMsgSeqNumProcessed
    __del__ = lambda self: None
LastMsgSeqNumProcessed_swigregister = _quickfix.LastMsgSeqNumProcessed_swigregister
LastMsgSeqNumProcessed_swigregister(LastMsgSeqNumProcessed)

class RefTagID(IntField):
    """Proxy of C++ FIX::RefTagID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefTagID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefTagID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefTagID self) -> RefTagID
        __init__(FIX::RefTagID self, FIX::INT const & value) -> RefTagID

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RefTagID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefTagID
    __del__ = lambda self: None
RefTagID_swigregister = _quickfix.RefTagID_swigregister
RefTagID_swigregister(RefTagID)

class RefMsgType(StringField):
    """Proxy of C++ FIX::RefMsgType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefMsgType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefMsgType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefMsgType self) -> RefMsgType
        __init__(FIX::RefMsgType self, FIX::STRING const & value) -> RefMsgType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RefMsgType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefMsgType
    __del__ = lambda self: None
RefMsgType_swigregister = _quickfix.RefMsgType_swigregister
RefMsgType_swigregister(RefMsgType)

class SessionRejectReason(IntField):
    """Proxy of C++ FIX::SessionRejectReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SessionRejectReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SessionRejectReason self) -> SessionRejectReason
        __init__(FIX::SessionRejectReason self, FIX::INT const & value) -> SessionRejectReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SessionRejectReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SessionRejectReason
    __del__ = lambda self: None
SessionRejectReason_swigregister = _quickfix.SessionRejectReason_swigregister
SessionRejectReason_swigregister(SessionRejectReason)

class MaxMessageSize(IntField):
    """Proxy of C++ FIX::MaxMessageSize class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxMessageSize, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxMessageSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaxMessageSize self) -> MaxMessageSize
        __init__(FIX::MaxMessageSize self, FIX::LENGTH const & value) -> MaxMessageSize

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_MaxMessageSize(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaxMessageSize
    __del__ = lambda self: None
MaxMessageSize_swigregister = _quickfix.MaxMessageSize_swigregister
MaxMessageSize_swigregister(MaxMessageSize)

class NoMsgTypes(IntField):
    """Proxy of C++ FIX::NoMsgTypes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMsgTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoMsgTypes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoMsgTypes self) -> NoMsgTypes
        __init__(FIX::NoMsgTypes self, FIX::NUMINGROUP const & value) -> NoMsgTypes

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoMsgTypes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoMsgTypes
    __del__ = lambda self: None
NoMsgTypes_swigregister = _quickfix.NoMsgTypes_swigregister
NoMsgTypes_swigregister(NoMsgTypes)

class MsgDirection(CharField):
    """Proxy of C++ FIX::MsgDirection class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsgDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MsgDirection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MsgDirection self) -> MsgDirection
        __init__(FIX::MsgDirection self, FIX::CHAR const & value) -> MsgDirection

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_MsgDirection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MsgDirection
    __del__ = lambda self: None
MsgDirection_swigregister = _quickfix.MsgDirection_swigregister
MsgDirection_swigregister(MsgDirection)

class TestMessageIndicator(BoolField):
    """Proxy of C++ FIX::TestMessageIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TestMessageIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TestMessageIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TestMessageIndicator self) -> TestMessageIndicator
        __init__(FIX::TestMessageIndicator self, FIX::BOOLEAN const & value) -> TestMessageIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_TestMessageIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TestMessageIndicator
    __del__ = lambda self: None
TestMessageIndicator_swigregister = _quickfix.TestMessageIndicator_swigregister
TestMessageIndicator_swigregister(TestMessageIndicator)

class Username(StringField):
    """Proxy of C++ FIX::Username class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Username, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Username, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Username self) -> Username
        __init__(FIX::Username self, FIX::STRING const & value) -> Username

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Username(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Username
    __del__ = lambda self: None
Username_swigregister = _quickfix.Username_swigregister
Username_swigregister(Username)

class Password(StringField):
    """Proxy of C++ FIX::Password class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Password, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Password, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Password self) -> Password
        __init__(FIX::Password self, FIX::STRING const & value) -> Password

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Password(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Password
    __del__ = lambda self: None
Password_swigregister = _quickfix.Password_swigregister
Password_swigregister(Password)

class NoHops(IntField):
    """Proxy of C++ FIX::NoHops class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoHops, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoHops, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoHops self) -> NoHops
        __init__(FIX::NoHops self, FIX::NUMINGROUP const & value) -> NoHops

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoHops(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoHops
    __del__ = lambda self: None
NoHops_swigregister = _quickfix.NoHops_swigregister
NoHops_swigregister(NoHops)

class HopCompID(StringField):
    """Proxy of C++ FIX::HopCompID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HopCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HopCompID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::HopCompID self) -> HopCompID
        __init__(FIX::HopCompID self, FIX::STRING const & value) -> HopCompID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_HopCompID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_HopCompID
    __del__ = lambda self: None
HopCompID_swigregister = _quickfix.HopCompID_swigregister
HopCompID_swigregister(HopCompID)

class HopSendingTime(UtcTimeStampField):
    """Proxy of C++ FIX::HopSendingTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HopSendingTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HopSendingTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::HopSendingTime self) -> HopSendingTime
        __init__(FIX::HopSendingTime self, bool showMilliseconds) -> HopSendingTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::HopSendingTime self, FIX::UTCTIMESTAMP const & value) -> HopSendingTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::HopSendingTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> HopSendingTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_HopSendingTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_HopSendingTime
    __del__ = lambda self: None
HopSendingTime_swigregister = _quickfix.HopSendingTime_swigregister
HopSendingTime_swigregister(HopSendingTime)

class HopRefID(IntField):
    """Proxy of C++ FIX::HopRefID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HopRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HopRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::HopRefID self) -> HopRefID
        __init__(FIX::HopRefID self, FIX::SEQNUM const & value) -> HopRefID

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_HopRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_HopRefID
    __del__ = lambda self: None
HopRefID_swigregister = _quickfix.HopRefID_swigregister
HopRefID_swigregister(HopRefID)

class NextExpectedMsgSeqNum(IntField):
    """Proxy of C++ FIX::NextExpectedMsgSeqNum class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NextExpectedMsgSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NextExpectedMsgSeqNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NextExpectedMsgSeqNum self) -> NextExpectedMsgSeqNum
        __init__(FIX::NextExpectedMsgSeqNum self, FIX::SEQNUM const & value) -> NextExpectedMsgSeqNum

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_NextExpectedMsgSeqNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NextExpectedMsgSeqNum
    __del__ = lambda self: None
NextExpectedMsgSeqNum_swigregister = _quickfix.NextExpectedMsgSeqNum_swigregister
NextExpectedMsgSeqNum_swigregister(NextExpectedMsgSeqNum)

class ApplVerID(StringField):
    """Proxy of C++ FIX::ApplVerID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplVerID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplVerID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplVerID self) -> ApplVerID
        __init__(FIX::ApplVerID self, FIX::STRING const & value) -> ApplVerID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ApplVerID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplVerID
    __del__ = lambda self: None
ApplVerID_swigregister = _quickfix.ApplVerID_swigregister
ApplVerID_swigregister(ApplVerID)

class CstmApplVerID(StringField):
    """Proxy of C++ FIX::CstmApplVerID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CstmApplVerID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CstmApplVerID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CstmApplVerID self) -> CstmApplVerID
        __init__(FIX::CstmApplVerID self, FIX::STRING const & value) -> CstmApplVerID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CstmApplVerID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CstmApplVerID
    __del__ = lambda self: None
CstmApplVerID_swigregister = _quickfix.CstmApplVerID_swigregister
CstmApplVerID_swigregister(CstmApplVerID)

class RefApplVerID(StringField):
    """Proxy of C++ FIX::RefApplVerID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefApplVerID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefApplVerID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefApplVerID self) -> RefApplVerID
        __init__(FIX::RefApplVerID self, FIX::STRING const & value) -> RefApplVerID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RefApplVerID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefApplVerID
    __del__ = lambda self: None
RefApplVerID_swigregister = _quickfix.RefApplVerID_swigregister
RefApplVerID_swigregister(RefApplVerID)

class RefCstmApplVerID(StringField):
    """Proxy of C++ FIX::RefCstmApplVerID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefCstmApplVerID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefCstmApplVerID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefCstmApplVerID self) -> RefCstmApplVerID
        __init__(FIX::RefCstmApplVerID self, FIX::STRING const & value) -> RefCstmApplVerID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RefCstmApplVerID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefCstmApplVerID
    __del__ = lambda self: None
RefCstmApplVerID_swigregister = _quickfix.RefCstmApplVerID_swigregister
RefCstmApplVerID_swigregister(RefCstmApplVerID)

class DefaultApplVerID(StringField):
    """Proxy of C++ FIX::DefaultApplVerID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultApplVerID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultApplVerID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DefaultApplVerID self) -> DefaultApplVerID
        __init__(FIX::DefaultApplVerID self, FIX::STRING const & value) -> DefaultApplVerID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DefaultApplVerID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DefaultApplVerID
    __del__ = lambda self: None
DefaultApplVerID_swigregister = _quickfix.DefaultApplVerID_swigregister
DefaultApplVerID_swigregister(DefaultApplVerID)

class Account(StringField):
    """Proxy of C++ FIX::Account class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Account, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Account, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Account self) -> Account
        __init__(FIX::Account self, FIX::STRING const & value) -> Account

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Account(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Account
    __del__ = lambda self: None
Account_swigregister = _quickfix.Account_swigregister
Account_swigregister(Account)

class AdvId(StringField):
    """Proxy of C++ FIX::AdvId class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvId, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvId, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AdvId self) -> AdvId
        __init__(FIX::AdvId self, FIX::STRING const & value) -> AdvId

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AdvId(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AdvId
    __del__ = lambda self: None
AdvId_swigregister = _quickfix.AdvId_swigregister
AdvId_swigregister(AdvId)

class AdvRefID(StringField):
    """Proxy of C++ FIX::AdvRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AdvRefID self) -> AdvRefID
        __init__(FIX::AdvRefID self, FIX::STRING const & value) -> AdvRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AdvRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AdvRefID
    __del__ = lambda self: None
AdvRefID_swigregister = _quickfix.AdvRefID_swigregister
AdvRefID_swigregister(AdvRefID)

class AdvSide(CharField):
    """Proxy of C++ FIX::AdvSide class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvSide, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvSide, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AdvSide self) -> AdvSide
        __init__(FIX::AdvSide self, FIX::CHAR const & value) -> AdvSide

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_AdvSide(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AdvSide
    __del__ = lambda self: None
AdvSide_swigregister = _quickfix.AdvSide_swigregister
AdvSide_swigregister(AdvSide)

class AdvTransType(StringField):
    """Proxy of C++ FIX::AdvTransType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AdvTransType self) -> AdvTransType
        __init__(FIX::AdvTransType self, FIX::STRING const & value) -> AdvTransType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AdvTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AdvTransType
    __del__ = lambda self: None
AdvTransType_swigregister = _quickfix.AdvTransType_swigregister
AdvTransType_swigregister(AdvTransType)

class AvgPx(DoubleField):
    """Proxy of C++ FIX::AvgPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AvgPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AvgPx self) -> AvgPx
        __init__(FIX::AvgPx self, FIX::PRICE const & value) -> AvgPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_AvgPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AvgPx
    __del__ = lambda self: None
AvgPx_swigregister = _quickfix.AvgPx_swigregister
AvgPx_swigregister(AvgPx)

class ClOrdID(StringField):
    """Proxy of C++ FIX::ClOrdID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClOrdID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClOrdID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ClOrdID self) -> ClOrdID
        __init__(FIX::ClOrdID self, FIX::STRING const & value) -> ClOrdID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ClOrdID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ClOrdID
    __del__ = lambda self: None
ClOrdID_swigregister = _quickfix.ClOrdID_swigregister
ClOrdID_swigregister(ClOrdID)

class Commission(DoubleField):
    """Proxy of C++ FIX::Commission class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Commission, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Commission, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Commission self) -> Commission
        __init__(FIX::Commission self, FIX::AMT const & value) -> Commission

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_Commission(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Commission
    __del__ = lambda self: None
Commission_swigregister = _quickfix.Commission_swigregister
Commission_swigregister(Commission)

class CommType(CharField):
    """Proxy of C++ FIX::CommType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CommType self) -> CommType
        __init__(FIX::CommType self, FIX::CHAR const & value) -> CommType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_CommType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CommType
    __del__ = lambda self: None
CommType_swigregister = _quickfix.CommType_swigregister
CommType_swigregister(CommType)

class CumQty(DoubleField):
    """Proxy of C++ FIX::CumQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CumQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CumQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CumQty self) -> CumQty
        __init__(FIX::CumQty self, FIX::QTY const & value) -> CumQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_CumQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CumQty
    __del__ = lambda self: None
CumQty_swigregister = _quickfix.CumQty_swigregister
CumQty_swigregister(CumQty)

class Currency(StringField):
    """Proxy of C++ FIX::Currency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Currency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Currency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Currency self) -> Currency
        __init__(FIX::Currency self, FIX::CURRENCY const & value) -> Currency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_Currency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Currency
    __del__ = lambda self: None
Currency_swigregister = _quickfix.Currency_swigregister
Currency_swigregister(Currency)

class ExecID(StringField):
    """Proxy of C++ FIX::ExecID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecID self) -> ExecID
        __init__(FIX::ExecID self, FIX::STRING const & value) -> ExecID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ExecID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecID
    __del__ = lambda self: None
ExecID_swigregister = _quickfix.ExecID_swigregister
ExecID_swigregister(ExecID)

class ExecInst(StringField):
    """Proxy of C++ FIX::ExecInst class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecInst self) -> ExecInst
        __init__(FIX::ExecInst self, FIX::MULTIPLECHARVALUE const & value) -> ExecInst

        Parameters:
            value: FIX::MULTIPLECHARVALUE const &

        """
        this = _quickfix.new_ExecInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecInst
    __del__ = lambda self: None
ExecInst_swigregister = _quickfix.ExecInst_swigregister
ExecInst_swigregister(ExecInst)

class ExecRefID(StringField):
    """Proxy of C++ FIX::ExecRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecRefID self) -> ExecRefID
        __init__(FIX::ExecRefID self, FIX::STRING const & value) -> ExecRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ExecRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecRefID
    __del__ = lambda self: None
ExecRefID_swigregister = _quickfix.ExecRefID_swigregister
ExecRefID_swigregister(ExecRefID)

class ExecTransType(CharField):
    """Proxy of C++ FIX::ExecTransType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecTransType self) -> ExecTransType
        __init__(FIX::ExecTransType self, FIX::CHAR const & value) -> ExecTransType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_ExecTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecTransType
    __del__ = lambda self: None
ExecTransType_swigregister = _quickfix.ExecTransType_swigregister
ExecTransType_swigregister(ExecTransType)

class HandlInst(CharField):
    """Proxy of C++ FIX::HandlInst class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HandlInst, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HandlInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::HandlInst self) -> HandlInst
        __init__(FIX::HandlInst self, FIX::CHAR const & value) -> HandlInst

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_HandlInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_HandlInst
    __del__ = lambda self: None
HandlInst_swigregister = _quickfix.HandlInst_swigregister
HandlInst_swigregister(HandlInst)

class IDSource(StringField):
    """Proxy of C++ FIX::IDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IDSource self) -> IDSource
        __init__(FIX::IDSource self, FIX::STRING const & value) -> IDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_IDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IDSource
    __del__ = lambda self: None
IDSource_swigregister = _quickfix.IDSource_swigregister
IDSource_swigregister(IDSource)

class IOIid(StringField):
    """Proxy of C++ FIX::IOIid class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIid, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOIid, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOIid self) -> IOIid
        __init__(FIX::IOIid self, FIX::STRING const & value) -> IOIid

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_IOIid(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOIid
    __del__ = lambda self: None
IOIid_swigregister = _quickfix.IOIid_swigregister
IOIid_swigregister(IOIid)

class IOIOthSvc(CharField):
    """Proxy of C++ FIX::IOIOthSvc class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIOthSvc, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOIOthSvc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOIOthSvc self) -> IOIOthSvc
        __init__(FIX::IOIOthSvc self, FIX::CHAR const & value) -> IOIOthSvc

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_IOIOthSvc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOIOthSvc
    __del__ = lambda self: None
IOIOthSvc_swigregister = _quickfix.IOIOthSvc_swigregister
IOIOthSvc_swigregister(IOIOthSvc)

class IOIQltyInd(CharField):
    """Proxy of C++ FIX::IOIQltyInd class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIQltyInd, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOIQltyInd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOIQltyInd self) -> IOIQltyInd
        __init__(FIX::IOIQltyInd self, FIX::CHAR const & value) -> IOIQltyInd

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_IOIQltyInd(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOIQltyInd
    __del__ = lambda self: None
IOIQltyInd_swigregister = _quickfix.IOIQltyInd_swigregister
IOIQltyInd_swigregister(IOIQltyInd)

class IOIRefID(StringField):
    """Proxy of C++ FIX::IOIRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOIRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOIRefID self) -> IOIRefID
        __init__(FIX::IOIRefID self, FIX::STRING const & value) -> IOIRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_IOIRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOIRefID
    __del__ = lambda self: None
IOIRefID_swigregister = _quickfix.IOIRefID_swigregister
IOIRefID_swigregister(IOIRefID)

class IOIShares(StringField):
    """Proxy of C++ FIX::IOIShares class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIShares, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOIShares, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOIShares self) -> IOIShares
        __init__(FIX::IOIShares self, FIX::STRING const & value) -> IOIShares

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_IOIShares(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOIShares
    __del__ = lambda self: None
IOIShares_swigregister = _quickfix.IOIShares_swigregister
IOIShares_swigregister(IOIShares)

class IOITransType(CharField):
    """Proxy of C++ FIX::IOITransType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOITransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOITransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOITransType self) -> IOITransType
        __init__(FIX::IOITransType self, FIX::CHAR const & value) -> IOITransType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_IOITransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOITransType
    __del__ = lambda self: None
IOITransType_swigregister = _quickfix.IOITransType_swigregister
IOITransType_swigregister(IOITransType)

class LastCapacity(CharField):
    """Proxy of C++ FIX::LastCapacity class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastCapacity, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastCapacity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastCapacity self) -> LastCapacity
        __init__(FIX::LastCapacity self, FIX::CHAR const & value) -> LastCapacity

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_LastCapacity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastCapacity
    __del__ = lambda self: None
LastCapacity_swigregister = _quickfix.LastCapacity_swigregister
LastCapacity_swigregister(LastCapacity)

class LastMkt(StringField):
    """Proxy of C++ FIX::LastMkt class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastMkt, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastMkt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastMkt self) -> LastMkt
        __init__(FIX::LastMkt self, FIX::EXCHANGE const & value) -> LastMkt

        Parameters:
            value: FIX::EXCHANGE const &

        """
        this = _quickfix.new_LastMkt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastMkt
    __del__ = lambda self: None
LastMkt_swigregister = _quickfix.LastMkt_swigregister
LastMkt_swigregister(LastMkt)

class LastPx(DoubleField):
    """Proxy of C++ FIX::LastPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastPx self) -> LastPx
        __init__(FIX::LastPx self, FIX::PRICE const & value) -> LastPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LastPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastPx
    __del__ = lambda self: None
LastPx_swigregister = _quickfix.LastPx_swigregister
LastPx_swigregister(LastPx)

class LastShares(DoubleField):
    """Proxy of C++ FIX::LastShares class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastShares, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastShares, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastShares self) -> LastShares
        __init__(FIX::LastShares self, FIX::QTY const & value) -> LastShares

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LastShares(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastShares
    __del__ = lambda self: None
LastShares_swigregister = _quickfix.LastShares_swigregister
LastShares_swigregister(LastShares)

class LinesOfText(IntField):
    """Proxy of C++ FIX::LinesOfText class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinesOfText, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinesOfText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LinesOfText self) -> LinesOfText
        __init__(FIX::LinesOfText self, FIX::NUMINGROUP const & value) -> LinesOfText

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_LinesOfText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LinesOfText
    __del__ = lambda self: None
LinesOfText_swigregister = _quickfix.LinesOfText_swigregister
LinesOfText_swigregister(LinesOfText)

class OrderID(StringField):
    """Proxy of C++ FIX::OrderID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderID self) -> OrderID
        __init__(FIX::OrderID self, FIX::STRING const & value) -> OrderID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OrderID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderID
    __del__ = lambda self: None
OrderID_swigregister = _quickfix.OrderID_swigregister
OrderID_swigregister(OrderID)

class OrderQty(DoubleField):
    """Proxy of C++ FIX::OrderQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderQty self) -> OrderQty
        __init__(FIX::OrderQty self, FIX::QTY const & value) -> OrderQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_OrderQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderQty
    __del__ = lambda self: None
OrderQty_swigregister = _quickfix.OrderQty_swigregister
OrderQty_swigregister(OrderQty)

class OrdStatus(CharField):
    """Proxy of C++ FIX::OrdStatus class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrdStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrdStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrdStatus self) -> OrdStatus
        __init__(FIX::OrdStatus self, FIX::CHAR const & value) -> OrdStatus

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_OrdStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrdStatus
    __del__ = lambda self: None
OrdStatus_swigregister = _quickfix.OrdStatus_swigregister
OrdStatus_swigregister(OrdStatus)

class OrdType(CharField):
    """Proxy of C++ FIX::OrdType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrdType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrdType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrdType self) -> OrdType
        __init__(FIX::OrdType self, FIX::CHAR const & value) -> OrdType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_OrdType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrdType
    __del__ = lambda self: None
OrdType_swigregister = _quickfix.OrdType_swigregister
OrdType_swigregister(OrdType)

class OrigClOrdID(StringField):
    """Proxy of C++ FIX::OrigClOrdID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigClOrdID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigClOrdID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigClOrdID self) -> OrigClOrdID
        __init__(FIX::OrigClOrdID self, FIX::STRING const & value) -> OrigClOrdID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OrigClOrdID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigClOrdID
    __del__ = lambda self: None
OrigClOrdID_swigregister = _quickfix.OrigClOrdID_swigregister
OrigClOrdID_swigregister(OrigClOrdID)

class OrigTime(UtcTimeStampField):
    """Proxy of C++ FIX::OrigTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigTime self) -> OrigTime
        __init__(FIX::OrigTime self, bool showMilliseconds) -> OrigTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::OrigTime self, FIX::UTCTIMESTAMP const & value) -> OrigTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::OrigTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> OrigTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_OrigTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigTime
    __del__ = lambda self: None
OrigTime_swigregister = _quickfix.OrigTime_swigregister
OrigTime_swigregister(OrigTime)

class Price(DoubleField):
    """Proxy of C++ FIX::Price class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Price, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Price, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Price self) -> Price
        __init__(FIX::Price self, FIX::PRICE const & value) -> Price

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_Price(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Price
    __del__ = lambda self: None
Price_swigregister = _quickfix.Price_swigregister
Price_swigregister(Price)

class RelatdSym(StringField):
    """Proxy of C++ FIX::RelatdSym class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelatdSym, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelatdSym, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RelatdSym self) -> RelatdSym
        __init__(FIX::RelatdSym self, FIX::STRING const & value) -> RelatdSym

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RelatdSym(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RelatdSym
    __del__ = lambda self: None
RelatdSym_swigregister = _quickfix.RelatdSym_swigregister
RelatdSym_swigregister(RelatdSym)

class Rule80A(CharField):
    """Proxy of C++ FIX::Rule80A class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rule80A, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rule80A, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Rule80A self) -> Rule80A
        __init__(FIX::Rule80A self, FIX::CHAR const & value) -> Rule80A

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_Rule80A(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Rule80A
    __del__ = lambda self: None
Rule80A_swigregister = _quickfix.Rule80A_swigregister
Rule80A_swigregister(Rule80A)

class SecurityID(StringField):
    """Proxy of C++ FIX::SecurityID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityID self) -> SecurityID
        __init__(FIX::SecurityID self, FIX::STRING const & value) -> SecurityID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityID
    __del__ = lambda self: None
SecurityID_swigregister = _quickfix.SecurityID_swigregister
SecurityID_swigregister(SecurityID)

class Shares(DoubleField):
    """Proxy of C++ FIX::Shares class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shares, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Shares, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Shares self) -> Shares
        __init__(FIX::Shares self, FIX::QTY const & value) -> Shares

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_Shares(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Shares
    __del__ = lambda self: None
Shares_swigregister = _quickfix.Shares_swigregister
Shares_swigregister(Shares)

class Side(CharField):
    """Proxy of C++ FIX::Side class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Side, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Side, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Side self) -> Side
        __init__(FIX::Side self, FIX::CHAR const & value) -> Side

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_Side(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Side
    __del__ = lambda self: None
Side_swigregister = _quickfix.Side_swigregister
Side_swigregister(Side)

class Symbol(StringField):
    """Proxy of C++ FIX::Symbol class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Symbol, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Symbol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Symbol self) -> Symbol
        __init__(FIX::Symbol self, FIX::STRING const & value) -> Symbol

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Symbol(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Symbol
    __del__ = lambda self: None
Symbol_swigregister = _quickfix.Symbol_swigregister
Symbol_swigregister(Symbol)

class TimeInForce(CharField):
    """Proxy of C++ FIX::TimeInForce class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeInForce, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeInForce, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TimeInForce self) -> TimeInForce
        __init__(FIX::TimeInForce self, FIX::CHAR const & value) -> TimeInForce

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TimeInForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TimeInForce
    __del__ = lambda self: None
TimeInForce_swigregister = _quickfix.TimeInForce_swigregister
TimeInForce_swigregister(TimeInForce)

class TransactTime(UtcTimeStampField):
    """Proxy of C++ FIX::TransactTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransactTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransactTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TransactTime self) -> TransactTime
        __init__(FIX::TransactTime self, bool showMilliseconds) -> TransactTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::TransactTime self, FIX::UTCTIMESTAMP const & value) -> TransactTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::TransactTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> TransactTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_TransactTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TransactTime
    __del__ = lambda self: None
TransactTime_swigregister = _quickfix.TransactTime_swigregister
TransactTime_swigregister(TransactTime)

class Urgency(CharField):
    """Proxy of C++ FIX::Urgency class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Urgency, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Urgency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Urgency self) -> Urgency
        __init__(FIX::Urgency self, FIX::CHAR const & value) -> Urgency

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_Urgency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Urgency
    __del__ = lambda self: None
Urgency_swigregister = _quickfix.Urgency_swigregister
Urgency_swigregister(Urgency)

class ValidUntilTime(UtcTimeStampField):
    """Proxy of C++ FIX::ValidUntilTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValidUntilTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ValidUntilTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ValidUntilTime self) -> ValidUntilTime
        __init__(FIX::ValidUntilTime self, bool showMilliseconds) -> ValidUntilTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::ValidUntilTime self, FIX::UTCTIMESTAMP const & value) -> ValidUntilTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::ValidUntilTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> ValidUntilTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_ValidUntilTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ValidUntilTime
    __del__ = lambda self: None
ValidUntilTime_swigregister = _quickfix.ValidUntilTime_swigregister
ValidUntilTime_swigregister(ValidUntilTime)

class SettlmntTyp(CharField):
    """Proxy of C++ FIX::SettlmntTyp class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlmntTyp, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlmntTyp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlmntTyp self) -> SettlmntTyp
        __init__(FIX::SettlmntTyp self, FIX::CHAR const & value) -> SettlmntTyp

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SettlmntTyp(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlmntTyp
    __del__ = lambda self: None
SettlmntTyp_swigregister = _quickfix.SettlmntTyp_swigregister
SettlmntTyp_swigregister(SettlmntTyp)

class FutSettDate(StringField):
    """Proxy of C++ FIX::FutSettDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FutSettDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FutSettDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FutSettDate self) -> FutSettDate
        __init__(FIX::FutSettDate self, FIX::LOCALMKTDATE const & value) -> FutSettDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_FutSettDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FutSettDate
    __del__ = lambda self: None
FutSettDate_swigregister = _quickfix.FutSettDate_swigregister
FutSettDate_swigregister(FutSettDate)

class SymbolSfx(StringField):
    """Proxy of C++ FIX::SymbolSfx class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolSfx, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolSfx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SymbolSfx self) -> SymbolSfx
        __init__(FIX::SymbolSfx self, FIX::STRING const & value) -> SymbolSfx

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SymbolSfx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SymbolSfx
    __del__ = lambda self: None
SymbolSfx_swigregister = _quickfix.SymbolSfx_swigregister
SymbolSfx_swigregister(SymbolSfx)

class ListID(StringField):
    """Proxy of C++ FIX::ListID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListID self) -> ListID
        __init__(FIX::ListID self, FIX::STRING const & value) -> ListID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ListID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListID
    __del__ = lambda self: None
ListID_swigregister = _quickfix.ListID_swigregister
ListID_swigregister(ListID)

class ListSeqNo(IntField):
    """Proxy of C++ FIX::ListSeqNo class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListSeqNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListSeqNo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListSeqNo self) -> ListSeqNo
        __init__(FIX::ListSeqNo self, FIX::INT const & value) -> ListSeqNo

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ListSeqNo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListSeqNo
    __del__ = lambda self: None
ListSeqNo_swigregister = _quickfix.ListSeqNo_swigregister
ListSeqNo_swigregister(ListSeqNo)

class ListNoOrds(IntField):
    """Proxy of C++ FIX::ListNoOrds class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListNoOrds, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListNoOrds, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListNoOrds self) -> ListNoOrds
        __init__(FIX::ListNoOrds self, FIX::INT const & value) -> ListNoOrds

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ListNoOrds(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListNoOrds
    __del__ = lambda self: None
ListNoOrds_swigregister = _quickfix.ListNoOrds_swigregister
ListNoOrds_swigregister(ListNoOrds)

class ListExecInst(StringField):
    """Proxy of C++ FIX::ListExecInst class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListExecInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListExecInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListExecInst self) -> ListExecInst
        __init__(FIX::ListExecInst self, FIX::STRING const & value) -> ListExecInst

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ListExecInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListExecInst
    __del__ = lambda self: None
ListExecInst_swigregister = _quickfix.ListExecInst_swigregister
ListExecInst_swigregister(ListExecInst)

class AllocID(StringField):
    """Proxy of C++ FIX::AllocID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocID self) -> AllocID
        __init__(FIX::AllocID self, FIX::STRING const & value) -> AllocID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AllocID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocID
    __del__ = lambda self: None
AllocID_swigregister = _quickfix.AllocID_swigregister
AllocID_swigregister(AllocID)

class AllocTransType(CharField):
    """Proxy of C++ FIX::AllocTransType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocTransType self) -> AllocTransType
        __init__(FIX::AllocTransType self, FIX::CHAR const & value) -> AllocTransType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_AllocTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocTransType
    __del__ = lambda self: None
AllocTransType_swigregister = _quickfix.AllocTransType_swigregister
AllocTransType_swigregister(AllocTransType)

class RefAllocID(StringField):
    """Proxy of C++ FIX::RefAllocID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefAllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefAllocID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefAllocID self) -> RefAllocID
        __init__(FIX::RefAllocID self, FIX::STRING const & value) -> RefAllocID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RefAllocID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefAllocID
    __del__ = lambda self: None
RefAllocID_swigregister = _quickfix.RefAllocID_swigregister
RefAllocID_swigregister(RefAllocID)

class NoOrders(IntField):
    """Proxy of C++ FIX::NoOrders class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoOrders, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoOrders self) -> NoOrders
        __init__(FIX::NoOrders self, FIX::NUMINGROUP const & value) -> NoOrders

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoOrders(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoOrders
    __del__ = lambda self: None
NoOrders_swigregister = _quickfix.NoOrders_swigregister
NoOrders_swigregister(NoOrders)

class AvgPrxPrecision(IntField):
    """Proxy of C++ FIX::AvgPrxPrecision class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgPrxPrecision, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AvgPrxPrecision, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AvgPrxPrecision self) -> AvgPrxPrecision
        __init__(FIX::AvgPrxPrecision self, FIX::INT const & value) -> AvgPrxPrecision

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AvgPrxPrecision(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AvgPrxPrecision
    __del__ = lambda self: None
AvgPrxPrecision_swigregister = _quickfix.AvgPrxPrecision_swigregister
AvgPrxPrecision_swigregister(AvgPrxPrecision)

class TradeDate(StringField):
    """Proxy of C++ FIX::TradeDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeDate self) -> TradeDate
        __init__(FIX::TradeDate self, FIX::LOCALMKTDATE const & value) -> TradeDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_TradeDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeDate
    __del__ = lambda self: None
TradeDate_swigregister = _quickfix.TradeDate_swigregister
TradeDate_swigregister(TradeDate)

class ExecBroker(StringField):
    """Proxy of C++ FIX::ExecBroker class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecBroker, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecBroker, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecBroker self) -> ExecBroker
        __init__(FIX::ExecBroker self, FIX::STRING const & value) -> ExecBroker

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ExecBroker(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecBroker
    __del__ = lambda self: None
ExecBroker_swigregister = _quickfix.ExecBroker_swigregister
ExecBroker_swigregister(ExecBroker)

class OpenClose(CharField):
    """Proxy of C++ FIX::OpenClose class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenClose, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpenClose, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OpenClose self) -> OpenClose
        __init__(FIX::OpenClose self, FIX::CHAR const & value) -> OpenClose

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_OpenClose(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OpenClose
    __del__ = lambda self: None
OpenClose_swigregister = _quickfix.OpenClose_swigregister
OpenClose_swigregister(OpenClose)

class NoAllocs(IntField):
    """Proxy of C++ FIX::NoAllocs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoAllocs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoAllocs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoAllocs self) -> NoAllocs
        __init__(FIX::NoAllocs self, FIX::NUMINGROUP const & value) -> NoAllocs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoAllocs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoAllocs
    __del__ = lambda self: None
NoAllocs_swigregister = _quickfix.NoAllocs_swigregister
NoAllocs_swigregister(NoAllocs)

class AllocAccount(StringField):
    """Proxy of C++ FIX::AllocAccount class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocAccount, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocAccount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocAccount self) -> AllocAccount
        __init__(FIX::AllocAccount self, FIX::STRING const & value) -> AllocAccount

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AllocAccount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocAccount
    __del__ = lambda self: None
AllocAccount_swigregister = _quickfix.AllocAccount_swigregister
AllocAccount_swigregister(AllocAccount)

class AllocShares(DoubleField):
    """Proxy of C++ FIX::AllocShares class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocShares, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocShares, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocShares self) -> AllocShares
        __init__(FIX::AllocShares self, FIX::QTY const & value) -> AllocShares

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_AllocShares(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocShares
    __del__ = lambda self: None
AllocShares_swigregister = _quickfix.AllocShares_swigregister
AllocShares_swigregister(AllocShares)

class ProcessCode(CharField):
    """Proxy of C++ FIX::ProcessCode class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessCode, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ProcessCode self) -> ProcessCode
        __init__(FIX::ProcessCode self, FIX::CHAR const & value) -> ProcessCode

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_ProcessCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ProcessCode
    __del__ = lambda self: None
ProcessCode_swigregister = _quickfix.ProcessCode_swigregister
ProcessCode_swigregister(ProcessCode)

class NoRpts(IntField):
    """Proxy of C++ FIX::NoRpts class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRpts, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoRpts, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoRpts self) -> NoRpts
        __init__(FIX::NoRpts self, FIX::INT const & value) -> NoRpts

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NoRpts(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoRpts
    __del__ = lambda self: None
NoRpts_swigregister = _quickfix.NoRpts_swigregister
NoRpts_swigregister(NoRpts)

class RptSeq(IntField):
    """Proxy of C++ FIX::RptSeq class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RptSeq, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RptSeq, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RptSeq self) -> RptSeq
        __init__(FIX::RptSeq self, FIX::INT const & value) -> RptSeq

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RptSeq(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RptSeq
    __del__ = lambda self: None
RptSeq_swigregister = _quickfix.RptSeq_swigregister
RptSeq_swigregister(RptSeq)

class CxlQty(DoubleField):
    """Proxy of C++ FIX::CxlQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CxlQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CxlQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CxlQty self) -> CxlQty
        __init__(FIX::CxlQty self, FIX::QTY const & value) -> CxlQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_CxlQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CxlQty
    __del__ = lambda self: None
CxlQty_swigregister = _quickfix.CxlQty_swigregister
CxlQty_swigregister(CxlQty)

class NoDlvyInst(IntField):
    """Proxy of C++ FIX::NoDlvyInst class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDlvyInst, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoDlvyInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoDlvyInst self) -> NoDlvyInst
        __init__(FIX::NoDlvyInst self, FIX::NUMINGROUP const & value) -> NoDlvyInst

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoDlvyInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoDlvyInst
    __del__ = lambda self: None
NoDlvyInst_swigregister = _quickfix.NoDlvyInst_swigregister
NoDlvyInst_swigregister(NoDlvyInst)

class DlvyInst(StringField):
    """Proxy of C++ FIX::DlvyInst class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DlvyInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DlvyInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DlvyInst self) -> DlvyInst
        __init__(FIX::DlvyInst self, FIX::STRING const & value) -> DlvyInst

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DlvyInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DlvyInst
    __del__ = lambda self: None
DlvyInst_swigregister = _quickfix.DlvyInst_swigregister
DlvyInst_swigregister(DlvyInst)

class AllocStatus(IntField):
    """Proxy of C++ FIX::AllocStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocStatus self) -> AllocStatus
        __init__(FIX::AllocStatus self, FIX::INT const & value) -> AllocStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocStatus
    __del__ = lambda self: None
AllocStatus_swigregister = _quickfix.AllocStatus_swigregister
AllocStatus_swigregister(AllocStatus)

class AllocRejCode(IntField):
    """Proxy of C++ FIX::AllocRejCode class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocRejCode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocRejCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocRejCode self) -> AllocRejCode
        __init__(FIX::AllocRejCode self, FIX::INT const & value) -> AllocRejCode

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocRejCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocRejCode
    __del__ = lambda self: None
AllocRejCode_swigregister = _quickfix.AllocRejCode_swigregister
AllocRejCode_swigregister(AllocRejCode)

class BrokerOfCredit(StringField):
    """Proxy of C++ FIX::BrokerOfCredit class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrokerOfCredit, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrokerOfCredit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BrokerOfCredit self) -> BrokerOfCredit
        __init__(FIX::BrokerOfCredit self, FIX::STRING const & value) -> BrokerOfCredit

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_BrokerOfCredit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BrokerOfCredit
    __del__ = lambda self: None
BrokerOfCredit_swigregister = _quickfix.BrokerOfCredit_swigregister
BrokerOfCredit_swigregister(BrokerOfCredit)

class EmailType(CharField):
    """Proxy of C++ FIX::EmailType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmailType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmailType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EmailType self) -> EmailType
        __init__(FIX::EmailType self, FIX::CHAR const & value) -> EmailType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_EmailType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EmailType
    __del__ = lambda self: None
EmailType_swigregister = _quickfix.EmailType_swigregister
EmailType_swigregister(EmailType)

class StopPx(DoubleField):
    """Proxy of C++ FIX::StopPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StopPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StopPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StopPx self) -> StopPx
        __init__(FIX::StopPx self, FIX::PRICE const & value) -> StopPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_StopPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StopPx
    __del__ = lambda self: None
StopPx_swigregister = _quickfix.StopPx_swigregister
StopPx_swigregister(StopPx)

class ExDestination(StringField):
    """Proxy of C++ FIX::ExDestination class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExDestination, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExDestination, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExDestination self) -> ExDestination
        __init__(FIX::ExDestination self, FIX::EXCHANGE const & value) -> ExDestination

        Parameters:
            value: FIX::EXCHANGE const &

        """
        this = _quickfix.new_ExDestination(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExDestination
    __del__ = lambda self: None
ExDestination_swigregister = _quickfix.ExDestination_swigregister
ExDestination_swigregister(ExDestination)

class CxlRejReason(IntField):
    """Proxy of C++ FIX::CxlRejReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CxlRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CxlRejReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CxlRejReason self) -> CxlRejReason
        __init__(FIX::CxlRejReason self, FIX::INT const & value) -> CxlRejReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CxlRejReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CxlRejReason
    __del__ = lambda self: None
CxlRejReason_swigregister = _quickfix.CxlRejReason_swigregister
CxlRejReason_swigregister(CxlRejReason)

class OrdRejReason(IntField):
    """Proxy of C++ FIX::OrdRejReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrdRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrdRejReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrdRejReason self) -> OrdRejReason
        __init__(FIX::OrdRejReason self, FIX::INT const & value) -> OrdRejReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_OrdRejReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrdRejReason
    __del__ = lambda self: None
OrdRejReason_swigregister = _quickfix.OrdRejReason_swigregister
OrdRejReason_swigregister(OrdRejReason)

class IOIQualifier(CharField):
    """Proxy of C++ FIX::IOIQualifier class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOIQualifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOIQualifier self) -> IOIQualifier
        __init__(FIX::IOIQualifier self, FIX::CHAR const & value) -> IOIQualifier

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_IOIQualifier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOIQualifier
    __del__ = lambda self: None
IOIQualifier_swigregister = _quickfix.IOIQualifier_swigregister
IOIQualifier_swigregister(IOIQualifier)

class WaveNo(StringField):
    """Proxy of C++ FIX::WaveNo class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveNo, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveNo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::WaveNo self) -> WaveNo
        __init__(FIX::WaveNo self, FIX::STRING const & value) -> WaveNo

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_WaveNo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_WaveNo
    __del__ = lambda self: None
WaveNo_swigregister = _quickfix.WaveNo_swigregister
WaveNo_swigregister(WaveNo)

class Issuer(StringField):
    """Proxy of C++ FIX::Issuer class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Issuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Issuer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Issuer self) -> Issuer
        __init__(FIX::Issuer self, FIX::STRING const & value) -> Issuer

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Issuer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Issuer
    __del__ = lambda self: None
Issuer_swigregister = _quickfix.Issuer_swigregister
Issuer_swigregister(Issuer)

class SecurityDesc(StringField):
    """Proxy of C++ FIX::SecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityDesc self) -> SecurityDesc
        __init__(FIX::SecurityDesc self, FIX::STRING const & value) -> SecurityDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityDesc
    __del__ = lambda self: None
SecurityDesc_swigregister = _quickfix.SecurityDesc_swigregister
SecurityDesc_swigregister(SecurityDesc)

class ClientID(StringField):
    """Proxy of C++ FIX::ClientID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClientID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ClientID self) -> ClientID
        __init__(FIX::ClientID self, FIX::STRING const & value) -> ClientID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ClientID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ClientID
    __del__ = lambda self: None
ClientID_swigregister = _quickfix.ClientID_swigregister
ClientID_swigregister(ClientID)

class MinQty(DoubleField):
    """Proxy of C++ FIX::MinQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MinQty self) -> MinQty
        __init__(FIX::MinQty self, FIX::QTY const & value) -> MinQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MinQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MinQty
    __del__ = lambda self: None
MinQty_swigregister = _quickfix.MinQty_swigregister
MinQty_swigregister(MinQty)

class MaxFloor(DoubleField):
    """Proxy of C++ FIX::MaxFloor class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxFloor, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxFloor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaxFloor self) -> MaxFloor
        __init__(FIX::MaxFloor self, FIX::QTY const & value) -> MaxFloor

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MaxFloor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaxFloor
    __del__ = lambda self: None
MaxFloor_swigregister = _quickfix.MaxFloor_swigregister
MaxFloor_swigregister(MaxFloor)

class ReportToExch(BoolField):
    """Proxy of C++ FIX::ReportToExch class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportToExch, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReportToExch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ReportToExch self) -> ReportToExch
        __init__(FIX::ReportToExch self, FIX::BOOLEAN const & value) -> ReportToExch

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_ReportToExch(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ReportToExch
    __del__ = lambda self: None
ReportToExch_swigregister = _quickfix.ReportToExch_swigregister
ReportToExch_swigregister(ReportToExch)

class LocateReqd(BoolField):
    """Proxy of C++ FIX::LocateReqd class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocateReqd, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocateReqd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LocateReqd self) -> LocateReqd
        __init__(FIX::LocateReqd self, FIX::BOOLEAN const & value) -> LocateReqd

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_LocateReqd(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LocateReqd
    __del__ = lambda self: None
LocateReqd_swigregister = _quickfix.LocateReqd_swigregister
LocateReqd_swigregister(LocateReqd)

class QuoteID(StringField):
    """Proxy of C++ FIX::QuoteID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteID self) -> QuoteID
        __init__(FIX::QuoteID self, FIX::STRING const & value) -> QuoteID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_QuoteID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteID
    __del__ = lambda self: None
QuoteID_swigregister = _quickfix.QuoteID_swigregister
QuoteID_swigregister(QuoteID)

class NetMoney(DoubleField):
    """Proxy of C++ FIX::NetMoney class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetMoney, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetMoney, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NetMoney self) -> NetMoney
        __init__(FIX::NetMoney self, FIX::AMT const & value) -> NetMoney

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_NetMoney(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NetMoney
    __del__ = lambda self: None
NetMoney_swigregister = _quickfix.NetMoney_swigregister
NetMoney_swigregister(NetMoney)

class SettlCurrAmt(DoubleField):
    """Proxy of C++ FIX::SettlCurrAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlCurrAmt self) -> SettlCurrAmt
        __init__(FIX::SettlCurrAmt self, FIX::AMT const & value) -> SettlCurrAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_SettlCurrAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlCurrAmt
    __del__ = lambda self: None
SettlCurrAmt_swigregister = _quickfix.SettlCurrAmt_swigregister
SettlCurrAmt_swigregister(SettlCurrAmt)

class SettlCurrency(StringField):
    """Proxy of C++ FIX::SettlCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlCurrency self) -> SettlCurrency
        __init__(FIX::SettlCurrency self, FIX::CURRENCY const & value) -> SettlCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_SettlCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlCurrency
    __del__ = lambda self: None
SettlCurrency_swigregister = _quickfix.SettlCurrency_swigregister
SettlCurrency_swigregister(SettlCurrency)

class ForexReq(BoolField):
    """Proxy of C++ FIX::ForexReq class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ForexReq, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ForexReq, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ForexReq self) -> ForexReq
        __init__(FIX::ForexReq self, FIX::BOOLEAN const & value) -> ForexReq

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_ForexReq(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ForexReq
    __del__ = lambda self: None
ForexReq_swigregister = _quickfix.ForexReq_swigregister
ForexReq_swigregister(ForexReq)

class NoExecs(IntField):
    """Proxy of C++ FIX::NoExecs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoExecs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoExecs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoExecs self) -> NoExecs
        __init__(FIX::NoExecs self, FIX::NUMINGROUP const & value) -> NoExecs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoExecs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoExecs
    __del__ = lambda self: None
NoExecs_swigregister = _quickfix.NoExecs_swigregister
NoExecs_swigregister(NoExecs)

class CxlType(CharField):
    """Proxy of C++ FIX::CxlType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CxlType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CxlType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CxlType self) -> CxlType
        __init__(FIX::CxlType self, FIX::CHAR const & value) -> CxlType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_CxlType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CxlType
    __del__ = lambda self: None
CxlType_swigregister = _quickfix.CxlType_swigregister
CxlType_swigregister(CxlType)

class ExpireTime(UtcTimeStampField):
    """Proxy of C++ FIX::ExpireTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpireTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpireTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExpireTime self) -> ExpireTime
        __init__(FIX::ExpireTime self, bool showMilliseconds) -> ExpireTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::ExpireTime self, FIX::UTCTIMESTAMP const & value) -> ExpireTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::ExpireTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> ExpireTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_ExpireTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExpireTime
    __del__ = lambda self: None
ExpireTime_swigregister = _quickfix.ExpireTime_swigregister
ExpireTime_swigregister(ExpireTime)

class DKReason(CharField):
    """Proxy of C++ FIX::DKReason class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DKReason, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DKReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DKReason self) -> DKReason
        __init__(FIX::DKReason self, FIX::CHAR const & value) -> DKReason

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DKReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DKReason
    __del__ = lambda self: None
DKReason_swigregister = _quickfix.DKReason_swigregister
DKReason_swigregister(DKReason)

class IOINaturalFlag(BoolField):
    """Proxy of C++ FIX::IOINaturalFlag class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOINaturalFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOINaturalFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOINaturalFlag self) -> IOINaturalFlag
        __init__(FIX::IOINaturalFlag self, FIX::BOOLEAN const & value) -> IOINaturalFlag

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_IOINaturalFlag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOINaturalFlag
    __del__ = lambda self: None
IOINaturalFlag_swigregister = _quickfix.IOINaturalFlag_swigregister
IOINaturalFlag_swigregister(IOINaturalFlag)

class QuoteReqID(StringField):
    """Proxy of C++ FIX::QuoteReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteReqID self) -> QuoteReqID
        __init__(FIX::QuoteReqID self, FIX::STRING const & value) -> QuoteReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_QuoteReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteReqID
    __del__ = lambda self: None
QuoteReqID_swigregister = _quickfix.QuoteReqID_swigregister
QuoteReqID_swigregister(QuoteReqID)

class BidPx(DoubleField):
    """Proxy of C++ FIX::BidPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidPx self) -> BidPx
        __init__(FIX::BidPx self, FIX::PRICE const & value) -> BidPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_BidPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidPx
    __del__ = lambda self: None
BidPx_swigregister = _quickfix.BidPx_swigregister
BidPx_swigregister(BidPx)

class OfferPx(DoubleField):
    """Proxy of C++ FIX::OfferPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OfferPx self) -> OfferPx
        __init__(FIX::OfferPx self, FIX::PRICE const & value) -> OfferPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_OfferPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OfferPx
    __del__ = lambda self: None
OfferPx_swigregister = _quickfix.OfferPx_swigregister
OfferPx_swigregister(OfferPx)

class BidSize(DoubleField):
    """Proxy of C++ FIX::BidSize class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidSize self) -> BidSize
        __init__(FIX::BidSize self, FIX::QTY const & value) -> BidSize

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_BidSize(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidSize
    __del__ = lambda self: None
BidSize_swigregister = _quickfix.BidSize_swigregister
BidSize_swigregister(BidSize)

class OfferSize(DoubleField):
    """Proxy of C++ FIX::OfferSize class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OfferSize self) -> OfferSize
        __init__(FIX::OfferSize self, FIX::QTY const & value) -> OfferSize

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_OfferSize(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OfferSize
    __del__ = lambda self: None
OfferSize_swigregister = _quickfix.OfferSize_swigregister
OfferSize_swigregister(OfferSize)

class NoMiscFees(IntField):
    """Proxy of C++ FIX::NoMiscFees class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMiscFees, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoMiscFees, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoMiscFees self) -> NoMiscFees
        __init__(FIX::NoMiscFees self, FIX::NUMINGROUP const & value) -> NoMiscFees

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoMiscFees(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoMiscFees
    __del__ = lambda self: None
NoMiscFees_swigregister = _quickfix.NoMiscFees_swigregister
NoMiscFees_swigregister(NoMiscFees)

class MiscFeeAmt(DoubleField):
    """Proxy of C++ FIX::MiscFeeAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MiscFeeAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MiscFeeAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MiscFeeAmt self) -> MiscFeeAmt
        __init__(FIX::MiscFeeAmt self, FIX::AMT const & value) -> MiscFeeAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_MiscFeeAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MiscFeeAmt
    __del__ = lambda self: None
MiscFeeAmt_swigregister = _quickfix.MiscFeeAmt_swigregister
MiscFeeAmt_swigregister(MiscFeeAmt)

class MiscFeeCurr(StringField):
    """Proxy of C++ FIX::MiscFeeCurr class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MiscFeeCurr, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MiscFeeCurr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MiscFeeCurr self) -> MiscFeeCurr
        __init__(FIX::MiscFeeCurr self, FIX::CURRENCY const & value) -> MiscFeeCurr

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_MiscFeeCurr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MiscFeeCurr
    __del__ = lambda self: None
MiscFeeCurr_swigregister = _quickfix.MiscFeeCurr_swigregister
MiscFeeCurr_swigregister(MiscFeeCurr)

class MiscFeeType(StringField):
    """Proxy of C++ FIX::MiscFeeType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MiscFeeType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MiscFeeType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MiscFeeType self) -> MiscFeeType
        __init__(FIX::MiscFeeType self, FIX::STRING const & value) -> MiscFeeType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MiscFeeType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MiscFeeType
    __del__ = lambda self: None
MiscFeeType_swigregister = _quickfix.MiscFeeType_swigregister
MiscFeeType_swigregister(MiscFeeType)

class PrevClosePx(DoubleField):
    """Proxy of C++ FIX::PrevClosePx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrevClosePx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrevClosePx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PrevClosePx self) -> PrevClosePx
        __init__(FIX::PrevClosePx self, FIX::PRICE const & value) -> PrevClosePx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_PrevClosePx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PrevClosePx
    __del__ = lambda self: None
PrevClosePx_swigregister = _quickfix.PrevClosePx_swigregister
PrevClosePx_swigregister(PrevClosePx)

class NoRelatedSym(IntField):
    """Proxy of C++ FIX::NoRelatedSym class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRelatedSym, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoRelatedSym, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoRelatedSym self) -> NoRelatedSym
        __init__(FIX::NoRelatedSym self, FIX::NUMINGROUP const & value) -> NoRelatedSym

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoRelatedSym(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoRelatedSym
    __del__ = lambda self: None
NoRelatedSym_swigregister = _quickfix.NoRelatedSym_swigregister
NoRelatedSym_swigregister(NoRelatedSym)

class Subject(StringField):
    """Proxy of C++ FIX::Subject class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Subject, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Subject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Subject self) -> Subject
        __init__(FIX::Subject self, FIX::STRING const & value) -> Subject

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Subject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Subject
    __del__ = lambda self: None
Subject_swigregister = _quickfix.Subject_swigregister
Subject_swigregister(Subject)

class Headline(StringField):
    """Proxy of C++ FIX::Headline class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Headline, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Headline, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Headline self) -> Headline
        __init__(FIX::Headline self, FIX::STRING const & value) -> Headline

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Headline(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Headline
    __del__ = lambda self: None
Headline_swigregister = _quickfix.Headline_swigregister
Headline_swigregister(Headline)

class URLLink(StringField):
    """Proxy of C++ FIX::URLLink class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, URLLink, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, URLLink, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::URLLink self) -> URLLink
        __init__(FIX::URLLink self, FIX::STRING const & value) -> URLLink

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_URLLink(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_URLLink
    __del__ = lambda self: None
URLLink_swigregister = _quickfix.URLLink_swigregister
URLLink_swigregister(URLLink)

class ExecType(CharField):
    """Proxy of C++ FIX::ExecType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecType self) -> ExecType
        __init__(FIX::ExecType self, FIX::CHAR const & value) -> ExecType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_ExecType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecType
    __del__ = lambda self: None
ExecType_swigregister = _quickfix.ExecType_swigregister
ExecType_swigregister(ExecType)

class LeavesQty(DoubleField):
    """Proxy of C++ FIX::LeavesQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LeavesQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LeavesQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LeavesQty self) -> LeavesQty
        __init__(FIX::LeavesQty self, FIX::QTY const & value) -> LeavesQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LeavesQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LeavesQty
    __del__ = lambda self: None
LeavesQty_swigregister = _quickfix.LeavesQty_swigregister
LeavesQty_swigregister(LeavesQty)

class CashOrderQty(DoubleField):
    """Proxy of C++ FIX::CashOrderQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashOrderQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashOrderQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashOrderQty self) -> CashOrderQty
        __init__(FIX::CashOrderQty self, FIX::QTY const & value) -> CashOrderQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_CashOrderQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashOrderQty
    __del__ = lambda self: None
CashOrderQty_swigregister = _quickfix.CashOrderQty_swigregister
CashOrderQty_swigregister(CashOrderQty)

class AllocAvgPx(DoubleField):
    """Proxy of C++ FIX::AllocAvgPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocAvgPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocAvgPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocAvgPx self) -> AllocAvgPx
        __init__(FIX::AllocAvgPx self, FIX::PRICE const & value) -> AllocAvgPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_AllocAvgPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocAvgPx
    __del__ = lambda self: None
AllocAvgPx_swigregister = _quickfix.AllocAvgPx_swigregister
AllocAvgPx_swigregister(AllocAvgPx)

class AllocNetMoney(DoubleField):
    """Proxy of C++ FIX::AllocNetMoney class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocNetMoney, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocNetMoney, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocNetMoney self) -> AllocNetMoney
        __init__(FIX::AllocNetMoney self, FIX::AMT const & value) -> AllocNetMoney

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_AllocNetMoney(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocNetMoney
    __del__ = lambda self: None
AllocNetMoney_swigregister = _quickfix.AllocNetMoney_swigregister
AllocNetMoney_swigregister(AllocNetMoney)

class SettlCurrFxRate(DoubleField):
    """Proxy of C++ FIX::SettlCurrFxRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrFxRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrFxRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlCurrFxRate self) -> SettlCurrFxRate
        __init__(FIX::SettlCurrFxRate self, FIX::FLOAT const & value) -> SettlCurrFxRate

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_SettlCurrFxRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlCurrFxRate
    __del__ = lambda self: None
SettlCurrFxRate_swigregister = _quickfix.SettlCurrFxRate_swigregister
SettlCurrFxRate_swigregister(SettlCurrFxRate)

class SettlCurrFxRateCalc(CharField):
    """Proxy of C++ FIX::SettlCurrFxRateCalc class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrFxRateCalc, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrFxRateCalc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlCurrFxRateCalc self) -> SettlCurrFxRateCalc
        __init__(FIX::SettlCurrFxRateCalc self, FIX::CHAR const & value) -> SettlCurrFxRateCalc

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SettlCurrFxRateCalc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlCurrFxRateCalc
    __del__ = lambda self: None
SettlCurrFxRateCalc_swigregister = _quickfix.SettlCurrFxRateCalc_swigregister
SettlCurrFxRateCalc_swigregister(SettlCurrFxRateCalc)

class NumDaysInterest(IntField):
    """Proxy of C++ FIX::NumDaysInterest class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumDaysInterest, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumDaysInterest, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NumDaysInterest self) -> NumDaysInterest
        __init__(FIX::NumDaysInterest self, FIX::INT const & value) -> NumDaysInterest

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NumDaysInterest(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NumDaysInterest
    __del__ = lambda self: None
NumDaysInterest_swigregister = _quickfix.NumDaysInterest_swigregister
NumDaysInterest_swigregister(NumDaysInterest)

class AccruedInterestRate(DoubleField):
    """Proxy of C++ FIX::AccruedInterestRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccruedInterestRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccruedInterestRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AccruedInterestRate self) -> AccruedInterestRate
        __init__(FIX::AccruedInterestRate self, FIX::PERCENTAGE const & value) -> AccruedInterestRate

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_AccruedInterestRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AccruedInterestRate
    __del__ = lambda self: None
AccruedInterestRate_swigregister = _quickfix.AccruedInterestRate_swigregister
AccruedInterestRate_swigregister(AccruedInterestRate)

class AccruedInterestAmt(DoubleField):
    """Proxy of C++ FIX::AccruedInterestAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccruedInterestAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccruedInterestAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AccruedInterestAmt self) -> AccruedInterestAmt
        __init__(FIX::AccruedInterestAmt self, FIX::AMT const & value) -> AccruedInterestAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_AccruedInterestAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AccruedInterestAmt
    __del__ = lambda self: None
AccruedInterestAmt_swigregister = _quickfix.AccruedInterestAmt_swigregister
AccruedInterestAmt_swigregister(AccruedInterestAmt)

class SettlInstMode(CharField):
    """Proxy of C++ FIX::SettlInstMode class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstMode, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlInstMode self) -> SettlInstMode
        __init__(FIX::SettlInstMode self, FIX::CHAR const & value) -> SettlInstMode

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SettlInstMode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlInstMode
    __del__ = lambda self: None
SettlInstMode_swigregister = _quickfix.SettlInstMode_swigregister
SettlInstMode_swigregister(SettlInstMode)

class AllocText(StringField):
    """Proxy of C++ FIX::AllocText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocText self) -> AllocText
        __init__(FIX::AllocText self, FIX::STRING const & value) -> AllocText

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AllocText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocText
    __del__ = lambda self: None
AllocText_swigregister = _quickfix.AllocText_swigregister
AllocText_swigregister(AllocText)

class SettlInstID(StringField):
    """Proxy of C++ FIX::SettlInstID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlInstID self) -> SettlInstID
        __init__(FIX::SettlInstID self, FIX::STRING const & value) -> SettlInstID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlInstID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlInstID
    __del__ = lambda self: None
SettlInstID_swigregister = _quickfix.SettlInstID_swigregister
SettlInstID_swigregister(SettlInstID)

class SettlInstTransType(CharField):
    """Proxy of C++ FIX::SettlInstTransType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlInstTransType self) -> SettlInstTransType
        __init__(FIX::SettlInstTransType self, FIX::CHAR const & value) -> SettlInstTransType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SettlInstTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlInstTransType
    __del__ = lambda self: None
SettlInstTransType_swigregister = _quickfix.SettlInstTransType_swigregister
SettlInstTransType_swigregister(SettlInstTransType)

class EmailThreadID(StringField):
    """Proxy of C++ FIX::EmailThreadID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmailThreadID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmailThreadID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EmailThreadID self) -> EmailThreadID
        __init__(FIX::EmailThreadID self, FIX::STRING const & value) -> EmailThreadID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_EmailThreadID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EmailThreadID
    __del__ = lambda self: None
EmailThreadID_swigregister = _quickfix.EmailThreadID_swigregister
EmailThreadID_swigregister(EmailThreadID)

class SettlInstSource(CharField):
    """Proxy of C++ FIX::SettlInstSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlInstSource self) -> SettlInstSource
        __init__(FIX::SettlInstSource self, FIX::CHAR const & value) -> SettlInstSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SettlInstSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlInstSource
    __del__ = lambda self: None
SettlInstSource_swigregister = _quickfix.SettlInstSource_swigregister
SettlInstSource_swigregister(SettlInstSource)

class SettlLocation(StringField):
    """Proxy of C++ FIX::SettlLocation class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlLocation self) -> SettlLocation
        __init__(FIX::SettlLocation self, FIX::STRING const & value) -> SettlLocation

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlLocation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlLocation
    __del__ = lambda self: None
SettlLocation_swigregister = _quickfix.SettlLocation_swigregister
SettlLocation_swigregister(SettlLocation)

class SecurityType(StringField):
    """Proxy of C++ FIX::SecurityType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityType self) -> SecurityType
        __init__(FIX::SecurityType self, FIX::STRING const & value) -> SecurityType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityType
    __del__ = lambda self: None
SecurityType_swigregister = _quickfix.SecurityType_swigregister
SecurityType_swigregister(SecurityType)

class EffectiveTime(UtcTimeStampField):
    """Proxy of C++ FIX::EffectiveTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffectiveTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EffectiveTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EffectiveTime self) -> EffectiveTime
        __init__(FIX::EffectiveTime self, bool showMilliseconds) -> EffectiveTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::EffectiveTime self, FIX::UTCTIMESTAMP const & value) -> EffectiveTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::EffectiveTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> EffectiveTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_EffectiveTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EffectiveTime
    __del__ = lambda self: None
EffectiveTime_swigregister = _quickfix.EffectiveTime_swigregister
EffectiveTime_swigregister(EffectiveTime)

class StandInstDbType(IntField):
    """Proxy of C++ FIX::StandInstDbType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandInstDbType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandInstDbType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StandInstDbType self) -> StandInstDbType
        __init__(FIX::StandInstDbType self, FIX::INT const & value) -> StandInstDbType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StandInstDbType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StandInstDbType
    __del__ = lambda self: None
StandInstDbType_swigregister = _quickfix.StandInstDbType_swigregister
StandInstDbType_swigregister(StandInstDbType)

class StandInstDbName(StringField):
    """Proxy of C++ FIX::StandInstDbName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandInstDbName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandInstDbName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StandInstDbName self) -> StandInstDbName
        __init__(FIX::StandInstDbName self, FIX::STRING const & value) -> StandInstDbName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StandInstDbName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StandInstDbName
    __del__ = lambda self: None
StandInstDbName_swigregister = _quickfix.StandInstDbName_swigregister
StandInstDbName_swigregister(StandInstDbName)

class StandInstDbID(StringField):
    """Proxy of C++ FIX::StandInstDbID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StandInstDbID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StandInstDbID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StandInstDbID self) -> StandInstDbID
        __init__(FIX::StandInstDbID self, FIX::STRING const & value) -> StandInstDbID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StandInstDbID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StandInstDbID
    __del__ = lambda self: None
StandInstDbID_swigregister = _quickfix.StandInstDbID_swigregister
StandInstDbID_swigregister(StandInstDbID)

class SettlDeliveryType(IntField):
    """Proxy of C++ FIX::SettlDeliveryType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlDeliveryType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlDeliveryType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlDeliveryType self) -> SettlDeliveryType
        __init__(FIX::SettlDeliveryType self, FIX::INT const & value) -> SettlDeliveryType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SettlDeliveryType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlDeliveryType
    __del__ = lambda self: None
SettlDeliveryType_swigregister = _quickfix.SettlDeliveryType_swigregister
SettlDeliveryType_swigregister(SettlDeliveryType)

class SettlDepositoryCode(StringField):
    """Proxy of C++ FIX::SettlDepositoryCode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlDepositoryCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlDepositoryCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlDepositoryCode self) -> SettlDepositoryCode
        __init__(FIX::SettlDepositoryCode self, FIX::STRING const & value) -> SettlDepositoryCode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlDepositoryCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlDepositoryCode
    __del__ = lambda self: None
SettlDepositoryCode_swigregister = _quickfix.SettlDepositoryCode_swigregister
SettlDepositoryCode_swigregister(SettlDepositoryCode)

class SettlBrkrCode(StringField):
    """Proxy of C++ FIX::SettlBrkrCode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlBrkrCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlBrkrCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlBrkrCode self) -> SettlBrkrCode
        __init__(FIX::SettlBrkrCode self, FIX::STRING const & value) -> SettlBrkrCode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlBrkrCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlBrkrCode
    __del__ = lambda self: None
SettlBrkrCode_swigregister = _quickfix.SettlBrkrCode_swigregister
SettlBrkrCode_swigregister(SettlBrkrCode)

class SettlInstCode(StringField):
    """Proxy of C++ FIX::SettlInstCode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlInstCode self) -> SettlInstCode
        __init__(FIX::SettlInstCode self, FIX::STRING const & value) -> SettlInstCode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlInstCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlInstCode
    __del__ = lambda self: None
SettlInstCode_swigregister = _quickfix.SettlInstCode_swigregister
SettlInstCode_swigregister(SettlInstCode)

class SecuritySettlAgentName(StringField):
    """Proxy of C++ FIX::SecuritySettlAgentName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecuritySettlAgentName self) -> SecuritySettlAgentName
        __init__(FIX::SecuritySettlAgentName self, FIX::STRING const & value) -> SecuritySettlAgentName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecuritySettlAgentName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentName
    __del__ = lambda self: None
SecuritySettlAgentName_swigregister = _quickfix.SecuritySettlAgentName_swigregister
SecuritySettlAgentName_swigregister(SecuritySettlAgentName)

class SecuritySettlAgentCode(StringField):
    """Proxy of C++ FIX::SecuritySettlAgentCode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecuritySettlAgentCode self) -> SecuritySettlAgentCode
        __init__(FIX::SecuritySettlAgentCode self, FIX::STRING const & value) -> SecuritySettlAgentCode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecuritySettlAgentCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentCode
    __del__ = lambda self: None
SecuritySettlAgentCode_swigregister = _quickfix.SecuritySettlAgentCode_swigregister
SecuritySettlAgentCode_swigregister(SecuritySettlAgentCode)

class SecuritySettlAgentAcctNum(StringField):
    """Proxy of C++ FIX::SecuritySettlAgentAcctNum class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentAcctNum, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentAcctNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecuritySettlAgentAcctNum self) -> SecuritySettlAgentAcctNum
        __init__(FIX::SecuritySettlAgentAcctNum self, FIX::STRING const & value) -> SecuritySettlAgentAcctNum

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecuritySettlAgentAcctNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentAcctNum
    __del__ = lambda self: None
SecuritySettlAgentAcctNum_swigregister = _quickfix.SecuritySettlAgentAcctNum_swigregister
SecuritySettlAgentAcctNum_swigregister(SecuritySettlAgentAcctNum)

class SecuritySettlAgentAcctName(StringField):
    """Proxy of C++ FIX::SecuritySettlAgentAcctName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentAcctName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentAcctName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecuritySettlAgentAcctName self) -> SecuritySettlAgentAcctName
        __init__(FIX::SecuritySettlAgentAcctName self, FIX::STRING const & value) -> SecuritySettlAgentAcctName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecuritySettlAgentAcctName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentAcctName
    __del__ = lambda self: None
SecuritySettlAgentAcctName_swigregister = _quickfix.SecuritySettlAgentAcctName_swigregister
SecuritySettlAgentAcctName_swigregister(SecuritySettlAgentAcctName)

class SecuritySettlAgentContactName(StringField):
    """Proxy of C++ FIX::SecuritySettlAgentContactName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentContactName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentContactName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecuritySettlAgentContactName self) -> SecuritySettlAgentContactName
        __init__(FIX::SecuritySettlAgentContactName self, FIX::STRING const & value) -> SecuritySettlAgentContactName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecuritySettlAgentContactName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentContactName
    __del__ = lambda self: None
SecuritySettlAgentContactName_swigregister = _quickfix.SecuritySettlAgentContactName_swigregister
SecuritySettlAgentContactName_swigregister(SecuritySettlAgentContactName)

class SecuritySettlAgentContactPhone(StringField):
    """Proxy of C++ FIX::SecuritySettlAgentContactPhone class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySettlAgentContactPhone, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySettlAgentContactPhone, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecuritySettlAgentContactPhone self) -> SecuritySettlAgentContactPhone
        __init__(FIX::SecuritySettlAgentContactPhone self, FIX::STRING const & value) -> SecuritySettlAgentContactPhone

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecuritySettlAgentContactPhone(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentContactPhone
    __del__ = lambda self: None
SecuritySettlAgentContactPhone_swigregister = _quickfix.SecuritySettlAgentContactPhone_swigregister
SecuritySettlAgentContactPhone_swigregister(SecuritySettlAgentContactPhone)

class CashSettlAgentName(StringField):
    """Proxy of C++ FIX::CashSettlAgentName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashSettlAgentName self) -> CashSettlAgentName
        __init__(FIX::CashSettlAgentName self, FIX::STRING const & value) -> CashSettlAgentName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashSettlAgentName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashSettlAgentName
    __del__ = lambda self: None
CashSettlAgentName_swigregister = _quickfix.CashSettlAgentName_swigregister
CashSettlAgentName_swigregister(CashSettlAgentName)

class CashSettlAgentCode(StringField):
    """Proxy of C++ FIX::CashSettlAgentCode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashSettlAgentCode self) -> CashSettlAgentCode
        __init__(FIX::CashSettlAgentCode self, FIX::STRING const & value) -> CashSettlAgentCode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashSettlAgentCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashSettlAgentCode
    __del__ = lambda self: None
CashSettlAgentCode_swigregister = _quickfix.CashSettlAgentCode_swigregister
CashSettlAgentCode_swigregister(CashSettlAgentCode)

class CashSettlAgentAcctNum(StringField):
    """Proxy of C++ FIX::CashSettlAgentAcctNum class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentAcctNum, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentAcctNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashSettlAgentAcctNum self) -> CashSettlAgentAcctNum
        __init__(FIX::CashSettlAgentAcctNum self, FIX::STRING const & value) -> CashSettlAgentAcctNum

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashSettlAgentAcctNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashSettlAgentAcctNum
    __del__ = lambda self: None
CashSettlAgentAcctNum_swigregister = _quickfix.CashSettlAgentAcctNum_swigregister
CashSettlAgentAcctNum_swigregister(CashSettlAgentAcctNum)

class CashSettlAgentAcctName(StringField):
    """Proxy of C++ FIX::CashSettlAgentAcctName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentAcctName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentAcctName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashSettlAgentAcctName self) -> CashSettlAgentAcctName
        __init__(FIX::CashSettlAgentAcctName self, FIX::STRING const & value) -> CashSettlAgentAcctName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashSettlAgentAcctName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashSettlAgentAcctName
    __del__ = lambda self: None
CashSettlAgentAcctName_swigregister = _quickfix.CashSettlAgentAcctName_swigregister
CashSettlAgentAcctName_swigregister(CashSettlAgentAcctName)

class CashSettlAgentContactName(StringField):
    """Proxy of C++ FIX::CashSettlAgentContactName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentContactName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentContactName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashSettlAgentContactName self) -> CashSettlAgentContactName
        __init__(FIX::CashSettlAgentContactName self, FIX::STRING const & value) -> CashSettlAgentContactName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashSettlAgentContactName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashSettlAgentContactName
    __del__ = lambda self: None
CashSettlAgentContactName_swigregister = _quickfix.CashSettlAgentContactName_swigregister
CashSettlAgentContactName_swigregister(CashSettlAgentContactName)

class CashSettlAgentContactPhone(StringField):
    """Proxy of C++ FIX::CashSettlAgentContactPhone class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashSettlAgentContactPhone, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashSettlAgentContactPhone, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashSettlAgentContactPhone self) -> CashSettlAgentContactPhone
        __init__(FIX::CashSettlAgentContactPhone self, FIX::STRING const & value) -> CashSettlAgentContactPhone

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashSettlAgentContactPhone(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashSettlAgentContactPhone
    __del__ = lambda self: None
CashSettlAgentContactPhone_swigregister = _quickfix.CashSettlAgentContactPhone_swigregister
CashSettlAgentContactPhone_swigregister(CashSettlAgentContactPhone)

class BidSpotRate(DoubleField):
    """Proxy of C++ FIX::BidSpotRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidSpotRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidSpotRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidSpotRate self) -> BidSpotRate
        __init__(FIX::BidSpotRate self, FIX::PRICE const & value) -> BidSpotRate

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_BidSpotRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidSpotRate
    __del__ = lambda self: None
BidSpotRate_swigregister = _quickfix.BidSpotRate_swigregister
BidSpotRate_swigregister(BidSpotRate)

class BidForwardPoints(DoubleField):
    """Proxy of C++ FIX::BidForwardPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidForwardPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidForwardPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidForwardPoints self) -> BidForwardPoints
        __init__(FIX::BidForwardPoints self, FIX::PRICEOFFSET const & value) -> BidForwardPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_BidForwardPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidForwardPoints
    __del__ = lambda self: None
BidForwardPoints_swigregister = _quickfix.BidForwardPoints_swigregister
BidForwardPoints_swigregister(BidForwardPoints)

class OfferSpotRate(DoubleField):
    """Proxy of C++ FIX::OfferSpotRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferSpotRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferSpotRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OfferSpotRate self) -> OfferSpotRate
        __init__(FIX::OfferSpotRate self, FIX::PRICE const & value) -> OfferSpotRate

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_OfferSpotRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OfferSpotRate
    __del__ = lambda self: None
OfferSpotRate_swigregister = _quickfix.OfferSpotRate_swigregister
OfferSpotRate_swigregister(OfferSpotRate)

class OfferForwardPoints(DoubleField):
    """Proxy of C++ FIX::OfferForwardPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferForwardPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferForwardPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OfferForwardPoints self) -> OfferForwardPoints
        __init__(FIX::OfferForwardPoints self, FIX::PRICEOFFSET const & value) -> OfferForwardPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_OfferForwardPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OfferForwardPoints
    __del__ = lambda self: None
OfferForwardPoints_swigregister = _quickfix.OfferForwardPoints_swigregister
OfferForwardPoints_swigregister(OfferForwardPoints)

class OrderQty2(DoubleField):
    """Proxy of C++ FIX::OrderQty2 class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderQty2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderQty2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderQty2 self) -> OrderQty2
        __init__(FIX::OrderQty2 self, FIX::QTY const & value) -> OrderQty2

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_OrderQty2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderQty2
    __del__ = lambda self: None
OrderQty2_swigregister = _quickfix.OrderQty2_swigregister
OrderQty2_swigregister(OrderQty2)

class FutSettDate2(StringField):
    """Proxy of C++ FIX::FutSettDate2 class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FutSettDate2, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FutSettDate2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FutSettDate2 self) -> FutSettDate2
        __init__(FIX::FutSettDate2 self, FIX::LOCALMKTDATE const & value) -> FutSettDate2

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_FutSettDate2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FutSettDate2
    __del__ = lambda self: None
FutSettDate2_swigregister = _quickfix.FutSettDate2_swigregister
FutSettDate2_swigregister(FutSettDate2)

class LastSpotRate(DoubleField):
    """Proxy of C++ FIX::LastSpotRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastSpotRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastSpotRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastSpotRate self) -> LastSpotRate
        __init__(FIX::LastSpotRate self, FIX::PRICE const & value) -> LastSpotRate

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LastSpotRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastSpotRate
    __del__ = lambda self: None
LastSpotRate_swigregister = _quickfix.LastSpotRate_swigregister
LastSpotRate_swigregister(LastSpotRate)

class LastForwardPoints(DoubleField):
    """Proxy of C++ FIX::LastForwardPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastForwardPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastForwardPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastForwardPoints self) -> LastForwardPoints
        __init__(FIX::LastForwardPoints self, FIX::PRICEOFFSET const & value) -> LastForwardPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_LastForwardPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastForwardPoints
    __del__ = lambda self: None
LastForwardPoints_swigregister = _quickfix.LastForwardPoints_swigregister
LastForwardPoints_swigregister(LastForwardPoints)

class AllocLinkID(StringField):
    """Proxy of C++ FIX::AllocLinkID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocLinkID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocLinkID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocLinkID self) -> AllocLinkID
        __init__(FIX::AllocLinkID self, FIX::STRING const & value) -> AllocLinkID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AllocLinkID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocLinkID
    __del__ = lambda self: None
AllocLinkID_swigregister = _quickfix.AllocLinkID_swigregister
AllocLinkID_swigregister(AllocLinkID)

class AllocLinkType(IntField):
    """Proxy of C++ FIX::AllocLinkType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocLinkType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocLinkType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocLinkType self) -> AllocLinkType
        __init__(FIX::AllocLinkType self, FIX::INT const & value) -> AllocLinkType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocLinkType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocLinkType
    __del__ = lambda self: None
AllocLinkType_swigregister = _quickfix.AllocLinkType_swigregister
AllocLinkType_swigregister(AllocLinkType)

class SecondaryOrderID(StringField):
    """Proxy of C++ FIX::SecondaryOrderID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryOrderID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryOrderID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryOrderID self) -> SecondaryOrderID
        __init__(FIX::SecondaryOrderID self, FIX::STRING const & value) -> SecondaryOrderID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecondaryOrderID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryOrderID
    __del__ = lambda self: None
SecondaryOrderID_swigregister = _quickfix.SecondaryOrderID_swigregister
SecondaryOrderID_swigregister(SecondaryOrderID)

class NoIOIQualifiers(IntField):
    """Proxy of C++ FIX::NoIOIQualifiers class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoIOIQualifiers, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoIOIQualifiers, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoIOIQualifiers self) -> NoIOIQualifiers
        __init__(FIX::NoIOIQualifiers self, FIX::NUMINGROUP const & value) -> NoIOIQualifiers

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoIOIQualifiers(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoIOIQualifiers
    __del__ = lambda self: None
NoIOIQualifiers_swigregister = _quickfix.NoIOIQualifiers_swigregister
NoIOIQualifiers_swigregister(NoIOIQualifiers)

class MaturityMonthYear(StringField):
    """Proxy of C++ FIX::MaturityMonthYear class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityMonthYear, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityMonthYear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaturityMonthYear self) -> MaturityMonthYear
        __init__(FIX::MaturityMonthYear self, FIX::MONTHYEAR const & value) -> MaturityMonthYear

        Parameters:
            value: FIX::MONTHYEAR const &

        """
        this = _quickfix.new_MaturityMonthYear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaturityMonthYear
    __del__ = lambda self: None
MaturityMonthYear_swigregister = _quickfix.MaturityMonthYear_swigregister
MaturityMonthYear_swigregister(MaturityMonthYear)

class PutOrCall(IntField):
    """Proxy of C++ FIX::PutOrCall class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PutOrCall, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PutOrCall, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PutOrCall self) -> PutOrCall
        __init__(FIX::PutOrCall self, FIX::INT const & value) -> PutOrCall

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PutOrCall(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PutOrCall
    __del__ = lambda self: None
PutOrCall_swigregister = _quickfix.PutOrCall_swigregister
PutOrCall_swigregister(PutOrCall)

class StrikePrice(DoubleField):
    """Proxy of C++ FIX::StrikePrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikePrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikePrice self) -> StrikePrice
        __init__(FIX::StrikePrice self, FIX::PRICE const & value) -> StrikePrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_StrikePrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikePrice
    __del__ = lambda self: None
StrikePrice_swigregister = _quickfix.StrikePrice_swigregister
StrikePrice_swigregister(StrikePrice)

class CoveredOrUncovered(IntField):
    """Proxy of C++ FIX::CoveredOrUncovered class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoveredOrUncovered, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoveredOrUncovered, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CoveredOrUncovered self) -> CoveredOrUncovered
        __init__(FIX::CoveredOrUncovered self, FIX::INT const & value) -> CoveredOrUncovered

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CoveredOrUncovered(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CoveredOrUncovered
    __del__ = lambda self: None
CoveredOrUncovered_swigregister = _quickfix.CoveredOrUncovered_swigregister
CoveredOrUncovered_swigregister(CoveredOrUncovered)

class CustomerOrFirm(IntField):
    """Proxy of C++ FIX::CustomerOrFirm class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomerOrFirm, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustomerOrFirm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CustomerOrFirm self) -> CustomerOrFirm
        __init__(FIX::CustomerOrFirm self, FIX::INT const & value) -> CustomerOrFirm

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CustomerOrFirm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CustomerOrFirm
    __del__ = lambda self: None
CustomerOrFirm_swigregister = _quickfix.CustomerOrFirm_swigregister
CustomerOrFirm_swigregister(CustomerOrFirm)

class MaturityDay(StringField):
    """Proxy of C++ FIX::MaturityDay class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityDay, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityDay, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaturityDay self) -> MaturityDay
        __init__(FIX::MaturityDay self, FIX::DAYOFMONTH const & value) -> MaturityDay

        Parameters:
            value: FIX::DAYOFMONTH const &

        """
        this = _quickfix.new_MaturityDay(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaturityDay
    __del__ = lambda self: None
MaturityDay_swigregister = _quickfix.MaturityDay_swigregister
MaturityDay_swigregister(MaturityDay)

class OptAttribute(CharField):
    """Proxy of C++ FIX::OptAttribute class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptAttribute, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OptAttribute self) -> OptAttribute
        __init__(FIX::OptAttribute self, FIX::CHAR const & value) -> OptAttribute

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_OptAttribute(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OptAttribute
    __del__ = lambda self: None
OptAttribute_swigregister = _quickfix.OptAttribute_swigregister
OptAttribute_swigregister(OptAttribute)

class SecurityExchange(StringField):
    """Proxy of C++ FIX::SecurityExchange class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityExchange, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityExchange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityExchange self) -> SecurityExchange
        __init__(FIX::SecurityExchange self, FIX::EXCHANGE const & value) -> SecurityExchange

        Parameters:
            value: FIX::EXCHANGE const &

        """
        this = _quickfix.new_SecurityExchange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityExchange
    __del__ = lambda self: None
SecurityExchange_swigregister = _quickfix.SecurityExchange_swigregister
SecurityExchange_swigregister(SecurityExchange)

class NotifyBrokerOfCredit(BoolField):
    """Proxy of C++ FIX::NotifyBrokerOfCredit class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotifyBrokerOfCredit, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotifyBrokerOfCredit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NotifyBrokerOfCredit self) -> NotifyBrokerOfCredit
        __init__(FIX::NotifyBrokerOfCredit self, FIX::BOOLEAN const & value) -> NotifyBrokerOfCredit

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_NotifyBrokerOfCredit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NotifyBrokerOfCredit
    __del__ = lambda self: None
NotifyBrokerOfCredit_swigregister = _quickfix.NotifyBrokerOfCredit_swigregister
NotifyBrokerOfCredit_swigregister(NotifyBrokerOfCredit)

class AllocHandlInst(IntField):
    """Proxy of C++ FIX::AllocHandlInst class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocHandlInst, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocHandlInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocHandlInst self) -> AllocHandlInst
        __init__(FIX::AllocHandlInst self, FIX::INT const & value) -> AllocHandlInst

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocHandlInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocHandlInst
    __del__ = lambda self: None
AllocHandlInst_swigregister = _quickfix.AllocHandlInst_swigregister
AllocHandlInst_swigregister(AllocHandlInst)

class MaxShow(DoubleField):
    """Proxy of C++ FIX::MaxShow class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxShow, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxShow, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaxShow self) -> MaxShow
        __init__(FIX::MaxShow self, FIX::QTY const & value) -> MaxShow

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MaxShow(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaxShow
    __del__ = lambda self: None
MaxShow_swigregister = _quickfix.MaxShow_swigregister
MaxShow_swigregister(MaxShow)

class PegDifference(DoubleField):
    """Proxy of C++ FIX::PegDifference class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegDifference, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegDifference, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegDifference self) -> PegDifference
        __init__(FIX::PegDifference self, FIX::PRICEOFFSET const & value) -> PegDifference

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_PegDifference(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegDifference
    __del__ = lambda self: None
PegDifference_swigregister = _quickfix.PegDifference_swigregister
PegDifference_swigregister(PegDifference)

class SendingDate(StringField):
    """Proxy of C++ FIX::SendingDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SendingDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SendingDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SendingDate self) -> SendingDate
        __init__(FIX::SendingDate self, FIX::LOCALMKTDATE const & value) -> SendingDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_SendingDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SendingDate
    __del__ = lambda self: None
SendingDate_swigregister = _quickfix.SendingDate_swigregister
SendingDate_swigregister(SendingDate)

class TotNoOrders(IntField):
    """Proxy of C++ FIX::TotNoOrders class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoOrders, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNoOrders self) -> TotNoOrders
        __init__(FIX::TotNoOrders self, FIX::INT const & value) -> TotNoOrders

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNoOrders(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNoOrders
    __del__ = lambda self: None
TotNoOrders_swigregister = _quickfix.TotNoOrders_swigregister
TotNoOrders_swigregister(TotNoOrders)

class SettlInstRefID(StringField):
    """Proxy of C++ FIX::SettlInstRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlInstRefID self) -> SettlInstRefID
        __init__(FIX::SettlInstRefID self, FIX::STRING const & value) -> SettlInstRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlInstRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlInstRefID
    __del__ = lambda self: None
SettlInstRefID_swigregister = _quickfix.SettlInstRefID_swigregister
SettlInstRefID_swigregister(SettlInstRefID)

class NoRoutingIDs(IntField):
    """Proxy of C++ FIX::NoRoutingIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRoutingIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoRoutingIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoRoutingIDs self) -> NoRoutingIDs
        __init__(FIX::NoRoutingIDs self, FIX::NUMINGROUP const & value) -> NoRoutingIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoRoutingIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoRoutingIDs
    __del__ = lambda self: None
NoRoutingIDs_swigregister = _quickfix.NoRoutingIDs_swigregister
NoRoutingIDs_swigregister(NoRoutingIDs)

class RoutingType(IntField):
    """Proxy of C++ FIX::RoutingType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RoutingType self) -> RoutingType
        __init__(FIX::RoutingType self, FIX::INT const & value) -> RoutingType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RoutingType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RoutingType
    __del__ = lambda self: None
RoutingType_swigregister = _quickfix.RoutingType_swigregister
RoutingType_swigregister(RoutingType)

class RoutingID(StringField):
    """Proxy of C++ FIX::RoutingID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RoutingID self) -> RoutingID
        __init__(FIX::RoutingID self, FIX::STRING const & value) -> RoutingID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RoutingID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RoutingID
    __del__ = lambda self: None
RoutingID_swigregister = _quickfix.RoutingID_swigregister
RoutingID_swigregister(RoutingID)

class SpreadToBenchmark(DoubleField):
    """Proxy of C++ FIX::SpreadToBenchmark class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpreadToBenchmark, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpreadToBenchmark, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SpreadToBenchmark self) -> SpreadToBenchmark
        __init__(FIX::SpreadToBenchmark self, FIX::PRICEOFFSET const & value) -> SpreadToBenchmark

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_SpreadToBenchmark(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SpreadToBenchmark
    __del__ = lambda self: None
SpreadToBenchmark_swigregister = _quickfix.SpreadToBenchmark_swigregister
SpreadToBenchmark_swigregister(SpreadToBenchmark)

class Benchmark(CharField):
    """Proxy of C++ FIX::Benchmark class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Benchmark, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Benchmark, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Benchmark self) -> Benchmark
        __init__(FIX::Benchmark self, FIX::CHAR const & value) -> Benchmark

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_Benchmark(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Benchmark
    __del__ = lambda self: None
Benchmark_swigregister = _quickfix.Benchmark_swigregister
Benchmark_swigregister(Benchmark)

class CouponRate(DoubleField):
    """Proxy of C++ FIX::CouponRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CouponRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CouponRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CouponRate self) -> CouponRate
        __init__(FIX::CouponRate self, FIX::PERCENTAGE const & value) -> CouponRate

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_CouponRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CouponRate
    __del__ = lambda self: None
CouponRate_swigregister = _quickfix.CouponRate_swigregister
CouponRate_swigregister(CouponRate)

class ContractMultiplier(DoubleField):
    """Proxy of C++ FIX::ContractMultiplier class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContractMultiplier, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContractMultiplier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContractMultiplier self) -> ContractMultiplier
        __init__(FIX::ContractMultiplier self, FIX::FLOAT const & value) -> ContractMultiplier

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_ContractMultiplier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContractMultiplier
    __del__ = lambda self: None
ContractMultiplier_swigregister = _quickfix.ContractMultiplier_swigregister
ContractMultiplier_swigregister(ContractMultiplier)

class MDReqID(StringField):
    """Proxy of C++ FIX::MDReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDReqID self) -> MDReqID
        __init__(FIX::MDReqID self, FIX::STRING const & value) -> MDReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MDReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDReqID
    __del__ = lambda self: None
MDReqID_swigregister = _quickfix.MDReqID_swigregister
MDReqID_swigregister(MDReqID)

class SubscriptionRequestType(CharField):
    """Proxy of C++ FIX::SubscriptionRequestType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriptionRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriptionRequestType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SubscriptionRequestType self) -> SubscriptionRequestType
        __init__(FIX::SubscriptionRequestType self, FIX::CHAR const & value) -> SubscriptionRequestType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SubscriptionRequestType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SubscriptionRequestType
    __del__ = lambda self: None
SubscriptionRequestType_swigregister = _quickfix.SubscriptionRequestType_swigregister
SubscriptionRequestType_swigregister(SubscriptionRequestType)

class MarketDepth(IntField):
    """Proxy of C++ FIX::MarketDepth class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketDepth, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketDepth, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MarketDepth self) -> MarketDepth
        __init__(FIX::MarketDepth self, FIX::INT const & value) -> MarketDepth

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MarketDepth(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MarketDepth
    __del__ = lambda self: None
MarketDepth_swigregister = _quickfix.MarketDepth_swigregister
MarketDepth_swigregister(MarketDepth)

class MDUpdateType(IntField):
    """Proxy of C++ FIX::MDUpdateType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDUpdateType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDUpdateType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDUpdateType self) -> MDUpdateType
        __init__(FIX::MDUpdateType self, FIX::INT const & value) -> MDUpdateType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MDUpdateType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDUpdateType
    __del__ = lambda self: None
MDUpdateType_swigregister = _quickfix.MDUpdateType_swigregister
MDUpdateType_swigregister(MDUpdateType)

class AggregatedBook(BoolField):
    """Proxy of C++ FIX::AggregatedBook class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggregatedBook, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AggregatedBook, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AggregatedBook self) -> AggregatedBook
        __init__(FIX::AggregatedBook self, FIX::BOOLEAN const & value) -> AggregatedBook

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_AggregatedBook(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AggregatedBook
    __del__ = lambda self: None
AggregatedBook_swigregister = _quickfix.AggregatedBook_swigregister
AggregatedBook_swigregister(AggregatedBook)

class NoMDEntryTypes(IntField):
    """Proxy of C++ FIX::NoMDEntryTypes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMDEntryTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoMDEntryTypes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoMDEntryTypes self) -> NoMDEntryTypes
        __init__(FIX::NoMDEntryTypes self, FIX::NUMINGROUP const & value) -> NoMDEntryTypes

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoMDEntryTypes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoMDEntryTypes
    __del__ = lambda self: None
NoMDEntryTypes_swigregister = _quickfix.NoMDEntryTypes_swigregister
NoMDEntryTypes_swigregister(NoMDEntryTypes)

class NoMDEntries(IntField):
    """Proxy of C++ FIX::NoMDEntries class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMDEntries, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoMDEntries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoMDEntries self) -> NoMDEntries
        __init__(FIX::NoMDEntries self, FIX::NUMINGROUP const & value) -> NoMDEntries

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoMDEntries(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoMDEntries
    __del__ = lambda self: None
NoMDEntries_swigregister = _quickfix.NoMDEntries_swigregister
NoMDEntries_swigregister(NoMDEntries)

class MDEntryType(CharField):
    """Proxy of C++ FIX::MDEntryType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntryType self) -> MDEntryType
        __init__(FIX::MDEntryType self, FIX::CHAR const & value) -> MDEntryType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_MDEntryType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntryType
    __del__ = lambda self: None
MDEntryType_swigregister = _quickfix.MDEntryType_swigregister
MDEntryType_swigregister(MDEntryType)

class MDEntryPx(DoubleField):
    """Proxy of C++ FIX::MDEntryPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntryPx self) -> MDEntryPx
        __init__(FIX::MDEntryPx self, FIX::PRICE const & value) -> MDEntryPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_MDEntryPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntryPx
    __del__ = lambda self: None
MDEntryPx_swigregister = _quickfix.MDEntryPx_swigregister
MDEntryPx_swigregister(MDEntryPx)

class MDEntrySize(DoubleField):
    """Proxy of C++ FIX::MDEntrySize class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntrySize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntrySize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntrySize self) -> MDEntrySize
        __init__(FIX::MDEntrySize self, FIX::QTY const & value) -> MDEntrySize

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MDEntrySize(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntrySize
    __del__ = lambda self: None
MDEntrySize_swigregister = _quickfix.MDEntrySize_swigregister
MDEntrySize_swigregister(MDEntrySize)

class MDEntryDate(UtcDateField):
    """Proxy of C++ FIX::MDEntryDate class"""
    __swig_setmethods__ = {}
    for _s in [UtcDateField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryDate, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcDateField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntryDate self) -> MDEntryDate
        __init__(FIX::MDEntryDate self, FIX::UTCDATEONLY const & value) -> MDEntryDate

        Parameters:
            value: FIX::UTCDATEONLY const &

        """
        this = _quickfix.new_MDEntryDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntryDate
    __del__ = lambda self: None
MDEntryDate_swigregister = _quickfix.MDEntryDate_swigregister
MDEntryDate_swigregister(MDEntryDate)

class MDEntryTime(UtcTimeOnlyField):
    """Proxy of C++ FIX::MDEntryTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeOnlyField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeOnlyField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntryTime self) -> MDEntryTime
        __init__(FIX::MDEntryTime self, FIX::UTCTIMEONLY const & value) -> MDEntryTime

        Parameters:
            value: FIX::UTCTIMEONLY const &

        """
        this = _quickfix.new_MDEntryTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntryTime
    __del__ = lambda self: None
MDEntryTime_swigregister = _quickfix.MDEntryTime_swigregister
MDEntryTime_swigregister(MDEntryTime)

class TickDirection(CharField):
    """Proxy of C++ FIX::TickDirection class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TickDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TickDirection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TickDirection self) -> TickDirection
        __init__(FIX::TickDirection self, FIX::CHAR const & value) -> TickDirection

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TickDirection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TickDirection
    __del__ = lambda self: None
TickDirection_swigregister = _quickfix.TickDirection_swigregister
TickDirection_swigregister(TickDirection)

class MDMkt(StringField):
    """Proxy of C++ FIX::MDMkt class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDMkt, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDMkt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDMkt self) -> MDMkt
        __init__(FIX::MDMkt self, FIX::EXCHANGE const & value) -> MDMkt

        Parameters:
            value: FIX::EXCHANGE const &

        """
        this = _quickfix.new_MDMkt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDMkt
    __del__ = lambda self: None
MDMkt_swigregister = _quickfix.MDMkt_swigregister
MDMkt_swigregister(MDMkt)

class QuoteCondition(StringField):
    """Proxy of C++ FIX::QuoteCondition class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteCondition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteCondition self) -> QuoteCondition
        __init__(FIX::QuoteCondition self, FIX::MULTIPLESTRINGVALUE const & value) -> QuoteCondition

        Parameters:
            value: FIX::MULTIPLESTRINGVALUE const &

        """
        this = _quickfix.new_QuoteCondition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteCondition
    __del__ = lambda self: None
QuoteCondition_swigregister = _quickfix.QuoteCondition_swigregister
QuoteCondition_swigregister(QuoteCondition)

class TradeCondition(StringField):
    """Proxy of C++ FIX::TradeCondition class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeCondition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeCondition self) -> TradeCondition
        __init__(FIX::TradeCondition self, FIX::MULTIPLESTRINGVALUE const & value) -> TradeCondition

        Parameters:
            value: FIX::MULTIPLESTRINGVALUE const &

        """
        this = _quickfix.new_TradeCondition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeCondition
    __del__ = lambda self: None
TradeCondition_swigregister = _quickfix.TradeCondition_swigregister
TradeCondition_swigregister(TradeCondition)

class MDEntryID(StringField):
    """Proxy of C++ FIX::MDEntryID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntryID self) -> MDEntryID
        __init__(FIX::MDEntryID self, FIX::STRING const & value) -> MDEntryID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MDEntryID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntryID
    __del__ = lambda self: None
MDEntryID_swigregister = _quickfix.MDEntryID_swigregister
MDEntryID_swigregister(MDEntryID)

class MDUpdateAction(CharField):
    """Proxy of C++ FIX::MDUpdateAction class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDUpdateAction, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDUpdateAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDUpdateAction self) -> MDUpdateAction
        __init__(FIX::MDUpdateAction self, FIX::CHAR const & value) -> MDUpdateAction

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_MDUpdateAction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDUpdateAction
    __del__ = lambda self: None
MDUpdateAction_swigregister = _quickfix.MDUpdateAction_swigregister
MDUpdateAction_swigregister(MDUpdateAction)

class MDEntryRefID(StringField):
    """Proxy of C++ FIX::MDEntryRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntryRefID self) -> MDEntryRefID
        __init__(FIX::MDEntryRefID self, FIX::STRING const & value) -> MDEntryRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MDEntryRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntryRefID
    __del__ = lambda self: None
MDEntryRefID_swigregister = _quickfix.MDEntryRefID_swigregister
MDEntryRefID_swigregister(MDEntryRefID)

class MDReqRejReason(CharField):
    """Proxy of C++ FIX::MDReqRejReason class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDReqRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDReqRejReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDReqRejReason self) -> MDReqRejReason
        __init__(FIX::MDReqRejReason self, FIX::CHAR const & value) -> MDReqRejReason

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_MDReqRejReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDReqRejReason
    __del__ = lambda self: None
MDReqRejReason_swigregister = _quickfix.MDReqRejReason_swigregister
MDReqRejReason_swigregister(MDReqRejReason)

class MDEntryOriginator(StringField):
    """Proxy of C++ FIX::MDEntryOriginator class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryOriginator, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryOriginator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntryOriginator self) -> MDEntryOriginator
        __init__(FIX::MDEntryOriginator self, FIX::STRING const & value) -> MDEntryOriginator

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MDEntryOriginator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntryOriginator
    __del__ = lambda self: None
MDEntryOriginator_swigregister = _quickfix.MDEntryOriginator_swigregister
MDEntryOriginator_swigregister(MDEntryOriginator)

class LocationID(StringField):
    """Proxy of C++ FIX::LocationID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocationID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocationID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LocationID self) -> LocationID
        __init__(FIX::LocationID self, FIX::STRING const & value) -> LocationID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LocationID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LocationID
    __del__ = lambda self: None
LocationID_swigregister = _quickfix.LocationID_swigregister
LocationID_swigregister(LocationID)

class DeskID(StringField):
    """Proxy of C++ FIX::DeskID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeskID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeskID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeskID self) -> DeskID
        __init__(FIX::DeskID self, FIX::STRING const & value) -> DeskID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DeskID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeskID
    __del__ = lambda self: None
DeskID_swigregister = _quickfix.DeskID_swigregister
DeskID_swigregister(DeskID)

class DeleteReason(CharField):
    """Proxy of C++ FIX::DeleteReason class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeleteReason, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeleteReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeleteReason self) -> DeleteReason
        __init__(FIX::DeleteReason self, FIX::CHAR const & value) -> DeleteReason

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DeleteReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeleteReason
    __del__ = lambda self: None
DeleteReason_swigregister = _quickfix.DeleteReason_swigregister
DeleteReason_swigregister(DeleteReason)

class OpenCloseSettleFlag(StringField):
    """Proxy of C++ FIX::OpenCloseSettleFlag class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenCloseSettleFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpenCloseSettleFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OpenCloseSettleFlag self) -> OpenCloseSettleFlag
        __init__(FIX::OpenCloseSettleFlag self, FIX::MULTIPLEVALUESTRING const & value) -> OpenCloseSettleFlag

        Parameters:
            value: FIX::MULTIPLEVALUESTRING const &

        """
        this = _quickfix.new_OpenCloseSettleFlag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OpenCloseSettleFlag
    __del__ = lambda self: None
OpenCloseSettleFlag_swigregister = _quickfix.OpenCloseSettleFlag_swigregister
OpenCloseSettleFlag_swigregister(OpenCloseSettleFlag)

class SellerDays(IntField):
    """Proxy of C++ FIX::SellerDays class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SellerDays, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SellerDays, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SellerDays self) -> SellerDays
        __init__(FIX::SellerDays self, FIX::INT const & value) -> SellerDays

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SellerDays(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SellerDays
    __del__ = lambda self: None
SellerDays_swigregister = _quickfix.SellerDays_swigregister
SellerDays_swigregister(SellerDays)

class MDEntryBuyer(StringField):
    """Proxy of C++ FIX::MDEntryBuyer class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryBuyer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryBuyer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntryBuyer self) -> MDEntryBuyer
        __init__(FIX::MDEntryBuyer self, FIX::STRING const & value) -> MDEntryBuyer

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MDEntryBuyer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntryBuyer
    __del__ = lambda self: None
MDEntryBuyer_swigregister = _quickfix.MDEntryBuyer_swigregister
MDEntryBuyer_swigregister(MDEntryBuyer)

class MDEntrySeller(StringField):
    """Proxy of C++ FIX::MDEntrySeller class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntrySeller, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntrySeller, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntrySeller self) -> MDEntrySeller
        __init__(FIX::MDEntrySeller self, FIX::STRING const & value) -> MDEntrySeller

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MDEntrySeller(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntrySeller
    __del__ = lambda self: None
MDEntrySeller_swigregister = _quickfix.MDEntrySeller_swigregister
MDEntrySeller_swigregister(MDEntrySeller)

class MDEntryPositionNo(IntField):
    """Proxy of C++ FIX::MDEntryPositionNo class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryPositionNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryPositionNo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntryPositionNo self) -> MDEntryPositionNo
        __init__(FIX::MDEntryPositionNo self, FIX::INT const & value) -> MDEntryPositionNo

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MDEntryPositionNo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntryPositionNo
    __del__ = lambda self: None
MDEntryPositionNo_swigregister = _quickfix.MDEntryPositionNo_swigregister
MDEntryPositionNo_swigregister(MDEntryPositionNo)

class FinancialStatus(StringField):
    """Proxy of C++ FIX::FinancialStatus class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FinancialStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FinancialStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FinancialStatus self) -> FinancialStatus
        __init__(FIX::FinancialStatus self, FIX::MULTIPLECHARVALUE const & value) -> FinancialStatus

        Parameters:
            value: FIX::MULTIPLECHARVALUE const &

        """
        this = _quickfix.new_FinancialStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FinancialStatus
    __del__ = lambda self: None
FinancialStatus_swigregister = _quickfix.FinancialStatus_swigregister
FinancialStatus_swigregister(FinancialStatus)

class CorporateAction(StringField):
    """Proxy of C++ FIX::CorporateAction class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CorporateAction, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CorporateAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CorporateAction self) -> CorporateAction
        __init__(FIX::CorporateAction self, FIX::MULTIPLECHARVALUE const & value) -> CorporateAction

        Parameters:
            value: FIX::MULTIPLECHARVALUE const &

        """
        this = _quickfix.new_CorporateAction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CorporateAction
    __del__ = lambda self: None
CorporateAction_swigregister = _quickfix.CorporateAction_swigregister
CorporateAction_swigregister(CorporateAction)

class DefBidSize(DoubleField):
    """Proxy of C++ FIX::DefBidSize class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefBidSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefBidSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DefBidSize self) -> DefBidSize
        __init__(FIX::DefBidSize self, FIX::QTY const & value) -> DefBidSize

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_DefBidSize(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DefBidSize
    __del__ = lambda self: None
DefBidSize_swigregister = _quickfix.DefBidSize_swigregister
DefBidSize_swigregister(DefBidSize)

class DefOfferSize(DoubleField):
    """Proxy of C++ FIX::DefOfferSize class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefOfferSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefOfferSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DefOfferSize self) -> DefOfferSize
        __init__(FIX::DefOfferSize self, FIX::QTY const & value) -> DefOfferSize

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_DefOfferSize(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DefOfferSize
    __del__ = lambda self: None
DefOfferSize_swigregister = _quickfix.DefOfferSize_swigregister
DefOfferSize_swigregister(DefOfferSize)

class NoQuoteEntries(IntField):
    """Proxy of C++ FIX::NoQuoteEntries class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoQuoteEntries, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoQuoteEntries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoQuoteEntries self) -> NoQuoteEntries
        __init__(FIX::NoQuoteEntries self, FIX::NUMINGROUP const & value) -> NoQuoteEntries

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoQuoteEntries(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoQuoteEntries
    __del__ = lambda self: None
NoQuoteEntries_swigregister = _quickfix.NoQuoteEntries_swigregister
NoQuoteEntries_swigregister(NoQuoteEntries)

class NoQuoteSets(IntField):
    """Proxy of C++ FIX::NoQuoteSets class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoQuoteSets, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoQuoteSets, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoQuoteSets self) -> NoQuoteSets
        __init__(FIX::NoQuoteSets self, FIX::NUMINGROUP const & value) -> NoQuoteSets

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoQuoteSets(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoQuoteSets
    __del__ = lambda self: None
NoQuoteSets_swigregister = _quickfix.NoQuoteSets_swigregister
NoQuoteSets_swigregister(NoQuoteSets)

class QuoteAckStatus(IntField):
    """Proxy of C++ FIX::QuoteAckStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteAckStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteAckStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteAckStatus self) -> QuoteAckStatus
        __init__(FIX::QuoteAckStatus self, FIX::INT const & value) -> QuoteAckStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteAckStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteAckStatus
    __del__ = lambda self: None
QuoteAckStatus_swigregister = _quickfix.QuoteAckStatus_swigregister
QuoteAckStatus_swigregister(QuoteAckStatus)

class QuoteCancelType(IntField):
    """Proxy of C++ FIX::QuoteCancelType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteCancelType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteCancelType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteCancelType self) -> QuoteCancelType
        __init__(FIX::QuoteCancelType self, FIX::INT const & value) -> QuoteCancelType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteCancelType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteCancelType
    __del__ = lambda self: None
QuoteCancelType_swigregister = _quickfix.QuoteCancelType_swigregister
QuoteCancelType_swigregister(QuoteCancelType)

class QuoteEntryID(StringField):
    """Proxy of C++ FIX::QuoteEntryID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteEntryID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteEntryID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteEntryID self) -> QuoteEntryID
        __init__(FIX::QuoteEntryID self, FIX::STRING const & value) -> QuoteEntryID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_QuoteEntryID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteEntryID
    __del__ = lambda self: None
QuoteEntryID_swigregister = _quickfix.QuoteEntryID_swigregister
QuoteEntryID_swigregister(QuoteEntryID)

class QuoteRejectReason(IntField):
    """Proxy of C++ FIX::QuoteRejectReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteRejectReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteRejectReason self) -> QuoteRejectReason
        __init__(FIX::QuoteRejectReason self, FIX::INT const & value) -> QuoteRejectReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteRejectReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteRejectReason
    __del__ = lambda self: None
QuoteRejectReason_swigregister = _quickfix.QuoteRejectReason_swigregister
QuoteRejectReason_swigregister(QuoteRejectReason)

class QuoteResponseLevel(IntField):
    """Proxy of C++ FIX::QuoteResponseLevel class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteResponseLevel, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteResponseLevel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteResponseLevel self) -> QuoteResponseLevel
        __init__(FIX::QuoteResponseLevel self, FIX::INT const & value) -> QuoteResponseLevel

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteResponseLevel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteResponseLevel
    __del__ = lambda self: None
QuoteResponseLevel_swigregister = _quickfix.QuoteResponseLevel_swigregister
QuoteResponseLevel_swigregister(QuoteResponseLevel)

class QuoteSetID(StringField):
    """Proxy of C++ FIX::QuoteSetID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteSetID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteSetID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteSetID self) -> QuoteSetID
        __init__(FIX::QuoteSetID self, FIX::STRING const & value) -> QuoteSetID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_QuoteSetID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteSetID
    __del__ = lambda self: None
QuoteSetID_swigregister = _quickfix.QuoteSetID_swigregister
QuoteSetID_swigregister(QuoteSetID)

class QuoteRequestType(IntField):
    """Proxy of C++ FIX::QuoteRequestType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteRequestType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteRequestType self) -> QuoteRequestType
        __init__(FIX::QuoteRequestType self, FIX::INT const & value) -> QuoteRequestType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteRequestType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteRequestType
    __del__ = lambda self: None
QuoteRequestType_swigregister = _quickfix.QuoteRequestType_swigregister
QuoteRequestType_swigregister(QuoteRequestType)

class TotQuoteEntries(IntField):
    """Proxy of C++ FIX::TotQuoteEntries class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotQuoteEntries, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotQuoteEntries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotQuoteEntries self) -> TotQuoteEntries
        __init__(FIX::TotQuoteEntries self, FIX::INT const & value) -> TotQuoteEntries

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotQuoteEntries(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotQuoteEntries
    __del__ = lambda self: None
TotQuoteEntries_swigregister = _quickfix.TotQuoteEntries_swigregister
TotQuoteEntries_swigregister(TotQuoteEntries)

class UnderlyingIDSource(StringField):
    """Proxy of C++ FIX::UnderlyingIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingIDSource self) -> UnderlyingIDSource
        __init__(FIX::UnderlyingIDSource self, FIX::STRING const & value) -> UnderlyingIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingIDSource
    __del__ = lambda self: None
UnderlyingIDSource_swigregister = _quickfix.UnderlyingIDSource_swigregister
UnderlyingIDSource_swigregister(UnderlyingIDSource)

class UnderlyingIssuer(StringField):
    """Proxy of C++ FIX::UnderlyingIssuer class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingIssuer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingIssuer self) -> UnderlyingIssuer
        __init__(FIX::UnderlyingIssuer self, FIX::STRING const & value) -> UnderlyingIssuer

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingIssuer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingIssuer
    __del__ = lambda self: None
UnderlyingIssuer_swigregister = _quickfix.UnderlyingIssuer_swigregister
UnderlyingIssuer_swigregister(UnderlyingIssuer)

class UnderlyingSecurityDesc(StringField):
    """Proxy of C++ FIX::UnderlyingSecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSecurityDesc self) -> UnderlyingSecurityDesc
        __init__(FIX::UnderlyingSecurityDesc self, FIX::STRING const & value) -> UnderlyingSecurityDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityDesc
    __del__ = lambda self: None
UnderlyingSecurityDesc_swigregister = _quickfix.UnderlyingSecurityDesc_swigregister
UnderlyingSecurityDesc_swigregister(UnderlyingSecurityDesc)

class UnderlyingSecurityExchange(StringField):
    """Proxy of C++ FIX::UnderlyingSecurityExchange class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityExchange, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityExchange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSecurityExchange self) -> UnderlyingSecurityExchange
        __init__(FIX::UnderlyingSecurityExchange self, FIX::EXCHANGE const & value) -> UnderlyingSecurityExchange

        Parameters:
            value: FIX::EXCHANGE const &

        """
        this = _quickfix.new_UnderlyingSecurityExchange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityExchange
    __del__ = lambda self: None
UnderlyingSecurityExchange_swigregister = _quickfix.UnderlyingSecurityExchange_swigregister
UnderlyingSecurityExchange_swigregister(UnderlyingSecurityExchange)

class UnderlyingSecurityID(StringField):
    """Proxy of C++ FIX::UnderlyingSecurityID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSecurityID self) -> UnderlyingSecurityID
        __init__(FIX::UnderlyingSecurityID self, FIX::STRING const & value) -> UnderlyingSecurityID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSecurityID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityID
    __del__ = lambda self: None
UnderlyingSecurityID_swigregister = _quickfix.UnderlyingSecurityID_swigregister
UnderlyingSecurityID_swigregister(UnderlyingSecurityID)

class UnderlyingSecurityType(StringField):
    """Proxy of C++ FIX::UnderlyingSecurityType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSecurityType self) -> UnderlyingSecurityType
        __init__(FIX::UnderlyingSecurityType self, FIX::STRING const & value) -> UnderlyingSecurityType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSecurityType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityType
    __del__ = lambda self: None
UnderlyingSecurityType_swigregister = _quickfix.UnderlyingSecurityType_swigregister
UnderlyingSecurityType_swigregister(UnderlyingSecurityType)

class UnderlyingSymbol(StringField):
    """Proxy of C++ FIX::UnderlyingSymbol class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSymbol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSymbol self) -> UnderlyingSymbol
        __init__(FIX::UnderlyingSymbol self, FIX::STRING const & value) -> UnderlyingSymbol

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSymbol(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSymbol
    __del__ = lambda self: None
UnderlyingSymbol_swigregister = _quickfix.UnderlyingSymbol_swigregister
UnderlyingSymbol_swigregister(UnderlyingSymbol)

class UnderlyingSymbolSfx(StringField):
    """Proxy of C++ FIX::UnderlyingSymbolSfx class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSymbolSfx, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSymbolSfx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSymbolSfx self) -> UnderlyingSymbolSfx
        __init__(FIX::UnderlyingSymbolSfx self, FIX::STRING const & value) -> UnderlyingSymbolSfx

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSymbolSfx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSymbolSfx
    __del__ = lambda self: None
UnderlyingSymbolSfx_swigregister = _quickfix.UnderlyingSymbolSfx_swigregister
UnderlyingSymbolSfx_swigregister(UnderlyingSymbolSfx)

class UnderlyingMaturityMonthYear(StringField):
    """Proxy of C++ FIX::UnderlyingMaturityMonthYear class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingMaturityMonthYear, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingMaturityMonthYear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingMaturityMonthYear self) -> UnderlyingMaturityMonthYear
        __init__(FIX::UnderlyingMaturityMonthYear self, FIX::MONTHYEAR const & value) -> UnderlyingMaturityMonthYear

        Parameters:
            value: FIX::MONTHYEAR const &

        """
        this = _quickfix.new_UnderlyingMaturityMonthYear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingMaturityMonthYear
    __del__ = lambda self: None
UnderlyingMaturityMonthYear_swigregister = _quickfix.UnderlyingMaturityMonthYear_swigregister
UnderlyingMaturityMonthYear_swigregister(UnderlyingMaturityMonthYear)

class UnderlyingMaturityDay(StringField):
    """Proxy of C++ FIX::UnderlyingMaturityDay class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingMaturityDay, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingMaturityDay, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingMaturityDay self) -> UnderlyingMaturityDay
        __init__(FIX::UnderlyingMaturityDay self, FIX::DAYOFMONTH const & value) -> UnderlyingMaturityDay

        Parameters:
            value: FIX::DAYOFMONTH const &

        """
        this = _quickfix.new_UnderlyingMaturityDay(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingMaturityDay
    __del__ = lambda self: None
UnderlyingMaturityDay_swigregister = _quickfix.UnderlyingMaturityDay_swigregister
UnderlyingMaturityDay_swigregister(UnderlyingMaturityDay)

class UnderlyingPutOrCall(IntField):
    """Proxy of C++ FIX::UnderlyingPutOrCall class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingPutOrCall, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingPutOrCall, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingPutOrCall self) -> UnderlyingPutOrCall
        __init__(FIX::UnderlyingPutOrCall self, FIX::INT const & value) -> UnderlyingPutOrCall

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingPutOrCall(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingPutOrCall
    __del__ = lambda self: None
UnderlyingPutOrCall_swigregister = _quickfix.UnderlyingPutOrCall_swigregister
UnderlyingPutOrCall_swigregister(UnderlyingPutOrCall)

class UnderlyingStrikePrice(DoubleField):
    """Proxy of C++ FIX::UnderlyingStrikePrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStrikePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStrikePrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingStrikePrice self) -> UnderlyingStrikePrice
        __init__(FIX::UnderlyingStrikePrice self, FIX::PRICE const & value) -> UnderlyingStrikePrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_UnderlyingStrikePrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingStrikePrice
    __del__ = lambda self: None
UnderlyingStrikePrice_swigregister = _quickfix.UnderlyingStrikePrice_swigregister
UnderlyingStrikePrice_swigregister(UnderlyingStrikePrice)

class UnderlyingOptAttribute(CharField):
    """Proxy of C++ FIX::UnderlyingOptAttribute class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingOptAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingOptAttribute, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingOptAttribute self) -> UnderlyingOptAttribute
        __init__(FIX::UnderlyingOptAttribute self, FIX::CHAR const & value) -> UnderlyingOptAttribute

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_UnderlyingOptAttribute(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingOptAttribute
    __del__ = lambda self: None
UnderlyingOptAttribute_swigregister = _quickfix.UnderlyingOptAttribute_swigregister
UnderlyingOptAttribute_swigregister(UnderlyingOptAttribute)

class UnderlyingCurrency(StringField):
    """Proxy of C++ FIX::UnderlyingCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCurrency self) -> UnderlyingCurrency
        __init__(FIX::UnderlyingCurrency self, FIX::CURRENCY const & value) -> UnderlyingCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_UnderlyingCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCurrency
    __del__ = lambda self: None
UnderlyingCurrency_swigregister = _quickfix.UnderlyingCurrency_swigregister
UnderlyingCurrency_swigregister(UnderlyingCurrency)

class RatioQty(DoubleField):
    """Proxy of C++ FIX::RatioQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RatioQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RatioQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RatioQty self) -> RatioQty
        __init__(FIX::RatioQty self, FIX::QTY const & value) -> RatioQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_RatioQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RatioQty
    __del__ = lambda self: None
RatioQty_swigregister = _quickfix.RatioQty_swigregister
RatioQty_swigregister(RatioQty)

class SecurityReqID(StringField):
    """Proxy of C++ FIX::SecurityReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityReqID self) -> SecurityReqID
        __init__(FIX::SecurityReqID self, FIX::STRING const & value) -> SecurityReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityReqID
    __del__ = lambda self: None
SecurityReqID_swigregister = _quickfix.SecurityReqID_swigregister
SecurityReqID_swigregister(SecurityReqID)

class SecurityRequestType(IntField):
    """Proxy of C++ FIX::SecurityRequestType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityRequestType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityRequestType self) -> SecurityRequestType
        __init__(FIX::SecurityRequestType self, FIX::INT const & value) -> SecurityRequestType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecurityRequestType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityRequestType
    __del__ = lambda self: None
SecurityRequestType_swigregister = _quickfix.SecurityRequestType_swigregister
SecurityRequestType_swigregister(SecurityRequestType)

class SecurityResponseID(StringField):
    """Proxy of C++ FIX::SecurityResponseID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityResponseID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityResponseID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityResponseID self) -> SecurityResponseID
        __init__(FIX::SecurityResponseID self, FIX::STRING const & value) -> SecurityResponseID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityResponseID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityResponseID
    __del__ = lambda self: None
SecurityResponseID_swigregister = _quickfix.SecurityResponseID_swigregister
SecurityResponseID_swigregister(SecurityResponseID)

class SecurityResponseType(IntField):
    """Proxy of C++ FIX::SecurityResponseType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityResponseType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityResponseType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityResponseType self) -> SecurityResponseType
        __init__(FIX::SecurityResponseType self, FIX::INT const & value) -> SecurityResponseType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecurityResponseType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityResponseType
    __del__ = lambda self: None
SecurityResponseType_swigregister = _quickfix.SecurityResponseType_swigregister
SecurityResponseType_swigregister(SecurityResponseType)

class SecurityStatusReqID(StringField):
    """Proxy of C++ FIX::SecurityStatusReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityStatusReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityStatusReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityStatusReqID self) -> SecurityStatusReqID
        __init__(FIX::SecurityStatusReqID self, FIX::STRING const & value) -> SecurityStatusReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityStatusReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityStatusReqID
    __del__ = lambda self: None
SecurityStatusReqID_swigregister = _quickfix.SecurityStatusReqID_swigregister
SecurityStatusReqID_swigregister(SecurityStatusReqID)

class UnsolicitedIndicator(BoolField):
    """Proxy of C++ FIX::UnsolicitedIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsolicitedIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnsolicitedIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnsolicitedIndicator self) -> UnsolicitedIndicator
        __init__(FIX::UnsolicitedIndicator self, FIX::BOOLEAN const & value) -> UnsolicitedIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_UnsolicitedIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnsolicitedIndicator
    __del__ = lambda self: None
UnsolicitedIndicator_swigregister = _quickfix.UnsolicitedIndicator_swigregister
UnsolicitedIndicator_swigregister(UnsolicitedIndicator)

class SecurityTradingStatus(IntField):
    """Proxy of C++ FIX::SecurityTradingStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityTradingStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityTradingStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityTradingStatus self) -> SecurityTradingStatus
        __init__(FIX::SecurityTradingStatus self, FIX::INT const & value) -> SecurityTradingStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecurityTradingStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityTradingStatus
    __del__ = lambda self: None
SecurityTradingStatus_swigregister = _quickfix.SecurityTradingStatus_swigregister
SecurityTradingStatus_swigregister(SecurityTradingStatus)

class HaltReasonChar(CharField):
    """Proxy of C++ FIX::HaltReasonChar class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaltReasonChar, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaltReasonChar, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::HaltReasonChar self) -> HaltReasonChar
        __init__(FIX::HaltReasonChar self, FIX::CHAR const & value) -> HaltReasonChar

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_HaltReasonChar(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_HaltReasonChar
    __del__ = lambda self: None
HaltReasonChar_swigregister = _quickfix.HaltReasonChar_swigregister
HaltReasonChar_swigregister(HaltReasonChar)

class InViewOfCommon(BoolField):
    """Proxy of C++ FIX::InViewOfCommon class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InViewOfCommon, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InViewOfCommon, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InViewOfCommon self) -> InViewOfCommon
        __init__(FIX::InViewOfCommon self, FIX::BOOLEAN const & value) -> InViewOfCommon

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_InViewOfCommon(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InViewOfCommon
    __del__ = lambda self: None
InViewOfCommon_swigregister = _quickfix.InViewOfCommon_swigregister
InViewOfCommon_swigregister(InViewOfCommon)

class DueToRelated(BoolField):
    """Proxy of C++ FIX::DueToRelated class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DueToRelated, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DueToRelated, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DueToRelated self) -> DueToRelated
        __init__(FIX::DueToRelated self, FIX::BOOLEAN const & value) -> DueToRelated

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_DueToRelated(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DueToRelated
    __del__ = lambda self: None
DueToRelated_swigregister = _quickfix.DueToRelated_swigregister
DueToRelated_swigregister(DueToRelated)

class BuyVolume(DoubleField):
    """Proxy of C++ FIX::BuyVolume class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuyVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BuyVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BuyVolume self) -> BuyVolume
        __init__(FIX::BuyVolume self, FIX::QTY const & value) -> BuyVolume

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_BuyVolume(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BuyVolume
    __del__ = lambda self: None
BuyVolume_swigregister = _quickfix.BuyVolume_swigregister
BuyVolume_swigregister(BuyVolume)

class SellVolume(DoubleField):
    """Proxy of C++ FIX::SellVolume class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SellVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SellVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SellVolume self) -> SellVolume
        __init__(FIX::SellVolume self, FIX::QTY const & value) -> SellVolume

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_SellVolume(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SellVolume
    __del__ = lambda self: None
SellVolume_swigregister = _quickfix.SellVolume_swigregister
SellVolume_swigregister(SellVolume)

class HighPx(DoubleField):
    """Proxy of C++ FIX::HighPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HighPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HighPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::HighPx self) -> HighPx
        __init__(FIX::HighPx self, FIX::PRICE const & value) -> HighPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_HighPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_HighPx
    __del__ = lambda self: None
HighPx_swigregister = _quickfix.HighPx_swigregister
HighPx_swigregister(HighPx)

class LowPx(DoubleField):
    """Proxy of C++ FIX::LowPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LowPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LowPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LowPx self) -> LowPx
        __init__(FIX::LowPx self, FIX::PRICE const & value) -> LowPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LowPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LowPx
    __del__ = lambda self: None
LowPx_swigregister = _quickfix.LowPx_swigregister
LowPx_swigregister(LowPx)

class Adjustment(IntField):
    """Proxy of C++ FIX::Adjustment class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Adjustment, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Adjustment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Adjustment self) -> Adjustment
        __init__(FIX::Adjustment self, FIX::INT const & value) -> Adjustment

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_Adjustment(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Adjustment
    __del__ = lambda self: None
Adjustment_swigregister = _quickfix.Adjustment_swigregister
Adjustment_swigregister(Adjustment)

class TradSesReqID(StringField):
    """Proxy of C++ FIX::TradSesReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesReqID self) -> TradSesReqID
        __init__(FIX::TradSesReqID self, FIX::STRING const & value) -> TradSesReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradSesReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesReqID
    __del__ = lambda self: None
TradSesReqID_swigregister = _quickfix.TradSesReqID_swigregister
TradSesReqID_swigregister(TradSesReqID)

class TradingSessionID(StringField):
    """Proxy of C++ FIX::TradingSessionID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradingSessionID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradingSessionID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradingSessionID self) -> TradingSessionID
        __init__(FIX::TradingSessionID self, FIX::STRING const & value) -> TradingSessionID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradingSessionID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradingSessionID
    __del__ = lambda self: None
TradingSessionID_swigregister = _quickfix.TradingSessionID_swigregister
TradingSessionID_swigregister(TradingSessionID)

class ContraTrader(StringField):
    """Proxy of C++ FIX::ContraTrader class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraTrader, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContraTrader, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContraTrader self) -> ContraTrader
        __init__(FIX::ContraTrader self, FIX::STRING const & value) -> ContraTrader

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ContraTrader(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContraTrader
    __del__ = lambda self: None
ContraTrader_swigregister = _quickfix.ContraTrader_swigregister
ContraTrader_swigregister(ContraTrader)

class TradSesMethod(IntField):
    """Proxy of C++ FIX::TradSesMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesMethod self) -> TradSesMethod
        __init__(FIX::TradSesMethod self, FIX::INT const & value) -> TradSesMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradSesMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesMethod
    __del__ = lambda self: None
TradSesMethod_swigregister = _quickfix.TradSesMethod_swigregister
TradSesMethod_swigregister(TradSesMethod)

class TradSesMode(IntField):
    """Proxy of C++ FIX::TradSesMode class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesMode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesMode self) -> TradSesMode
        __init__(FIX::TradSesMode self, FIX::INT const & value) -> TradSesMode

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradSesMode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesMode
    __del__ = lambda self: None
TradSesMode_swigregister = _quickfix.TradSesMode_swigregister
TradSesMode_swigregister(TradSesMode)

class TradSesStatus(IntField):
    """Proxy of C++ FIX::TradSesStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesStatus self) -> TradSesStatus
        __init__(FIX::TradSesStatus self, FIX::INT const & value) -> TradSesStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradSesStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesStatus
    __del__ = lambda self: None
TradSesStatus_swigregister = _quickfix.TradSesStatus_swigregister
TradSesStatus_swigregister(TradSesStatus)

class TradSesStartTime(UtcTimeStampField):
    """Proxy of C++ FIX::TradSesStartTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesStartTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesStartTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesStartTime self) -> TradSesStartTime
        __init__(FIX::TradSesStartTime self, bool showMilliseconds) -> TradSesStartTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::TradSesStartTime self, FIX::UTCTIMESTAMP const & value) -> TradSesStartTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::TradSesStartTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> TradSesStartTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_TradSesStartTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesStartTime
    __del__ = lambda self: None
TradSesStartTime_swigregister = _quickfix.TradSesStartTime_swigregister
TradSesStartTime_swigregister(TradSesStartTime)

class TradSesOpenTime(UtcTimeStampField):
    """Proxy of C++ FIX::TradSesOpenTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesOpenTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesOpenTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesOpenTime self) -> TradSesOpenTime
        __init__(FIX::TradSesOpenTime self, bool showMilliseconds) -> TradSesOpenTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::TradSesOpenTime self, FIX::UTCTIMESTAMP const & value) -> TradSesOpenTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::TradSesOpenTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> TradSesOpenTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_TradSesOpenTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesOpenTime
    __del__ = lambda self: None
TradSesOpenTime_swigregister = _quickfix.TradSesOpenTime_swigregister
TradSesOpenTime_swigregister(TradSesOpenTime)

class TradSesPreCloseTime(UtcTimeStampField):
    """Proxy of C++ FIX::TradSesPreCloseTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesPreCloseTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesPreCloseTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesPreCloseTime self) -> TradSesPreCloseTime
        __init__(FIX::TradSesPreCloseTime self, bool showMilliseconds) -> TradSesPreCloseTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::TradSesPreCloseTime self, FIX::UTCTIMESTAMP const & value) -> TradSesPreCloseTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::TradSesPreCloseTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> TradSesPreCloseTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_TradSesPreCloseTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesPreCloseTime
    __del__ = lambda self: None
TradSesPreCloseTime_swigregister = _quickfix.TradSesPreCloseTime_swigregister
TradSesPreCloseTime_swigregister(TradSesPreCloseTime)

class TradSesCloseTime(UtcTimeStampField):
    """Proxy of C++ FIX::TradSesCloseTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesCloseTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesCloseTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesCloseTime self) -> TradSesCloseTime
        __init__(FIX::TradSesCloseTime self, bool showMilliseconds) -> TradSesCloseTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::TradSesCloseTime self, FIX::UTCTIMESTAMP const & value) -> TradSesCloseTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::TradSesCloseTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> TradSesCloseTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_TradSesCloseTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesCloseTime
    __del__ = lambda self: None
TradSesCloseTime_swigregister = _quickfix.TradSesCloseTime_swigregister
TradSesCloseTime_swigregister(TradSesCloseTime)

class TradSesEndTime(UtcTimeStampField):
    """Proxy of C++ FIX::TradSesEndTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesEndTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesEndTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesEndTime self) -> TradSesEndTime
        __init__(FIX::TradSesEndTime self, bool showMilliseconds) -> TradSesEndTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::TradSesEndTime self, FIX::UTCTIMESTAMP const & value) -> TradSesEndTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::TradSesEndTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> TradSesEndTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_TradSesEndTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesEndTime
    __del__ = lambda self: None
TradSesEndTime_swigregister = _quickfix.TradSesEndTime_swigregister
TradSesEndTime_swigregister(TradSesEndTime)

class NumberOfOrders(IntField):
    """Proxy of C++ FIX::NumberOfOrders class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumberOfOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumberOfOrders, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NumberOfOrders self) -> NumberOfOrders
        __init__(FIX::NumberOfOrders self, FIX::INT const & value) -> NumberOfOrders

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NumberOfOrders(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NumberOfOrders
    __del__ = lambda self: None
NumberOfOrders_swigregister = _quickfix.NumberOfOrders_swigregister
NumberOfOrders_swigregister(NumberOfOrders)

class EncodedIssuerLen(IntField):
    """Proxy of C++ FIX::EncodedIssuerLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedIssuerLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedIssuerLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedIssuerLen self) -> EncodedIssuerLen
        __init__(FIX::EncodedIssuerLen self, FIX::LENGTH const & value) -> EncodedIssuerLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedIssuerLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedIssuerLen
    __del__ = lambda self: None
EncodedIssuerLen_swigregister = _quickfix.EncodedIssuerLen_swigregister
EncodedIssuerLen_swigregister(EncodedIssuerLen)

class EncodedIssuer(StringField):
    """Proxy of C++ FIX::EncodedIssuer class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedIssuer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedIssuer self) -> EncodedIssuer
        __init__(FIX::EncodedIssuer self, FIX::DATA const & value) -> EncodedIssuer

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedIssuer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedIssuer
    __del__ = lambda self: None
EncodedIssuer_swigregister = _quickfix.EncodedIssuer_swigregister
EncodedIssuer_swigregister(EncodedIssuer)

class EncodedSecurityDescLen(IntField):
    """Proxy of C++ FIX::EncodedSecurityDescLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedSecurityDescLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedSecurityDescLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedSecurityDescLen self) -> EncodedSecurityDescLen
        __init__(FIX::EncodedSecurityDescLen self, FIX::LENGTH const & value) -> EncodedSecurityDescLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedSecurityDescLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedSecurityDescLen
    __del__ = lambda self: None
EncodedSecurityDescLen_swigregister = _quickfix.EncodedSecurityDescLen_swigregister
EncodedSecurityDescLen_swigregister(EncodedSecurityDescLen)

class EncodedSecurityDesc(StringField):
    """Proxy of C++ FIX::EncodedSecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedSecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedSecurityDesc self) -> EncodedSecurityDesc
        __init__(FIX::EncodedSecurityDesc self, FIX::DATA const & value) -> EncodedSecurityDesc

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedSecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedSecurityDesc
    __del__ = lambda self: None
EncodedSecurityDesc_swigregister = _quickfix.EncodedSecurityDesc_swigregister
EncodedSecurityDesc_swigregister(EncodedSecurityDesc)

class EncodedListExecInstLen(IntField):
    """Proxy of C++ FIX::EncodedListExecInstLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedListExecInstLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedListExecInstLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedListExecInstLen self) -> EncodedListExecInstLen
        __init__(FIX::EncodedListExecInstLen self, FIX::LENGTH const & value) -> EncodedListExecInstLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedListExecInstLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedListExecInstLen
    __del__ = lambda self: None
EncodedListExecInstLen_swigregister = _quickfix.EncodedListExecInstLen_swigregister
EncodedListExecInstLen_swigregister(EncodedListExecInstLen)

class EncodedListExecInst(StringField):
    """Proxy of C++ FIX::EncodedListExecInst class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedListExecInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedListExecInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedListExecInst self) -> EncodedListExecInst
        __init__(FIX::EncodedListExecInst self, FIX::DATA const & value) -> EncodedListExecInst

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedListExecInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedListExecInst
    __del__ = lambda self: None
EncodedListExecInst_swigregister = _quickfix.EncodedListExecInst_swigregister
EncodedListExecInst_swigregister(EncodedListExecInst)

class EncodedSubjectLen(IntField):
    """Proxy of C++ FIX::EncodedSubjectLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedSubjectLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedSubjectLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedSubjectLen self) -> EncodedSubjectLen
        __init__(FIX::EncodedSubjectLen self, FIX::LENGTH const & value) -> EncodedSubjectLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedSubjectLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedSubjectLen
    __del__ = lambda self: None
EncodedSubjectLen_swigregister = _quickfix.EncodedSubjectLen_swigregister
EncodedSubjectLen_swigregister(EncodedSubjectLen)

class EncodedSubject(StringField):
    """Proxy of C++ FIX::EncodedSubject class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedSubject, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedSubject, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedSubject self) -> EncodedSubject
        __init__(FIX::EncodedSubject self, FIX::DATA const & value) -> EncodedSubject

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedSubject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedSubject
    __del__ = lambda self: None
EncodedSubject_swigregister = _quickfix.EncodedSubject_swigregister
EncodedSubject_swigregister(EncodedSubject)

class EncodedHeadlineLen(IntField):
    """Proxy of C++ FIX::EncodedHeadlineLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedHeadlineLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedHeadlineLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedHeadlineLen self) -> EncodedHeadlineLen
        __init__(FIX::EncodedHeadlineLen self, FIX::LENGTH const & value) -> EncodedHeadlineLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedHeadlineLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedHeadlineLen
    __del__ = lambda self: None
EncodedHeadlineLen_swigregister = _quickfix.EncodedHeadlineLen_swigregister
EncodedHeadlineLen_swigregister(EncodedHeadlineLen)

class EncodedHeadline(StringField):
    """Proxy of C++ FIX::EncodedHeadline class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedHeadline, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedHeadline, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedHeadline self) -> EncodedHeadline
        __init__(FIX::EncodedHeadline self, FIX::DATA const & value) -> EncodedHeadline

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedHeadline(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedHeadline
    __del__ = lambda self: None
EncodedHeadline_swigregister = _quickfix.EncodedHeadline_swigregister
EncodedHeadline_swigregister(EncodedHeadline)

class EncodedAllocTextLen(IntField):
    """Proxy of C++ FIX::EncodedAllocTextLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedAllocTextLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedAllocTextLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedAllocTextLen self) -> EncodedAllocTextLen
        __init__(FIX::EncodedAllocTextLen self, FIX::LENGTH const & value) -> EncodedAllocTextLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedAllocTextLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedAllocTextLen
    __del__ = lambda self: None
EncodedAllocTextLen_swigregister = _quickfix.EncodedAllocTextLen_swigregister
EncodedAllocTextLen_swigregister(EncodedAllocTextLen)

class EncodedAllocText(StringField):
    """Proxy of C++ FIX::EncodedAllocText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedAllocText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedAllocText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedAllocText self) -> EncodedAllocText
        __init__(FIX::EncodedAllocText self, FIX::DATA const & value) -> EncodedAllocText

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedAllocText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedAllocText
    __del__ = lambda self: None
EncodedAllocText_swigregister = _quickfix.EncodedAllocText_swigregister
EncodedAllocText_swigregister(EncodedAllocText)

class EncodedUnderlyingIssuerLen(IntField):
    """Proxy of C++ FIX::EncodedUnderlyingIssuerLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedUnderlyingIssuerLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedUnderlyingIssuerLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedUnderlyingIssuerLen self) -> EncodedUnderlyingIssuerLen
        __init__(FIX::EncodedUnderlyingIssuerLen self, FIX::LENGTH const & value) -> EncodedUnderlyingIssuerLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedUnderlyingIssuerLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedUnderlyingIssuerLen
    __del__ = lambda self: None
EncodedUnderlyingIssuerLen_swigregister = _quickfix.EncodedUnderlyingIssuerLen_swigregister
EncodedUnderlyingIssuerLen_swigregister(EncodedUnderlyingIssuerLen)

class EncodedUnderlyingIssuer(StringField):
    """Proxy of C++ FIX::EncodedUnderlyingIssuer class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedUnderlyingIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedUnderlyingIssuer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedUnderlyingIssuer self) -> EncodedUnderlyingIssuer
        __init__(FIX::EncodedUnderlyingIssuer self, FIX::DATA const & value) -> EncodedUnderlyingIssuer

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedUnderlyingIssuer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedUnderlyingIssuer
    __del__ = lambda self: None
EncodedUnderlyingIssuer_swigregister = _quickfix.EncodedUnderlyingIssuer_swigregister
EncodedUnderlyingIssuer_swigregister(EncodedUnderlyingIssuer)

class EncodedUnderlyingSecurityDescLen(IntField):
    """Proxy of C++ FIX::EncodedUnderlyingSecurityDescLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedUnderlyingSecurityDescLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedUnderlyingSecurityDescLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedUnderlyingSecurityDescLen self) -> EncodedUnderlyingSecurityDescLen
        __init__(FIX::EncodedUnderlyingSecurityDescLen self, FIX::LENGTH const & value) -> EncodedUnderlyingSecurityDescLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedUnderlyingSecurityDescLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedUnderlyingSecurityDescLen
    __del__ = lambda self: None
EncodedUnderlyingSecurityDescLen_swigregister = _quickfix.EncodedUnderlyingSecurityDescLen_swigregister
EncodedUnderlyingSecurityDescLen_swigregister(EncodedUnderlyingSecurityDescLen)

class EncodedUnderlyingSecurityDesc(StringField):
    """Proxy of C++ FIX::EncodedUnderlyingSecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedUnderlyingSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedUnderlyingSecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedUnderlyingSecurityDesc self) -> EncodedUnderlyingSecurityDesc
        __init__(FIX::EncodedUnderlyingSecurityDesc self, FIX::DATA const & value) -> EncodedUnderlyingSecurityDesc

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedUnderlyingSecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedUnderlyingSecurityDesc
    __del__ = lambda self: None
EncodedUnderlyingSecurityDesc_swigregister = _quickfix.EncodedUnderlyingSecurityDesc_swigregister
EncodedUnderlyingSecurityDesc_swigregister(EncodedUnderlyingSecurityDesc)

class AllocPrice(DoubleField):
    """Proxy of C++ FIX::AllocPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocPrice self) -> AllocPrice
        __init__(FIX::AllocPrice self, FIX::PRICE const & value) -> AllocPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_AllocPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocPrice
    __del__ = lambda self: None
AllocPrice_swigregister = _quickfix.AllocPrice_swigregister
AllocPrice_swigregister(AllocPrice)

class QuoteSetValidUntilTime(UtcTimeStampField):
    """Proxy of C++ FIX::QuoteSetValidUntilTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteSetValidUntilTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteSetValidUntilTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteSetValidUntilTime self) -> QuoteSetValidUntilTime
        __init__(FIX::QuoteSetValidUntilTime self, bool showMilliseconds) -> QuoteSetValidUntilTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::QuoteSetValidUntilTime self, FIX::UTCTIMESTAMP const & value) -> QuoteSetValidUntilTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::QuoteSetValidUntilTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> QuoteSetValidUntilTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_QuoteSetValidUntilTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteSetValidUntilTime
    __del__ = lambda self: None
QuoteSetValidUntilTime_swigregister = _quickfix.QuoteSetValidUntilTime_swigregister
QuoteSetValidUntilTime_swigregister(QuoteSetValidUntilTime)

class QuoteEntryRejectReason(IntField):
    """Proxy of C++ FIX::QuoteEntryRejectReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteEntryRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteEntryRejectReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteEntryRejectReason self) -> QuoteEntryRejectReason
        __init__(FIX::QuoteEntryRejectReason self, FIX::INT const & value) -> QuoteEntryRejectReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteEntryRejectReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteEntryRejectReason
    __del__ = lambda self: None
QuoteEntryRejectReason_swigregister = _quickfix.QuoteEntryRejectReason_swigregister
QuoteEntryRejectReason_swigregister(QuoteEntryRejectReason)

class OnBehalfOfSendingTime(UtcTimeStampField):
    """Proxy of C++ FIX::OnBehalfOfSendingTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OnBehalfOfSendingTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OnBehalfOfSendingTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OnBehalfOfSendingTime self) -> OnBehalfOfSendingTime
        __init__(FIX::OnBehalfOfSendingTime self, bool showMilliseconds) -> OnBehalfOfSendingTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::OnBehalfOfSendingTime self, FIX::UTCTIMESTAMP const & value) -> OnBehalfOfSendingTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::OnBehalfOfSendingTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> OnBehalfOfSendingTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_OnBehalfOfSendingTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OnBehalfOfSendingTime
    __del__ = lambda self: None
OnBehalfOfSendingTime_swigregister = _quickfix.OnBehalfOfSendingTime_swigregister
OnBehalfOfSendingTime_swigregister(OnBehalfOfSendingTime)

class BidRequestTransType(CharField):
    """Proxy of C++ FIX::BidRequestTransType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidRequestTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidRequestTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidRequestTransType self) -> BidRequestTransType
        __init__(FIX::BidRequestTransType self, FIX::CHAR const & value) -> BidRequestTransType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_BidRequestTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidRequestTransType
    __del__ = lambda self: None
BidRequestTransType_swigregister = _quickfix.BidRequestTransType_swigregister
BidRequestTransType_swigregister(BidRequestTransType)

class ContraBroker(StringField):
    """Proxy of C++ FIX::ContraBroker class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraBroker, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContraBroker, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContraBroker self) -> ContraBroker
        __init__(FIX::ContraBroker self, FIX::STRING const & value) -> ContraBroker

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ContraBroker(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContraBroker
    __del__ = lambda self: None
ContraBroker_swigregister = _quickfix.ContraBroker_swigregister
ContraBroker_swigregister(ContraBroker)

class ComplianceID(StringField):
    """Proxy of C++ FIX::ComplianceID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplianceID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplianceID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplianceID self) -> ComplianceID
        __init__(FIX::ComplianceID self, FIX::STRING const & value) -> ComplianceID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ComplianceID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplianceID
    __del__ = lambda self: None
ComplianceID_swigregister = _quickfix.ComplianceID_swigregister
ComplianceID_swigregister(ComplianceID)

class SolicitedFlag(BoolField):
    """Proxy of C++ FIX::SolicitedFlag class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolicitedFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SolicitedFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SolicitedFlag self) -> SolicitedFlag
        __init__(FIX::SolicitedFlag self, FIX::BOOLEAN const & value) -> SolicitedFlag

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_SolicitedFlag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SolicitedFlag
    __del__ = lambda self: None
SolicitedFlag_swigregister = _quickfix.SolicitedFlag_swigregister
SolicitedFlag_swigregister(SolicitedFlag)

class ExecRestatementReason(IntField):
    """Proxy of C++ FIX::ExecRestatementReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecRestatementReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecRestatementReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecRestatementReason self) -> ExecRestatementReason
        __init__(FIX::ExecRestatementReason self, FIX::INT const & value) -> ExecRestatementReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ExecRestatementReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecRestatementReason
    __del__ = lambda self: None
ExecRestatementReason_swigregister = _quickfix.ExecRestatementReason_swigregister
ExecRestatementReason_swigregister(ExecRestatementReason)

class BusinessRejectRefID(StringField):
    """Proxy of C++ FIX::BusinessRejectRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BusinessRejectRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BusinessRejectRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BusinessRejectRefID self) -> BusinessRejectRefID
        __init__(FIX::BusinessRejectRefID self, FIX::STRING const & value) -> BusinessRejectRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_BusinessRejectRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BusinessRejectRefID
    __del__ = lambda self: None
BusinessRejectRefID_swigregister = _quickfix.BusinessRejectRefID_swigregister
BusinessRejectRefID_swigregister(BusinessRejectRefID)

class BusinessRejectReason(IntField):
    """Proxy of C++ FIX::BusinessRejectReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BusinessRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BusinessRejectReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BusinessRejectReason self) -> BusinessRejectReason
        __init__(FIX::BusinessRejectReason self, FIX::INT const & value) -> BusinessRejectReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_BusinessRejectReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BusinessRejectReason
    __del__ = lambda self: None
BusinessRejectReason_swigregister = _quickfix.BusinessRejectReason_swigregister
BusinessRejectReason_swigregister(BusinessRejectReason)

class GrossTradeAmt(DoubleField):
    """Proxy of C++ FIX::GrossTradeAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GrossTradeAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GrossTradeAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::GrossTradeAmt self) -> GrossTradeAmt
        __init__(FIX::GrossTradeAmt self, FIX::AMT const & value) -> GrossTradeAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_GrossTradeAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_GrossTradeAmt
    __del__ = lambda self: None
GrossTradeAmt_swigregister = _quickfix.GrossTradeAmt_swigregister
GrossTradeAmt_swigregister(GrossTradeAmt)

class NoContraBrokers(IntField):
    """Proxy of C++ FIX::NoContraBrokers class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoContraBrokers, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoContraBrokers, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoContraBrokers self) -> NoContraBrokers
        __init__(FIX::NoContraBrokers self, FIX::NUMINGROUP const & value) -> NoContraBrokers

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoContraBrokers(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoContraBrokers
    __del__ = lambda self: None
NoContraBrokers_swigregister = _quickfix.NoContraBrokers_swigregister
NoContraBrokers_swigregister(NoContraBrokers)

class NoTradingSessions(IntField):
    """Proxy of C++ FIX::NoTradingSessions class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTradingSessions, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTradingSessions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoTradingSessions self) -> NoTradingSessions
        __init__(FIX::NoTradingSessions self, FIX::NUMINGROUP const & value) -> NoTradingSessions

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoTradingSessions(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoTradingSessions
    __del__ = lambda self: None
NoTradingSessions_swigregister = _quickfix.NoTradingSessions_swigregister
NoTradingSessions_swigregister(NoTradingSessions)

class TotalVolumeTraded(DoubleField):
    """Proxy of C++ FIX::TotalVolumeTraded class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalVolumeTraded, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalVolumeTraded, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotalVolumeTraded self) -> TotalVolumeTraded
        __init__(FIX::TotalVolumeTraded self, FIX::QTY const & value) -> TotalVolumeTraded

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_TotalVolumeTraded(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotalVolumeTraded
    __del__ = lambda self: None
TotalVolumeTraded_swigregister = _quickfix.TotalVolumeTraded_swigregister
TotalVolumeTraded_swigregister(TotalVolumeTraded)

class DiscretionInst(CharField):
    """Proxy of C++ FIX::DiscretionInst class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionInst, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DiscretionInst self) -> DiscretionInst
        __init__(FIX::DiscretionInst self, FIX::CHAR const & value) -> DiscretionInst

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DiscretionInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DiscretionInst
    __del__ = lambda self: None
DiscretionInst_swigregister = _quickfix.DiscretionInst_swigregister
DiscretionInst_swigregister(DiscretionInst)

class DiscretionOffset(DoubleField):
    """Proxy of C++ FIX::DiscretionOffset class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionOffset, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionOffset, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DiscretionOffset self) -> DiscretionOffset
        __init__(FIX::DiscretionOffset self, FIX::PRICEOFFSET const & value) -> DiscretionOffset

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_DiscretionOffset(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DiscretionOffset
    __del__ = lambda self: None
DiscretionOffset_swigregister = _quickfix.DiscretionOffset_swigregister
DiscretionOffset_swigregister(DiscretionOffset)

class BidID(StringField):
    """Proxy of C++ FIX::BidID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidID self) -> BidID
        __init__(FIX::BidID self, FIX::STRING const & value) -> BidID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_BidID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidID
    __del__ = lambda self: None
BidID_swigregister = _quickfix.BidID_swigregister
BidID_swigregister(BidID)

class ClientBidID(StringField):
    """Proxy of C++ FIX::ClientBidID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClientBidID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClientBidID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ClientBidID self) -> ClientBidID
        __init__(FIX::ClientBidID self, FIX::STRING const & value) -> ClientBidID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ClientBidID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ClientBidID
    __del__ = lambda self: None
ClientBidID_swigregister = _quickfix.ClientBidID_swigregister
ClientBidID_swigregister(ClientBidID)

class ListName(StringField):
    """Proxy of C++ FIX::ListName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListName self) -> ListName
        __init__(FIX::ListName self, FIX::STRING const & value) -> ListName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ListName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListName
    __del__ = lambda self: None
ListName_swigregister = _quickfix.ListName_swigregister
ListName_swigregister(ListName)

class TotalNumSecurities(IntField):
    """Proxy of C++ FIX::TotalNumSecurities class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalNumSecurities, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalNumSecurities, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotalNumSecurities self) -> TotalNumSecurities
        __init__(FIX::TotalNumSecurities self, FIX::INT const & value) -> TotalNumSecurities

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotalNumSecurities(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotalNumSecurities
    __del__ = lambda self: None
TotalNumSecurities_swigregister = _quickfix.TotalNumSecurities_swigregister
TotalNumSecurities_swigregister(TotalNumSecurities)

class BidType(IntField):
    """Proxy of C++ FIX::BidType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidType self) -> BidType
        __init__(FIX::BidType self, FIX::INT const & value) -> BidType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_BidType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidType
    __del__ = lambda self: None
BidType_swigregister = _quickfix.BidType_swigregister
BidType_swigregister(BidType)

class NumTickets(IntField):
    """Proxy of C++ FIX::NumTickets class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumTickets, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumTickets, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NumTickets self) -> NumTickets
        __init__(FIX::NumTickets self, FIX::INT const & value) -> NumTickets

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NumTickets(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NumTickets
    __del__ = lambda self: None
NumTickets_swigregister = _quickfix.NumTickets_swigregister
NumTickets_swigregister(NumTickets)

class SideValue1(DoubleField):
    """Proxy of C++ FIX::SideValue1 class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideValue1, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideValue1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideValue1 self) -> SideValue1
        __init__(FIX::SideValue1 self, FIX::AMT const & value) -> SideValue1

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_SideValue1(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideValue1
    __del__ = lambda self: None
SideValue1_swigregister = _quickfix.SideValue1_swigregister
SideValue1_swigregister(SideValue1)

class SideValue2(DoubleField):
    """Proxy of C++ FIX::SideValue2 class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideValue2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideValue2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideValue2 self) -> SideValue2
        __init__(FIX::SideValue2 self, FIX::AMT const & value) -> SideValue2

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_SideValue2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideValue2
    __del__ = lambda self: None
SideValue2_swigregister = _quickfix.SideValue2_swigregister
SideValue2_swigregister(SideValue2)

class NoBidDescriptors(IntField):
    """Proxy of C++ FIX::NoBidDescriptors class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoBidDescriptors, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoBidDescriptors, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoBidDescriptors self) -> NoBidDescriptors
        __init__(FIX::NoBidDescriptors self, FIX::NUMINGROUP const & value) -> NoBidDescriptors

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoBidDescriptors(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoBidDescriptors
    __del__ = lambda self: None
NoBidDescriptors_swigregister = _quickfix.NoBidDescriptors_swigregister
NoBidDescriptors_swigregister(NoBidDescriptors)

class BidDescriptorType(IntField):
    """Proxy of C++ FIX::BidDescriptorType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidDescriptorType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidDescriptorType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidDescriptorType self) -> BidDescriptorType
        __init__(FIX::BidDescriptorType self, FIX::INT const & value) -> BidDescriptorType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_BidDescriptorType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidDescriptorType
    __del__ = lambda self: None
BidDescriptorType_swigregister = _quickfix.BidDescriptorType_swigregister
BidDescriptorType_swigregister(BidDescriptorType)

class BidDescriptor(StringField):
    """Proxy of C++ FIX::BidDescriptor class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidDescriptor, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidDescriptor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidDescriptor self) -> BidDescriptor
        __init__(FIX::BidDescriptor self, FIX::STRING const & value) -> BidDescriptor

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_BidDescriptor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidDescriptor
    __del__ = lambda self: None
BidDescriptor_swigregister = _quickfix.BidDescriptor_swigregister
BidDescriptor_swigregister(BidDescriptor)

class SideValueInd(IntField):
    """Proxy of C++ FIX::SideValueInd class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideValueInd, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideValueInd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideValueInd self) -> SideValueInd
        __init__(FIX::SideValueInd self, FIX::INT const & value) -> SideValueInd

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SideValueInd(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideValueInd
    __del__ = lambda self: None
SideValueInd_swigregister = _quickfix.SideValueInd_swigregister
SideValueInd_swigregister(SideValueInd)

class LiquidityPctLow(DoubleField):
    """Proxy of C++ FIX::LiquidityPctLow class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiquidityPctLow, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiquidityPctLow, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LiquidityPctLow self) -> LiquidityPctLow
        __init__(FIX::LiquidityPctLow self, FIX::PERCENTAGE const & value) -> LiquidityPctLow

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_LiquidityPctLow(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LiquidityPctLow
    __del__ = lambda self: None
LiquidityPctLow_swigregister = _quickfix.LiquidityPctLow_swigregister
LiquidityPctLow_swigregister(LiquidityPctLow)

class LiquidityPctHigh(DoubleField):
    """Proxy of C++ FIX::LiquidityPctHigh class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiquidityPctHigh, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiquidityPctHigh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LiquidityPctHigh self) -> LiquidityPctHigh
        __init__(FIX::LiquidityPctHigh self, FIX::PERCENTAGE const & value) -> LiquidityPctHigh

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_LiquidityPctHigh(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LiquidityPctHigh
    __del__ = lambda self: None
LiquidityPctHigh_swigregister = _quickfix.LiquidityPctHigh_swigregister
LiquidityPctHigh_swigregister(LiquidityPctHigh)

class LiquidityValue(DoubleField):
    """Proxy of C++ FIX::LiquidityValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiquidityValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiquidityValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LiquidityValue self) -> LiquidityValue
        __init__(FIX::LiquidityValue self, FIX::AMT const & value) -> LiquidityValue

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_LiquidityValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LiquidityValue
    __del__ = lambda self: None
LiquidityValue_swigregister = _quickfix.LiquidityValue_swigregister
LiquidityValue_swigregister(LiquidityValue)

class EFPTrackingError(DoubleField):
    """Proxy of C++ FIX::EFPTrackingError class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EFPTrackingError, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EFPTrackingError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EFPTrackingError self) -> EFPTrackingError
        __init__(FIX::EFPTrackingError self, FIX::PERCENTAGE const & value) -> EFPTrackingError

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_EFPTrackingError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EFPTrackingError
    __del__ = lambda self: None
EFPTrackingError_swigregister = _quickfix.EFPTrackingError_swigregister
EFPTrackingError_swigregister(EFPTrackingError)

class FairValue(DoubleField):
    """Proxy of C++ FIX::FairValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FairValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FairValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FairValue self) -> FairValue
        __init__(FIX::FairValue self, FIX::AMT const & value) -> FairValue

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_FairValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FairValue
    __del__ = lambda self: None
FairValue_swigregister = _quickfix.FairValue_swigregister
FairValue_swigregister(FairValue)

class OutsideIndexPct(DoubleField):
    """Proxy of C++ FIX::OutsideIndexPct class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutsideIndexPct, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutsideIndexPct, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OutsideIndexPct self) -> OutsideIndexPct
        __init__(FIX::OutsideIndexPct self, FIX::PERCENTAGE const & value) -> OutsideIndexPct

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_OutsideIndexPct(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OutsideIndexPct
    __del__ = lambda self: None
OutsideIndexPct_swigregister = _quickfix.OutsideIndexPct_swigregister
OutsideIndexPct_swigregister(OutsideIndexPct)

class ValueOfFutures(DoubleField):
    """Proxy of C++ FIX::ValueOfFutures class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValueOfFutures, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ValueOfFutures, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ValueOfFutures self) -> ValueOfFutures
        __init__(FIX::ValueOfFutures self, FIX::AMT const & value) -> ValueOfFutures

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_ValueOfFutures(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ValueOfFutures
    __del__ = lambda self: None
ValueOfFutures_swigregister = _quickfix.ValueOfFutures_swigregister
ValueOfFutures_swigregister(ValueOfFutures)

class LiquidityIndType(IntField):
    """Proxy of C++ FIX::LiquidityIndType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiquidityIndType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiquidityIndType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LiquidityIndType self) -> LiquidityIndType
        __init__(FIX::LiquidityIndType self, FIX::INT const & value) -> LiquidityIndType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LiquidityIndType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LiquidityIndType
    __del__ = lambda self: None
LiquidityIndType_swigregister = _quickfix.LiquidityIndType_swigregister
LiquidityIndType_swigregister(LiquidityIndType)

class WtAverageLiquidity(DoubleField):
    """Proxy of C++ FIX::WtAverageLiquidity class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WtAverageLiquidity, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WtAverageLiquidity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::WtAverageLiquidity self) -> WtAverageLiquidity
        __init__(FIX::WtAverageLiquidity self, FIX::PERCENTAGE const & value) -> WtAverageLiquidity

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_WtAverageLiquidity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_WtAverageLiquidity
    __del__ = lambda self: None
WtAverageLiquidity_swigregister = _quickfix.WtAverageLiquidity_swigregister
WtAverageLiquidity_swigregister(WtAverageLiquidity)

class ExchangeForPhysical(BoolField):
    """Proxy of C++ FIX::ExchangeForPhysical class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeForPhysical, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeForPhysical, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExchangeForPhysical self) -> ExchangeForPhysical
        __init__(FIX::ExchangeForPhysical self, FIX::BOOLEAN const & value) -> ExchangeForPhysical

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_ExchangeForPhysical(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExchangeForPhysical
    __del__ = lambda self: None
ExchangeForPhysical_swigregister = _quickfix.ExchangeForPhysical_swigregister
ExchangeForPhysical_swigregister(ExchangeForPhysical)

class OutMainCntryUIndex(DoubleField):
    """Proxy of C++ FIX::OutMainCntryUIndex class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutMainCntryUIndex, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutMainCntryUIndex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OutMainCntryUIndex self) -> OutMainCntryUIndex
        __init__(FIX::OutMainCntryUIndex self, FIX::AMT const & value) -> OutMainCntryUIndex

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_OutMainCntryUIndex(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OutMainCntryUIndex
    __del__ = lambda self: None
OutMainCntryUIndex_swigregister = _quickfix.OutMainCntryUIndex_swigregister
OutMainCntryUIndex_swigregister(OutMainCntryUIndex)

class CrossPercent(DoubleField):
    """Proxy of C++ FIX::CrossPercent class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossPercent, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrossPercent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CrossPercent self) -> CrossPercent
        __init__(FIX::CrossPercent self, FIX::PERCENTAGE const & value) -> CrossPercent

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_CrossPercent(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CrossPercent
    __del__ = lambda self: None
CrossPercent_swigregister = _quickfix.CrossPercent_swigregister
CrossPercent_swigregister(CrossPercent)

class ProgRptReqs(IntField):
    """Proxy of C++ FIX::ProgRptReqs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgRptReqs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProgRptReqs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ProgRptReqs self) -> ProgRptReqs
        __init__(FIX::ProgRptReqs self, FIX::INT const & value) -> ProgRptReqs

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ProgRptReqs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ProgRptReqs
    __del__ = lambda self: None
ProgRptReqs_swigregister = _quickfix.ProgRptReqs_swigregister
ProgRptReqs_swigregister(ProgRptReqs)

class ProgPeriodInterval(IntField):
    """Proxy of C++ FIX::ProgPeriodInterval class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgPeriodInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProgPeriodInterval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ProgPeriodInterval self) -> ProgPeriodInterval
        __init__(FIX::ProgPeriodInterval self, FIX::INT const & value) -> ProgPeriodInterval

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ProgPeriodInterval(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ProgPeriodInterval
    __del__ = lambda self: None
ProgPeriodInterval_swigregister = _quickfix.ProgPeriodInterval_swigregister
ProgPeriodInterval_swigregister(ProgPeriodInterval)

class IncTaxInd(IntField):
    """Proxy of C++ FIX::IncTaxInd class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncTaxInd, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncTaxInd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IncTaxInd self) -> IncTaxInd
        __init__(FIX::IncTaxInd self, FIX::INT const & value) -> IncTaxInd

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_IncTaxInd(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IncTaxInd
    __del__ = lambda self: None
IncTaxInd_swigregister = _quickfix.IncTaxInd_swigregister
IncTaxInd_swigregister(IncTaxInd)

class NumBidders(IntField):
    """Proxy of C++ FIX::NumBidders class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumBidders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumBidders, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NumBidders self) -> NumBidders
        __init__(FIX::NumBidders self, FIX::INT const & value) -> NumBidders

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NumBidders(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NumBidders
    __del__ = lambda self: None
NumBidders_swigregister = _quickfix.NumBidders_swigregister
NumBidders_swigregister(NumBidders)

class TradeType(CharField):
    """Proxy of C++ FIX::TradeType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeType self) -> TradeType
        __init__(FIX::TradeType self, FIX::CHAR const & value) -> TradeType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TradeType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeType
    __del__ = lambda self: None
TradeType_swigregister = _quickfix.TradeType_swigregister
TradeType_swigregister(TradeType)

class BasisPxType(CharField):
    """Proxy of C++ FIX::BasisPxType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasisPxType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasisPxType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BasisPxType self) -> BasisPxType
        __init__(FIX::BasisPxType self, FIX::CHAR const & value) -> BasisPxType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_BasisPxType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BasisPxType
    __del__ = lambda self: None
BasisPxType_swigregister = _quickfix.BasisPxType_swigregister
BasisPxType_swigregister(BasisPxType)

class NoBidComponents(IntField):
    """Proxy of C++ FIX::NoBidComponents class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoBidComponents, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoBidComponents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoBidComponents self) -> NoBidComponents
        __init__(FIX::NoBidComponents self, FIX::NUMINGROUP const & value) -> NoBidComponents

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoBidComponents(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoBidComponents
    __del__ = lambda self: None
NoBidComponents_swigregister = _quickfix.NoBidComponents_swigregister
NoBidComponents_swigregister(NoBidComponents)

class Country(StringField):
    """Proxy of C++ FIX::Country class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Country, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Country, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Country self) -> Country
        __init__(FIX::Country self, FIX::COUNTRY const & value) -> Country

        Parameters:
            value: FIX::COUNTRY const &

        """
        this = _quickfix.new_Country(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Country
    __del__ = lambda self: None
Country_swigregister = _quickfix.Country_swigregister
Country_swigregister(Country)

class TotNoStrikes(IntField):
    """Proxy of C++ FIX::TotNoStrikes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoStrikes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoStrikes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNoStrikes self) -> TotNoStrikes
        __init__(FIX::TotNoStrikes self, FIX::INT const & value) -> TotNoStrikes

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNoStrikes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNoStrikes
    __del__ = lambda self: None
TotNoStrikes_swigregister = _quickfix.TotNoStrikes_swigregister
TotNoStrikes_swigregister(TotNoStrikes)

class PriceType(IntField):
    """Proxy of C++ FIX::PriceType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriceType self) -> PriceType
        __init__(FIX::PriceType self, FIX::INT const & value) -> PriceType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriceType
    __del__ = lambda self: None
PriceType_swigregister = _quickfix.PriceType_swigregister
PriceType_swigregister(PriceType)

class DayOrderQty(DoubleField):
    """Proxy of C++ FIX::DayOrderQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayOrderQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DayOrderQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DayOrderQty self) -> DayOrderQty
        __init__(FIX::DayOrderQty self, FIX::QTY const & value) -> DayOrderQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_DayOrderQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DayOrderQty
    __del__ = lambda self: None
DayOrderQty_swigregister = _quickfix.DayOrderQty_swigregister
DayOrderQty_swigregister(DayOrderQty)

class DayCumQty(DoubleField):
    """Proxy of C++ FIX::DayCumQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayCumQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DayCumQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DayCumQty self) -> DayCumQty
        __init__(FIX::DayCumQty self, FIX::QTY const & value) -> DayCumQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_DayCumQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DayCumQty
    __del__ = lambda self: None
DayCumQty_swigregister = _quickfix.DayCumQty_swigregister
DayCumQty_swigregister(DayCumQty)

class DayAvgPx(DoubleField):
    """Proxy of C++ FIX::DayAvgPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayAvgPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DayAvgPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DayAvgPx self) -> DayAvgPx
        __init__(FIX::DayAvgPx self, FIX::PRICE const & value) -> DayAvgPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_DayAvgPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DayAvgPx
    __del__ = lambda self: None
DayAvgPx_swigregister = _quickfix.DayAvgPx_swigregister
DayAvgPx_swigregister(DayAvgPx)

class GTBookingInst(IntField):
    """Proxy of C++ FIX::GTBookingInst class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GTBookingInst, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GTBookingInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::GTBookingInst self) -> GTBookingInst
        __init__(FIX::GTBookingInst self, FIX::INT const & value) -> GTBookingInst

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_GTBookingInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_GTBookingInst
    __del__ = lambda self: None
GTBookingInst_swigregister = _quickfix.GTBookingInst_swigregister
GTBookingInst_swigregister(GTBookingInst)

class NoStrikes(IntField):
    """Proxy of C++ FIX::NoStrikes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoStrikes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoStrikes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoStrikes self) -> NoStrikes
        __init__(FIX::NoStrikes self, FIX::NUMINGROUP const & value) -> NoStrikes

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoStrikes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoStrikes
    __del__ = lambda self: None
NoStrikes_swigregister = _quickfix.NoStrikes_swigregister
NoStrikes_swigregister(NoStrikes)

class ListStatusType(IntField):
    """Proxy of C++ FIX::ListStatusType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListStatusType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListStatusType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListStatusType self) -> ListStatusType
        __init__(FIX::ListStatusType self, FIX::INT const & value) -> ListStatusType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ListStatusType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListStatusType
    __del__ = lambda self: None
ListStatusType_swigregister = _quickfix.ListStatusType_swigregister
ListStatusType_swigregister(ListStatusType)

class NetGrossInd(IntField):
    """Proxy of C++ FIX::NetGrossInd class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetGrossInd, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetGrossInd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NetGrossInd self) -> NetGrossInd
        __init__(FIX::NetGrossInd self, FIX::INT const & value) -> NetGrossInd

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NetGrossInd(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NetGrossInd
    __del__ = lambda self: None
NetGrossInd_swigregister = _quickfix.NetGrossInd_swigregister
NetGrossInd_swigregister(NetGrossInd)

class ListOrderStatus(IntField):
    """Proxy of C++ FIX::ListOrderStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOrderStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListOrderStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListOrderStatus self) -> ListOrderStatus
        __init__(FIX::ListOrderStatus self, FIX::INT const & value) -> ListOrderStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ListOrderStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListOrderStatus
    __del__ = lambda self: None
ListOrderStatus_swigregister = _quickfix.ListOrderStatus_swigregister
ListOrderStatus_swigregister(ListOrderStatus)

class ExpireDate(StringField):
    """Proxy of C++ FIX::ExpireDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpireDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpireDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExpireDate self) -> ExpireDate
        __init__(FIX::ExpireDate self, FIX::LOCALMKTDATE const & value) -> ExpireDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_ExpireDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExpireDate
    __del__ = lambda self: None
ExpireDate_swigregister = _quickfix.ExpireDate_swigregister
ExpireDate_swigregister(ExpireDate)

class ListExecInstType(CharField):
    """Proxy of C++ FIX::ListExecInstType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListExecInstType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListExecInstType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListExecInstType self) -> ListExecInstType
        __init__(FIX::ListExecInstType self, FIX::CHAR const & value) -> ListExecInstType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_ListExecInstType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListExecInstType
    __del__ = lambda self: None
ListExecInstType_swigregister = _quickfix.ListExecInstType_swigregister
ListExecInstType_swigregister(ListExecInstType)

class CxlRejResponseTo(CharField):
    """Proxy of C++ FIX::CxlRejResponseTo class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CxlRejResponseTo, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CxlRejResponseTo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CxlRejResponseTo self) -> CxlRejResponseTo
        __init__(FIX::CxlRejResponseTo self, FIX::CHAR const & value) -> CxlRejResponseTo

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_CxlRejResponseTo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CxlRejResponseTo
    __del__ = lambda self: None
CxlRejResponseTo_swigregister = _quickfix.CxlRejResponseTo_swigregister
CxlRejResponseTo_swigregister(CxlRejResponseTo)

class UnderlyingCouponRate(DoubleField):
    """Proxy of C++ FIX::UnderlyingCouponRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCouponRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCouponRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCouponRate self) -> UnderlyingCouponRate
        __init__(FIX::UnderlyingCouponRate self, FIX::PERCENTAGE const & value) -> UnderlyingCouponRate

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_UnderlyingCouponRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCouponRate
    __del__ = lambda self: None
UnderlyingCouponRate_swigregister = _quickfix.UnderlyingCouponRate_swigregister
UnderlyingCouponRate_swigregister(UnderlyingCouponRate)

class UnderlyingContractMultiplier(DoubleField):
    """Proxy of C++ FIX::UnderlyingContractMultiplier class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingContractMultiplier, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingContractMultiplier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingContractMultiplier self) -> UnderlyingContractMultiplier
        __init__(FIX::UnderlyingContractMultiplier self, FIX::FLOAT const & value) -> UnderlyingContractMultiplier

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_UnderlyingContractMultiplier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingContractMultiplier
    __del__ = lambda self: None
UnderlyingContractMultiplier_swigregister = _quickfix.UnderlyingContractMultiplier_swigregister
UnderlyingContractMultiplier_swigregister(UnderlyingContractMultiplier)

class ContraTradeQty(DoubleField):
    """Proxy of C++ FIX::ContraTradeQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraTradeQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContraTradeQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContraTradeQty self) -> ContraTradeQty
        __init__(FIX::ContraTradeQty self, FIX::QTY const & value) -> ContraTradeQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_ContraTradeQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContraTradeQty
    __del__ = lambda self: None
ContraTradeQty_swigregister = _quickfix.ContraTradeQty_swigregister
ContraTradeQty_swigregister(ContraTradeQty)

class ContraTradeTime(UtcTimeStampField):
    """Proxy of C++ FIX::ContraTradeTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraTradeTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContraTradeTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContraTradeTime self) -> ContraTradeTime
        __init__(FIX::ContraTradeTime self, bool showMilliseconds) -> ContraTradeTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::ContraTradeTime self, FIX::UTCTIMESTAMP const & value) -> ContraTradeTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::ContraTradeTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> ContraTradeTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_ContraTradeTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContraTradeTime
    __del__ = lambda self: None
ContraTradeTime_swigregister = _quickfix.ContraTradeTime_swigregister
ContraTradeTime_swigregister(ContraTradeTime)

class ClearingFirm(StringField):
    """Proxy of C++ FIX::ClearingFirm class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearingFirm, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClearingFirm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ClearingFirm self) -> ClearingFirm
        __init__(FIX::ClearingFirm self, FIX::STRING const & value) -> ClearingFirm

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ClearingFirm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ClearingFirm
    __del__ = lambda self: None
ClearingFirm_swigregister = _quickfix.ClearingFirm_swigregister
ClearingFirm_swigregister(ClearingFirm)

class ClearingAccount(StringField):
    """Proxy of C++ FIX::ClearingAccount class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearingAccount, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClearingAccount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ClearingAccount self) -> ClearingAccount
        __init__(FIX::ClearingAccount self, FIX::STRING const & value) -> ClearingAccount

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ClearingAccount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ClearingAccount
    __del__ = lambda self: None
ClearingAccount_swigregister = _quickfix.ClearingAccount_swigregister
ClearingAccount_swigregister(ClearingAccount)

class LiquidityNumSecurities(IntField):
    """Proxy of C++ FIX::LiquidityNumSecurities class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LiquidityNumSecurities, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LiquidityNumSecurities, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LiquidityNumSecurities self) -> LiquidityNumSecurities
        __init__(FIX::LiquidityNumSecurities self, FIX::INT const & value) -> LiquidityNumSecurities

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LiquidityNumSecurities(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LiquidityNumSecurities
    __del__ = lambda self: None
LiquidityNumSecurities_swigregister = _quickfix.LiquidityNumSecurities_swigregister
LiquidityNumSecurities_swigregister(LiquidityNumSecurities)

class MultiLegReportingType(CharField):
    """Proxy of C++ FIX::MultiLegReportingType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiLegReportingType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiLegReportingType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MultiLegReportingType self) -> MultiLegReportingType
        __init__(FIX::MultiLegReportingType self, FIX::CHAR const & value) -> MultiLegReportingType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_MultiLegReportingType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MultiLegReportingType
    __del__ = lambda self: None
MultiLegReportingType_swigregister = _quickfix.MultiLegReportingType_swigregister
MultiLegReportingType_swigregister(MultiLegReportingType)

class StrikeTime(UtcTimeStampField):
    """Proxy of C++ FIX::StrikeTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikeTime self) -> StrikeTime
        __init__(FIX::StrikeTime self, bool showMilliseconds) -> StrikeTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::StrikeTime self, FIX::UTCTIMESTAMP const & value) -> StrikeTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::StrikeTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> StrikeTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_StrikeTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikeTime
    __del__ = lambda self: None
StrikeTime_swigregister = _quickfix.StrikeTime_swigregister
StrikeTime_swigregister(StrikeTime)

class ListStatusText(StringField):
    """Proxy of C++ FIX::ListStatusText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListStatusText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListStatusText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListStatusText self) -> ListStatusText
        __init__(FIX::ListStatusText self, FIX::STRING const & value) -> ListStatusText

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ListStatusText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListStatusText
    __del__ = lambda self: None
ListStatusText_swigregister = _quickfix.ListStatusText_swigregister
ListStatusText_swigregister(ListStatusText)

class EncodedListStatusTextLen(IntField):
    """Proxy of C++ FIX::EncodedListStatusTextLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedListStatusTextLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedListStatusTextLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedListStatusTextLen self) -> EncodedListStatusTextLen
        __init__(FIX::EncodedListStatusTextLen self, FIX::LENGTH const & value) -> EncodedListStatusTextLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedListStatusTextLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedListStatusTextLen
    __del__ = lambda self: None
EncodedListStatusTextLen_swigregister = _quickfix.EncodedListStatusTextLen_swigregister
EncodedListStatusTextLen_swigregister(EncodedListStatusTextLen)

class EncodedListStatusText(StringField):
    """Proxy of C++ FIX::EncodedListStatusText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedListStatusText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedListStatusText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedListStatusText self) -> EncodedListStatusText
        __init__(FIX::EncodedListStatusText self, FIX::DATA const & value) -> EncodedListStatusText

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedListStatusText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedListStatusText
    __del__ = lambda self: None
EncodedListStatusText_swigregister = _quickfix.EncodedListStatusText_swigregister
EncodedListStatusText_swigregister(EncodedListStatusText)

class SecurityIDSource(StringField):
    """Proxy of C++ FIX::SecurityIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityIDSource self) -> SecurityIDSource
        __init__(FIX::SecurityIDSource self, FIX::STRING const & value) -> SecurityIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityIDSource
    __del__ = lambda self: None
SecurityIDSource_swigregister = _quickfix.SecurityIDSource_swigregister
SecurityIDSource_swigregister(SecurityIDSource)

class IOIQty(StringField):
    """Proxy of C++ FIX::IOIQty class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIQty, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOIQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOIQty self) -> IOIQty
        __init__(FIX::IOIQty self, FIX::STRING const & value) -> IOIQty

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_IOIQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOIQty
    __del__ = lambda self: None
IOIQty_swigregister = _quickfix.IOIQty_swigregister
IOIQty_swigregister(IOIQty)

class LastQty(DoubleField):
    """Proxy of C++ FIX::LastQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastQty self) -> LastQty
        __init__(FIX::LastQty self, FIX::QTY const & value) -> LastQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LastQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastQty
    __del__ = lambda self: None
LastQty_swigregister = _quickfix.LastQty_swigregister
LastQty_swigregister(LastQty)

class Quantity(DoubleField):
    """Proxy of C++ FIX::Quantity class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quantity, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quantity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Quantity self) -> Quantity
        __init__(FIX::Quantity self, FIX::QTY const & value) -> Quantity

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_Quantity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Quantity
    __del__ = lambda self: None
Quantity_swigregister = _quickfix.Quantity_swigregister
Quantity_swigregister(Quantity)

class PositionEffect(CharField):
    """Proxy of C++ FIX::PositionEffect class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionEffect, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositionEffect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PositionEffect self) -> PositionEffect
        __init__(FIX::PositionEffect self, FIX::CHAR const & value) -> PositionEffect

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_PositionEffect(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PositionEffect
    __del__ = lambda self: None
PositionEffect_swigregister = _quickfix.PositionEffect_swigregister
PositionEffect_swigregister(PositionEffect)

class AllocQty(DoubleField):
    """Proxy of C++ FIX::AllocQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocQty self) -> AllocQty
        __init__(FIX::AllocQty self, FIX::QTY const & value) -> AllocQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_AllocQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocQty
    __del__ = lambda self: None
AllocQty_swigregister = _quickfix.AllocQty_swigregister
AllocQty_swigregister(AllocQty)

class Spread(DoubleField):
    """Proxy of C++ FIX::Spread class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spread, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Spread, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Spread self) -> Spread
        __init__(FIX::Spread self, FIX::PRICEOFFSET const & value) -> Spread

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_Spread(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Spread
    __del__ = lambda self: None
Spread_swigregister = _quickfix.Spread_swigregister
Spread_swigregister(Spread)

class BenchmarkCurveCurrency(StringField):
    """Proxy of C++ FIX::BenchmarkCurveCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkCurveCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkCurveCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BenchmarkCurveCurrency self) -> BenchmarkCurveCurrency
        __init__(FIX::BenchmarkCurveCurrency self, FIX::CURRENCY const & value) -> BenchmarkCurveCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_BenchmarkCurveCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BenchmarkCurveCurrency
    __del__ = lambda self: None
BenchmarkCurveCurrency_swigregister = _quickfix.BenchmarkCurveCurrency_swigregister
BenchmarkCurveCurrency_swigregister(BenchmarkCurveCurrency)

class BenchmarkCurveName(StringField):
    """Proxy of C++ FIX::BenchmarkCurveName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkCurveName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkCurveName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BenchmarkCurveName self) -> BenchmarkCurveName
        __init__(FIX::BenchmarkCurveName self, FIX::STRING const & value) -> BenchmarkCurveName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_BenchmarkCurveName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BenchmarkCurveName
    __del__ = lambda self: None
BenchmarkCurveName_swigregister = _quickfix.BenchmarkCurveName_swigregister
BenchmarkCurveName_swigregister(BenchmarkCurveName)

class BenchmarkCurvePoint(StringField):
    """Proxy of C++ FIX::BenchmarkCurvePoint class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkCurvePoint, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkCurvePoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BenchmarkCurvePoint self) -> BenchmarkCurvePoint
        __init__(FIX::BenchmarkCurvePoint self, FIX::STRING const & value) -> BenchmarkCurvePoint

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_BenchmarkCurvePoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BenchmarkCurvePoint
    __del__ = lambda self: None
BenchmarkCurvePoint_swigregister = _quickfix.BenchmarkCurvePoint_swigregister
BenchmarkCurvePoint_swigregister(BenchmarkCurvePoint)

class CouponPaymentDate(StringField):
    """Proxy of C++ FIX::CouponPaymentDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CouponPaymentDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CouponPaymentDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CouponPaymentDate self) -> CouponPaymentDate
        __init__(FIX::CouponPaymentDate self, FIX::LOCALMKTDATE const & value) -> CouponPaymentDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_CouponPaymentDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CouponPaymentDate
    __del__ = lambda self: None
CouponPaymentDate_swigregister = _quickfix.CouponPaymentDate_swigregister
CouponPaymentDate_swigregister(CouponPaymentDate)

class IssueDate(StringField):
    """Proxy of C++ FIX::IssueDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IssueDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IssueDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IssueDate self) -> IssueDate
        __init__(FIX::IssueDate self, FIX::LOCALMKTDATE const & value) -> IssueDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_IssueDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IssueDate
    __del__ = lambda self: None
IssueDate_swigregister = _quickfix.IssueDate_swigregister
IssueDate_swigregister(IssueDate)

class RepurchaseTerm(IntField):
    """Proxy of C++ FIX::RepurchaseTerm class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepurchaseTerm, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepurchaseTerm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RepurchaseTerm self) -> RepurchaseTerm
        __init__(FIX::RepurchaseTerm self, FIX::INT const & value) -> RepurchaseTerm

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RepurchaseTerm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RepurchaseTerm
    __del__ = lambda self: None
RepurchaseTerm_swigregister = _quickfix.RepurchaseTerm_swigregister
RepurchaseTerm_swigregister(RepurchaseTerm)

class RepurchaseRate(DoubleField):
    """Proxy of C++ FIX::RepurchaseRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepurchaseRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepurchaseRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RepurchaseRate self) -> RepurchaseRate
        __init__(FIX::RepurchaseRate self, FIX::PERCENTAGE const & value) -> RepurchaseRate

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_RepurchaseRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RepurchaseRate
    __del__ = lambda self: None
RepurchaseRate_swigregister = _quickfix.RepurchaseRate_swigregister
RepurchaseRate_swigregister(RepurchaseRate)

class Factor(DoubleField):
    """Proxy of C++ FIX::Factor class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Factor, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Factor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Factor self) -> Factor
        __init__(FIX::Factor self, FIX::FLOAT const & value) -> Factor

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_Factor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Factor
    __del__ = lambda self: None
Factor_swigregister = _quickfix.Factor_swigregister
Factor_swigregister(Factor)

class TradeOriginationDate(StringField):
    """Proxy of C++ FIX::TradeOriginationDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeOriginationDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeOriginationDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeOriginationDate self) -> TradeOriginationDate
        __init__(FIX::TradeOriginationDate self, FIX::LOCALMKTDATE const & value) -> TradeOriginationDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_TradeOriginationDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeOriginationDate
    __del__ = lambda self: None
TradeOriginationDate_swigregister = _quickfix.TradeOriginationDate_swigregister
TradeOriginationDate_swigregister(TradeOriginationDate)

class ExDate(StringField):
    """Proxy of C++ FIX::ExDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExDate self) -> ExDate
        __init__(FIX::ExDate self, FIX::LOCALMKTDATE const & value) -> ExDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_ExDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExDate
    __del__ = lambda self: None
ExDate_swigregister = _quickfix.ExDate_swigregister
ExDate_swigregister(ExDate)

class NoStipulations(IntField):
    """Proxy of C++ FIX::NoStipulations class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoStipulations, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoStipulations, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoStipulations self) -> NoStipulations
        __init__(FIX::NoStipulations self, FIX::NUMINGROUP const & value) -> NoStipulations

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoStipulations(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoStipulations
    __del__ = lambda self: None
NoStipulations_swigregister = _quickfix.NoStipulations_swigregister
NoStipulations_swigregister(NoStipulations)

class StipulationType(StringField):
    """Proxy of C++ FIX::StipulationType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StipulationType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StipulationType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StipulationType self) -> StipulationType
        __init__(FIX::StipulationType self, FIX::STRING const & value) -> StipulationType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StipulationType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StipulationType
    __del__ = lambda self: None
StipulationType_swigregister = _quickfix.StipulationType_swigregister
StipulationType_swigregister(StipulationType)

class StipulationValue(StringField):
    """Proxy of C++ FIX::StipulationValue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StipulationValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StipulationValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StipulationValue self) -> StipulationValue
        __init__(FIX::StipulationValue self, FIX::STRING const & value) -> StipulationValue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StipulationValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StipulationValue
    __del__ = lambda self: None
StipulationValue_swigregister = _quickfix.StipulationValue_swigregister
StipulationValue_swigregister(StipulationValue)

class YieldType(StringField):
    """Proxy of C++ FIX::YieldType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YieldType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::YieldType self) -> YieldType
        __init__(FIX::YieldType self, FIX::STRING const & value) -> YieldType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_YieldType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_YieldType
    __del__ = lambda self: None
YieldType_swigregister = _quickfix.YieldType_swigregister
YieldType_swigregister(YieldType)

class Yield(DoubleField):
    """Proxy of C++ FIX::Yield class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Yield, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Yield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Yield self) -> Yield
        __init__(FIX::Yield self, FIX::PERCENTAGE const & value) -> Yield

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_Yield(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Yield
    __del__ = lambda self: None
Yield_swigregister = _quickfix.Yield_swigregister
Yield_swigregister(Yield)

class TotalTakedown(DoubleField):
    """Proxy of C++ FIX::TotalTakedown class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalTakedown, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalTakedown, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotalTakedown self) -> TotalTakedown
        __init__(FIX::TotalTakedown self, FIX::AMT const & value) -> TotalTakedown

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_TotalTakedown(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotalTakedown
    __del__ = lambda self: None
TotalTakedown_swigregister = _quickfix.TotalTakedown_swigregister
TotalTakedown_swigregister(TotalTakedown)

class Concession(DoubleField):
    """Proxy of C++ FIX::Concession class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Concession, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Concession, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Concession self) -> Concession
        __init__(FIX::Concession self, FIX::AMT const & value) -> Concession

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_Concession(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Concession
    __del__ = lambda self: None
Concession_swigregister = _quickfix.Concession_swigregister
Concession_swigregister(Concession)

class RepoCollateralSecurityType(StringField):
    """Proxy of C++ FIX::RepoCollateralSecurityType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepoCollateralSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepoCollateralSecurityType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RepoCollateralSecurityType self) -> RepoCollateralSecurityType
        __init__(FIX::RepoCollateralSecurityType self, FIX::STRING const & value) -> RepoCollateralSecurityType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RepoCollateralSecurityType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RepoCollateralSecurityType
    __del__ = lambda self: None
RepoCollateralSecurityType_swigregister = _quickfix.RepoCollateralSecurityType_swigregister
RepoCollateralSecurityType_swigregister(RepoCollateralSecurityType)

class RedemptionDate(StringField):
    """Proxy of C++ FIX::RedemptionDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RedemptionDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RedemptionDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RedemptionDate self) -> RedemptionDate
        __init__(FIX::RedemptionDate self, FIX::LOCALMKTDATE const & value) -> RedemptionDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_RedemptionDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RedemptionDate
    __del__ = lambda self: None
RedemptionDate_swigregister = _quickfix.RedemptionDate_swigregister
RedemptionDate_swigregister(RedemptionDate)

class UnderlyingCouponPaymentDate(StringField):
    """Proxy of C++ FIX::UnderlyingCouponPaymentDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCouponPaymentDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCouponPaymentDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCouponPaymentDate self) -> UnderlyingCouponPaymentDate
        __init__(FIX::UnderlyingCouponPaymentDate self, FIX::LOCALMKTDATE const & value) -> UnderlyingCouponPaymentDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_UnderlyingCouponPaymentDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCouponPaymentDate
    __del__ = lambda self: None
UnderlyingCouponPaymentDate_swigregister = _quickfix.UnderlyingCouponPaymentDate_swigregister
UnderlyingCouponPaymentDate_swigregister(UnderlyingCouponPaymentDate)

class UnderlyingIssueDate(StringField):
    """Proxy of C++ FIX::UnderlyingIssueDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingIssueDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingIssueDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingIssueDate self) -> UnderlyingIssueDate
        __init__(FIX::UnderlyingIssueDate self, FIX::LOCALMKTDATE const & value) -> UnderlyingIssueDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_UnderlyingIssueDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingIssueDate
    __del__ = lambda self: None
UnderlyingIssueDate_swigregister = _quickfix.UnderlyingIssueDate_swigregister
UnderlyingIssueDate_swigregister(UnderlyingIssueDate)

class UnderlyingRepoCollateralSecurityType(StringField):
    """Proxy of C++ FIX::UnderlyingRepoCollateralSecurityType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingRepoCollateralSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingRepoCollateralSecurityType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingRepoCollateralSecurityType self) -> UnderlyingRepoCollateralSecurityType
        __init__(FIX::UnderlyingRepoCollateralSecurityType self, FIX::STRING const & value) -> UnderlyingRepoCollateralSecurityType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingRepoCollateralSecurityType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingRepoCollateralSecurityType
    __del__ = lambda self: None
UnderlyingRepoCollateralSecurityType_swigregister = _quickfix.UnderlyingRepoCollateralSecurityType_swigregister
UnderlyingRepoCollateralSecurityType_swigregister(UnderlyingRepoCollateralSecurityType)

class UnderlyingRepurchaseTerm(IntField):
    """Proxy of C++ FIX::UnderlyingRepurchaseTerm class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingRepurchaseTerm, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingRepurchaseTerm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingRepurchaseTerm self) -> UnderlyingRepurchaseTerm
        __init__(FIX::UnderlyingRepurchaseTerm self, FIX::INT const & value) -> UnderlyingRepurchaseTerm

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingRepurchaseTerm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingRepurchaseTerm
    __del__ = lambda self: None
UnderlyingRepurchaseTerm_swigregister = _quickfix.UnderlyingRepurchaseTerm_swigregister
UnderlyingRepurchaseTerm_swigregister(UnderlyingRepurchaseTerm)

class UnderlyingRepurchaseRate(DoubleField):
    """Proxy of C++ FIX::UnderlyingRepurchaseRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingRepurchaseRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingRepurchaseRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingRepurchaseRate self) -> UnderlyingRepurchaseRate
        __init__(FIX::UnderlyingRepurchaseRate self, FIX::PERCENTAGE const & value) -> UnderlyingRepurchaseRate

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_UnderlyingRepurchaseRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingRepurchaseRate
    __del__ = lambda self: None
UnderlyingRepurchaseRate_swigregister = _quickfix.UnderlyingRepurchaseRate_swigregister
UnderlyingRepurchaseRate_swigregister(UnderlyingRepurchaseRate)

class UnderlyingFactor(DoubleField):
    """Proxy of C++ FIX::UnderlyingFactor class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingFactor, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingFactor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingFactor self) -> UnderlyingFactor
        __init__(FIX::UnderlyingFactor self, FIX::FLOAT const & value) -> UnderlyingFactor

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_UnderlyingFactor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingFactor
    __del__ = lambda self: None
UnderlyingFactor_swigregister = _quickfix.UnderlyingFactor_swigregister
UnderlyingFactor_swigregister(UnderlyingFactor)

class UnderlyingRedemptionDate(StringField):
    """Proxy of C++ FIX::UnderlyingRedemptionDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingRedemptionDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingRedemptionDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingRedemptionDate self) -> UnderlyingRedemptionDate
        __init__(FIX::UnderlyingRedemptionDate self, FIX::LOCALMKTDATE const & value) -> UnderlyingRedemptionDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_UnderlyingRedemptionDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingRedemptionDate
    __del__ = lambda self: None
UnderlyingRedemptionDate_swigregister = _quickfix.UnderlyingRedemptionDate_swigregister
UnderlyingRedemptionDate_swigregister(UnderlyingRedemptionDate)

class LegCouponPaymentDate(StringField):
    """Proxy of C++ FIX::LegCouponPaymentDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCouponPaymentDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegCouponPaymentDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegCouponPaymentDate self) -> LegCouponPaymentDate
        __init__(FIX::LegCouponPaymentDate self, FIX::LOCALMKTDATE const & value) -> LegCouponPaymentDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_LegCouponPaymentDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegCouponPaymentDate
    __del__ = lambda self: None
LegCouponPaymentDate_swigregister = _quickfix.LegCouponPaymentDate_swigregister
LegCouponPaymentDate_swigregister(LegCouponPaymentDate)

class LegIssueDate(StringField):
    """Proxy of C++ FIX::LegIssueDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegIssueDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegIssueDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegIssueDate self) -> LegIssueDate
        __init__(FIX::LegIssueDate self, FIX::LOCALMKTDATE const & value) -> LegIssueDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_LegIssueDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegIssueDate
    __del__ = lambda self: None
LegIssueDate_swigregister = _quickfix.LegIssueDate_swigregister
LegIssueDate_swigregister(LegIssueDate)

class LegRepoCollateralSecurityType(StringField):
    """Proxy of C++ FIX::LegRepoCollateralSecurityType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRepoCollateralSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegRepoCollateralSecurityType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegRepoCollateralSecurityType self) -> LegRepoCollateralSecurityType
        __init__(FIX::LegRepoCollateralSecurityType self, FIX::STRING const & value) -> LegRepoCollateralSecurityType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegRepoCollateralSecurityType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegRepoCollateralSecurityType
    __del__ = lambda self: None
LegRepoCollateralSecurityType_swigregister = _quickfix.LegRepoCollateralSecurityType_swigregister
LegRepoCollateralSecurityType_swigregister(LegRepoCollateralSecurityType)

class LegRepurchaseTerm(IntField):
    """Proxy of C++ FIX::LegRepurchaseTerm class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRepurchaseTerm, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegRepurchaseTerm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegRepurchaseTerm self) -> LegRepurchaseTerm
        __init__(FIX::LegRepurchaseTerm self, FIX::INT const & value) -> LegRepurchaseTerm

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegRepurchaseTerm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegRepurchaseTerm
    __del__ = lambda self: None
LegRepurchaseTerm_swigregister = _quickfix.LegRepurchaseTerm_swigregister
LegRepurchaseTerm_swigregister(LegRepurchaseTerm)

class LegRepurchaseRate(DoubleField):
    """Proxy of C++ FIX::LegRepurchaseRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRepurchaseRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegRepurchaseRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegRepurchaseRate self) -> LegRepurchaseRate
        __init__(FIX::LegRepurchaseRate self, FIX::PERCENTAGE const & value) -> LegRepurchaseRate

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_LegRepurchaseRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegRepurchaseRate
    __del__ = lambda self: None
LegRepurchaseRate_swigregister = _quickfix.LegRepurchaseRate_swigregister
LegRepurchaseRate_swigregister(LegRepurchaseRate)

class LegFactor(DoubleField):
    """Proxy of C++ FIX::LegFactor class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegFactor, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegFactor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegFactor self) -> LegFactor
        __init__(FIX::LegFactor self, FIX::FLOAT const & value) -> LegFactor

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_LegFactor(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegFactor
    __del__ = lambda self: None
LegFactor_swigregister = _quickfix.LegFactor_swigregister
LegFactor_swigregister(LegFactor)

class LegRedemptionDate(StringField):
    """Proxy of C++ FIX::LegRedemptionDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRedemptionDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegRedemptionDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegRedemptionDate self) -> LegRedemptionDate
        __init__(FIX::LegRedemptionDate self, FIX::LOCALMKTDATE const & value) -> LegRedemptionDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_LegRedemptionDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegRedemptionDate
    __del__ = lambda self: None
LegRedemptionDate_swigregister = _quickfix.LegRedemptionDate_swigregister
LegRedemptionDate_swigregister(LegRedemptionDate)

class CreditRating(StringField):
    """Proxy of C++ FIX::CreditRating class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CreditRating, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CreditRating, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CreditRating self) -> CreditRating
        __init__(FIX::CreditRating self, FIX::STRING const & value) -> CreditRating

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CreditRating(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CreditRating
    __del__ = lambda self: None
CreditRating_swigregister = _quickfix.CreditRating_swigregister
CreditRating_swigregister(CreditRating)

class UnderlyingCreditRating(StringField):
    """Proxy of C++ FIX::UnderlyingCreditRating class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCreditRating, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCreditRating, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCreditRating self) -> UnderlyingCreditRating
        __init__(FIX::UnderlyingCreditRating self, FIX::STRING const & value) -> UnderlyingCreditRating

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingCreditRating(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCreditRating
    __del__ = lambda self: None
UnderlyingCreditRating_swigregister = _quickfix.UnderlyingCreditRating_swigregister
UnderlyingCreditRating_swigregister(UnderlyingCreditRating)

class LegCreditRating(StringField):
    """Proxy of C++ FIX::LegCreditRating class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCreditRating, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegCreditRating, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegCreditRating self) -> LegCreditRating
        __init__(FIX::LegCreditRating self, FIX::STRING const & value) -> LegCreditRating

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegCreditRating(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegCreditRating
    __del__ = lambda self: None
LegCreditRating_swigregister = _quickfix.LegCreditRating_swigregister
LegCreditRating_swigregister(LegCreditRating)

class TradedFlatSwitch(BoolField):
    """Proxy of C++ FIX::TradedFlatSwitch class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradedFlatSwitch, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradedFlatSwitch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradedFlatSwitch self) -> TradedFlatSwitch
        __init__(FIX::TradedFlatSwitch self, FIX::BOOLEAN const & value) -> TradedFlatSwitch

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_TradedFlatSwitch(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradedFlatSwitch
    __del__ = lambda self: None
TradedFlatSwitch_swigregister = _quickfix.TradedFlatSwitch_swigregister
TradedFlatSwitch_swigregister(TradedFlatSwitch)

class BasisFeatureDate(StringField):
    """Proxy of C++ FIX::BasisFeatureDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasisFeatureDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasisFeatureDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BasisFeatureDate self) -> BasisFeatureDate
        __init__(FIX::BasisFeatureDate self, FIX::LOCALMKTDATE const & value) -> BasisFeatureDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_BasisFeatureDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BasisFeatureDate
    __del__ = lambda self: None
BasisFeatureDate_swigregister = _quickfix.BasisFeatureDate_swigregister
BasisFeatureDate_swigregister(BasisFeatureDate)

class BasisFeaturePrice(DoubleField):
    """Proxy of C++ FIX::BasisFeaturePrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasisFeaturePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasisFeaturePrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BasisFeaturePrice self) -> BasisFeaturePrice
        __init__(FIX::BasisFeaturePrice self, FIX::PRICE const & value) -> BasisFeaturePrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_BasisFeaturePrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BasisFeaturePrice
    __del__ = lambda self: None
BasisFeaturePrice_swigregister = _quickfix.BasisFeaturePrice_swigregister
BasisFeaturePrice_swigregister(BasisFeaturePrice)

class QuoteStatus(IntField):
    """Proxy of C++ FIX::QuoteStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteStatus self) -> QuoteStatus
        __init__(FIX::QuoteStatus self, FIX::INT const & value) -> QuoteStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteStatus
    __del__ = lambda self: None
QuoteStatus_swigregister = _quickfix.QuoteStatus_swigregister
QuoteStatus_swigregister(QuoteStatus)

class UnderlyingSecurityIDSource(StringField):
    """Proxy of C++ FIX::UnderlyingSecurityIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSecurityIDSource self) -> UnderlyingSecurityIDSource
        __init__(FIX::UnderlyingSecurityIDSource self, FIX::STRING const & value) -> UnderlyingSecurityIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSecurityIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityIDSource
    __del__ = lambda self: None
UnderlyingSecurityIDSource_swigregister = _quickfix.UnderlyingSecurityIDSource_swigregister
UnderlyingSecurityIDSource_swigregister(UnderlyingSecurityIDSource)

class PartyIDSource(CharField):
    """Proxy of C++ FIX::PartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PartyIDSource self) -> PartyIDSource
        __init__(FIX::PartyIDSource self, FIX::CHAR const & value) -> PartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_PartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PartyIDSource
    __del__ = lambda self: None
PartyIDSource_swigregister = _quickfix.PartyIDSource_swigregister
PartyIDSource_swigregister(PartyIDSource)

class PartyID(StringField):
    """Proxy of C++ FIX::PartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PartyID self) -> PartyID
        __init__(FIX::PartyID self, FIX::STRING const & value) -> PartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PartyID
    __del__ = lambda self: None
PartyID_swigregister = _quickfix.PartyID_swigregister
PartyID_swigregister(PartyID)

class TotalVolumeTradedDate(UtcDateField):
    """Proxy of C++ FIX::TotalVolumeTradedDate class"""
    __swig_setmethods__ = {}
    for _s in [UtcDateField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalVolumeTradedDate, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcDateField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalVolumeTradedDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotalVolumeTradedDate self) -> TotalVolumeTradedDate
        __init__(FIX::TotalVolumeTradedDate self, FIX::UTCDATE const & value) -> TotalVolumeTradedDate

        Parameters:
            value: FIX::UTCDATE const &

        """
        this = _quickfix.new_TotalVolumeTradedDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotalVolumeTradedDate
    __del__ = lambda self: None
TotalVolumeTradedDate_swigregister = _quickfix.TotalVolumeTradedDate_swigregister
TotalVolumeTradedDate_swigregister(TotalVolumeTradedDate)

class TotalVolumeTradedTime(UtcTimeOnlyField):
    """Proxy of C++ FIX::TotalVolumeTradedTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeOnlyField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalVolumeTradedTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeOnlyField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalVolumeTradedTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotalVolumeTradedTime self) -> TotalVolumeTradedTime
        __init__(FIX::TotalVolumeTradedTime self, FIX::UTCTIMEONLY const & value) -> TotalVolumeTradedTime

        Parameters:
            value: FIX::UTCTIMEONLY const &

        """
        this = _quickfix.new_TotalVolumeTradedTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotalVolumeTradedTime
    __del__ = lambda self: None
TotalVolumeTradedTime_swigregister = _quickfix.TotalVolumeTradedTime_swigregister
TotalVolumeTradedTime_swigregister(TotalVolumeTradedTime)

class NetChgPrevDay(DoubleField):
    """Proxy of C++ FIX::NetChgPrevDay class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetChgPrevDay, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetChgPrevDay, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NetChgPrevDay self) -> NetChgPrevDay
        __init__(FIX::NetChgPrevDay self, FIX::PRICEOFFSET const & value) -> NetChgPrevDay

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_NetChgPrevDay(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NetChgPrevDay
    __del__ = lambda self: None
NetChgPrevDay_swigregister = _quickfix.NetChgPrevDay_swigregister
NetChgPrevDay_swigregister(NetChgPrevDay)

class PartyRole(IntField):
    """Proxy of C++ FIX::PartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PartyRole self) -> PartyRole
        __init__(FIX::PartyRole self, FIX::INT const & value) -> PartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PartyRole
    __del__ = lambda self: None
PartyRole_swigregister = _quickfix.PartyRole_swigregister
PartyRole_swigregister(PartyRole)

class NoPartyIDs(IntField):
    """Proxy of C++ FIX::NoPartyIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoPartyIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoPartyIDs self) -> NoPartyIDs
        __init__(FIX::NoPartyIDs self, FIX::NUMINGROUP const & value) -> NoPartyIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoPartyIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoPartyIDs
    __del__ = lambda self: None
NoPartyIDs_swigregister = _quickfix.NoPartyIDs_swigregister
NoPartyIDs_swigregister(NoPartyIDs)

class NoSecurityAltID(IntField):
    """Proxy of C++ FIX::NoSecurityAltID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSecurityAltID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoSecurityAltID self) -> NoSecurityAltID
        __init__(FIX::NoSecurityAltID self, FIX::NUMINGROUP const & value) -> NoSecurityAltID

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoSecurityAltID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoSecurityAltID
    __del__ = lambda self: None
NoSecurityAltID_swigregister = _quickfix.NoSecurityAltID_swigregister
NoSecurityAltID_swigregister(NoSecurityAltID)

class SecurityAltID(StringField):
    """Proxy of C++ FIX::SecurityAltID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityAltID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityAltID self) -> SecurityAltID
        __init__(FIX::SecurityAltID self, FIX::STRING const & value) -> SecurityAltID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityAltID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityAltID
    __del__ = lambda self: None
SecurityAltID_swigregister = _quickfix.SecurityAltID_swigregister
SecurityAltID_swigregister(SecurityAltID)

class SecurityAltIDSource(StringField):
    """Proxy of C++ FIX::SecurityAltIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityAltIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityAltIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityAltIDSource self) -> SecurityAltIDSource
        __init__(FIX::SecurityAltIDSource self, FIX::STRING const & value) -> SecurityAltIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityAltIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityAltIDSource
    __del__ = lambda self: None
SecurityAltIDSource_swigregister = _quickfix.SecurityAltIDSource_swigregister
SecurityAltIDSource_swigregister(SecurityAltIDSource)

class NoUnderlyingSecurityAltID(IntField):
    """Proxy of C++ FIX::NoUnderlyingSecurityAltID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoUnderlyingSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoUnderlyingSecurityAltID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoUnderlyingSecurityAltID self) -> NoUnderlyingSecurityAltID
        __init__(FIX::NoUnderlyingSecurityAltID self, FIX::NUMINGROUP const & value) -> NoUnderlyingSecurityAltID

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoUnderlyingSecurityAltID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoUnderlyingSecurityAltID
    __del__ = lambda self: None
NoUnderlyingSecurityAltID_swigregister = _quickfix.NoUnderlyingSecurityAltID_swigregister
NoUnderlyingSecurityAltID_swigregister(NoUnderlyingSecurityAltID)

class UnderlyingSecurityAltID(StringField):
    """Proxy of C++ FIX::UnderlyingSecurityAltID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityAltID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSecurityAltID self) -> UnderlyingSecurityAltID
        __init__(FIX::UnderlyingSecurityAltID self, FIX::STRING const & value) -> UnderlyingSecurityAltID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSecurityAltID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityAltID
    __del__ = lambda self: None
UnderlyingSecurityAltID_swigregister = _quickfix.UnderlyingSecurityAltID_swigregister
UnderlyingSecurityAltID_swigregister(UnderlyingSecurityAltID)

class UnderlyingSecurityAltIDSource(StringField):
    """Proxy of C++ FIX::UnderlyingSecurityAltIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecurityAltIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecurityAltIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSecurityAltIDSource self) -> UnderlyingSecurityAltIDSource
        __init__(FIX::UnderlyingSecurityAltIDSource self, FIX::STRING const & value) -> UnderlyingSecurityAltIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSecurityAltIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityAltIDSource
    __del__ = lambda self: None
UnderlyingSecurityAltIDSource_swigregister = _quickfix.UnderlyingSecurityAltIDSource_swigregister
UnderlyingSecurityAltIDSource_swigregister(UnderlyingSecurityAltIDSource)

class Product(IntField):
    """Proxy of C++ FIX::Product class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Product, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Product, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Product self) -> Product
        __init__(FIX::Product self, FIX::INT const & value) -> Product

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_Product(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Product
    __del__ = lambda self: None
Product_swigregister = _quickfix.Product_swigregister
Product_swigregister(Product)

class CFICode(StringField):
    """Proxy of C++ FIX::CFICode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFICode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CFICode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CFICode self) -> CFICode
        __init__(FIX::CFICode self, FIX::STRING const & value) -> CFICode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CFICode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CFICode
    __del__ = lambda self: None
CFICode_swigregister = _quickfix.CFICode_swigregister
CFICode_swigregister(CFICode)

class UnderlyingProduct(IntField):
    """Proxy of C++ FIX::UnderlyingProduct class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingProduct, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingProduct, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingProduct self) -> UnderlyingProduct
        __init__(FIX::UnderlyingProduct self, FIX::INT const & value) -> UnderlyingProduct

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingProduct(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingProduct
    __del__ = lambda self: None
UnderlyingProduct_swigregister = _quickfix.UnderlyingProduct_swigregister
UnderlyingProduct_swigregister(UnderlyingProduct)

class UnderlyingCFICode(StringField):
    """Proxy of C++ FIX::UnderlyingCFICode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCFICode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCFICode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCFICode self) -> UnderlyingCFICode
        __init__(FIX::UnderlyingCFICode self, FIX::STRING const & value) -> UnderlyingCFICode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingCFICode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCFICode
    __del__ = lambda self: None
UnderlyingCFICode_swigregister = _quickfix.UnderlyingCFICode_swigregister
UnderlyingCFICode_swigregister(UnderlyingCFICode)

class QuantityType(IntField):
    """Proxy of C++ FIX::QuantityType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantityType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantityType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuantityType self) -> QuantityType
        __init__(FIX::QuantityType self, FIX::INT const & value) -> QuantityType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuantityType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuantityType
    __del__ = lambda self: None
QuantityType_swigregister = _quickfix.QuantityType_swigregister
QuantityType_swigregister(QuantityType)

class BookingRefID(StringField):
    """Proxy of C++ FIX::BookingRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BookingRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BookingRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BookingRefID self) -> BookingRefID
        __init__(FIX::BookingRefID self, FIX::STRING const & value) -> BookingRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_BookingRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BookingRefID
    __del__ = lambda self: None
BookingRefID_swigregister = _quickfix.BookingRefID_swigregister
BookingRefID_swigregister(BookingRefID)

class IndividualAllocID(StringField):
    """Proxy of C++ FIX::IndividualAllocID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndividualAllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndividualAllocID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IndividualAllocID self) -> IndividualAllocID
        __init__(FIX::IndividualAllocID self, FIX::STRING const & value) -> IndividualAllocID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_IndividualAllocID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IndividualAllocID
    __del__ = lambda self: None
IndividualAllocID_swigregister = _quickfix.IndividualAllocID_swigregister
IndividualAllocID_swigregister(IndividualAllocID)

class RoundingDirection(CharField):
    """Proxy of C++ FIX::RoundingDirection class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoundingDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoundingDirection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RoundingDirection self) -> RoundingDirection
        __init__(FIX::RoundingDirection self, FIX::CHAR const & value) -> RoundingDirection

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_RoundingDirection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RoundingDirection
    __del__ = lambda self: None
RoundingDirection_swigregister = _quickfix.RoundingDirection_swigregister
RoundingDirection_swigregister(RoundingDirection)

class RoundingModulus(DoubleField):
    """Proxy of C++ FIX::RoundingModulus class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoundingModulus, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoundingModulus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RoundingModulus self) -> RoundingModulus
        __init__(FIX::RoundingModulus self, FIX::FLOAT const & value) -> RoundingModulus

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_RoundingModulus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RoundingModulus
    __del__ = lambda self: None
RoundingModulus_swigregister = _quickfix.RoundingModulus_swigregister
RoundingModulus_swigregister(RoundingModulus)

class CountryOfIssue(StringField):
    """Proxy of C++ FIX::CountryOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CountryOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CountryOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CountryOfIssue self) -> CountryOfIssue
        __init__(FIX::CountryOfIssue self, FIX::COUNTRY const & value) -> CountryOfIssue

        Parameters:
            value: FIX::COUNTRY const &

        """
        this = _quickfix.new_CountryOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CountryOfIssue
    __del__ = lambda self: None
CountryOfIssue_swigregister = _quickfix.CountryOfIssue_swigregister
CountryOfIssue_swigregister(CountryOfIssue)

class StateOrProvinceOfIssue(StringField):
    """Proxy of C++ FIX::StateOrProvinceOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StateOrProvinceOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StateOrProvinceOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StateOrProvinceOfIssue self) -> StateOrProvinceOfIssue
        __init__(FIX::StateOrProvinceOfIssue self, FIX::STRING const & value) -> StateOrProvinceOfIssue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StateOrProvinceOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StateOrProvinceOfIssue
    __del__ = lambda self: None
StateOrProvinceOfIssue_swigregister = _quickfix.StateOrProvinceOfIssue_swigregister
StateOrProvinceOfIssue_swigregister(StateOrProvinceOfIssue)

class LocaleOfIssue(StringField):
    """Proxy of C++ FIX::LocaleOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocaleOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocaleOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LocaleOfIssue self) -> LocaleOfIssue
        __init__(FIX::LocaleOfIssue self, FIX::STRING const & value) -> LocaleOfIssue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LocaleOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LocaleOfIssue
    __del__ = lambda self: None
LocaleOfIssue_swigregister = _quickfix.LocaleOfIssue_swigregister
LocaleOfIssue_swigregister(LocaleOfIssue)

class NoRegistDtls(IntField):
    """Proxy of C++ FIX::NoRegistDtls class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRegistDtls, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoRegistDtls, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoRegistDtls self) -> NoRegistDtls
        __init__(FIX::NoRegistDtls self, FIX::NUMINGROUP const & value) -> NoRegistDtls

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoRegistDtls(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoRegistDtls
    __del__ = lambda self: None
NoRegistDtls_swigregister = _quickfix.NoRegistDtls_swigregister
NoRegistDtls_swigregister(NoRegistDtls)

class MailingDtls(StringField):
    """Proxy of C++ FIX::MailingDtls class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MailingDtls, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MailingDtls, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MailingDtls self) -> MailingDtls
        __init__(FIX::MailingDtls self, FIX::STRING const & value) -> MailingDtls

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MailingDtls(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MailingDtls
    __del__ = lambda self: None
MailingDtls_swigregister = _quickfix.MailingDtls_swigregister
MailingDtls_swigregister(MailingDtls)

class InvestorCountryOfResidence(StringField):
    """Proxy of C++ FIX::InvestorCountryOfResidence class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvestorCountryOfResidence, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvestorCountryOfResidence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InvestorCountryOfResidence self) -> InvestorCountryOfResidence
        __init__(FIX::InvestorCountryOfResidence self, FIX::COUNTRY const & value) -> InvestorCountryOfResidence

        Parameters:
            value: FIX::COUNTRY const &

        """
        this = _quickfix.new_InvestorCountryOfResidence(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InvestorCountryOfResidence
    __del__ = lambda self: None
InvestorCountryOfResidence_swigregister = _quickfix.InvestorCountryOfResidence_swigregister
InvestorCountryOfResidence_swigregister(InvestorCountryOfResidence)

class PaymentRef(StringField):
    """Proxy of C++ FIX::PaymentRef class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PaymentRef, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PaymentRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PaymentRef self) -> PaymentRef
        __init__(FIX::PaymentRef self, FIX::STRING const & value) -> PaymentRef

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PaymentRef(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PaymentRef
    __del__ = lambda self: None
PaymentRef_swigregister = _quickfix.PaymentRef_swigregister
PaymentRef_swigregister(PaymentRef)

class DistribPaymentMethod(IntField):
    """Proxy of C++ FIX::DistribPaymentMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistribPaymentMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistribPaymentMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DistribPaymentMethod self) -> DistribPaymentMethod
        __init__(FIX::DistribPaymentMethod self, FIX::INT const & value) -> DistribPaymentMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DistribPaymentMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DistribPaymentMethod
    __del__ = lambda self: None
DistribPaymentMethod_swigregister = _quickfix.DistribPaymentMethod_swigregister
DistribPaymentMethod_swigregister(DistribPaymentMethod)

class CashDistribCurr(StringField):
    """Proxy of C++ FIX::CashDistribCurr class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribCurr, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribCurr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashDistribCurr self) -> CashDistribCurr
        __init__(FIX::CashDistribCurr self, FIX::CURRENCY const & value) -> CashDistribCurr

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_CashDistribCurr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashDistribCurr
    __del__ = lambda self: None
CashDistribCurr_swigregister = _quickfix.CashDistribCurr_swigregister
CashDistribCurr_swigregister(CashDistribCurr)

class CommCurrency(StringField):
    """Proxy of C++ FIX::CommCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CommCurrency self) -> CommCurrency
        __init__(FIX::CommCurrency self, FIX::CURRENCY const & value) -> CommCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_CommCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CommCurrency
    __del__ = lambda self: None
CommCurrency_swigregister = _quickfix.CommCurrency_swigregister
CommCurrency_swigregister(CommCurrency)

class CancellationRights(CharField):
    """Proxy of C++ FIX::CancellationRights class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CancellationRights, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CancellationRights, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CancellationRights self) -> CancellationRights
        __init__(FIX::CancellationRights self, FIX::CHAR const & value) -> CancellationRights

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_CancellationRights(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CancellationRights
    __del__ = lambda self: None
CancellationRights_swigregister = _quickfix.CancellationRights_swigregister
CancellationRights_swigregister(CancellationRights)

class MoneyLaunderingStatus(CharField):
    """Proxy of C++ FIX::MoneyLaunderingStatus class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoneyLaunderingStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MoneyLaunderingStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MoneyLaunderingStatus self) -> MoneyLaunderingStatus
        __init__(FIX::MoneyLaunderingStatus self, FIX::CHAR const & value) -> MoneyLaunderingStatus

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_MoneyLaunderingStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MoneyLaunderingStatus
    __del__ = lambda self: None
MoneyLaunderingStatus_swigregister = _quickfix.MoneyLaunderingStatus_swigregister
MoneyLaunderingStatus_swigregister(MoneyLaunderingStatus)

class MailingInst(StringField):
    """Proxy of C++ FIX::MailingInst class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MailingInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MailingInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MailingInst self) -> MailingInst
        __init__(FIX::MailingInst self, FIX::STRING const & value) -> MailingInst

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MailingInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MailingInst
    __del__ = lambda self: None
MailingInst_swigregister = _quickfix.MailingInst_swigregister
MailingInst_swigregister(MailingInst)

class TransBkdTime(UtcTimeStampField):
    """Proxy of C++ FIX::TransBkdTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransBkdTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransBkdTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TransBkdTime self) -> TransBkdTime
        __init__(FIX::TransBkdTime self, bool showMilliseconds) -> TransBkdTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::TransBkdTime self, FIX::UTCTIMESTAMP const & value) -> TransBkdTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::TransBkdTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> TransBkdTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_TransBkdTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TransBkdTime
    __del__ = lambda self: None
TransBkdTime_swigregister = _quickfix.TransBkdTime_swigregister
TransBkdTime_swigregister(TransBkdTime)

class ExecPriceType(CharField):
    """Proxy of C++ FIX::ExecPriceType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecPriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecPriceType self) -> ExecPriceType
        __init__(FIX::ExecPriceType self, FIX::CHAR const & value) -> ExecPriceType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_ExecPriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecPriceType
    __del__ = lambda self: None
ExecPriceType_swigregister = _quickfix.ExecPriceType_swigregister
ExecPriceType_swigregister(ExecPriceType)

class ExecPriceAdjustment(DoubleField):
    """Proxy of C++ FIX::ExecPriceAdjustment class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecPriceAdjustment, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecPriceAdjustment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecPriceAdjustment self) -> ExecPriceAdjustment
        __init__(FIX::ExecPriceAdjustment self, FIX::FLOAT const & value) -> ExecPriceAdjustment

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_ExecPriceAdjustment(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecPriceAdjustment
    __del__ = lambda self: None
ExecPriceAdjustment_swigregister = _quickfix.ExecPriceAdjustment_swigregister
ExecPriceAdjustment_swigregister(ExecPriceAdjustment)

class DateOfBirth(StringField):
    """Proxy of C++ FIX::DateOfBirth class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateOfBirth, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DateOfBirth, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DateOfBirth self) -> DateOfBirth
        __init__(FIX::DateOfBirth self, FIX::LOCALMKTDATE const & value) -> DateOfBirth

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_DateOfBirth(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DateOfBirth
    __del__ = lambda self: None
DateOfBirth_swigregister = _quickfix.DateOfBirth_swigregister
DateOfBirth_swigregister(DateOfBirth)

class TradeReportTransType(IntField):
    """Proxy of C++ FIX::TradeReportTransType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeReportTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeReportTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeReportTransType self) -> TradeReportTransType
        __init__(FIX::TradeReportTransType self, FIX::INT const & value) -> TradeReportTransType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradeReportTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeReportTransType
    __del__ = lambda self: None
TradeReportTransType_swigregister = _quickfix.TradeReportTransType_swigregister
TradeReportTransType_swigregister(TradeReportTransType)

class CardHolderName(StringField):
    """Proxy of C++ FIX::CardHolderName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardHolderName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CardHolderName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CardHolderName self) -> CardHolderName
        __init__(FIX::CardHolderName self, FIX::STRING const & value) -> CardHolderName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CardHolderName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CardHolderName
    __del__ = lambda self: None
CardHolderName_swigregister = _quickfix.CardHolderName_swigregister
CardHolderName_swigregister(CardHolderName)

class CardNumber(StringField):
    """Proxy of C++ FIX::CardNumber class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CardNumber, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CardNumber self) -> CardNumber
        __init__(FIX::CardNumber self, FIX::STRING const & value) -> CardNumber

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CardNumber(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CardNumber
    __del__ = lambda self: None
CardNumber_swigregister = _quickfix.CardNumber_swigregister
CardNumber_swigregister(CardNumber)

class CardExpDate(StringField):
    """Proxy of C++ FIX::CardExpDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardExpDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CardExpDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CardExpDate self) -> CardExpDate
        __init__(FIX::CardExpDate self, FIX::LOCALMKTDATE const & value) -> CardExpDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_CardExpDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CardExpDate
    __del__ = lambda self: None
CardExpDate_swigregister = _quickfix.CardExpDate_swigregister
CardExpDate_swigregister(CardExpDate)

class CardIssNo(StringField):
    """Proxy of C++ FIX::CardIssNo class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardIssNo, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CardIssNo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CardIssNo self) -> CardIssNo
        __init__(FIX::CardIssNo self, FIX::STRING const & value) -> CardIssNo

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CardIssNo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CardIssNo
    __del__ = lambda self: None
CardIssNo_swigregister = _quickfix.CardIssNo_swigregister
CardIssNo_swigregister(CardIssNo)

class PaymentMethod(IntField):
    """Proxy of C++ FIX::PaymentMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PaymentMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PaymentMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PaymentMethod self) -> PaymentMethod
        __init__(FIX::PaymentMethod self, FIX::INT const & value) -> PaymentMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PaymentMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PaymentMethod
    __del__ = lambda self: None
PaymentMethod_swigregister = _quickfix.PaymentMethod_swigregister
PaymentMethod_swigregister(PaymentMethod)

class RegistAcctType(StringField):
    """Proxy of C++ FIX::RegistAcctType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistAcctType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistAcctType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RegistAcctType self) -> RegistAcctType
        __init__(FIX::RegistAcctType self, FIX::STRING const & value) -> RegistAcctType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RegistAcctType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RegistAcctType
    __del__ = lambda self: None
RegistAcctType_swigregister = _quickfix.RegistAcctType_swigregister
RegistAcctType_swigregister(RegistAcctType)

class Designation(StringField):
    """Proxy of C++ FIX::Designation class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Designation, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Designation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Designation self) -> Designation
        __init__(FIX::Designation self, FIX::STRING const & value) -> Designation

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Designation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Designation
    __del__ = lambda self: None
Designation_swigregister = _quickfix.Designation_swigregister
Designation_swigregister(Designation)

class TaxAdvantageType(IntField):
    """Proxy of C++ FIX::TaxAdvantageType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TaxAdvantageType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TaxAdvantageType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TaxAdvantageType self) -> TaxAdvantageType
        __init__(FIX::TaxAdvantageType self, FIX::INT const & value) -> TaxAdvantageType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TaxAdvantageType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TaxAdvantageType
    __del__ = lambda self: None
TaxAdvantageType_swigregister = _quickfix.TaxAdvantageType_swigregister
TaxAdvantageType_swigregister(TaxAdvantageType)

class RegistRejReasonText(StringField):
    """Proxy of C++ FIX::RegistRejReasonText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistRejReasonText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistRejReasonText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RegistRejReasonText self) -> RegistRejReasonText
        __init__(FIX::RegistRejReasonText self, FIX::STRING const & value) -> RegistRejReasonText

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RegistRejReasonText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RegistRejReasonText
    __del__ = lambda self: None
RegistRejReasonText_swigregister = _quickfix.RegistRejReasonText_swigregister
RegistRejReasonText_swigregister(RegistRejReasonText)

class FundRenewWaiv(CharField):
    """Proxy of C++ FIX::FundRenewWaiv class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FundRenewWaiv, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FundRenewWaiv, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FundRenewWaiv self) -> FundRenewWaiv
        __init__(FIX::FundRenewWaiv self, FIX::CHAR const & value) -> FundRenewWaiv

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_FundRenewWaiv(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FundRenewWaiv
    __del__ = lambda self: None
FundRenewWaiv_swigregister = _quickfix.FundRenewWaiv_swigregister
FundRenewWaiv_swigregister(FundRenewWaiv)

class CashDistribAgentName(StringField):
    """Proxy of C++ FIX::CashDistribAgentName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribAgentName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribAgentName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashDistribAgentName self) -> CashDistribAgentName
        __init__(FIX::CashDistribAgentName self, FIX::STRING const & value) -> CashDistribAgentName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashDistribAgentName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashDistribAgentName
    __del__ = lambda self: None
CashDistribAgentName_swigregister = _quickfix.CashDistribAgentName_swigregister
CashDistribAgentName_swigregister(CashDistribAgentName)

class CashDistribAgentCode(StringField):
    """Proxy of C++ FIX::CashDistribAgentCode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribAgentCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribAgentCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashDistribAgentCode self) -> CashDistribAgentCode
        __init__(FIX::CashDistribAgentCode self, FIX::STRING const & value) -> CashDistribAgentCode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashDistribAgentCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashDistribAgentCode
    __del__ = lambda self: None
CashDistribAgentCode_swigregister = _quickfix.CashDistribAgentCode_swigregister
CashDistribAgentCode_swigregister(CashDistribAgentCode)

class CashDistribAgentAcctNumber(StringField):
    """Proxy of C++ FIX::CashDistribAgentAcctNumber class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribAgentAcctNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribAgentAcctNumber, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashDistribAgentAcctNumber self) -> CashDistribAgentAcctNumber
        __init__(FIX::CashDistribAgentAcctNumber self, FIX::STRING const & value) -> CashDistribAgentAcctNumber

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashDistribAgentAcctNumber(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashDistribAgentAcctNumber
    __del__ = lambda self: None
CashDistribAgentAcctNumber_swigregister = _quickfix.CashDistribAgentAcctNumber_swigregister
CashDistribAgentAcctNumber_swigregister(CashDistribAgentAcctNumber)

class CashDistribPayRef(StringField):
    """Proxy of C++ FIX::CashDistribPayRef class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribPayRef, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribPayRef, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashDistribPayRef self) -> CashDistribPayRef
        __init__(FIX::CashDistribPayRef self, FIX::STRING const & value) -> CashDistribPayRef

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashDistribPayRef(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashDistribPayRef
    __del__ = lambda self: None
CashDistribPayRef_swigregister = _quickfix.CashDistribPayRef_swigregister
CashDistribPayRef_swigregister(CashDistribPayRef)

class CardStartDate(StringField):
    """Proxy of C++ FIX::CardStartDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardStartDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CardStartDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CardStartDate self) -> CardStartDate
        __init__(FIX::CardStartDate self, FIX::LOCALMKTDATE const & value) -> CardStartDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_CardStartDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CardStartDate
    __del__ = lambda self: None
CardStartDate_swigregister = _quickfix.CardStartDate_swigregister
CardStartDate_swigregister(CardStartDate)

class PaymentDate(StringField):
    """Proxy of C++ FIX::PaymentDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PaymentDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PaymentDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PaymentDate self) -> PaymentDate
        __init__(FIX::PaymentDate self, FIX::LOCALMKTDATE const & value) -> PaymentDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_PaymentDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PaymentDate
    __del__ = lambda self: None
PaymentDate_swigregister = _quickfix.PaymentDate_swigregister
PaymentDate_swigregister(PaymentDate)

class PaymentRemitterID(StringField):
    """Proxy of C++ FIX::PaymentRemitterID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PaymentRemitterID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PaymentRemitterID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PaymentRemitterID self) -> PaymentRemitterID
        __init__(FIX::PaymentRemitterID self, FIX::STRING const & value) -> PaymentRemitterID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PaymentRemitterID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PaymentRemitterID
    __del__ = lambda self: None
PaymentRemitterID_swigregister = _quickfix.PaymentRemitterID_swigregister
PaymentRemitterID_swigregister(PaymentRemitterID)

class RegistStatus(CharField):
    """Proxy of C++ FIX::RegistStatus class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RegistStatus self) -> RegistStatus
        __init__(FIX::RegistStatus self, FIX::CHAR const & value) -> RegistStatus

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_RegistStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RegistStatus
    __del__ = lambda self: None
RegistStatus_swigregister = _quickfix.RegistStatus_swigregister
RegistStatus_swigregister(RegistStatus)

class RegistRejReasonCode(IntField):
    """Proxy of C++ FIX::RegistRejReasonCode class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistRejReasonCode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistRejReasonCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RegistRejReasonCode self) -> RegistRejReasonCode
        __init__(FIX::RegistRejReasonCode self, FIX::INT const & value) -> RegistRejReasonCode

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RegistRejReasonCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RegistRejReasonCode
    __del__ = lambda self: None
RegistRejReasonCode_swigregister = _quickfix.RegistRejReasonCode_swigregister
RegistRejReasonCode_swigregister(RegistRejReasonCode)

class RegistRefID(StringField):
    """Proxy of C++ FIX::RegistRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RegistRefID self) -> RegistRefID
        __init__(FIX::RegistRefID self, FIX::STRING const & value) -> RegistRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RegistRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RegistRefID
    __del__ = lambda self: None
RegistRefID_swigregister = _quickfix.RegistRefID_swigregister
RegistRefID_swigregister(RegistRefID)

class RegistDetls(StringField):
    """Proxy of C++ FIX::RegistDetls class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistDetls, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistDetls, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RegistDetls self) -> RegistDetls
        __init__(FIX::RegistDetls self, FIX::STRING const & value) -> RegistDetls

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RegistDetls(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RegistDetls
    __del__ = lambda self: None
RegistDetls_swigregister = _quickfix.RegistDetls_swigregister
RegistDetls_swigregister(RegistDetls)

class NoDistribInsts(IntField):
    """Proxy of C++ FIX::NoDistribInsts class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDistribInsts, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoDistribInsts, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoDistribInsts self) -> NoDistribInsts
        __init__(FIX::NoDistribInsts self, FIX::NUMINGROUP const & value) -> NoDistribInsts

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoDistribInsts(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoDistribInsts
    __del__ = lambda self: None
NoDistribInsts_swigregister = _quickfix.NoDistribInsts_swigregister
NoDistribInsts_swigregister(NoDistribInsts)

class RegistEmail(StringField):
    """Proxy of C++ FIX::RegistEmail class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistEmail, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistEmail, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RegistEmail self) -> RegistEmail
        __init__(FIX::RegistEmail self, FIX::STRING const & value) -> RegistEmail

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RegistEmail(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RegistEmail
    __del__ = lambda self: None
RegistEmail_swigregister = _quickfix.RegistEmail_swigregister
RegistEmail_swigregister(RegistEmail)

class DistribPercentage(DoubleField):
    """Proxy of C++ FIX::DistribPercentage class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistribPercentage, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistribPercentage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DistribPercentage self) -> DistribPercentage
        __init__(FIX::DistribPercentage self, FIX::PERCENTAGE const & value) -> DistribPercentage

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_DistribPercentage(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DistribPercentage
    __del__ = lambda self: None
DistribPercentage_swigregister = _quickfix.DistribPercentage_swigregister
DistribPercentage_swigregister(DistribPercentage)

class RegistID(StringField):
    """Proxy of C++ FIX::RegistID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RegistID self) -> RegistID
        __init__(FIX::RegistID self, FIX::STRING const & value) -> RegistID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RegistID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RegistID
    __del__ = lambda self: None
RegistID_swigregister = _quickfix.RegistID_swigregister
RegistID_swigregister(RegistID)

class RegistTransType(CharField):
    """Proxy of C++ FIX::RegistTransType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RegistTransType self) -> RegistTransType
        __init__(FIX::RegistTransType self, FIX::CHAR const & value) -> RegistTransType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_RegistTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RegistTransType
    __del__ = lambda self: None
RegistTransType_swigregister = _quickfix.RegistTransType_swigregister
RegistTransType_swigregister(RegistTransType)

class ExecValuationPoint(UtcTimeStampField):
    """Proxy of C++ FIX::ExecValuationPoint class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecValuationPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecValuationPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecValuationPoint self) -> ExecValuationPoint
        __init__(FIX::ExecValuationPoint self, bool showMilliseconds) -> ExecValuationPoint

        Parameters:
            showMilliseconds: bool

        __init__(FIX::ExecValuationPoint self, FIX::UTCTIMESTAMP const & value) -> ExecValuationPoint

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::ExecValuationPoint self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> ExecValuationPoint

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_ExecValuationPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecValuationPoint
    __del__ = lambda self: None
ExecValuationPoint_swigregister = _quickfix.ExecValuationPoint_swigregister
ExecValuationPoint_swigregister(ExecValuationPoint)

class OrderPercent(DoubleField):
    """Proxy of C++ FIX::OrderPercent class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderPercent, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderPercent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderPercent self) -> OrderPercent
        __init__(FIX::OrderPercent self, FIX::PERCENTAGE const & value) -> OrderPercent

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_OrderPercent(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderPercent
    __del__ = lambda self: None
OrderPercent_swigregister = _quickfix.OrderPercent_swigregister
OrderPercent_swigregister(OrderPercent)

class OwnershipType(CharField):
    """Proxy of C++ FIX::OwnershipType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OwnershipType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OwnershipType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OwnershipType self) -> OwnershipType
        __init__(FIX::OwnershipType self, FIX::CHAR const & value) -> OwnershipType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_OwnershipType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OwnershipType
    __del__ = lambda self: None
OwnershipType_swigregister = _quickfix.OwnershipType_swigregister
OwnershipType_swigregister(OwnershipType)

class NoContAmts(IntField):
    """Proxy of C++ FIX::NoContAmts class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoContAmts, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoContAmts, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoContAmts self) -> NoContAmts
        __init__(FIX::NoContAmts self, FIX::NUMINGROUP const & value) -> NoContAmts

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoContAmts(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoContAmts
    __del__ = lambda self: None
NoContAmts_swigregister = _quickfix.NoContAmts_swigregister
NoContAmts_swigregister(NoContAmts)

class ContAmtType(IntField):
    """Proxy of C++ FIX::ContAmtType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContAmtType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContAmtType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContAmtType self) -> ContAmtType
        __init__(FIX::ContAmtType self, FIX::INT const & value) -> ContAmtType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ContAmtType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContAmtType
    __del__ = lambda self: None
ContAmtType_swigregister = _quickfix.ContAmtType_swigregister
ContAmtType_swigregister(ContAmtType)

class ContAmtValue(DoubleField):
    """Proxy of C++ FIX::ContAmtValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContAmtValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContAmtValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContAmtValue self) -> ContAmtValue
        __init__(FIX::ContAmtValue self, FIX::FLOAT const & value) -> ContAmtValue

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_ContAmtValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContAmtValue
    __del__ = lambda self: None
ContAmtValue_swigregister = _quickfix.ContAmtValue_swigregister
ContAmtValue_swigregister(ContAmtValue)

class ContAmtCurr(StringField):
    """Proxy of C++ FIX::ContAmtCurr class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContAmtCurr, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContAmtCurr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContAmtCurr self) -> ContAmtCurr
        __init__(FIX::ContAmtCurr self, FIX::CURRENCY const & value) -> ContAmtCurr

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_ContAmtCurr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContAmtCurr
    __del__ = lambda self: None
ContAmtCurr_swigregister = _quickfix.ContAmtCurr_swigregister
ContAmtCurr_swigregister(ContAmtCurr)

class OwnerType(IntField):
    """Proxy of C++ FIX::OwnerType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OwnerType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OwnerType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OwnerType self) -> OwnerType
        __init__(FIX::OwnerType self, FIX::INT const & value) -> OwnerType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_OwnerType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OwnerType
    __del__ = lambda self: None
OwnerType_swigregister = _quickfix.OwnerType_swigregister
OwnerType_swigregister(OwnerType)

class PartySubID(StringField):
    """Proxy of C++ FIX::PartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PartySubID self) -> PartySubID
        __init__(FIX::PartySubID self, FIX::STRING const & value) -> PartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PartySubID
    __del__ = lambda self: None
PartySubID_swigregister = _quickfix.PartySubID_swigregister
PartySubID_swigregister(PartySubID)

class NestedPartyID(StringField):
    """Proxy of C++ FIX::NestedPartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedPartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NestedPartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NestedPartyID self) -> NestedPartyID
        __init__(FIX::NestedPartyID self, FIX::STRING const & value) -> NestedPartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_NestedPartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NestedPartyID
    __del__ = lambda self: None
NestedPartyID_swigregister = _quickfix.NestedPartyID_swigregister
NestedPartyID_swigregister(NestedPartyID)

class NestedPartyIDSource(CharField):
    """Proxy of C++ FIX::NestedPartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedPartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NestedPartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NestedPartyIDSource self) -> NestedPartyIDSource
        __init__(FIX::NestedPartyIDSource self, FIX::CHAR const & value) -> NestedPartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_NestedPartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NestedPartyIDSource
    __del__ = lambda self: None
NestedPartyIDSource_swigregister = _quickfix.NestedPartyIDSource_swigregister
NestedPartyIDSource_swigregister(NestedPartyIDSource)

class SecondaryClOrdID(StringField):
    """Proxy of C++ FIX::SecondaryClOrdID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryClOrdID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryClOrdID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryClOrdID self) -> SecondaryClOrdID
        __init__(FIX::SecondaryClOrdID self, FIX::STRING const & value) -> SecondaryClOrdID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecondaryClOrdID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryClOrdID
    __del__ = lambda self: None
SecondaryClOrdID_swigregister = _quickfix.SecondaryClOrdID_swigregister
SecondaryClOrdID_swigregister(SecondaryClOrdID)

class SecondaryExecID(StringField):
    """Proxy of C++ FIX::SecondaryExecID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryExecID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryExecID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryExecID self) -> SecondaryExecID
        __init__(FIX::SecondaryExecID self, FIX::STRING const & value) -> SecondaryExecID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecondaryExecID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryExecID
    __del__ = lambda self: None
SecondaryExecID_swigregister = _quickfix.SecondaryExecID_swigregister
SecondaryExecID_swigregister(SecondaryExecID)

class OrderCapacity(CharField):
    """Proxy of C++ FIX::OrderCapacity class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderCapacity, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderCapacity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderCapacity self) -> OrderCapacity
        __init__(FIX::OrderCapacity self, FIX::CHAR const & value) -> OrderCapacity

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_OrderCapacity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderCapacity
    __del__ = lambda self: None
OrderCapacity_swigregister = _quickfix.OrderCapacity_swigregister
OrderCapacity_swigregister(OrderCapacity)

class OrderRestrictions(StringField):
    """Proxy of C++ FIX::OrderRestrictions class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderRestrictions, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderRestrictions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderRestrictions self) -> OrderRestrictions
        __init__(FIX::OrderRestrictions self, FIX::MULTIPLECHARVALUE const & value) -> OrderRestrictions

        Parameters:
            value: FIX::MULTIPLECHARVALUE const &

        """
        this = _quickfix.new_OrderRestrictions(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderRestrictions
    __del__ = lambda self: None
OrderRestrictions_swigregister = _quickfix.OrderRestrictions_swigregister
OrderRestrictions_swigregister(OrderRestrictions)

class MassCancelRequestType(CharField):
    """Proxy of C++ FIX::MassCancelRequestType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassCancelRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassCancelRequestType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MassCancelRequestType self) -> MassCancelRequestType
        __init__(FIX::MassCancelRequestType self, FIX::CHAR const & value) -> MassCancelRequestType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_MassCancelRequestType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MassCancelRequestType
    __del__ = lambda self: None
MassCancelRequestType_swigregister = _quickfix.MassCancelRequestType_swigregister
MassCancelRequestType_swigregister(MassCancelRequestType)

class MassCancelResponse(CharField):
    """Proxy of C++ FIX::MassCancelResponse class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassCancelResponse, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassCancelResponse, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MassCancelResponse self) -> MassCancelResponse
        __init__(FIX::MassCancelResponse self, FIX::CHAR const & value) -> MassCancelResponse

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_MassCancelResponse(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MassCancelResponse
    __del__ = lambda self: None
MassCancelResponse_swigregister = _quickfix.MassCancelResponse_swigregister
MassCancelResponse_swigregister(MassCancelResponse)

class MassCancelRejectReason(IntField):
    """Proxy of C++ FIX::MassCancelRejectReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassCancelRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassCancelRejectReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MassCancelRejectReason self) -> MassCancelRejectReason
        __init__(FIX::MassCancelRejectReason self, FIX::INT const & value) -> MassCancelRejectReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MassCancelRejectReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MassCancelRejectReason
    __del__ = lambda self: None
MassCancelRejectReason_swigregister = _quickfix.MassCancelRejectReason_swigregister
MassCancelRejectReason_swigregister(MassCancelRejectReason)

class TotalAffectedOrders(IntField):
    """Proxy of C++ FIX::TotalAffectedOrders class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalAffectedOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalAffectedOrders, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotalAffectedOrders self) -> TotalAffectedOrders
        __init__(FIX::TotalAffectedOrders self, FIX::INT const & value) -> TotalAffectedOrders

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotalAffectedOrders(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotalAffectedOrders
    __del__ = lambda self: None
TotalAffectedOrders_swigregister = _quickfix.TotalAffectedOrders_swigregister
TotalAffectedOrders_swigregister(TotalAffectedOrders)

class NoAffectedOrders(IntField):
    """Proxy of C++ FIX::NoAffectedOrders class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoAffectedOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoAffectedOrders, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoAffectedOrders self) -> NoAffectedOrders
        __init__(FIX::NoAffectedOrders self, FIX::NUMINGROUP const & value) -> NoAffectedOrders

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoAffectedOrders(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoAffectedOrders
    __del__ = lambda self: None
NoAffectedOrders_swigregister = _quickfix.NoAffectedOrders_swigregister
NoAffectedOrders_swigregister(NoAffectedOrders)

class AffectedOrderID(StringField):
    """Proxy of C++ FIX::AffectedOrderID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AffectedOrderID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AffectedOrderID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AffectedOrderID self) -> AffectedOrderID
        __init__(FIX::AffectedOrderID self, FIX::STRING const & value) -> AffectedOrderID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AffectedOrderID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AffectedOrderID
    __del__ = lambda self: None
AffectedOrderID_swigregister = _quickfix.AffectedOrderID_swigregister
AffectedOrderID_swigregister(AffectedOrderID)

class AffectedSecondaryOrderID(StringField):
    """Proxy of C++ FIX::AffectedSecondaryOrderID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AffectedSecondaryOrderID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AffectedSecondaryOrderID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AffectedSecondaryOrderID self) -> AffectedSecondaryOrderID
        __init__(FIX::AffectedSecondaryOrderID self, FIX::STRING const & value) -> AffectedSecondaryOrderID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AffectedSecondaryOrderID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AffectedSecondaryOrderID
    __del__ = lambda self: None
AffectedSecondaryOrderID_swigregister = _quickfix.AffectedSecondaryOrderID_swigregister
AffectedSecondaryOrderID_swigregister(AffectedSecondaryOrderID)

class QuoteType(IntField):
    """Proxy of C++ FIX::QuoteType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteType self) -> QuoteType
        __init__(FIX::QuoteType self, FIX::INT const & value) -> QuoteType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteType
    __del__ = lambda self: None
QuoteType_swigregister = _quickfix.QuoteType_swigregister
QuoteType_swigregister(QuoteType)

class NestedPartyRole(IntField):
    """Proxy of C++ FIX::NestedPartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NestedPartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NestedPartyRole self) -> NestedPartyRole
        __init__(FIX::NestedPartyRole self, FIX::INT const & value) -> NestedPartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NestedPartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NestedPartyRole
    __del__ = lambda self: None
NestedPartyRole_swigregister = _quickfix.NestedPartyRole_swigregister
NestedPartyRole_swigregister(NestedPartyRole)

class NoNestedPartyIDs(IntField):
    """Proxy of C++ FIX::NoNestedPartyIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNestedPartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNestedPartyIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNestedPartyIDs self) -> NoNestedPartyIDs
        __init__(FIX::NoNestedPartyIDs self, FIX::NUMINGROUP const & value) -> NoNestedPartyIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNestedPartyIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNestedPartyIDs
    __del__ = lambda self: None
NoNestedPartyIDs_swigregister = _quickfix.NoNestedPartyIDs_swigregister
NoNestedPartyIDs_swigregister(NoNestedPartyIDs)

class TotalAccruedInterestAmt(DoubleField):
    """Proxy of C++ FIX::TotalAccruedInterestAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalAccruedInterestAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalAccruedInterestAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotalAccruedInterestAmt self) -> TotalAccruedInterestAmt
        __init__(FIX::TotalAccruedInterestAmt self, FIX::AMT const & value) -> TotalAccruedInterestAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_TotalAccruedInterestAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotalAccruedInterestAmt
    __del__ = lambda self: None
TotalAccruedInterestAmt_swigregister = _quickfix.TotalAccruedInterestAmt_swigregister
TotalAccruedInterestAmt_swigregister(TotalAccruedInterestAmt)

class MaturityDate(StringField):
    """Proxy of C++ FIX::MaturityDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaturityDate self) -> MaturityDate
        __init__(FIX::MaturityDate self, FIX::LOCALMKTDATE const & value) -> MaturityDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_MaturityDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaturityDate
    __del__ = lambda self: None
MaturityDate_swigregister = _quickfix.MaturityDate_swigregister
MaturityDate_swigregister(MaturityDate)

class UnderlyingMaturityDate(StringField):
    """Proxy of C++ FIX::UnderlyingMaturityDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingMaturityDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingMaturityDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingMaturityDate self) -> UnderlyingMaturityDate
        __init__(FIX::UnderlyingMaturityDate self, FIX::LOCALMKTDATE const & value) -> UnderlyingMaturityDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_UnderlyingMaturityDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingMaturityDate
    __del__ = lambda self: None
UnderlyingMaturityDate_swigregister = _quickfix.UnderlyingMaturityDate_swigregister
UnderlyingMaturityDate_swigregister(UnderlyingMaturityDate)

class InstrRegistry(StringField):
    """Proxy of C++ FIX::InstrRegistry class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstrRegistry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InstrRegistry self) -> InstrRegistry
        __init__(FIX::InstrRegistry self, FIX::STRING const & value) -> InstrRegistry

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_InstrRegistry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InstrRegistry
    __del__ = lambda self: None
InstrRegistry_swigregister = _quickfix.InstrRegistry_swigregister
InstrRegistry_swigregister(InstrRegistry)

class CashMargin(CharField):
    """Proxy of C++ FIX::CashMargin class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashMargin, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashMargin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashMargin self) -> CashMargin
        __init__(FIX::CashMargin self, FIX::CHAR const & value) -> CashMargin

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_CashMargin(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashMargin
    __del__ = lambda self: None
CashMargin_swigregister = _quickfix.CashMargin_swigregister
CashMargin_swigregister(CashMargin)

class NestedPartySubID(StringField):
    """Proxy of C++ FIX::NestedPartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedPartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NestedPartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NestedPartySubID self) -> NestedPartySubID
        __init__(FIX::NestedPartySubID self, FIX::STRING const & value) -> NestedPartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_NestedPartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NestedPartySubID
    __del__ = lambda self: None
NestedPartySubID_swigregister = _quickfix.NestedPartySubID_swigregister
NestedPartySubID_swigregister(NestedPartySubID)

class Scope(StringField):
    """Proxy of C++ FIX::Scope class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scope, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scope, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Scope self) -> Scope
        __init__(FIX::Scope self, FIX::MULTIPLECHARVALUE const & value) -> Scope

        Parameters:
            value: FIX::MULTIPLECHARVALUE const &

        """
        this = _quickfix.new_Scope(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Scope
    __del__ = lambda self: None
Scope_swigregister = _quickfix.Scope_swigregister
Scope_swigregister(Scope)

class MDImplicitDelete(BoolField):
    """Proxy of C++ FIX::MDImplicitDelete class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDImplicitDelete, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDImplicitDelete, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDImplicitDelete self) -> MDImplicitDelete
        __init__(FIX::MDImplicitDelete self, FIX::BOOLEAN const & value) -> MDImplicitDelete

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_MDImplicitDelete(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDImplicitDelete
    __del__ = lambda self: None
MDImplicitDelete_swigregister = _quickfix.MDImplicitDelete_swigregister
MDImplicitDelete_swigregister(MDImplicitDelete)

class CrossID(StringField):
    """Proxy of C++ FIX::CrossID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrossID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CrossID self) -> CrossID
        __init__(FIX::CrossID self, FIX::STRING const & value) -> CrossID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CrossID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CrossID
    __del__ = lambda self: None
CrossID_swigregister = _quickfix.CrossID_swigregister
CrossID_swigregister(CrossID)

class CrossType(IntField):
    """Proxy of C++ FIX::CrossType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrossType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CrossType self) -> CrossType
        __init__(FIX::CrossType self, FIX::INT const & value) -> CrossType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CrossType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CrossType
    __del__ = lambda self: None
CrossType_swigregister = _quickfix.CrossType_swigregister
CrossType_swigregister(CrossType)

class CrossPrioritization(IntField):
    """Proxy of C++ FIX::CrossPrioritization class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossPrioritization, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrossPrioritization, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CrossPrioritization self) -> CrossPrioritization
        __init__(FIX::CrossPrioritization self, FIX::INT const & value) -> CrossPrioritization

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CrossPrioritization(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CrossPrioritization
    __del__ = lambda self: None
CrossPrioritization_swigregister = _quickfix.CrossPrioritization_swigregister
CrossPrioritization_swigregister(CrossPrioritization)

class OrigCrossID(StringField):
    """Proxy of C++ FIX::OrigCrossID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigCrossID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigCrossID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigCrossID self) -> OrigCrossID
        __init__(FIX::OrigCrossID self, FIX::STRING const & value) -> OrigCrossID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OrigCrossID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigCrossID
    __del__ = lambda self: None
OrigCrossID_swigregister = _quickfix.OrigCrossID_swigregister
OrigCrossID_swigregister(OrigCrossID)

class NoSides(IntField):
    """Proxy of C++ FIX::NoSides class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSides, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSides, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoSides self) -> NoSides
        __init__(FIX::NoSides self, FIX::NUMINGROUP const & value) -> NoSides

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoSides(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoSides
    __del__ = lambda self: None
NoSides_swigregister = _quickfix.NoSides_swigregister
NoSides_swigregister(NoSides)

class NoLegs(IntField):
    """Proxy of C++ FIX::NoLegs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoLegs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoLegs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoLegs self) -> NoLegs
        __init__(FIX::NoLegs self, FIX::NUMINGROUP const & value) -> NoLegs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoLegs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoLegs
    __del__ = lambda self: None
NoLegs_swigregister = _quickfix.NoLegs_swigregister
NoLegs_swigregister(NoLegs)

class LegCurrency(StringField):
    """Proxy of C++ FIX::LegCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegCurrency self) -> LegCurrency
        __init__(FIX::LegCurrency self, FIX::CURRENCY const & value) -> LegCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_LegCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegCurrency
    __del__ = lambda self: None
LegCurrency_swigregister = _quickfix.LegCurrency_swigregister
LegCurrency_swigregister(LegCurrency)

class TotalNumSecurityTypes(IntField):
    """Proxy of C++ FIX::TotalNumSecurityTypes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalNumSecurityTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalNumSecurityTypes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotalNumSecurityTypes self) -> TotalNumSecurityTypes
        __init__(FIX::TotalNumSecurityTypes self, FIX::INT const & value) -> TotalNumSecurityTypes

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotalNumSecurityTypes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotalNumSecurityTypes
    __del__ = lambda self: None
TotalNumSecurityTypes_swigregister = _quickfix.TotalNumSecurityTypes_swigregister
TotalNumSecurityTypes_swigregister(TotalNumSecurityTypes)

class NoSecurityTypes(IntField):
    """Proxy of C++ FIX::NoSecurityTypes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSecurityTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSecurityTypes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoSecurityTypes self) -> NoSecurityTypes
        __init__(FIX::NoSecurityTypes self, FIX::NUMINGROUP const & value) -> NoSecurityTypes

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoSecurityTypes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoSecurityTypes
    __del__ = lambda self: None
NoSecurityTypes_swigregister = _quickfix.NoSecurityTypes_swigregister
NoSecurityTypes_swigregister(NoSecurityTypes)

class SecurityListRequestType(IntField):
    """Proxy of C++ FIX::SecurityListRequestType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityListRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityListRequestType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityListRequestType self) -> SecurityListRequestType
        __init__(FIX::SecurityListRequestType self, FIX::INT const & value) -> SecurityListRequestType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecurityListRequestType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityListRequestType
    __del__ = lambda self: None
SecurityListRequestType_swigregister = _quickfix.SecurityListRequestType_swigregister
SecurityListRequestType_swigregister(SecurityListRequestType)

class SecurityRequestResult(IntField):
    """Proxy of C++ FIX::SecurityRequestResult class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityRequestResult, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityRequestResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityRequestResult self) -> SecurityRequestResult
        __init__(FIX::SecurityRequestResult self, FIX::INT const & value) -> SecurityRequestResult

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecurityRequestResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityRequestResult
    __del__ = lambda self: None
SecurityRequestResult_swigregister = _quickfix.SecurityRequestResult_swigregister
SecurityRequestResult_swigregister(SecurityRequestResult)

class RoundLot(DoubleField):
    """Proxy of C++ FIX::RoundLot class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoundLot, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoundLot, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RoundLot self) -> RoundLot
        __init__(FIX::RoundLot self, FIX::QTY const & value) -> RoundLot

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_RoundLot(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RoundLot
    __del__ = lambda self: None
RoundLot_swigregister = _quickfix.RoundLot_swigregister
RoundLot_swigregister(RoundLot)

class MinTradeVol(DoubleField):
    """Proxy of C++ FIX::MinTradeVol class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinTradeVol, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinTradeVol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MinTradeVol self) -> MinTradeVol
        __init__(FIX::MinTradeVol self, FIX::QTY const & value) -> MinTradeVol

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MinTradeVol(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MinTradeVol
    __del__ = lambda self: None
MinTradeVol_swigregister = _quickfix.MinTradeVol_swigregister
MinTradeVol_swigregister(MinTradeVol)

class MultiLegRptTypeReq(IntField):
    """Proxy of C++ FIX::MultiLegRptTypeReq class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiLegRptTypeReq, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiLegRptTypeReq, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MultiLegRptTypeReq self) -> MultiLegRptTypeReq
        __init__(FIX::MultiLegRptTypeReq self, FIX::INT const & value) -> MultiLegRptTypeReq

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MultiLegRptTypeReq(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MultiLegRptTypeReq
    __del__ = lambda self: None
MultiLegRptTypeReq_swigregister = _quickfix.MultiLegRptTypeReq_swigregister
MultiLegRptTypeReq_swigregister(MultiLegRptTypeReq)

class LegPositionEffect(CharField):
    """Proxy of C++ FIX::LegPositionEffect class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPositionEffect, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegPositionEffect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegPositionEffect self) -> LegPositionEffect
        __init__(FIX::LegPositionEffect self, FIX::CHAR const & value) -> LegPositionEffect

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_LegPositionEffect(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegPositionEffect
    __del__ = lambda self: None
LegPositionEffect_swigregister = _quickfix.LegPositionEffect_swigregister
LegPositionEffect_swigregister(LegPositionEffect)

class LegCoveredOrUncovered(IntField):
    """Proxy of C++ FIX::LegCoveredOrUncovered class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCoveredOrUncovered, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegCoveredOrUncovered, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegCoveredOrUncovered self) -> LegCoveredOrUncovered
        __init__(FIX::LegCoveredOrUncovered self, FIX::INT const & value) -> LegCoveredOrUncovered

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegCoveredOrUncovered(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegCoveredOrUncovered
    __del__ = lambda self: None
LegCoveredOrUncovered_swigregister = _quickfix.LegCoveredOrUncovered_swigregister
LegCoveredOrUncovered_swigregister(LegCoveredOrUncovered)

class LegPrice(DoubleField):
    """Proxy of C++ FIX::LegPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegPrice self) -> LegPrice
        __init__(FIX::LegPrice self, FIX::PRICE const & value) -> LegPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LegPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegPrice
    __del__ = lambda self: None
LegPrice_swigregister = _quickfix.LegPrice_swigregister
LegPrice_swigregister(LegPrice)

class TradSesStatusRejReason(IntField):
    """Proxy of C++ FIX::TradSesStatusRejReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesStatusRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesStatusRejReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesStatusRejReason self) -> TradSesStatusRejReason
        __init__(FIX::TradSesStatusRejReason self, FIX::INT const & value) -> TradSesStatusRejReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradSesStatusRejReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesStatusRejReason
    __del__ = lambda self: None
TradSesStatusRejReason_swigregister = _quickfix.TradSesStatusRejReason_swigregister
TradSesStatusRejReason_swigregister(TradSesStatusRejReason)

class TradeRequestID(StringField):
    """Proxy of C++ FIX::TradeRequestID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeRequestID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeRequestID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeRequestID self) -> TradeRequestID
        __init__(FIX::TradeRequestID self, FIX::STRING const & value) -> TradeRequestID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradeRequestID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeRequestID
    __del__ = lambda self: None
TradeRequestID_swigregister = _quickfix.TradeRequestID_swigregister
TradeRequestID_swigregister(TradeRequestID)

class TradeRequestType(IntField):
    """Proxy of C++ FIX::TradeRequestType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeRequestType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeRequestType self) -> TradeRequestType
        __init__(FIX::TradeRequestType self, FIX::INT const & value) -> TradeRequestType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradeRequestType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeRequestType
    __del__ = lambda self: None
TradeRequestType_swigregister = _quickfix.TradeRequestType_swigregister
TradeRequestType_swigregister(TradeRequestType)

class PreviouslyReported(BoolField):
    """Proxy of C++ FIX::PreviouslyReported class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreviouslyReported, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PreviouslyReported, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PreviouslyReported self) -> PreviouslyReported
        __init__(FIX::PreviouslyReported self, FIX::BOOLEAN const & value) -> PreviouslyReported

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_PreviouslyReported(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PreviouslyReported
    __del__ = lambda self: None
PreviouslyReported_swigregister = _quickfix.PreviouslyReported_swigregister
PreviouslyReported_swigregister(PreviouslyReported)

class TradeReportID(StringField):
    """Proxy of C++ FIX::TradeReportID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeReportID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeReportID self) -> TradeReportID
        __init__(FIX::TradeReportID self, FIX::STRING const & value) -> TradeReportID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradeReportID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeReportID
    __del__ = lambda self: None
TradeReportID_swigregister = _quickfix.TradeReportID_swigregister
TradeReportID_swigregister(TradeReportID)

class TradeReportRefID(StringField):
    """Proxy of C++ FIX::TradeReportRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeReportRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeReportRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeReportRefID self) -> TradeReportRefID
        __init__(FIX::TradeReportRefID self, FIX::STRING const & value) -> TradeReportRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradeReportRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeReportRefID
    __del__ = lambda self: None
TradeReportRefID_swigregister = _quickfix.TradeReportRefID_swigregister
TradeReportRefID_swigregister(TradeReportRefID)

class MatchStatus(CharField):
    """Proxy of C++ FIX::MatchStatus class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatchStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MatchStatus self) -> MatchStatus
        __init__(FIX::MatchStatus self, FIX::CHAR const & value) -> MatchStatus

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_MatchStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MatchStatus
    __del__ = lambda self: None
MatchStatus_swigregister = _quickfix.MatchStatus_swigregister
MatchStatus_swigregister(MatchStatus)

class MatchType(StringField):
    """Proxy of C++ FIX::MatchType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatchType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MatchType self) -> MatchType
        __init__(FIX::MatchType self, FIX::STRING const & value) -> MatchType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MatchType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MatchType
    __del__ = lambda self: None
MatchType_swigregister = _quickfix.MatchType_swigregister
MatchType_swigregister(MatchType)

class OddLot(BoolField):
    """Proxy of C++ FIX::OddLot class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OddLot, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OddLot, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OddLot self) -> OddLot
        __init__(FIX::OddLot self, FIX::BOOLEAN const & value) -> OddLot

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_OddLot(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OddLot
    __del__ = lambda self: None
OddLot_swigregister = _quickfix.OddLot_swigregister
OddLot_swigregister(OddLot)

class NoClearingInstructions(IntField):
    """Proxy of C++ FIX::NoClearingInstructions class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoClearingInstructions, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoClearingInstructions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoClearingInstructions self) -> NoClearingInstructions
        __init__(FIX::NoClearingInstructions self, FIX::NUMINGROUP const & value) -> NoClearingInstructions

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoClearingInstructions(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoClearingInstructions
    __del__ = lambda self: None
NoClearingInstructions_swigregister = _quickfix.NoClearingInstructions_swigregister
NoClearingInstructions_swigregister(NoClearingInstructions)

class ClearingInstruction(IntField):
    """Proxy of C++ FIX::ClearingInstruction class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearingInstruction, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClearingInstruction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ClearingInstruction self) -> ClearingInstruction
        __init__(FIX::ClearingInstruction self, FIX::INT const & value) -> ClearingInstruction

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ClearingInstruction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ClearingInstruction
    __del__ = lambda self: None
ClearingInstruction_swigregister = _quickfix.ClearingInstruction_swigregister
ClearingInstruction_swigregister(ClearingInstruction)

class TradeInputSource(StringField):
    """Proxy of C++ FIX::TradeInputSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeInputSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeInputSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeInputSource self) -> TradeInputSource
        __init__(FIX::TradeInputSource self, FIX::STRING const & value) -> TradeInputSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradeInputSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeInputSource
    __del__ = lambda self: None
TradeInputSource_swigregister = _quickfix.TradeInputSource_swigregister
TradeInputSource_swigregister(TradeInputSource)

class TradeInputDevice(StringField):
    """Proxy of C++ FIX::TradeInputDevice class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeInputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeInputDevice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeInputDevice self) -> TradeInputDevice
        __init__(FIX::TradeInputDevice self, FIX::STRING const & value) -> TradeInputDevice

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradeInputDevice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeInputDevice
    __del__ = lambda self: None
TradeInputDevice_swigregister = _quickfix.TradeInputDevice_swigregister
TradeInputDevice_swigregister(TradeInputDevice)

class NoDates(IntField):
    """Proxy of C++ FIX::NoDates class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDates, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoDates, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoDates self) -> NoDates
        __init__(FIX::NoDates self, FIX::NUMINGROUP const & value) -> NoDates

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoDates(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoDates
    __del__ = lambda self: None
NoDates_swigregister = _quickfix.NoDates_swigregister
NoDates_swigregister(NoDates)

class AccountType(IntField):
    """Proxy of C++ FIX::AccountType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccountType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccountType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AccountType self) -> AccountType
        __init__(FIX::AccountType self, FIX::INT const & value) -> AccountType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AccountType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AccountType
    __del__ = lambda self: None
AccountType_swigregister = _quickfix.AccountType_swigregister
AccountType_swigregister(AccountType)

class CustOrderCapacity(IntField):
    """Proxy of C++ FIX::CustOrderCapacity class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustOrderCapacity, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustOrderCapacity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CustOrderCapacity self) -> CustOrderCapacity
        __init__(FIX::CustOrderCapacity self, FIX::INT const & value) -> CustOrderCapacity

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CustOrderCapacity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CustOrderCapacity
    __del__ = lambda self: None
CustOrderCapacity_swigregister = _quickfix.CustOrderCapacity_swigregister
CustOrderCapacity_swigregister(CustOrderCapacity)

class ClOrdLinkID(StringField):
    """Proxy of C++ FIX::ClOrdLinkID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClOrdLinkID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClOrdLinkID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ClOrdLinkID self) -> ClOrdLinkID
        __init__(FIX::ClOrdLinkID self, FIX::STRING const & value) -> ClOrdLinkID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ClOrdLinkID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ClOrdLinkID
    __del__ = lambda self: None
ClOrdLinkID_swigregister = _quickfix.ClOrdLinkID_swigregister
ClOrdLinkID_swigregister(ClOrdLinkID)

class MassStatusReqID(StringField):
    """Proxy of C++ FIX::MassStatusReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassStatusReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassStatusReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MassStatusReqID self) -> MassStatusReqID
        __init__(FIX::MassStatusReqID self, FIX::STRING const & value) -> MassStatusReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MassStatusReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MassStatusReqID
    __del__ = lambda self: None
MassStatusReqID_swigregister = _quickfix.MassStatusReqID_swigregister
MassStatusReqID_swigregister(MassStatusReqID)

class MassStatusReqType(IntField):
    """Proxy of C++ FIX::MassStatusReqType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassStatusReqType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassStatusReqType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MassStatusReqType self) -> MassStatusReqType
        __init__(FIX::MassStatusReqType self, FIX::INT const & value) -> MassStatusReqType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MassStatusReqType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MassStatusReqType
    __del__ = lambda self: None
MassStatusReqType_swigregister = _quickfix.MassStatusReqType_swigregister
MassStatusReqType_swigregister(MassStatusReqType)

class OrigOrdModTime(UtcTimeStampField):
    """Proxy of C++ FIX::OrigOrdModTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigOrdModTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigOrdModTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigOrdModTime self) -> OrigOrdModTime
        __init__(FIX::OrigOrdModTime self, bool showMilliseconds) -> OrigOrdModTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::OrigOrdModTime self, FIX::UTCTIMESTAMP const & value) -> OrigOrdModTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::OrigOrdModTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> OrigOrdModTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_OrigOrdModTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigOrdModTime
    __del__ = lambda self: None
OrigOrdModTime_swigregister = _quickfix.OrigOrdModTime_swigregister
OrigOrdModTime_swigregister(OrigOrdModTime)

class LegSettlmntTyp(CharField):
    """Proxy of C++ FIX::LegSettlmntTyp class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSettlmntTyp, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSettlmntTyp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSettlmntTyp self) -> LegSettlmntTyp
        __init__(FIX::LegSettlmntTyp self, FIX::CHAR const & value) -> LegSettlmntTyp

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_LegSettlmntTyp(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSettlmntTyp
    __del__ = lambda self: None
LegSettlmntTyp_swigregister = _quickfix.LegSettlmntTyp_swigregister
LegSettlmntTyp_swigregister(LegSettlmntTyp)

class LegFutSettDate(StringField):
    """Proxy of C++ FIX::LegFutSettDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegFutSettDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegFutSettDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegFutSettDate self) -> LegFutSettDate
        __init__(FIX::LegFutSettDate self, FIX::LOCALMKTDATE const & value) -> LegFutSettDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_LegFutSettDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegFutSettDate
    __del__ = lambda self: None
LegFutSettDate_swigregister = _quickfix.LegFutSettDate_swigregister
LegFutSettDate_swigregister(LegFutSettDate)

class DayBookingInst(CharField):
    """Proxy of C++ FIX::DayBookingInst class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DayBookingInst, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DayBookingInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DayBookingInst self) -> DayBookingInst
        __init__(FIX::DayBookingInst self, FIX::CHAR const & value) -> DayBookingInst

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DayBookingInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DayBookingInst
    __del__ = lambda self: None
DayBookingInst_swigregister = _quickfix.DayBookingInst_swigregister
DayBookingInst_swigregister(DayBookingInst)

class BookingUnit(CharField):
    """Proxy of C++ FIX::BookingUnit class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BookingUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BookingUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BookingUnit self) -> BookingUnit
        __init__(FIX::BookingUnit self, FIX::CHAR const & value) -> BookingUnit

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_BookingUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BookingUnit
    __del__ = lambda self: None
BookingUnit_swigregister = _quickfix.BookingUnit_swigregister
BookingUnit_swigregister(BookingUnit)

class PreallocMethod(CharField):
    """Proxy of C++ FIX::PreallocMethod class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreallocMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PreallocMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PreallocMethod self) -> PreallocMethod
        __init__(FIX::PreallocMethod self, FIX::CHAR const & value) -> PreallocMethod

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_PreallocMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PreallocMethod
    __del__ = lambda self: None
PreallocMethod_swigregister = _quickfix.PreallocMethod_swigregister
PreallocMethod_swigregister(PreallocMethod)

class UnderlyingCountryOfIssue(StringField):
    """Proxy of C++ FIX::UnderlyingCountryOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCountryOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCountryOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCountryOfIssue self) -> UnderlyingCountryOfIssue
        __init__(FIX::UnderlyingCountryOfIssue self, FIX::COUNTRY const & value) -> UnderlyingCountryOfIssue

        Parameters:
            value: FIX::COUNTRY const &

        """
        this = _quickfix.new_UnderlyingCountryOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCountryOfIssue
    __del__ = lambda self: None
UnderlyingCountryOfIssue_swigregister = _quickfix.UnderlyingCountryOfIssue_swigregister
UnderlyingCountryOfIssue_swigregister(UnderlyingCountryOfIssue)

class UnderlyingStateOrProvinceOfIssue(StringField):
    """Proxy of C++ FIX::UnderlyingStateOrProvinceOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStateOrProvinceOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStateOrProvinceOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingStateOrProvinceOfIssue self) -> UnderlyingStateOrProvinceOfIssue
        __init__(FIX::UnderlyingStateOrProvinceOfIssue self, FIX::STRING const & value) -> UnderlyingStateOrProvinceOfIssue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingStateOrProvinceOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingStateOrProvinceOfIssue
    __del__ = lambda self: None
UnderlyingStateOrProvinceOfIssue_swigregister = _quickfix.UnderlyingStateOrProvinceOfIssue_swigregister
UnderlyingStateOrProvinceOfIssue_swigregister(UnderlyingStateOrProvinceOfIssue)

class UnderlyingLocaleOfIssue(StringField):
    """Proxy of C++ FIX::UnderlyingLocaleOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLocaleOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLocaleOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLocaleOfIssue self) -> UnderlyingLocaleOfIssue
        __init__(FIX::UnderlyingLocaleOfIssue self, FIX::STRING const & value) -> UnderlyingLocaleOfIssue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLocaleOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLocaleOfIssue
    __del__ = lambda self: None
UnderlyingLocaleOfIssue_swigregister = _quickfix.UnderlyingLocaleOfIssue_swigregister
UnderlyingLocaleOfIssue_swigregister(UnderlyingLocaleOfIssue)

class UnderlyingInstrRegistry(StringField):
    """Proxy of C++ FIX::UnderlyingInstrRegistry class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingInstrRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingInstrRegistry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingInstrRegistry self) -> UnderlyingInstrRegistry
        __init__(FIX::UnderlyingInstrRegistry self, FIX::STRING const & value) -> UnderlyingInstrRegistry

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingInstrRegistry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrRegistry
    __del__ = lambda self: None
UnderlyingInstrRegistry_swigregister = _quickfix.UnderlyingInstrRegistry_swigregister
UnderlyingInstrRegistry_swigregister(UnderlyingInstrRegistry)

class LegCountryOfIssue(StringField):
    """Proxy of C++ FIX::LegCountryOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCountryOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegCountryOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegCountryOfIssue self) -> LegCountryOfIssue
        __init__(FIX::LegCountryOfIssue self, FIX::COUNTRY const & value) -> LegCountryOfIssue

        Parameters:
            value: FIX::COUNTRY const &

        """
        this = _quickfix.new_LegCountryOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegCountryOfIssue
    __del__ = lambda self: None
LegCountryOfIssue_swigregister = _quickfix.LegCountryOfIssue_swigregister
LegCountryOfIssue_swigregister(LegCountryOfIssue)

class LegStateOrProvinceOfIssue(StringField):
    """Proxy of C++ FIX::LegStateOrProvinceOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegStateOrProvinceOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegStateOrProvinceOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegStateOrProvinceOfIssue self) -> LegStateOrProvinceOfIssue
        __init__(FIX::LegStateOrProvinceOfIssue self, FIX::STRING const & value) -> LegStateOrProvinceOfIssue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegStateOrProvinceOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegStateOrProvinceOfIssue
    __del__ = lambda self: None
LegStateOrProvinceOfIssue_swigregister = _quickfix.LegStateOrProvinceOfIssue_swigregister
LegStateOrProvinceOfIssue_swigregister(LegStateOrProvinceOfIssue)

class LegLocaleOfIssue(StringField):
    """Proxy of C++ FIX::LegLocaleOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegLocaleOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegLocaleOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegLocaleOfIssue self) -> LegLocaleOfIssue
        __init__(FIX::LegLocaleOfIssue self, FIX::STRING const & value) -> LegLocaleOfIssue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegLocaleOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegLocaleOfIssue
    __del__ = lambda self: None
LegLocaleOfIssue_swigregister = _quickfix.LegLocaleOfIssue_swigregister
LegLocaleOfIssue_swigregister(LegLocaleOfIssue)

class LegInstrRegistry(StringField):
    """Proxy of C++ FIX::LegInstrRegistry class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegInstrRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegInstrRegistry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegInstrRegistry self) -> LegInstrRegistry
        __init__(FIX::LegInstrRegistry self, FIX::STRING const & value) -> LegInstrRegistry

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegInstrRegistry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegInstrRegistry
    __del__ = lambda self: None
LegInstrRegistry_swigregister = _quickfix.LegInstrRegistry_swigregister
LegInstrRegistry_swigregister(LegInstrRegistry)

class LegSymbol(StringField):
    """Proxy of C++ FIX::LegSymbol class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSymbol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSymbol self) -> LegSymbol
        __init__(FIX::LegSymbol self, FIX::STRING const & value) -> LegSymbol

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegSymbol(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSymbol
    __del__ = lambda self: None
LegSymbol_swigregister = _quickfix.LegSymbol_swigregister
LegSymbol_swigregister(LegSymbol)

class LegSymbolSfx(StringField):
    """Proxy of C++ FIX::LegSymbolSfx class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSymbolSfx, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSymbolSfx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSymbolSfx self) -> LegSymbolSfx
        __init__(FIX::LegSymbolSfx self, FIX::STRING const & value) -> LegSymbolSfx

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegSymbolSfx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSymbolSfx
    __del__ = lambda self: None
LegSymbolSfx_swigregister = _quickfix.LegSymbolSfx_swigregister
LegSymbolSfx_swigregister(LegSymbolSfx)

class LegSecurityID(StringField):
    """Proxy of C++ FIX::LegSecurityID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSecurityID self) -> LegSecurityID
        __init__(FIX::LegSecurityID self, FIX::STRING const & value) -> LegSecurityID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegSecurityID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSecurityID
    __del__ = lambda self: None
LegSecurityID_swigregister = _quickfix.LegSecurityID_swigregister
LegSecurityID_swigregister(LegSecurityID)

class LegSecurityIDSource(StringField):
    """Proxy of C++ FIX::LegSecurityIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSecurityIDSource self) -> LegSecurityIDSource
        __init__(FIX::LegSecurityIDSource self, FIX::STRING const & value) -> LegSecurityIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegSecurityIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSecurityIDSource
    __del__ = lambda self: None
LegSecurityIDSource_swigregister = _quickfix.LegSecurityIDSource_swigregister
LegSecurityIDSource_swigregister(LegSecurityIDSource)

class NoLegSecurityAltID(IntField):
    """Proxy of C++ FIX::NoLegSecurityAltID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoLegSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoLegSecurityAltID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoLegSecurityAltID self) -> NoLegSecurityAltID
        __init__(FIX::NoLegSecurityAltID self, FIX::NUMINGROUP const & value) -> NoLegSecurityAltID

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoLegSecurityAltID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoLegSecurityAltID
    __del__ = lambda self: None
NoLegSecurityAltID_swigregister = _quickfix.NoLegSecurityAltID_swigregister
NoLegSecurityAltID_swigregister(NoLegSecurityAltID)

class LegSecurityAltID(StringField):
    """Proxy of C++ FIX::LegSecurityAltID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityAltID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSecurityAltID self) -> LegSecurityAltID
        __init__(FIX::LegSecurityAltID self, FIX::STRING const & value) -> LegSecurityAltID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegSecurityAltID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSecurityAltID
    __del__ = lambda self: None
LegSecurityAltID_swigregister = _quickfix.LegSecurityAltID_swigregister
LegSecurityAltID_swigregister(LegSecurityAltID)

class LegSecurityAltIDSource(StringField):
    """Proxy of C++ FIX::LegSecurityAltIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityAltIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityAltIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSecurityAltIDSource self) -> LegSecurityAltIDSource
        __init__(FIX::LegSecurityAltIDSource self, FIX::STRING const & value) -> LegSecurityAltIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegSecurityAltIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSecurityAltIDSource
    __del__ = lambda self: None
LegSecurityAltIDSource_swigregister = _quickfix.LegSecurityAltIDSource_swigregister
LegSecurityAltIDSource_swigregister(LegSecurityAltIDSource)

class LegProduct(IntField):
    """Proxy of C++ FIX::LegProduct class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegProduct, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegProduct, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegProduct self) -> LegProduct
        __init__(FIX::LegProduct self, FIX::INT const & value) -> LegProduct

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegProduct(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegProduct
    __del__ = lambda self: None
LegProduct_swigregister = _quickfix.LegProduct_swigregister
LegProduct_swigregister(LegProduct)

class LegCFICode(StringField):
    """Proxy of C++ FIX::LegCFICode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCFICode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegCFICode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegCFICode self) -> LegCFICode
        __init__(FIX::LegCFICode self, FIX::STRING const & value) -> LegCFICode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegCFICode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegCFICode
    __del__ = lambda self: None
LegCFICode_swigregister = _quickfix.LegCFICode_swigregister
LegCFICode_swigregister(LegCFICode)

class LegSecurityType(StringField):
    """Proxy of C++ FIX::LegSecurityType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSecurityType self) -> LegSecurityType
        __init__(FIX::LegSecurityType self, FIX::STRING const & value) -> LegSecurityType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegSecurityType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSecurityType
    __del__ = lambda self: None
LegSecurityType_swigregister = _quickfix.LegSecurityType_swigregister
LegSecurityType_swigregister(LegSecurityType)

class LegMaturityMonthYear(StringField):
    """Proxy of C++ FIX::LegMaturityMonthYear class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegMaturityMonthYear, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegMaturityMonthYear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegMaturityMonthYear self) -> LegMaturityMonthYear
        __init__(FIX::LegMaturityMonthYear self, FIX::MONTHYEAR const & value) -> LegMaturityMonthYear

        Parameters:
            value: FIX::MONTHYEAR const &

        """
        this = _quickfix.new_LegMaturityMonthYear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegMaturityMonthYear
    __del__ = lambda self: None
LegMaturityMonthYear_swigregister = _quickfix.LegMaturityMonthYear_swigregister
LegMaturityMonthYear_swigregister(LegMaturityMonthYear)

class LegMaturityDate(StringField):
    """Proxy of C++ FIX::LegMaturityDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegMaturityDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegMaturityDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegMaturityDate self) -> LegMaturityDate
        __init__(FIX::LegMaturityDate self, FIX::LOCALMKTDATE const & value) -> LegMaturityDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_LegMaturityDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegMaturityDate
    __del__ = lambda self: None
LegMaturityDate_swigregister = _quickfix.LegMaturityDate_swigregister
LegMaturityDate_swigregister(LegMaturityDate)

class LegStrikePrice(DoubleField):
    """Proxy of C++ FIX::LegStrikePrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegStrikePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegStrikePrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegStrikePrice self) -> LegStrikePrice
        __init__(FIX::LegStrikePrice self, FIX::PRICE const & value) -> LegStrikePrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LegStrikePrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegStrikePrice
    __del__ = lambda self: None
LegStrikePrice_swigregister = _quickfix.LegStrikePrice_swigregister
LegStrikePrice_swigregister(LegStrikePrice)

class LegOptAttribute(CharField):
    """Proxy of C++ FIX::LegOptAttribute class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegOptAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegOptAttribute, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegOptAttribute self) -> LegOptAttribute
        __init__(FIX::LegOptAttribute self, FIX::CHAR const & value) -> LegOptAttribute

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_LegOptAttribute(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegOptAttribute
    __del__ = lambda self: None
LegOptAttribute_swigregister = _quickfix.LegOptAttribute_swigregister
LegOptAttribute_swigregister(LegOptAttribute)

class LegContractMultiplier(DoubleField):
    """Proxy of C++ FIX::LegContractMultiplier class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegContractMultiplier, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegContractMultiplier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegContractMultiplier self) -> LegContractMultiplier
        __init__(FIX::LegContractMultiplier self, FIX::FLOAT const & value) -> LegContractMultiplier

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_LegContractMultiplier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegContractMultiplier
    __del__ = lambda self: None
LegContractMultiplier_swigregister = _quickfix.LegContractMultiplier_swigregister
LegContractMultiplier_swigregister(LegContractMultiplier)

class LegCouponRate(DoubleField):
    """Proxy of C++ FIX::LegCouponRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCouponRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegCouponRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegCouponRate self) -> LegCouponRate
        __init__(FIX::LegCouponRate self, FIX::PERCENTAGE const & value) -> LegCouponRate

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_LegCouponRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegCouponRate
    __del__ = lambda self: None
LegCouponRate_swigregister = _quickfix.LegCouponRate_swigregister
LegCouponRate_swigregister(LegCouponRate)

class LegSecurityExchange(StringField):
    """Proxy of C++ FIX::LegSecurityExchange class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityExchange, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityExchange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSecurityExchange self) -> LegSecurityExchange
        __init__(FIX::LegSecurityExchange self, FIX::EXCHANGE const & value) -> LegSecurityExchange

        Parameters:
            value: FIX::EXCHANGE const &

        """
        this = _quickfix.new_LegSecurityExchange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSecurityExchange
    __del__ = lambda self: None
LegSecurityExchange_swigregister = _quickfix.LegSecurityExchange_swigregister
LegSecurityExchange_swigregister(LegSecurityExchange)

class LegIssuer(StringField):
    """Proxy of C++ FIX::LegIssuer class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegIssuer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegIssuer self) -> LegIssuer
        __init__(FIX::LegIssuer self, FIX::STRING const & value) -> LegIssuer

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegIssuer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegIssuer
    __del__ = lambda self: None
LegIssuer_swigregister = _quickfix.LegIssuer_swigregister
LegIssuer_swigregister(LegIssuer)

class EncodedLegIssuerLen(IntField):
    """Proxy of C++ FIX::EncodedLegIssuerLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedLegIssuerLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedLegIssuerLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedLegIssuerLen self) -> EncodedLegIssuerLen
        __init__(FIX::EncodedLegIssuerLen self, FIX::LENGTH const & value) -> EncodedLegIssuerLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedLegIssuerLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedLegIssuerLen
    __del__ = lambda self: None
EncodedLegIssuerLen_swigregister = _quickfix.EncodedLegIssuerLen_swigregister
EncodedLegIssuerLen_swigregister(EncodedLegIssuerLen)

class EncodedLegIssuer(StringField):
    """Proxy of C++ FIX::EncodedLegIssuer class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedLegIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedLegIssuer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedLegIssuer self) -> EncodedLegIssuer
        __init__(FIX::EncodedLegIssuer self, FIX::DATA const & value) -> EncodedLegIssuer

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedLegIssuer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedLegIssuer
    __del__ = lambda self: None
EncodedLegIssuer_swigregister = _quickfix.EncodedLegIssuer_swigregister
EncodedLegIssuer_swigregister(EncodedLegIssuer)

class LegSecurityDesc(StringField):
    """Proxy of C++ FIX::LegSecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSecurityDesc self) -> LegSecurityDesc
        __init__(FIX::LegSecurityDesc self, FIX::STRING const & value) -> LegSecurityDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegSecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSecurityDesc
    __del__ = lambda self: None
LegSecurityDesc_swigregister = _quickfix.LegSecurityDesc_swigregister
LegSecurityDesc_swigregister(LegSecurityDesc)

class EncodedLegSecurityDescLen(IntField):
    """Proxy of C++ FIX::EncodedLegSecurityDescLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedLegSecurityDescLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedLegSecurityDescLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedLegSecurityDescLen self) -> EncodedLegSecurityDescLen
        __init__(FIX::EncodedLegSecurityDescLen self, FIX::LENGTH const & value) -> EncodedLegSecurityDescLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedLegSecurityDescLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedLegSecurityDescLen
    __del__ = lambda self: None
EncodedLegSecurityDescLen_swigregister = _quickfix.EncodedLegSecurityDescLen_swigregister
EncodedLegSecurityDescLen_swigregister(EncodedLegSecurityDescLen)

class EncodedLegSecurityDesc(StringField):
    """Proxy of C++ FIX::EncodedLegSecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedLegSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedLegSecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedLegSecurityDesc self) -> EncodedLegSecurityDesc
        __init__(FIX::EncodedLegSecurityDesc self, FIX::DATA const & value) -> EncodedLegSecurityDesc

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedLegSecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedLegSecurityDesc
    __del__ = lambda self: None
EncodedLegSecurityDesc_swigregister = _quickfix.EncodedLegSecurityDesc_swigregister
EncodedLegSecurityDesc_swigregister(EncodedLegSecurityDesc)

class LegRatioQty(DoubleField):
    """Proxy of C++ FIX::LegRatioQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRatioQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegRatioQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegRatioQty self) -> LegRatioQty
        __init__(FIX::LegRatioQty self, FIX::FLOAT const & value) -> LegRatioQty

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_LegRatioQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegRatioQty
    __del__ = lambda self: None
LegRatioQty_swigregister = _quickfix.LegRatioQty_swigregister
LegRatioQty_swigregister(LegRatioQty)

class LegSide(CharField):
    """Proxy of C++ FIX::LegSide class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSide, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSide, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSide self) -> LegSide
        __init__(FIX::LegSide self, FIX::CHAR const & value) -> LegSide

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_LegSide(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSide
    __del__ = lambda self: None
LegSide_swigregister = _quickfix.LegSide_swigregister
LegSide_swigregister(LegSide)

class TradingSessionSubID(StringField):
    """Proxy of C++ FIX::TradingSessionSubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradingSessionSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradingSessionSubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradingSessionSubID self) -> TradingSessionSubID
        __init__(FIX::TradingSessionSubID self, FIX::STRING const & value) -> TradingSessionSubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradingSessionSubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradingSessionSubID
    __del__ = lambda self: None
TradingSessionSubID_swigregister = _quickfix.TradingSessionSubID_swigregister
TradingSessionSubID_swigregister(TradingSessionSubID)

class AllocType(IntField):
    """Proxy of C++ FIX::AllocType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocType self) -> AllocType
        __init__(FIX::AllocType self, FIX::INT const & value) -> AllocType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocType
    __del__ = lambda self: None
AllocType_swigregister = _quickfix.AllocType_swigregister
AllocType_swigregister(AllocType)

class MidPx(DoubleField):
    """Proxy of C++ FIX::MidPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MidPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MidPx self) -> MidPx
        __init__(FIX::MidPx self, FIX::PRICE const & value) -> MidPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_MidPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MidPx
    __del__ = lambda self: None
MidPx_swigregister = _quickfix.MidPx_swigregister
MidPx_swigregister(MidPx)

class BidYield(DoubleField):
    """Proxy of C++ FIX::BidYield class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidYield, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidYield self) -> BidYield
        __init__(FIX::BidYield self, FIX::PERCENTAGE const & value) -> BidYield

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_BidYield(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidYield
    __del__ = lambda self: None
BidYield_swigregister = _quickfix.BidYield_swigregister
BidYield_swigregister(BidYield)

class MidYield(DoubleField):
    """Proxy of C++ FIX::MidYield class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MidYield, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MidYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MidYield self) -> MidYield
        __init__(FIX::MidYield self, FIX::PERCENTAGE const & value) -> MidYield

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_MidYield(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MidYield
    __del__ = lambda self: None
MidYield_swigregister = _quickfix.MidYield_swigregister
MidYield_swigregister(MidYield)

class OfferYield(DoubleField):
    """Proxy of C++ FIX::OfferYield class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferYield, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OfferYield self) -> OfferYield
        __init__(FIX::OfferYield self, FIX::PERCENTAGE const & value) -> OfferYield

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_OfferYield(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OfferYield
    __del__ = lambda self: None
OfferYield_swigregister = _quickfix.OfferYield_swigregister
OfferYield_swigregister(OfferYield)

class ClearingFeeIndicator(StringField):
    """Proxy of C++ FIX::ClearingFeeIndicator class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearingFeeIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClearingFeeIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ClearingFeeIndicator self) -> ClearingFeeIndicator
        __init__(FIX::ClearingFeeIndicator self, FIX::STRING const & value) -> ClearingFeeIndicator

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ClearingFeeIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ClearingFeeIndicator
    __del__ = lambda self: None
ClearingFeeIndicator_swigregister = _quickfix.ClearingFeeIndicator_swigregister
ClearingFeeIndicator_swigregister(ClearingFeeIndicator)

class WorkingIndicator(BoolField):
    """Proxy of C++ FIX::WorkingIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorkingIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WorkingIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::WorkingIndicator self) -> WorkingIndicator
        __init__(FIX::WorkingIndicator self, FIX::BOOLEAN const & value) -> WorkingIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_WorkingIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_WorkingIndicator
    __del__ = lambda self: None
WorkingIndicator_swigregister = _quickfix.WorkingIndicator_swigregister
WorkingIndicator_swigregister(WorkingIndicator)

class LegLastPx(DoubleField):
    """Proxy of C++ FIX::LegLastPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegLastPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegLastPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegLastPx self) -> LegLastPx
        __init__(FIX::LegLastPx self, FIX::PRICE const & value) -> LegLastPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LegLastPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegLastPx
    __del__ = lambda self: None
LegLastPx_swigregister = _quickfix.LegLastPx_swigregister
LegLastPx_swigregister(LegLastPx)

class PriorityIndicator(IntField):
    """Proxy of C++ FIX::PriorityIndicator class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriorityIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriorityIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriorityIndicator self) -> PriorityIndicator
        __init__(FIX::PriorityIndicator self, FIX::INT const & value) -> PriorityIndicator

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PriorityIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriorityIndicator
    __del__ = lambda self: None
PriorityIndicator_swigregister = _quickfix.PriorityIndicator_swigregister
PriorityIndicator_swigregister(PriorityIndicator)

class PriceImprovement(DoubleField):
    """Proxy of C++ FIX::PriceImprovement class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceImprovement, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriceImprovement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriceImprovement self) -> PriceImprovement
        __init__(FIX::PriceImprovement self, FIX::PRICEOFFSET const & value) -> PriceImprovement

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_PriceImprovement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriceImprovement
    __del__ = lambda self: None
PriceImprovement_swigregister = _quickfix.PriceImprovement_swigregister
PriceImprovement_swigregister(PriceImprovement)

class Price2(DoubleField):
    """Proxy of C++ FIX::Price2 class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Price2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Price2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Price2 self) -> Price2
        __init__(FIX::Price2 self, FIX::PRICE const & value) -> Price2

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_Price2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Price2
    __del__ = lambda self: None
Price2_swigregister = _quickfix.Price2_swigregister
Price2_swigregister(Price2)

class LastForwardPoints2(DoubleField):
    """Proxy of C++ FIX::LastForwardPoints2 class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastForwardPoints2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastForwardPoints2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastForwardPoints2 self) -> LastForwardPoints2
        __init__(FIX::LastForwardPoints2 self, FIX::PRICEOFFSET const & value) -> LastForwardPoints2

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_LastForwardPoints2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastForwardPoints2
    __del__ = lambda self: None
LastForwardPoints2_swigregister = _quickfix.LastForwardPoints2_swigregister
LastForwardPoints2_swigregister(LastForwardPoints2)

class BidForwardPoints2(DoubleField):
    """Proxy of C++ FIX::BidForwardPoints2 class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidForwardPoints2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidForwardPoints2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidForwardPoints2 self) -> BidForwardPoints2
        __init__(FIX::BidForwardPoints2 self, FIX::PRICEOFFSET const & value) -> BidForwardPoints2

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_BidForwardPoints2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidForwardPoints2
    __del__ = lambda self: None
BidForwardPoints2_swigregister = _quickfix.BidForwardPoints2_swigregister
BidForwardPoints2_swigregister(BidForwardPoints2)

class OfferForwardPoints2(DoubleField):
    """Proxy of C++ FIX::OfferForwardPoints2 class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferForwardPoints2, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferForwardPoints2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OfferForwardPoints2 self) -> OfferForwardPoints2
        __init__(FIX::OfferForwardPoints2 self, FIX::PRICEOFFSET const & value) -> OfferForwardPoints2

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_OfferForwardPoints2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OfferForwardPoints2
    __del__ = lambda self: None
OfferForwardPoints2_swigregister = _quickfix.OfferForwardPoints2_swigregister
OfferForwardPoints2_swigregister(OfferForwardPoints2)

class RFQReqID(StringField):
    """Proxy of C++ FIX::RFQReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RFQReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RFQReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RFQReqID self) -> RFQReqID
        __init__(FIX::RFQReqID self, FIX::STRING const & value) -> RFQReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RFQReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RFQReqID
    __del__ = lambda self: None
RFQReqID_swigregister = _quickfix.RFQReqID_swigregister
RFQReqID_swigregister(RFQReqID)

class MktBidPx(DoubleField):
    """Proxy of C++ FIX::MktBidPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MktBidPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MktBidPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MktBidPx self) -> MktBidPx
        __init__(FIX::MktBidPx self, FIX::PRICE const & value) -> MktBidPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_MktBidPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MktBidPx
    __del__ = lambda self: None
MktBidPx_swigregister = _quickfix.MktBidPx_swigregister
MktBidPx_swigregister(MktBidPx)

class MktOfferPx(DoubleField):
    """Proxy of C++ FIX::MktOfferPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MktOfferPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MktOfferPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MktOfferPx self) -> MktOfferPx
        __init__(FIX::MktOfferPx self, FIX::PRICE const & value) -> MktOfferPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_MktOfferPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MktOfferPx
    __del__ = lambda self: None
MktOfferPx_swigregister = _quickfix.MktOfferPx_swigregister
MktOfferPx_swigregister(MktOfferPx)

class MinBidSize(DoubleField):
    """Proxy of C++ FIX::MinBidSize class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinBidSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinBidSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MinBidSize self) -> MinBidSize
        __init__(FIX::MinBidSize self, FIX::QTY const & value) -> MinBidSize

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MinBidSize(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MinBidSize
    __del__ = lambda self: None
MinBidSize_swigregister = _quickfix.MinBidSize_swigregister
MinBidSize_swigregister(MinBidSize)

class MinOfferSize(DoubleField):
    """Proxy of C++ FIX::MinOfferSize class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinOfferSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinOfferSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MinOfferSize self) -> MinOfferSize
        __init__(FIX::MinOfferSize self, FIX::QTY const & value) -> MinOfferSize

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MinOfferSize(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MinOfferSize
    __del__ = lambda self: None
MinOfferSize_swigregister = _quickfix.MinOfferSize_swigregister
MinOfferSize_swigregister(MinOfferSize)

class QuoteStatusReqID(StringField):
    """Proxy of C++ FIX::QuoteStatusReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteStatusReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteStatusReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteStatusReqID self) -> QuoteStatusReqID
        __init__(FIX::QuoteStatusReqID self, FIX::STRING const & value) -> QuoteStatusReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_QuoteStatusReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteStatusReqID
    __del__ = lambda self: None
QuoteStatusReqID_swigregister = _quickfix.QuoteStatusReqID_swigregister
QuoteStatusReqID_swigregister(QuoteStatusReqID)

class LegalConfirm(BoolField):
    """Proxy of C++ FIX::LegalConfirm class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegalConfirm, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegalConfirm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegalConfirm self) -> LegalConfirm
        __init__(FIX::LegalConfirm self, FIX::BOOLEAN const & value) -> LegalConfirm

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_LegalConfirm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegalConfirm
    __del__ = lambda self: None
LegalConfirm_swigregister = _quickfix.LegalConfirm_swigregister
LegalConfirm_swigregister(LegalConfirm)

class UnderlyingLastPx(DoubleField):
    """Proxy of C++ FIX::UnderlyingLastPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLastPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLastPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLastPx self) -> UnderlyingLastPx
        __init__(FIX::UnderlyingLastPx self, FIX::PRICE const & value) -> UnderlyingLastPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_UnderlyingLastPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLastPx
    __del__ = lambda self: None
UnderlyingLastPx_swigregister = _quickfix.UnderlyingLastPx_swigregister
UnderlyingLastPx_swigregister(UnderlyingLastPx)

class UnderlyingLastQty(DoubleField):
    """Proxy of C++ FIX::UnderlyingLastQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLastQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLastQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLastQty self) -> UnderlyingLastQty
        __init__(FIX::UnderlyingLastQty self, FIX::QTY const & value) -> UnderlyingLastQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_UnderlyingLastQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLastQty
    __del__ = lambda self: None
UnderlyingLastQty_swigregister = _quickfix.UnderlyingLastQty_swigregister
UnderlyingLastQty_swigregister(UnderlyingLastQty)

class LegRefID(StringField):
    """Proxy of C++ FIX::LegRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegRefID self) -> LegRefID
        __init__(FIX::LegRefID self, FIX::STRING const & value) -> LegRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegRefID
    __del__ = lambda self: None
LegRefID_swigregister = _quickfix.LegRefID_swigregister
LegRefID_swigregister(LegRefID)

class ContraLegRefID(StringField):
    """Proxy of C++ FIX::ContraLegRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraLegRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContraLegRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContraLegRefID self) -> ContraLegRefID
        __init__(FIX::ContraLegRefID self, FIX::STRING const & value) -> ContraLegRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ContraLegRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContraLegRefID
    __del__ = lambda self: None
ContraLegRefID_swigregister = _quickfix.ContraLegRefID_swigregister
ContraLegRefID_swigregister(ContraLegRefID)

class SettlCurrBidFxRate(DoubleField):
    """Proxy of C++ FIX::SettlCurrBidFxRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrBidFxRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrBidFxRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlCurrBidFxRate self) -> SettlCurrBidFxRate
        __init__(FIX::SettlCurrBidFxRate self, FIX::FLOAT const & value) -> SettlCurrBidFxRate

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_SettlCurrBidFxRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlCurrBidFxRate
    __del__ = lambda self: None
SettlCurrBidFxRate_swigregister = _quickfix.SettlCurrBidFxRate_swigregister
SettlCurrBidFxRate_swigregister(SettlCurrBidFxRate)

class SettlCurrOfferFxRate(DoubleField):
    """Proxy of C++ FIX::SettlCurrOfferFxRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlCurrOfferFxRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlCurrOfferFxRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlCurrOfferFxRate self) -> SettlCurrOfferFxRate
        __init__(FIX::SettlCurrOfferFxRate self, FIX::FLOAT const & value) -> SettlCurrOfferFxRate

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_SettlCurrOfferFxRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlCurrOfferFxRate
    __del__ = lambda self: None
SettlCurrOfferFxRate_swigregister = _quickfix.SettlCurrOfferFxRate_swigregister
SettlCurrOfferFxRate_swigregister(SettlCurrOfferFxRate)

class QuoteRequestRejectReason(IntField):
    """Proxy of C++ FIX::QuoteRequestRejectReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteRequestRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteRequestRejectReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteRequestRejectReason self) -> QuoteRequestRejectReason
        __init__(FIX::QuoteRequestRejectReason self, FIX::INT const & value) -> QuoteRequestRejectReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteRequestRejectReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteRequestRejectReason
    __del__ = lambda self: None
QuoteRequestRejectReason_swigregister = _quickfix.QuoteRequestRejectReason_swigregister
QuoteRequestRejectReason_swigregister(QuoteRequestRejectReason)

class SideComplianceID(StringField):
    """Proxy of C++ FIX::SideComplianceID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideComplianceID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideComplianceID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideComplianceID self) -> SideComplianceID
        __init__(FIX::SideComplianceID self, FIX::STRING const & value) -> SideComplianceID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SideComplianceID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideComplianceID
    __del__ = lambda self: None
SideComplianceID_swigregister = _quickfix.SideComplianceID_swigregister
SideComplianceID_swigregister(SideComplianceID)

class IOIID(StringField):
    """Proxy of C++ FIX::IOIID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOIID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOIID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IOIID self) -> IOIID
        __init__(FIX::IOIID self, FIX::STRING const & value) -> IOIID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_IOIID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IOIID
    __del__ = lambda self: None
IOIID_swigregister = _quickfix.IOIID_swigregister
IOIID_swigregister(IOIID)

class NoLinesOfText(IntField):
    """Proxy of C++ FIX::NoLinesOfText class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoLinesOfText, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoLinesOfText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoLinesOfText self) -> NoLinesOfText
        __init__(FIX::NoLinesOfText self, FIX::NUMINGROUP const & value) -> NoLinesOfText

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoLinesOfText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoLinesOfText
    __del__ = lambda self: None
NoLinesOfText_swigregister = _quickfix.NoLinesOfText_swigregister
NoLinesOfText_swigregister(NoLinesOfText)

class SettlType(StringField):
    """Proxy of C++ FIX::SettlType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlType self) -> SettlType
        __init__(FIX::SettlType self, FIX::STRING const & value) -> SettlType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlType
    __del__ = lambda self: None
SettlType_swigregister = _quickfix.SettlType_swigregister
SettlType_swigregister(SettlType)

class SettlDate(StringField):
    """Proxy of C++ FIX::SettlDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlDate self) -> SettlDate
        __init__(FIX::SettlDate self, FIX::LOCALMKTDATE const & value) -> SettlDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_SettlDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlDate
    __del__ = lambda self: None
SettlDate_swigregister = _quickfix.SettlDate_swigregister
SettlDate_swigregister(SettlDate)

class AvgPxPrecision(IntField):
    """Proxy of C++ FIX::AvgPxPrecision class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgPxPrecision, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AvgPxPrecision, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AvgPxPrecision self) -> AvgPxPrecision
        __init__(FIX::AvgPxPrecision self, FIX::INT const & value) -> AvgPxPrecision

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AvgPxPrecision(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AvgPxPrecision
    __del__ = lambda self: None
AvgPxPrecision_swigregister = _quickfix.AvgPxPrecision_swigregister
AvgPxPrecision_swigregister(AvgPxPrecision)

class SettlDate2(StringField):
    """Proxy of C++ FIX::SettlDate2 class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlDate2, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlDate2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlDate2 self) -> SettlDate2
        __init__(FIX::SettlDate2 self, FIX::LOCALMKTDATE const & value) -> SettlDate2

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_SettlDate2(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlDate2
    __del__ = lambda self: None
SettlDate2_swigregister = _quickfix.SettlDate2_swigregister
SettlDate2_swigregister(SettlDate2)

class PegOffsetValue(DoubleField):
    """Proxy of C++ FIX::PegOffsetValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegOffsetValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegOffsetValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegOffsetValue self) -> PegOffsetValue
        __init__(FIX::PegOffsetValue self, FIX::FLOAT const & value) -> PegOffsetValue

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_PegOffsetValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegOffsetValue
    __del__ = lambda self: None
PegOffsetValue_swigregister = _quickfix.PegOffsetValue_swigregister
PegOffsetValue_swigregister(PegOffsetValue)

class OpenCloseSettlFlag(StringField):
    """Proxy of C++ FIX::OpenCloseSettlFlag class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenCloseSettlFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpenCloseSettlFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OpenCloseSettlFlag self) -> OpenCloseSettlFlag
        __init__(FIX::OpenCloseSettlFlag self, FIX::MULTIPLECHARVALUE const & value) -> OpenCloseSettlFlag

        Parameters:
            value: FIX::MULTIPLECHARVALUE const &

        """
        this = _quickfix.new_OpenCloseSettlFlag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OpenCloseSettlFlag
    __del__ = lambda self: None
OpenCloseSettlFlag_swigregister = _quickfix.OpenCloseSettlFlag_swigregister
OpenCloseSettlFlag_swigregister(OpenCloseSettlFlag)

class TotNoQuoteEntries(IntField):
    """Proxy of C++ FIX::TotNoQuoteEntries class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoQuoteEntries, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoQuoteEntries, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNoQuoteEntries self) -> TotNoQuoteEntries
        __init__(FIX::TotNoQuoteEntries self, FIX::INT const & value) -> TotNoQuoteEntries

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNoQuoteEntries(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNoQuoteEntries
    __del__ = lambda self: None
TotNoQuoteEntries_swigregister = _quickfix.TotNoQuoteEntries_swigregister
TotNoQuoteEntries_swigregister(TotNoQuoteEntries)

class DiscretionOffsetValue(DoubleField):
    """Proxy of C++ FIX::DiscretionOffsetValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionOffsetValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionOffsetValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DiscretionOffsetValue self) -> DiscretionOffsetValue
        __init__(FIX::DiscretionOffsetValue self, FIX::FLOAT const & value) -> DiscretionOffsetValue

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_DiscretionOffsetValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DiscretionOffsetValue
    __del__ = lambda self: None
DiscretionOffsetValue_swigregister = _quickfix.DiscretionOffsetValue_swigregister
DiscretionOffsetValue_swigregister(DiscretionOffsetValue)

class TotNoRelatedSym(IntField):
    """Proxy of C++ FIX::TotNoRelatedSym class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoRelatedSym, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoRelatedSym, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNoRelatedSym self) -> TotNoRelatedSym
        __init__(FIX::TotNoRelatedSym self, FIX::INT const & value) -> TotNoRelatedSym

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNoRelatedSym(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNoRelatedSym
    __del__ = lambda self: None
TotNoRelatedSym_swigregister = _quickfix.TotNoRelatedSym_swigregister
TotNoRelatedSym_swigregister(TotNoRelatedSym)

class BidTradeType(CharField):
    """Proxy of C++ FIX::BidTradeType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidTradeType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidTradeType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidTradeType self) -> BidTradeType
        __init__(FIX::BidTradeType self, FIX::CHAR const & value) -> BidTradeType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_BidTradeType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidTradeType
    __del__ = lambda self: None
BidTradeType_swigregister = _quickfix.BidTradeType_swigregister
BidTradeType_swigregister(BidTradeType)

class CardIssNum(StringField):
    """Proxy of C++ FIX::CardIssNum class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CardIssNum, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CardIssNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CardIssNum self) -> CardIssNum
        __init__(FIX::CardIssNum self, FIX::STRING const & value) -> CardIssNum

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CardIssNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CardIssNum
    __del__ = lambda self: None
CardIssNum_swigregister = _quickfix.CardIssNum_swigregister
CardIssNum_swigregister(CardIssNum)

class CashDistribAgentAcctName(StringField):
    """Proxy of C++ FIX::CashDistribAgentAcctName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashDistribAgentAcctName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashDistribAgentAcctName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashDistribAgentAcctName self) -> CashDistribAgentAcctName
        __init__(FIX::CashDistribAgentAcctName self, FIX::STRING const & value) -> CashDistribAgentAcctName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CashDistribAgentAcctName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashDistribAgentAcctName
    __del__ = lambda self: None
CashDistribAgentAcctName_swigregister = _quickfix.CashDistribAgentAcctName_swigregister
CashDistribAgentAcctName_swigregister(CashDistribAgentAcctName)

class RegistDtls(StringField):
    """Proxy of C++ FIX::RegistDtls class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistDtls, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistDtls, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RegistDtls self) -> RegistDtls
        __init__(FIX::RegistDtls self, FIX::STRING const & value) -> RegistDtls

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RegistDtls(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RegistDtls
    __del__ = lambda self: None
RegistDtls_swigregister = _quickfix.RegistDtls_swigregister
RegistDtls_swigregister(RegistDtls)

class TotNoSecurityTypes(IntField):
    """Proxy of C++ FIX::TotNoSecurityTypes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoSecurityTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoSecurityTypes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNoSecurityTypes self) -> TotNoSecurityTypes
        __init__(FIX::TotNoSecurityTypes self, FIX::INT const & value) -> TotNoSecurityTypes

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNoSecurityTypes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNoSecurityTypes
    __del__ = lambda self: None
TotNoSecurityTypes_swigregister = _quickfix.TotNoSecurityTypes_swigregister
TotNoSecurityTypes_swigregister(TotNoSecurityTypes)

class LegSettlType(CharField):
    """Proxy of C++ FIX::LegSettlType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSettlType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSettlType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSettlType self) -> LegSettlType
        __init__(FIX::LegSettlType self, FIX::CHAR const & value) -> LegSettlType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_LegSettlType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSettlType
    __del__ = lambda self: None
LegSettlType_swigregister = _quickfix.LegSettlType_swigregister
LegSettlType_swigregister(LegSettlType)

class LegSettlDate(StringField):
    """Proxy of C++ FIX::LegSettlDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSettlDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSettlDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSettlDate self) -> LegSettlDate
        __init__(FIX::LegSettlDate self, FIX::LOCALMKTDATE const & value) -> LegSettlDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_LegSettlDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSettlDate
    __del__ = lambda self: None
LegSettlDate_swigregister = _quickfix.LegSettlDate_swigregister
LegSettlDate_swigregister(LegSettlDate)

class AcctIDSource(IntField):
    """Proxy of C++ FIX::AcctIDSource class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AcctIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AcctIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AcctIDSource self) -> AcctIDSource
        __init__(FIX::AcctIDSource self, FIX::INT const & value) -> AcctIDSource

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AcctIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AcctIDSource
    __del__ = lambda self: None
AcctIDSource_swigregister = _quickfix.AcctIDSource_swigregister
AcctIDSource_swigregister(AcctIDSource)

class AllocAcctIDSource(IntField):
    """Proxy of C++ FIX::AllocAcctIDSource class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocAcctIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocAcctIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocAcctIDSource self) -> AllocAcctIDSource
        __init__(FIX::AllocAcctIDSource self, FIX::INT const & value) -> AllocAcctIDSource

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocAcctIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocAcctIDSource
    __del__ = lambda self: None
AllocAcctIDSource_swigregister = _quickfix.AllocAcctIDSource_swigregister
AllocAcctIDSource_swigregister(AllocAcctIDSource)

class BenchmarkPrice(DoubleField):
    """Proxy of C++ FIX::BenchmarkPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BenchmarkPrice self) -> BenchmarkPrice
        __init__(FIX::BenchmarkPrice self, FIX::PRICE const & value) -> BenchmarkPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_BenchmarkPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BenchmarkPrice
    __del__ = lambda self: None
BenchmarkPrice_swigregister = _quickfix.BenchmarkPrice_swigregister
BenchmarkPrice_swigregister(BenchmarkPrice)

class BenchmarkPriceType(IntField):
    """Proxy of C++ FIX::BenchmarkPriceType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkPriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BenchmarkPriceType self) -> BenchmarkPriceType
        __init__(FIX::BenchmarkPriceType self, FIX::INT const & value) -> BenchmarkPriceType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_BenchmarkPriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BenchmarkPriceType
    __del__ = lambda self: None
BenchmarkPriceType_swigregister = _quickfix.BenchmarkPriceType_swigregister
BenchmarkPriceType_swigregister(BenchmarkPriceType)

class ConfirmID(StringField):
    """Proxy of C++ FIX::ConfirmID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ConfirmID self) -> ConfirmID
        __init__(FIX::ConfirmID self, FIX::STRING const & value) -> ConfirmID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ConfirmID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ConfirmID
    __del__ = lambda self: None
ConfirmID_swigregister = _quickfix.ConfirmID_swigregister
ConfirmID_swigregister(ConfirmID)

class ConfirmStatus(IntField):
    """Proxy of C++ FIX::ConfirmStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ConfirmStatus self) -> ConfirmStatus
        __init__(FIX::ConfirmStatus self, FIX::INT const & value) -> ConfirmStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ConfirmStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ConfirmStatus
    __del__ = lambda self: None
ConfirmStatus_swigregister = _quickfix.ConfirmStatus_swigregister
ConfirmStatus_swigregister(ConfirmStatus)

class ConfirmTransType(IntField):
    """Proxy of C++ FIX::ConfirmTransType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ConfirmTransType self) -> ConfirmTransType
        __init__(FIX::ConfirmTransType self, FIX::INT const & value) -> ConfirmTransType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ConfirmTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ConfirmTransType
    __del__ = lambda self: None
ConfirmTransType_swigregister = _quickfix.ConfirmTransType_swigregister
ConfirmTransType_swigregister(ConfirmTransType)

class ContractSettlMonth(StringField):
    """Proxy of C++ FIX::ContractSettlMonth class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContractSettlMonth, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContractSettlMonth, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContractSettlMonth self) -> ContractSettlMonth
        __init__(FIX::ContractSettlMonth self, FIX::MONTHYEAR const & value) -> ContractSettlMonth

        Parameters:
            value: FIX::MONTHYEAR const &

        """
        this = _quickfix.new_ContractSettlMonth(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContractSettlMonth
    __del__ = lambda self: None
ContractSettlMonth_swigregister = _quickfix.ContractSettlMonth_swigregister
ContractSettlMonth_swigregister(ContractSettlMonth)

class DeliveryForm(IntField):
    """Proxy of C++ FIX::DeliveryForm class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliveryForm, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeliveryForm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeliveryForm self) -> DeliveryForm
        __init__(FIX::DeliveryForm self, FIX::INT const & value) -> DeliveryForm

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DeliveryForm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeliveryForm
    __del__ = lambda self: None
DeliveryForm_swigregister = _quickfix.DeliveryForm_swigregister
DeliveryForm_swigregister(DeliveryForm)

class LastParPx(DoubleField):
    """Proxy of C++ FIX::LastParPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastParPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastParPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastParPx self) -> LastParPx
        __init__(FIX::LastParPx self, FIX::PRICE const & value) -> LastParPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LastParPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastParPx
    __del__ = lambda self: None
LastParPx_swigregister = _quickfix.LastParPx_swigregister
LastParPx_swigregister(LastParPx)

class NoLegAllocs(IntField):
    """Proxy of C++ FIX::NoLegAllocs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoLegAllocs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoLegAllocs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoLegAllocs self) -> NoLegAllocs
        __init__(FIX::NoLegAllocs self, FIX::NUMINGROUP const & value) -> NoLegAllocs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoLegAllocs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoLegAllocs
    __del__ = lambda self: None
NoLegAllocs_swigregister = _quickfix.NoLegAllocs_swigregister
NoLegAllocs_swigregister(NoLegAllocs)

class LegAllocAccount(StringField):
    """Proxy of C++ FIX::LegAllocAccount class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegAllocAccount, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegAllocAccount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegAllocAccount self) -> LegAllocAccount
        __init__(FIX::LegAllocAccount self, FIX::STRING const & value) -> LegAllocAccount

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegAllocAccount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegAllocAccount
    __del__ = lambda self: None
LegAllocAccount_swigregister = _quickfix.LegAllocAccount_swigregister
LegAllocAccount_swigregister(LegAllocAccount)

class LegIndividualAllocID(StringField):
    """Proxy of C++ FIX::LegIndividualAllocID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegIndividualAllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegIndividualAllocID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegIndividualAllocID self) -> LegIndividualAllocID
        __init__(FIX::LegIndividualAllocID self, FIX::STRING const & value) -> LegIndividualAllocID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegIndividualAllocID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegIndividualAllocID
    __del__ = lambda self: None
LegIndividualAllocID_swigregister = _quickfix.LegIndividualAllocID_swigregister
LegIndividualAllocID_swigregister(LegIndividualAllocID)

class LegAllocQty(DoubleField):
    """Proxy of C++ FIX::LegAllocQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegAllocQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegAllocQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegAllocQty self) -> LegAllocQty
        __init__(FIX::LegAllocQty self, FIX::QTY const & value) -> LegAllocQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LegAllocQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegAllocQty
    __del__ = lambda self: None
LegAllocQty_swigregister = _quickfix.LegAllocQty_swigregister
LegAllocQty_swigregister(LegAllocQty)

class LegAllocAcctIDSource(StringField):
    """Proxy of C++ FIX::LegAllocAcctIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegAllocAcctIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegAllocAcctIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegAllocAcctIDSource self) -> LegAllocAcctIDSource
        __init__(FIX::LegAllocAcctIDSource self, FIX::STRING const & value) -> LegAllocAcctIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegAllocAcctIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegAllocAcctIDSource
    __del__ = lambda self: None
LegAllocAcctIDSource_swigregister = _quickfix.LegAllocAcctIDSource_swigregister
LegAllocAcctIDSource_swigregister(LegAllocAcctIDSource)

class LegSettlCurrency(StringField):
    """Proxy of C++ FIX::LegSettlCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSettlCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSettlCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSettlCurrency self) -> LegSettlCurrency
        __init__(FIX::LegSettlCurrency self, FIX::CURRENCY const & value) -> LegSettlCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_LegSettlCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSettlCurrency
    __del__ = lambda self: None
LegSettlCurrency_swigregister = _quickfix.LegSettlCurrency_swigregister
LegSettlCurrency_swigregister(LegSettlCurrency)

class LegBenchmarkCurveCurrency(StringField):
    """Proxy of C++ FIX::LegBenchmarkCurveCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBenchmarkCurveCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegBenchmarkCurveCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegBenchmarkCurveCurrency self) -> LegBenchmarkCurveCurrency
        __init__(FIX::LegBenchmarkCurveCurrency self, FIX::CURRENCY const & value) -> LegBenchmarkCurveCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_LegBenchmarkCurveCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegBenchmarkCurveCurrency
    __del__ = lambda self: None
LegBenchmarkCurveCurrency_swigregister = _quickfix.LegBenchmarkCurveCurrency_swigregister
LegBenchmarkCurveCurrency_swigregister(LegBenchmarkCurveCurrency)

class LegBenchmarkCurveName(StringField):
    """Proxy of C++ FIX::LegBenchmarkCurveName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBenchmarkCurveName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegBenchmarkCurveName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegBenchmarkCurveName self) -> LegBenchmarkCurveName
        __init__(FIX::LegBenchmarkCurveName self, FIX::STRING const & value) -> LegBenchmarkCurveName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegBenchmarkCurveName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegBenchmarkCurveName
    __del__ = lambda self: None
LegBenchmarkCurveName_swigregister = _quickfix.LegBenchmarkCurveName_swigregister
LegBenchmarkCurveName_swigregister(LegBenchmarkCurveName)

class LegBenchmarkCurvePoint(StringField):
    """Proxy of C++ FIX::LegBenchmarkCurvePoint class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBenchmarkCurvePoint, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegBenchmarkCurvePoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegBenchmarkCurvePoint self) -> LegBenchmarkCurvePoint
        __init__(FIX::LegBenchmarkCurvePoint self, FIX::STRING const & value) -> LegBenchmarkCurvePoint

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegBenchmarkCurvePoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegBenchmarkCurvePoint
    __del__ = lambda self: None
LegBenchmarkCurvePoint_swigregister = _quickfix.LegBenchmarkCurvePoint_swigregister
LegBenchmarkCurvePoint_swigregister(LegBenchmarkCurvePoint)

class LegBenchmarkPrice(DoubleField):
    """Proxy of C++ FIX::LegBenchmarkPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBenchmarkPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegBenchmarkPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegBenchmarkPrice self) -> LegBenchmarkPrice
        __init__(FIX::LegBenchmarkPrice self, FIX::PRICE const & value) -> LegBenchmarkPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LegBenchmarkPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegBenchmarkPrice
    __del__ = lambda self: None
LegBenchmarkPrice_swigregister = _quickfix.LegBenchmarkPrice_swigregister
LegBenchmarkPrice_swigregister(LegBenchmarkPrice)

class LegBenchmarkPriceType(IntField):
    """Proxy of C++ FIX::LegBenchmarkPriceType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBenchmarkPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegBenchmarkPriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegBenchmarkPriceType self) -> LegBenchmarkPriceType
        __init__(FIX::LegBenchmarkPriceType self, FIX::INT const & value) -> LegBenchmarkPriceType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegBenchmarkPriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegBenchmarkPriceType
    __del__ = lambda self: None
LegBenchmarkPriceType_swigregister = _quickfix.LegBenchmarkPriceType_swigregister
LegBenchmarkPriceType_swigregister(LegBenchmarkPriceType)

class LegBidPx(DoubleField):
    """Proxy of C++ FIX::LegBidPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBidPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegBidPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegBidPx self) -> LegBidPx
        __init__(FIX::LegBidPx self, FIX::PRICE const & value) -> LegBidPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LegBidPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegBidPx
    __del__ = lambda self: None
LegBidPx_swigregister = _quickfix.LegBidPx_swigregister
LegBidPx_swigregister(LegBidPx)

class LegIOIQty(StringField):
    """Proxy of C++ FIX::LegIOIQty class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegIOIQty, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegIOIQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegIOIQty self) -> LegIOIQty
        __init__(FIX::LegIOIQty self, FIX::STRING const & value) -> LegIOIQty

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegIOIQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegIOIQty
    __del__ = lambda self: None
LegIOIQty_swigregister = _quickfix.LegIOIQty_swigregister
LegIOIQty_swigregister(LegIOIQty)

class NoLegStipulations(IntField):
    """Proxy of C++ FIX::NoLegStipulations class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoLegStipulations, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoLegStipulations, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoLegStipulations self) -> NoLegStipulations
        __init__(FIX::NoLegStipulations self, FIX::NUMINGROUP const & value) -> NoLegStipulations

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoLegStipulations(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoLegStipulations
    __del__ = lambda self: None
NoLegStipulations_swigregister = _quickfix.NoLegStipulations_swigregister
NoLegStipulations_swigregister(NoLegStipulations)

class LegOfferPx(DoubleField):
    """Proxy of C++ FIX::LegOfferPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegOfferPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegOfferPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegOfferPx self) -> LegOfferPx
        __init__(FIX::LegOfferPx self, FIX::PRICE const & value) -> LegOfferPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LegOfferPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegOfferPx
    __del__ = lambda self: None
LegOfferPx_swigregister = _quickfix.LegOfferPx_swigregister
LegOfferPx_swigregister(LegOfferPx)

class LegPriceType(IntField):
    """Proxy of C++ FIX::LegPriceType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegPriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegPriceType self) -> LegPriceType
        __init__(FIX::LegPriceType self, FIX::INT const & value) -> LegPriceType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegPriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegPriceType
    __del__ = lambda self: None
LegPriceType_swigregister = _quickfix.LegPriceType_swigregister
LegPriceType_swigregister(LegPriceType)

class LegQty(DoubleField):
    """Proxy of C++ FIX::LegQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegQty self) -> LegQty
        __init__(FIX::LegQty self, FIX::QTY const & value) -> LegQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LegQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegQty
    __del__ = lambda self: None
LegQty_swigregister = _quickfix.LegQty_swigregister
LegQty_swigregister(LegQty)

class LegStipulationType(StringField):
    """Proxy of C++ FIX::LegStipulationType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegStipulationType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegStipulationType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegStipulationType self) -> LegStipulationType
        __init__(FIX::LegStipulationType self, FIX::STRING const & value) -> LegStipulationType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegStipulationType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegStipulationType
    __del__ = lambda self: None
LegStipulationType_swigregister = _quickfix.LegStipulationType_swigregister
LegStipulationType_swigregister(LegStipulationType)

class LegStipulationValue(StringField):
    """Proxy of C++ FIX::LegStipulationValue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegStipulationValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegStipulationValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegStipulationValue self) -> LegStipulationValue
        __init__(FIX::LegStipulationValue self, FIX::STRING const & value) -> LegStipulationValue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegStipulationValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegStipulationValue
    __del__ = lambda self: None
LegStipulationValue_swigregister = _quickfix.LegStipulationValue_swigregister
LegStipulationValue_swigregister(LegStipulationValue)

class LegSwapType(IntField):
    """Proxy of C++ FIX::LegSwapType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSwapType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSwapType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSwapType self) -> LegSwapType
        __init__(FIX::LegSwapType self, FIX::INT const & value) -> LegSwapType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegSwapType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSwapType
    __del__ = lambda self: None
LegSwapType_swigregister = _quickfix.LegSwapType_swigregister
LegSwapType_swigregister(LegSwapType)

class Pool(StringField):
    """Proxy of C++ FIX::Pool class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pool, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pool, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Pool self) -> Pool
        __init__(FIX::Pool self, FIX::STRING const & value) -> Pool

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Pool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Pool
    __del__ = lambda self: None
Pool_swigregister = _quickfix.Pool_swigregister
Pool_swigregister(Pool)

class QuotePriceType(IntField):
    """Proxy of C++ FIX::QuotePriceType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuotePriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuotePriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuotePriceType self) -> QuotePriceType
        __init__(FIX::QuotePriceType self, FIX::INT const & value) -> QuotePriceType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuotePriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuotePriceType
    __del__ = lambda self: None
QuotePriceType_swigregister = _quickfix.QuotePriceType_swigregister
QuotePriceType_swigregister(QuotePriceType)

class QuoteRespID(StringField):
    """Proxy of C++ FIX::QuoteRespID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteRespID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteRespID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteRespID self) -> QuoteRespID
        __init__(FIX::QuoteRespID self, FIX::STRING const & value) -> QuoteRespID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_QuoteRespID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteRespID
    __del__ = lambda self: None
QuoteRespID_swigregister = _quickfix.QuoteRespID_swigregister
QuoteRespID_swigregister(QuoteRespID)

class QuoteRespType(IntField):
    """Proxy of C++ FIX::QuoteRespType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteRespType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteRespType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteRespType self) -> QuoteRespType
        __init__(FIX::QuoteRespType self, FIX::INT const & value) -> QuoteRespType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteRespType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteRespType
    __del__ = lambda self: None
QuoteRespType_swigregister = _quickfix.QuoteRespType_swigregister
QuoteRespType_swigregister(QuoteRespType)

class QuoteQualifier(CharField):
    """Proxy of C++ FIX::QuoteQualifier class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteQualifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteQualifier self) -> QuoteQualifier
        __init__(FIX::QuoteQualifier self, FIX::CHAR const & value) -> QuoteQualifier

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_QuoteQualifier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteQualifier
    __del__ = lambda self: None
QuoteQualifier_swigregister = _quickfix.QuoteQualifier_swigregister
QuoteQualifier_swigregister(QuoteQualifier)

class YieldRedemptionDate(StringField):
    """Proxy of C++ FIX::YieldRedemptionDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldRedemptionDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YieldRedemptionDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::YieldRedemptionDate self) -> YieldRedemptionDate
        __init__(FIX::YieldRedemptionDate self, FIX::LOCALMKTDATE const & value) -> YieldRedemptionDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_YieldRedemptionDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_YieldRedemptionDate
    __del__ = lambda self: None
YieldRedemptionDate_swigregister = _quickfix.YieldRedemptionDate_swigregister
YieldRedemptionDate_swigregister(YieldRedemptionDate)

class YieldRedemptionPrice(DoubleField):
    """Proxy of C++ FIX::YieldRedemptionPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldRedemptionPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YieldRedemptionPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::YieldRedemptionPrice self) -> YieldRedemptionPrice
        __init__(FIX::YieldRedemptionPrice self, FIX::PRICE const & value) -> YieldRedemptionPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_YieldRedemptionPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_YieldRedemptionPrice
    __del__ = lambda self: None
YieldRedemptionPrice_swigregister = _quickfix.YieldRedemptionPrice_swigregister
YieldRedemptionPrice_swigregister(YieldRedemptionPrice)

class YieldRedemptionPriceType(IntField):
    """Proxy of C++ FIX::YieldRedemptionPriceType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldRedemptionPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YieldRedemptionPriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::YieldRedemptionPriceType self) -> YieldRedemptionPriceType
        __init__(FIX::YieldRedemptionPriceType self, FIX::INT const & value) -> YieldRedemptionPriceType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_YieldRedemptionPriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_YieldRedemptionPriceType
    __del__ = lambda self: None
YieldRedemptionPriceType_swigregister = _quickfix.YieldRedemptionPriceType_swigregister
YieldRedemptionPriceType_swigregister(YieldRedemptionPriceType)

class BenchmarkSecurityID(StringField):
    """Proxy of C++ FIX::BenchmarkSecurityID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkSecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkSecurityID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BenchmarkSecurityID self) -> BenchmarkSecurityID
        __init__(FIX::BenchmarkSecurityID self, FIX::STRING const & value) -> BenchmarkSecurityID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_BenchmarkSecurityID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BenchmarkSecurityID
    __del__ = lambda self: None
BenchmarkSecurityID_swigregister = _quickfix.BenchmarkSecurityID_swigregister
BenchmarkSecurityID_swigregister(BenchmarkSecurityID)

class ReversalIndicator(BoolField):
    """Proxy of C++ FIX::ReversalIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReversalIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReversalIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ReversalIndicator self) -> ReversalIndicator
        __init__(FIX::ReversalIndicator self, FIX::BOOLEAN const & value) -> ReversalIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_ReversalIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ReversalIndicator
    __del__ = lambda self: None
ReversalIndicator_swigregister = _quickfix.ReversalIndicator_swigregister
ReversalIndicator_swigregister(ReversalIndicator)

class YieldCalcDate(StringField):
    """Proxy of C++ FIX::YieldCalcDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YieldCalcDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YieldCalcDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::YieldCalcDate self) -> YieldCalcDate
        __init__(FIX::YieldCalcDate self, FIX::LOCALMKTDATE const & value) -> YieldCalcDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_YieldCalcDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_YieldCalcDate
    __del__ = lambda self: None
YieldCalcDate_swigregister = _quickfix.YieldCalcDate_swigregister
YieldCalcDate_swigregister(YieldCalcDate)

class NoPositions(IntField):
    """Proxy of C++ FIX::NoPositions class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPositions, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoPositions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoPositions self) -> NoPositions
        __init__(FIX::NoPositions self, FIX::NUMINGROUP const & value) -> NoPositions

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoPositions(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoPositions
    __del__ = lambda self: None
NoPositions_swigregister = _quickfix.NoPositions_swigregister
NoPositions_swigregister(NoPositions)

class PosType(StringField):
    """Proxy of C++ FIX::PosType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosType self) -> PosType
        __init__(FIX::PosType self, FIX::STRING const & value) -> PosType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PosType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosType
    __del__ = lambda self: None
PosType_swigregister = _quickfix.PosType_swigregister
PosType_swigregister(PosType)

class LongQty(DoubleField):
    """Proxy of C++ FIX::LongQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LongQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LongQty self) -> LongQty
        __init__(FIX::LongQty self, FIX::QTY const & value) -> LongQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LongQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LongQty
    __del__ = lambda self: None
LongQty_swigregister = _quickfix.LongQty_swigregister
LongQty_swigregister(LongQty)

class ShortQty(DoubleField):
    """Proxy of C++ FIX::ShortQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ShortQty self) -> ShortQty
        __init__(FIX::ShortQty self, FIX::QTY const & value) -> ShortQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_ShortQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ShortQty
    __del__ = lambda self: None
ShortQty_swigregister = _quickfix.ShortQty_swigregister
ShortQty_swigregister(ShortQty)

class PosQtyStatus(IntField):
    """Proxy of C++ FIX::PosQtyStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosQtyStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosQtyStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosQtyStatus self) -> PosQtyStatus
        __init__(FIX::PosQtyStatus self, FIX::INT const & value) -> PosQtyStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PosQtyStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosQtyStatus
    __del__ = lambda self: None
PosQtyStatus_swigregister = _quickfix.PosQtyStatus_swigregister
PosQtyStatus_swigregister(PosQtyStatus)

class PosAmtType(StringField):
    """Proxy of C++ FIX::PosAmtType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosAmtType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosAmtType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosAmtType self) -> PosAmtType
        __init__(FIX::PosAmtType self, FIX::STRING const & value) -> PosAmtType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PosAmtType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosAmtType
    __del__ = lambda self: None
PosAmtType_swigregister = _quickfix.PosAmtType_swigregister
PosAmtType_swigregister(PosAmtType)

class PosAmt(DoubleField):
    """Proxy of C++ FIX::PosAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosAmt self) -> PosAmt
        __init__(FIX::PosAmt self, FIX::AMT const & value) -> PosAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_PosAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosAmt
    __del__ = lambda self: None
PosAmt_swigregister = _quickfix.PosAmt_swigregister
PosAmt_swigregister(PosAmt)

class PosTransType(IntField):
    """Proxy of C++ FIX::PosTransType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosTransType self) -> PosTransType
        __init__(FIX::PosTransType self, FIX::INT const & value) -> PosTransType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PosTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosTransType
    __del__ = lambda self: None
PosTransType_swigregister = _quickfix.PosTransType_swigregister
PosTransType_swigregister(PosTransType)

class PosReqID(StringField):
    """Proxy of C++ FIX::PosReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosReqID self) -> PosReqID
        __init__(FIX::PosReqID self, FIX::STRING const & value) -> PosReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PosReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosReqID
    __del__ = lambda self: None
PosReqID_swigregister = _quickfix.PosReqID_swigregister
PosReqID_swigregister(PosReqID)

class NoUnderlyings(IntField):
    """Proxy of C++ FIX::NoUnderlyings class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoUnderlyings, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoUnderlyings, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoUnderlyings self) -> NoUnderlyings
        __init__(FIX::NoUnderlyings self, FIX::NUMINGROUP const & value) -> NoUnderlyings

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoUnderlyings(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoUnderlyings
    __del__ = lambda self: None
NoUnderlyings_swigregister = _quickfix.NoUnderlyings_swigregister
NoUnderlyings_swigregister(NoUnderlyings)

class PosMaintAction(IntField):
    """Proxy of C++ FIX::PosMaintAction class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosMaintAction, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosMaintAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosMaintAction self) -> PosMaintAction
        __init__(FIX::PosMaintAction self, FIX::INT const & value) -> PosMaintAction

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PosMaintAction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosMaintAction
    __del__ = lambda self: None
PosMaintAction_swigregister = _quickfix.PosMaintAction_swigregister
PosMaintAction_swigregister(PosMaintAction)

class OrigPosReqRefID(StringField):
    """Proxy of C++ FIX::OrigPosReqRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigPosReqRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigPosReqRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigPosReqRefID self) -> OrigPosReqRefID
        __init__(FIX::OrigPosReqRefID self, FIX::STRING const & value) -> OrigPosReqRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OrigPosReqRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigPosReqRefID
    __del__ = lambda self: None
OrigPosReqRefID_swigregister = _quickfix.OrigPosReqRefID_swigregister
OrigPosReqRefID_swigregister(OrigPosReqRefID)

class PosMaintRptRefID(StringField):
    """Proxy of C++ FIX::PosMaintRptRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosMaintRptRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosMaintRptRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosMaintRptRefID self) -> PosMaintRptRefID
        __init__(FIX::PosMaintRptRefID self, FIX::STRING const & value) -> PosMaintRptRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PosMaintRptRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosMaintRptRefID
    __del__ = lambda self: None
PosMaintRptRefID_swigregister = _quickfix.PosMaintRptRefID_swigregister
PosMaintRptRefID_swigregister(PosMaintRptRefID)

class ClearingBusinessDate(StringField):
    """Proxy of C++ FIX::ClearingBusinessDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClearingBusinessDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClearingBusinessDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ClearingBusinessDate self) -> ClearingBusinessDate
        __init__(FIX::ClearingBusinessDate self, FIX::LOCALMKTDATE const & value) -> ClearingBusinessDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_ClearingBusinessDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ClearingBusinessDate
    __del__ = lambda self: None
ClearingBusinessDate_swigregister = _quickfix.ClearingBusinessDate_swigregister
ClearingBusinessDate_swigregister(ClearingBusinessDate)

class SettlSessID(StringField):
    """Proxy of C++ FIX::SettlSessID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlSessID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlSessID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlSessID self) -> SettlSessID
        __init__(FIX::SettlSessID self, FIX::STRING const & value) -> SettlSessID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlSessID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlSessID
    __del__ = lambda self: None
SettlSessID_swigregister = _quickfix.SettlSessID_swigregister
SettlSessID_swigregister(SettlSessID)

class SettlSessSubID(StringField):
    """Proxy of C++ FIX::SettlSessSubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlSessSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlSessSubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlSessSubID self) -> SettlSessSubID
        __init__(FIX::SettlSessSubID self, FIX::STRING const & value) -> SettlSessSubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlSessSubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlSessSubID
    __del__ = lambda self: None
SettlSessSubID_swigregister = _quickfix.SettlSessSubID_swigregister
SettlSessSubID_swigregister(SettlSessSubID)

class AdjustmentType(IntField):
    """Proxy of C++ FIX::AdjustmentType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdjustmentType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdjustmentType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AdjustmentType self) -> AdjustmentType
        __init__(FIX::AdjustmentType self, FIX::INT const & value) -> AdjustmentType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AdjustmentType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AdjustmentType
    __del__ = lambda self: None
AdjustmentType_swigregister = _quickfix.AdjustmentType_swigregister
AdjustmentType_swigregister(AdjustmentType)

class ContraryInstructionIndicator(BoolField):
    """Proxy of C++ FIX::ContraryInstructionIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContraryInstructionIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContraryInstructionIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContraryInstructionIndicator self) -> ContraryInstructionIndicator
        __init__(FIX::ContraryInstructionIndicator self, FIX::BOOLEAN const & value) -> ContraryInstructionIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_ContraryInstructionIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContraryInstructionIndicator
    __del__ = lambda self: None
ContraryInstructionIndicator_swigregister = _quickfix.ContraryInstructionIndicator_swigregister
ContraryInstructionIndicator_swigregister(ContraryInstructionIndicator)

class PriorSpreadIndicator(BoolField):
    """Proxy of C++ FIX::PriorSpreadIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriorSpreadIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriorSpreadIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriorSpreadIndicator self) -> PriorSpreadIndicator
        __init__(FIX::PriorSpreadIndicator self, FIX::BOOLEAN const & value) -> PriorSpreadIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_PriorSpreadIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriorSpreadIndicator
    __del__ = lambda self: None
PriorSpreadIndicator_swigregister = _quickfix.PriorSpreadIndicator_swigregister
PriorSpreadIndicator_swigregister(PriorSpreadIndicator)

class PosMaintRptID(StringField):
    """Proxy of C++ FIX::PosMaintRptID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosMaintRptID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosMaintRptID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosMaintRptID self) -> PosMaintRptID
        __init__(FIX::PosMaintRptID self, FIX::STRING const & value) -> PosMaintRptID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PosMaintRptID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosMaintRptID
    __del__ = lambda self: None
PosMaintRptID_swigregister = _quickfix.PosMaintRptID_swigregister
PosMaintRptID_swigregister(PosMaintRptID)

class PosMaintStatus(IntField):
    """Proxy of C++ FIX::PosMaintStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosMaintStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosMaintStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosMaintStatus self) -> PosMaintStatus
        __init__(FIX::PosMaintStatus self, FIX::INT const & value) -> PosMaintStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PosMaintStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosMaintStatus
    __del__ = lambda self: None
PosMaintStatus_swigregister = _quickfix.PosMaintStatus_swigregister
PosMaintStatus_swigregister(PosMaintStatus)

class PosMaintResult(IntField):
    """Proxy of C++ FIX::PosMaintResult class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosMaintResult, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosMaintResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosMaintResult self) -> PosMaintResult
        __init__(FIX::PosMaintResult self, FIX::INT const & value) -> PosMaintResult

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PosMaintResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosMaintResult
    __del__ = lambda self: None
PosMaintResult_swigregister = _quickfix.PosMaintResult_swigregister
PosMaintResult_swigregister(PosMaintResult)

class PosReqType(IntField):
    """Proxy of C++ FIX::PosReqType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosReqType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosReqType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosReqType self) -> PosReqType
        __init__(FIX::PosReqType self, FIX::INT const & value) -> PosReqType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PosReqType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosReqType
    __del__ = lambda self: None
PosReqType_swigregister = _quickfix.PosReqType_swigregister
PosReqType_swigregister(PosReqType)

class ResponseTransportType(IntField):
    """Proxy of C++ FIX::ResponseTransportType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseTransportType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseTransportType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ResponseTransportType self) -> ResponseTransportType
        __init__(FIX::ResponseTransportType self, FIX::INT const & value) -> ResponseTransportType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ResponseTransportType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ResponseTransportType
    __del__ = lambda self: None
ResponseTransportType_swigregister = _quickfix.ResponseTransportType_swigregister
ResponseTransportType_swigregister(ResponseTransportType)

class ResponseDestination(StringField):
    """Proxy of C++ FIX::ResponseDestination class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResponseDestination, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResponseDestination, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ResponseDestination self) -> ResponseDestination
        __init__(FIX::ResponseDestination self, FIX::STRING const & value) -> ResponseDestination

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ResponseDestination(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ResponseDestination
    __del__ = lambda self: None
ResponseDestination_swigregister = _quickfix.ResponseDestination_swigregister
ResponseDestination_swigregister(ResponseDestination)

class TotalNumPosReports(IntField):
    """Proxy of C++ FIX::TotalNumPosReports class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalNumPosReports, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalNumPosReports, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotalNumPosReports self) -> TotalNumPosReports
        __init__(FIX::TotalNumPosReports self, FIX::INT const & value) -> TotalNumPosReports

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotalNumPosReports(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotalNumPosReports
    __del__ = lambda self: None
TotalNumPosReports_swigregister = _quickfix.TotalNumPosReports_swigregister
TotalNumPosReports_swigregister(TotalNumPosReports)

class PosReqResult(IntField):
    """Proxy of C++ FIX::PosReqResult class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosReqResult, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosReqResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosReqResult self) -> PosReqResult
        __init__(FIX::PosReqResult self, FIX::INT const & value) -> PosReqResult

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PosReqResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosReqResult
    __del__ = lambda self: None
PosReqResult_swigregister = _quickfix.PosReqResult_swigregister
PosReqResult_swigregister(PosReqResult)

class PosReqStatus(IntField):
    """Proxy of C++ FIX::PosReqStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PosReqStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PosReqStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PosReqStatus self) -> PosReqStatus
        __init__(FIX::PosReqStatus self, FIX::INT const & value) -> PosReqStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PosReqStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PosReqStatus
    __del__ = lambda self: None
PosReqStatus_swigregister = _quickfix.PosReqStatus_swigregister
PosReqStatus_swigregister(PosReqStatus)

class SettlPrice(DoubleField):
    """Proxy of C++ FIX::SettlPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlPrice self) -> SettlPrice
        __init__(FIX::SettlPrice self, FIX::PRICE const & value) -> SettlPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_SettlPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlPrice
    __del__ = lambda self: None
SettlPrice_swigregister = _quickfix.SettlPrice_swigregister
SettlPrice_swigregister(SettlPrice)

class SettlPriceType(IntField):
    """Proxy of C++ FIX::SettlPriceType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlPriceType self) -> SettlPriceType
        __init__(FIX::SettlPriceType self, FIX::INT const & value) -> SettlPriceType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SettlPriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlPriceType
    __del__ = lambda self: None
SettlPriceType_swigregister = _quickfix.SettlPriceType_swigregister
SettlPriceType_swigregister(SettlPriceType)

class UnderlyingSettlPrice(DoubleField):
    """Proxy of C++ FIX::UnderlyingSettlPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSettlPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSettlPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSettlPrice self) -> UnderlyingSettlPrice
        __init__(FIX::UnderlyingSettlPrice self, FIX::PRICE const & value) -> UnderlyingSettlPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_UnderlyingSettlPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlPrice
    __del__ = lambda self: None
UnderlyingSettlPrice_swigregister = _quickfix.UnderlyingSettlPrice_swigregister
UnderlyingSettlPrice_swigregister(UnderlyingSettlPrice)

class UnderlyingSettlPriceType(IntField):
    """Proxy of C++ FIX::UnderlyingSettlPriceType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSettlPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSettlPriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSettlPriceType self) -> UnderlyingSettlPriceType
        __init__(FIX::UnderlyingSettlPriceType self, FIX::INT const & value) -> UnderlyingSettlPriceType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingSettlPriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlPriceType
    __del__ = lambda self: None
UnderlyingSettlPriceType_swigregister = _quickfix.UnderlyingSettlPriceType_swigregister
UnderlyingSettlPriceType_swigregister(UnderlyingSettlPriceType)

class PriorSettlPrice(DoubleField):
    """Proxy of C++ FIX::PriorSettlPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriorSettlPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriorSettlPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriorSettlPrice self) -> PriorSettlPrice
        __init__(FIX::PriorSettlPrice self, FIX::PRICE const & value) -> PriorSettlPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_PriorSettlPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriorSettlPrice
    __del__ = lambda self: None
PriorSettlPrice_swigregister = _quickfix.PriorSettlPrice_swigregister
PriorSettlPrice_swigregister(PriorSettlPrice)

class NoQuoteQualifiers(IntField):
    """Proxy of C++ FIX::NoQuoteQualifiers class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoQuoteQualifiers, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoQuoteQualifiers, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoQuoteQualifiers self) -> NoQuoteQualifiers
        __init__(FIX::NoQuoteQualifiers self, FIX::NUMINGROUP const & value) -> NoQuoteQualifiers

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoQuoteQualifiers(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoQuoteQualifiers
    __del__ = lambda self: None
NoQuoteQualifiers_swigregister = _quickfix.NoQuoteQualifiers_swigregister
NoQuoteQualifiers_swigregister(NoQuoteQualifiers)

class AllocSettlCurrency(StringField):
    """Proxy of C++ FIX::AllocSettlCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocSettlCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocSettlCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocSettlCurrency self) -> AllocSettlCurrency
        __init__(FIX::AllocSettlCurrency self, FIX::CURRENCY const & value) -> AllocSettlCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_AllocSettlCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocSettlCurrency
    __del__ = lambda self: None
AllocSettlCurrency_swigregister = _quickfix.AllocSettlCurrency_swigregister
AllocSettlCurrency_swigregister(AllocSettlCurrency)

class AllocSettlCurrAmt(DoubleField):
    """Proxy of C++ FIX::AllocSettlCurrAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocSettlCurrAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocSettlCurrAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocSettlCurrAmt self) -> AllocSettlCurrAmt
        __init__(FIX::AllocSettlCurrAmt self, FIX::AMT const & value) -> AllocSettlCurrAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_AllocSettlCurrAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocSettlCurrAmt
    __del__ = lambda self: None
AllocSettlCurrAmt_swigregister = _quickfix.AllocSettlCurrAmt_swigregister
AllocSettlCurrAmt_swigregister(AllocSettlCurrAmt)

class InterestAtMaturity(DoubleField):
    """Proxy of C++ FIX::InterestAtMaturity class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterestAtMaturity, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterestAtMaturity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InterestAtMaturity self) -> InterestAtMaturity
        __init__(FIX::InterestAtMaturity self, FIX::AMT const & value) -> InterestAtMaturity

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_InterestAtMaturity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InterestAtMaturity
    __del__ = lambda self: None
InterestAtMaturity_swigregister = _quickfix.InterestAtMaturity_swigregister
InterestAtMaturity_swigregister(InterestAtMaturity)

class LegDatedDate(StringField):
    """Proxy of C++ FIX::LegDatedDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegDatedDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegDatedDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegDatedDate self) -> LegDatedDate
        __init__(FIX::LegDatedDate self, FIX::LOCALMKTDATE const & value) -> LegDatedDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_LegDatedDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegDatedDate
    __del__ = lambda self: None
LegDatedDate_swigregister = _quickfix.LegDatedDate_swigregister
LegDatedDate_swigregister(LegDatedDate)

class LegPool(StringField):
    """Proxy of C++ FIX::LegPool class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPool, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegPool, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegPool self) -> LegPool
        __init__(FIX::LegPool self, FIX::STRING const & value) -> LegPool

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegPool(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegPool
    __del__ = lambda self: None
LegPool_swigregister = _quickfix.LegPool_swigregister
LegPool_swigregister(LegPool)

class AllocInterestAtMaturity(DoubleField):
    """Proxy of C++ FIX::AllocInterestAtMaturity class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocInterestAtMaturity, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocInterestAtMaturity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocInterestAtMaturity self) -> AllocInterestAtMaturity
        __init__(FIX::AllocInterestAtMaturity self, FIX::AMT const & value) -> AllocInterestAtMaturity

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_AllocInterestAtMaturity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocInterestAtMaturity
    __del__ = lambda self: None
AllocInterestAtMaturity_swigregister = _quickfix.AllocInterestAtMaturity_swigregister
AllocInterestAtMaturity_swigregister(AllocInterestAtMaturity)

class AllocAccruedInterestAmt(DoubleField):
    """Proxy of C++ FIX::AllocAccruedInterestAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocAccruedInterestAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocAccruedInterestAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocAccruedInterestAmt self) -> AllocAccruedInterestAmt
        __init__(FIX::AllocAccruedInterestAmt self, FIX::AMT const & value) -> AllocAccruedInterestAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_AllocAccruedInterestAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocAccruedInterestAmt
    __del__ = lambda self: None
AllocAccruedInterestAmt_swigregister = _quickfix.AllocAccruedInterestAmt_swigregister
AllocAccruedInterestAmt_swigregister(AllocAccruedInterestAmt)

class DeliveryDate(StringField):
    """Proxy of C++ FIX::DeliveryDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliveryDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeliveryDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeliveryDate self) -> DeliveryDate
        __init__(FIX::DeliveryDate self, FIX::LOCALMKTDATE const & value) -> DeliveryDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_DeliveryDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeliveryDate
    __del__ = lambda self: None
DeliveryDate_swigregister = _quickfix.DeliveryDate_swigregister
DeliveryDate_swigregister(DeliveryDate)

class AssignmentMethod(CharField):
    """Proxy of C++ FIX::AssignmentMethod class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AssignmentMethod self) -> AssignmentMethod
        __init__(FIX::AssignmentMethod self, FIX::CHAR const & value) -> AssignmentMethod

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_AssignmentMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AssignmentMethod
    __del__ = lambda self: None
AssignmentMethod_swigregister = _quickfix.AssignmentMethod_swigregister
AssignmentMethod_swigregister(AssignmentMethod)

class AssignmentUnit(DoubleField):
    """Proxy of C++ FIX::AssignmentUnit class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AssignmentUnit self) -> AssignmentUnit
        __init__(FIX::AssignmentUnit self, FIX::QTY const & value) -> AssignmentUnit

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_AssignmentUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AssignmentUnit
    __del__ = lambda self: None
AssignmentUnit_swigregister = _quickfix.AssignmentUnit_swigregister
AssignmentUnit_swigregister(AssignmentUnit)

class OpenInterest(DoubleField):
    """Proxy of C++ FIX::OpenInterest class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpenInterest, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpenInterest, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OpenInterest self) -> OpenInterest
        __init__(FIX::OpenInterest self, FIX::AMT const & value) -> OpenInterest

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_OpenInterest(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OpenInterest
    __del__ = lambda self: None
OpenInterest_swigregister = _quickfix.OpenInterest_swigregister
OpenInterest_swigregister(OpenInterest)

class ExerciseMethod(CharField):
    """Proxy of C++ FIX::ExerciseMethod class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExerciseMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExerciseMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExerciseMethod self) -> ExerciseMethod
        __init__(FIX::ExerciseMethod self, FIX::CHAR const & value) -> ExerciseMethod

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_ExerciseMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExerciseMethod
    __del__ = lambda self: None
ExerciseMethod_swigregister = _quickfix.ExerciseMethod_swigregister
ExerciseMethod_swigregister(ExerciseMethod)

class TotNumTradeReports(IntField):
    """Proxy of C++ FIX::TotNumTradeReports class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNumTradeReports, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNumTradeReports, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNumTradeReports self) -> TotNumTradeReports
        __init__(FIX::TotNumTradeReports self, FIX::INT const & value) -> TotNumTradeReports

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNumTradeReports(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNumTradeReports
    __del__ = lambda self: None
TotNumTradeReports_swigregister = _quickfix.TotNumTradeReports_swigregister
TotNumTradeReports_swigregister(TotNumTradeReports)

class TradeRequestResult(IntField):
    """Proxy of C++ FIX::TradeRequestResult class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeRequestResult, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeRequestResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeRequestResult self) -> TradeRequestResult
        __init__(FIX::TradeRequestResult self, FIX::INT const & value) -> TradeRequestResult

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradeRequestResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeRequestResult
    __del__ = lambda self: None
TradeRequestResult_swigregister = _quickfix.TradeRequestResult_swigregister
TradeRequestResult_swigregister(TradeRequestResult)

class TradeRequestStatus(IntField):
    """Proxy of C++ FIX::TradeRequestStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeRequestStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeRequestStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeRequestStatus self) -> TradeRequestStatus
        __init__(FIX::TradeRequestStatus self, FIX::INT const & value) -> TradeRequestStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradeRequestStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeRequestStatus
    __del__ = lambda self: None
TradeRequestStatus_swigregister = _quickfix.TradeRequestStatus_swigregister
TradeRequestStatus_swigregister(TradeRequestStatus)

class TradeReportRejectReason(IntField):
    """Proxy of C++ FIX::TradeReportRejectReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeReportRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeReportRejectReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeReportRejectReason self) -> TradeReportRejectReason
        __init__(FIX::TradeReportRejectReason self, FIX::INT const & value) -> TradeReportRejectReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradeReportRejectReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeReportRejectReason
    __del__ = lambda self: None
TradeReportRejectReason_swigregister = _quickfix.TradeReportRejectReason_swigregister
TradeReportRejectReason_swigregister(TradeReportRejectReason)

class SideMultiLegReportingType(IntField):
    """Proxy of C++ FIX::SideMultiLegReportingType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideMultiLegReportingType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideMultiLegReportingType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideMultiLegReportingType self) -> SideMultiLegReportingType
        __init__(FIX::SideMultiLegReportingType self, FIX::INT const & value) -> SideMultiLegReportingType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SideMultiLegReportingType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideMultiLegReportingType
    __del__ = lambda self: None
SideMultiLegReportingType_swigregister = _quickfix.SideMultiLegReportingType_swigregister
SideMultiLegReportingType_swigregister(SideMultiLegReportingType)

class NoPosAmt(IntField):
    """Proxy of C++ FIX::NoPosAmt class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPosAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoPosAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoPosAmt self) -> NoPosAmt
        __init__(FIX::NoPosAmt self, FIX::NUMINGROUP const & value) -> NoPosAmt

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoPosAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoPosAmt
    __del__ = lambda self: None
NoPosAmt_swigregister = _quickfix.NoPosAmt_swigregister
NoPosAmt_swigregister(NoPosAmt)

class AutoAcceptIndicator(BoolField):
    """Proxy of C++ FIX::AutoAcceptIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AutoAcceptIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AutoAcceptIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AutoAcceptIndicator self) -> AutoAcceptIndicator
        __init__(FIX::AutoAcceptIndicator self, FIX::BOOLEAN const & value) -> AutoAcceptIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_AutoAcceptIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AutoAcceptIndicator
    __del__ = lambda self: None
AutoAcceptIndicator_swigregister = _quickfix.AutoAcceptIndicator_swigregister
AutoAcceptIndicator_swigregister(AutoAcceptIndicator)

class AllocReportID(StringField):
    """Proxy of C++ FIX::AllocReportID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocReportID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocReportID self) -> AllocReportID
        __init__(FIX::AllocReportID self, FIX::STRING const & value) -> AllocReportID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AllocReportID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocReportID
    __del__ = lambda self: None
AllocReportID_swigregister = _quickfix.AllocReportID_swigregister
AllocReportID_swigregister(AllocReportID)

class NoNested2PartyIDs(IntField):
    """Proxy of C++ FIX::NoNested2PartyIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNested2PartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNested2PartyIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNested2PartyIDs self) -> NoNested2PartyIDs
        __init__(FIX::NoNested2PartyIDs self, FIX::NUMINGROUP const & value) -> NoNested2PartyIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNested2PartyIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNested2PartyIDs
    __del__ = lambda self: None
NoNested2PartyIDs_swigregister = _quickfix.NoNested2PartyIDs_swigregister
NoNested2PartyIDs_swigregister(NoNested2PartyIDs)

class Nested2PartyID(StringField):
    """Proxy of C++ FIX::Nested2PartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested2PartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested2PartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested2PartyID self) -> Nested2PartyID
        __init__(FIX::Nested2PartyID self, FIX::STRING const & value) -> Nested2PartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Nested2PartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested2PartyID
    __del__ = lambda self: None
Nested2PartyID_swigregister = _quickfix.Nested2PartyID_swigregister
Nested2PartyID_swigregister(Nested2PartyID)

class Nested2PartyIDSource(CharField):
    """Proxy of C++ FIX::Nested2PartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested2PartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested2PartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested2PartyIDSource self) -> Nested2PartyIDSource
        __init__(FIX::Nested2PartyIDSource self, FIX::CHAR const & value) -> Nested2PartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_Nested2PartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested2PartyIDSource
    __del__ = lambda self: None
Nested2PartyIDSource_swigregister = _quickfix.Nested2PartyIDSource_swigregister
Nested2PartyIDSource_swigregister(Nested2PartyIDSource)

class Nested2PartyRole(IntField):
    """Proxy of C++ FIX::Nested2PartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested2PartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested2PartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested2PartyRole self) -> Nested2PartyRole
        __init__(FIX::Nested2PartyRole self, FIX::INT const & value) -> Nested2PartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_Nested2PartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested2PartyRole
    __del__ = lambda self: None
Nested2PartyRole_swigregister = _quickfix.Nested2PartyRole_swigregister
Nested2PartyRole_swigregister(Nested2PartyRole)

class Nested2PartySubID(StringField):
    """Proxy of C++ FIX::Nested2PartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested2PartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested2PartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested2PartySubID self) -> Nested2PartySubID
        __init__(FIX::Nested2PartySubID self, FIX::STRING const & value) -> Nested2PartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Nested2PartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested2PartySubID
    __del__ = lambda self: None
Nested2PartySubID_swigregister = _quickfix.Nested2PartySubID_swigregister
Nested2PartySubID_swigregister(Nested2PartySubID)

class BenchmarkSecurityIDSource(StringField):
    """Proxy of C++ FIX::BenchmarkSecurityIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BenchmarkSecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BenchmarkSecurityIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BenchmarkSecurityIDSource self) -> BenchmarkSecurityIDSource
        __init__(FIX::BenchmarkSecurityIDSource self, FIX::STRING const & value) -> BenchmarkSecurityIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_BenchmarkSecurityIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BenchmarkSecurityIDSource
    __del__ = lambda self: None
BenchmarkSecurityIDSource_swigregister = _quickfix.BenchmarkSecurityIDSource_swigregister
BenchmarkSecurityIDSource_swigregister(BenchmarkSecurityIDSource)

class SecuritySubType(StringField):
    """Proxy of C++ FIX::SecuritySubType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecuritySubType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecuritySubType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecuritySubType self) -> SecuritySubType
        __init__(FIX::SecuritySubType self, FIX::STRING const & value) -> SecuritySubType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecuritySubType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecuritySubType
    __del__ = lambda self: None
SecuritySubType_swigregister = _quickfix.SecuritySubType_swigregister
SecuritySubType_swigregister(SecuritySubType)

class UnderlyingSecuritySubType(StringField):
    """Proxy of C++ FIX::UnderlyingSecuritySubType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSecuritySubType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSecuritySubType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSecuritySubType self) -> UnderlyingSecuritySubType
        __init__(FIX::UnderlyingSecuritySubType self, FIX::STRING const & value) -> UnderlyingSecuritySubType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSecuritySubType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSecuritySubType
    __del__ = lambda self: None
UnderlyingSecuritySubType_swigregister = _quickfix.UnderlyingSecuritySubType_swigregister
UnderlyingSecuritySubType_swigregister(UnderlyingSecuritySubType)

class LegSecuritySubType(StringField):
    """Proxy of C++ FIX::LegSecuritySubType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegSecuritySubType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegSecuritySubType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegSecuritySubType self) -> LegSecuritySubType
        __init__(FIX::LegSecuritySubType self, FIX::STRING const & value) -> LegSecuritySubType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegSecuritySubType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegSecuritySubType
    __del__ = lambda self: None
LegSecuritySubType_swigregister = _quickfix.LegSecuritySubType_swigregister
LegSecuritySubType_swigregister(LegSecuritySubType)

class AllowableOneSidednessPct(DoubleField):
    """Proxy of C++ FIX::AllowableOneSidednessPct class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllowableOneSidednessPct, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllowableOneSidednessPct, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllowableOneSidednessPct self) -> AllowableOneSidednessPct
        __init__(FIX::AllowableOneSidednessPct self, FIX::PERCENTAGE const & value) -> AllowableOneSidednessPct

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_AllowableOneSidednessPct(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllowableOneSidednessPct
    __del__ = lambda self: None
AllowableOneSidednessPct_swigregister = _quickfix.AllowableOneSidednessPct_swigregister
AllowableOneSidednessPct_swigregister(AllowableOneSidednessPct)

class AllowableOneSidednessValue(DoubleField):
    """Proxy of C++ FIX::AllowableOneSidednessValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllowableOneSidednessValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllowableOneSidednessValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllowableOneSidednessValue self) -> AllowableOneSidednessValue
        __init__(FIX::AllowableOneSidednessValue self, FIX::AMT const & value) -> AllowableOneSidednessValue

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_AllowableOneSidednessValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllowableOneSidednessValue
    __del__ = lambda self: None
AllowableOneSidednessValue_swigregister = _quickfix.AllowableOneSidednessValue_swigregister
AllowableOneSidednessValue_swigregister(AllowableOneSidednessValue)

class AllowableOneSidednessCurr(StringField):
    """Proxy of C++ FIX::AllowableOneSidednessCurr class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllowableOneSidednessCurr, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllowableOneSidednessCurr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllowableOneSidednessCurr self) -> AllowableOneSidednessCurr
        __init__(FIX::AllowableOneSidednessCurr self, FIX::CURRENCY const & value) -> AllowableOneSidednessCurr

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_AllowableOneSidednessCurr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllowableOneSidednessCurr
    __del__ = lambda self: None
AllowableOneSidednessCurr_swigregister = _quickfix.AllowableOneSidednessCurr_swigregister
AllowableOneSidednessCurr_swigregister(AllowableOneSidednessCurr)

class NoTrdRegTimestamps(IntField):
    """Proxy of C++ FIX::NoTrdRegTimestamps class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTrdRegTimestamps, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTrdRegTimestamps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoTrdRegTimestamps self) -> NoTrdRegTimestamps
        __init__(FIX::NoTrdRegTimestamps self, FIX::NUMINGROUP const & value) -> NoTrdRegTimestamps

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoTrdRegTimestamps(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoTrdRegTimestamps
    __del__ = lambda self: None
NoTrdRegTimestamps_swigregister = _quickfix.NoTrdRegTimestamps_swigregister
NoTrdRegTimestamps_swigregister(NoTrdRegTimestamps)

class TrdRegTimestamp(UtcTimeStampField):
    """Proxy of C++ FIX::TrdRegTimestamp class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdRegTimestamp, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrdRegTimestamp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TrdRegTimestamp self) -> TrdRegTimestamp
        __init__(FIX::TrdRegTimestamp self, bool showMilliseconds) -> TrdRegTimestamp

        Parameters:
            showMilliseconds: bool

        __init__(FIX::TrdRegTimestamp self, FIX::UTCTIMESTAMP const & value) -> TrdRegTimestamp

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::TrdRegTimestamp self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> TrdRegTimestamp

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_TrdRegTimestamp(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TrdRegTimestamp
    __del__ = lambda self: None
TrdRegTimestamp_swigregister = _quickfix.TrdRegTimestamp_swigregister
TrdRegTimestamp_swigregister(TrdRegTimestamp)

class TrdRegTimestampType(IntField):
    """Proxy of C++ FIX::TrdRegTimestampType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdRegTimestampType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrdRegTimestampType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TrdRegTimestampType self) -> TrdRegTimestampType
        __init__(FIX::TrdRegTimestampType self, FIX::INT const & value) -> TrdRegTimestampType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TrdRegTimestampType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TrdRegTimestampType
    __del__ = lambda self: None
TrdRegTimestampType_swigregister = _quickfix.TrdRegTimestampType_swigregister
TrdRegTimestampType_swigregister(TrdRegTimestampType)

class TrdRegTimestampOrigin(StringField):
    """Proxy of C++ FIX::TrdRegTimestampOrigin class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdRegTimestampOrigin, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrdRegTimestampOrigin, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TrdRegTimestampOrigin self) -> TrdRegTimestampOrigin
        __init__(FIX::TrdRegTimestampOrigin self, FIX::STRING const & value) -> TrdRegTimestampOrigin

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TrdRegTimestampOrigin(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TrdRegTimestampOrigin
    __del__ = lambda self: None
TrdRegTimestampOrigin_swigregister = _quickfix.TrdRegTimestampOrigin_swigregister
TrdRegTimestampOrigin_swigregister(TrdRegTimestampOrigin)

class ConfirmRefID(StringField):
    """Proxy of C++ FIX::ConfirmRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ConfirmRefID self) -> ConfirmRefID
        __init__(FIX::ConfirmRefID self, FIX::STRING const & value) -> ConfirmRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ConfirmRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ConfirmRefID
    __del__ = lambda self: None
ConfirmRefID_swigregister = _quickfix.ConfirmRefID_swigregister
ConfirmRefID_swigregister(ConfirmRefID)

class ConfirmType(IntField):
    """Proxy of C++ FIX::ConfirmType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ConfirmType self) -> ConfirmType
        __init__(FIX::ConfirmType self, FIX::INT const & value) -> ConfirmType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ConfirmType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ConfirmType
    __del__ = lambda self: None
ConfirmType_swigregister = _quickfix.ConfirmType_swigregister
ConfirmType_swigregister(ConfirmType)

class ConfirmRejReason(IntField):
    """Proxy of C++ FIX::ConfirmRejReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmRejReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ConfirmRejReason self) -> ConfirmRejReason
        __init__(FIX::ConfirmRejReason self, FIX::INT const & value) -> ConfirmRejReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ConfirmRejReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ConfirmRejReason
    __del__ = lambda self: None
ConfirmRejReason_swigregister = _quickfix.ConfirmRejReason_swigregister
ConfirmRejReason_swigregister(ConfirmRejReason)

class BookingType(IntField):
    """Proxy of C++ FIX::BookingType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BookingType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BookingType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BookingType self) -> BookingType
        __init__(FIX::BookingType self, FIX::INT const & value) -> BookingType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_BookingType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BookingType
    __del__ = lambda self: None
BookingType_swigregister = _quickfix.BookingType_swigregister
BookingType_swigregister(BookingType)

class IndividualAllocRejCode(IntField):
    """Proxy of C++ FIX::IndividualAllocRejCode class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndividualAllocRejCode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndividualAllocRejCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IndividualAllocRejCode self) -> IndividualAllocRejCode
        __init__(FIX::IndividualAllocRejCode self, FIX::INT const & value) -> IndividualAllocRejCode

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_IndividualAllocRejCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IndividualAllocRejCode
    __del__ = lambda self: None
IndividualAllocRejCode_swigregister = _quickfix.IndividualAllocRejCode_swigregister
IndividualAllocRejCode_swigregister(IndividualAllocRejCode)

class SettlInstMsgID(StringField):
    """Proxy of C++ FIX::SettlInstMsgID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstMsgID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstMsgID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlInstMsgID self) -> SettlInstMsgID
        __init__(FIX::SettlInstMsgID self, FIX::STRING const & value) -> SettlInstMsgID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlInstMsgID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlInstMsgID
    __del__ = lambda self: None
SettlInstMsgID_swigregister = _quickfix.SettlInstMsgID_swigregister
SettlInstMsgID_swigregister(SettlInstMsgID)

class NoSettlInst(IntField):
    """Proxy of C++ FIX::NoSettlInst class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSettlInst, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSettlInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoSettlInst self) -> NoSettlInst
        __init__(FIX::NoSettlInst self, FIX::NUMINGROUP const & value) -> NoSettlInst

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoSettlInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoSettlInst
    __del__ = lambda self: None
NoSettlInst_swigregister = _quickfix.NoSettlInst_swigregister
NoSettlInst_swigregister(NoSettlInst)

class LastUpdateTime(UtcTimeStampField):
    """Proxy of C++ FIX::LastUpdateTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastUpdateTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastUpdateTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastUpdateTime self) -> LastUpdateTime
        __init__(FIX::LastUpdateTime self, bool showMilliseconds) -> LastUpdateTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::LastUpdateTime self, FIX::UTCTIMESTAMP const & value) -> LastUpdateTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::LastUpdateTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> LastUpdateTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_LastUpdateTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastUpdateTime
    __del__ = lambda self: None
LastUpdateTime_swigregister = _quickfix.LastUpdateTime_swigregister
LastUpdateTime_swigregister(LastUpdateTime)

class AllocSettlInstType(IntField):
    """Proxy of C++ FIX::AllocSettlInstType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocSettlInstType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocSettlInstType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocSettlInstType self) -> AllocSettlInstType
        __init__(FIX::AllocSettlInstType self, FIX::INT const & value) -> AllocSettlInstType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocSettlInstType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocSettlInstType
    __del__ = lambda self: None
AllocSettlInstType_swigregister = _quickfix.AllocSettlInstType_swigregister
AllocSettlInstType_swigregister(AllocSettlInstType)

class NoSettlPartyIDs(IntField):
    """Proxy of C++ FIX::NoSettlPartyIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSettlPartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSettlPartyIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoSettlPartyIDs self) -> NoSettlPartyIDs
        __init__(FIX::NoSettlPartyIDs self, FIX::NUMINGROUP const & value) -> NoSettlPartyIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoSettlPartyIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoSettlPartyIDs
    __del__ = lambda self: None
NoSettlPartyIDs_swigregister = _quickfix.NoSettlPartyIDs_swigregister
NoSettlPartyIDs_swigregister(NoSettlPartyIDs)

class SettlPartyID(StringField):
    """Proxy of C++ FIX::SettlPartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlPartyID self) -> SettlPartyID
        __init__(FIX::SettlPartyID self, FIX::STRING const & value) -> SettlPartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlPartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlPartyID
    __del__ = lambda self: None
SettlPartyID_swigregister = _quickfix.SettlPartyID_swigregister
SettlPartyID_swigregister(SettlPartyID)

class SettlPartyIDSource(CharField):
    """Proxy of C++ FIX::SettlPartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlPartyIDSource self) -> SettlPartyIDSource
        __init__(FIX::SettlPartyIDSource self, FIX::CHAR const & value) -> SettlPartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SettlPartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlPartyIDSource
    __del__ = lambda self: None
SettlPartyIDSource_swigregister = _quickfix.SettlPartyIDSource_swigregister
SettlPartyIDSource_swigregister(SettlPartyIDSource)

class SettlPartyRole(IntField):
    """Proxy of C++ FIX::SettlPartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlPartyRole self) -> SettlPartyRole
        __init__(FIX::SettlPartyRole self, FIX::INT const & value) -> SettlPartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SettlPartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlPartyRole
    __del__ = lambda self: None
SettlPartyRole_swigregister = _quickfix.SettlPartyRole_swigregister
SettlPartyRole_swigregister(SettlPartyRole)

class SettlPartySubID(StringField):
    """Proxy of C++ FIX::SettlPartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlPartySubID self) -> SettlPartySubID
        __init__(FIX::SettlPartySubID self, FIX::STRING const & value) -> SettlPartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlPartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlPartySubID
    __del__ = lambda self: None
SettlPartySubID_swigregister = _quickfix.SettlPartySubID_swigregister
SettlPartySubID_swigregister(SettlPartySubID)

class SettlPartySubIDType(IntField):
    """Proxy of C++ FIX::SettlPartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlPartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlPartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlPartySubIDType self) -> SettlPartySubIDType
        __init__(FIX::SettlPartySubIDType self, FIX::INT const & value) -> SettlPartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SettlPartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlPartySubIDType
    __del__ = lambda self: None
SettlPartySubIDType_swigregister = _quickfix.SettlPartySubIDType_swigregister
SettlPartySubIDType_swigregister(SettlPartySubIDType)

class DlvyInstType(CharField):
    """Proxy of C++ FIX::DlvyInstType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DlvyInstType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DlvyInstType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DlvyInstType self) -> DlvyInstType
        __init__(FIX::DlvyInstType self, FIX::CHAR const & value) -> DlvyInstType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DlvyInstType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DlvyInstType
    __del__ = lambda self: None
DlvyInstType_swigregister = _quickfix.DlvyInstType_swigregister
DlvyInstType_swigregister(DlvyInstType)

class TerminationType(IntField):
    """Proxy of C++ FIX::TerminationType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TerminationType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TerminationType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TerminationType self) -> TerminationType
        __init__(FIX::TerminationType self, FIX::INT const & value) -> TerminationType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TerminationType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TerminationType
    __del__ = lambda self: None
TerminationType_swigregister = _quickfix.TerminationType_swigregister
TerminationType_swigregister(TerminationType)

class OrdStatusReqID(StringField):
    """Proxy of C++ FIX::OrdStatusReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrdStatusReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrdStatusReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrdStatusReqID self) -> OrdStatusReqID
        __init__(FIX::OrdStatusReqID self, FIX::STRING const & value) -> OrdStatusReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OrdStatusReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrdStatusReqID
    __del__ = lambda self: None
OrdStatusReqID_swigregister = _quickfix.OrdStatusReqID_swigregister
OrdStatusReqID_swigregister(OrdStatusReqID)

class SettlInstReqID(StringField):
    """Proxy of C++ FIX::SettlInstReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlInstReqID self) -> SettlInstReqID
        __init__(FIX::SettlInstReqID self, FIX::STRING const & value) -> SettlInstReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlInstReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlInstReqID
    __del__ = lambda self: None
SettlInstReqID_swigregister = _quickfix.SettlInstReqID_swigregister
SettlInstReqID_swigregister(SettlInstReqID)

class SettlInstReqRejCode(IntField):
    """Proxy of C++ FIX::SettlInstReqRejCode class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlInstReqRejCode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlInstReqRejCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlInstReqRejCode self) -> SettlInstReqRejCode
        __init__(FIX::SettlInstReqRejCode self, FIX::INT const & value) -> SettlInstReqRejCode

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SettlInstReqRejCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlInstReqRejCode
    __del__ = lambda self: None
SettlInstReqRejCode_swigregister = _quickfix.SettlInstReqRejCode_swigregister
SettlInstReqRejCode_swigregister(SettlInstReqRejCode)

class SecondaryAllocID(StringField):
    """Proxy of C++ FIX::SecondaryAllocID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryAllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryAllocID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryAllocID self) -> SecondaryAllocID
        __init__(FIX::SecondaryAllocID self, FIX::STRING const & value) -> SecondaryAllocID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecondaryAllocID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryAllocID
    __del__ = lambda self: None
SecondaryAllocID_swigregister = _quickfix.SecondaryAllocID_swigregister
SecondaryAllocID_swigregister(SecondaryAllocID)

class AllocReportType(IntField):
    """Proxy of C++ FIX::AllocReportType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocReportType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocReportType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocReportType self) -> AllocReportType
        __init__(FIX::AllocReportType self, FIX::INT const & value) -> AllocReportType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocReportType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocReportType
    __del__ = lambda self: None
AllocReportType_swigregister = _quickfix.AllocReportType_swigregister
AllocReportType_swigregister(AllocReportType)

class AllocReportRefID(StringField):
    """Proxy of C++ FIX::AllocReportRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocReportRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocReportRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocReportRefID self) -> AllocReportRefID
        __init__(FIX::AllocReportRefID self, FIX::STRING const & value) -> AllocReportRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AllocReportRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocReportRefID
    __del__ = lambda self: None
AllocReportRefID_swigregister = _quickfix.AllocReportRefID_swigregister
AllocReportRefID_swigregister(AllocReportRefID)

class AllocCancReplaceReason(IntField):
    """Proxy of C++ FIX::AllocCancReplaceReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocCancReplaceReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocCancReplaceReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocCancReplaceReason self) -> AllocCancReplaceReason
        __init__(FIX::AllocCancReplaceReason self, FIX::INT const & value) -> AllocCancReplaceReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocCancReplaceReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocCancReplaceReason
    __del__ = lambda self: None
AllocCancReplaceReason_swigregister = _quickfix.AllocCancReplaceReason_swigregister
AllocCancReplaceReason_swigregister(AllocCancReplaceReason)

class CopyMsgIndicator(BoolField):
    """Proxy of C++ FIX::CopyMsgIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CopyMsgIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CopyMsgIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CopyMsgIndicator self) -> CopyMsgIndicator
        __init__(FIX::CopyMsgIndicator self, FIX::BOOLEAN const & value) -> CopyMsgIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_CopyMsgIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CopyMsgIndicator
    __del__ = lambda self: None
CopyMsgIndicator_swigregister = _quickfix.CopyMsgIndicator_swigregister
CopyMsgIndicator_swigregister(CopyMsgIndicator)

class AllocAccountType(IntField):
    """Proxy of C++ FIX::AllocAccountType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocAccountType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocAccountType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocAccountType self) -> AllocAccountType
        __init__(FIX::AllocAccountType self, FIX::INT const & value) -> AllocAccountType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocAccountType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocAccountType
    __del__ = lambda self: None
AllocAccountType_swigregister = _quickfix.AllocAccountType_swigregister
AllocAccountType_swigregister(AllocAccountType)

class OrderAvgPx(DoubleField):
    """Proxy of C++ FIX::OrderAvgPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderAvgPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderAvgPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderAvgPx self) -> OrderAvgPx
        __init__(FIX::OrderAvgPx self, FIX::PRICE const & value) -> OrderAvgPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_OrderAvgPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderAvgPx
    __del__ = lambda self: None
OrderAvgPx_swigregister = _quickfix.OrderAvgPx_swigregister
OrderAvgPx_swigregister(OrderAvgPx)

class OrderBookingQty(DoubleField):
    """Proxy of C++ FIX::OrderBookingQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderBookingQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderBookingQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderBookingQty self) -> OrderBookingQty
        __init__(FIX::OrderBookingQty self, FIX::QTY const & value) -> OrderBookingQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_OrderBookingQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderBookingQty
    __del__ = lambda self: None
OrderBookingQty_swigregister = _quickfix.OrderBookingQty_swigregister
OrderBookingQty_swigregister(OrderBookingQty)

class NoSettlPartySubIDs(IntField):
    """Proxy of C++ FIX::NoSettlPartySubIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSettlPartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSettlPartySubIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoSettlPartySubIDs self) -> NoSettlPartySubIDs
        __init__(FIX::NoSettlPartySubIDs self, FIX::NUMINGROUP const & value) -> NoSettlPartySubIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoSettlPartySubIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoSettlPartySubIDs
    __del__ = lambda self: None
NoSettlPartySubIDs_swigregister = _quickfix.NoSettlPartySubIDs_swigregister
NoSettlPartySubIDs_swigregister(NoSettlPartySubIDs)

class NoPartySubIDs(IntField):
    """Proxy of C++ FIX::NoPartySubIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoPartySubIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoPartySubIDs self) -> NoPartySubIDs
        __init__(FIX::NoPartySubIDs self, FIX::NUMINGROUP const & value) -> NoPartySubIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoPartySubIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoPartySubIDs
    __del__ = lambda self: None
NoPartySubIDs_swigregister = _quickfix.NoPartySubIDs_swigregister
NoPartySubIDs_swigregister(NoPartySubIDs)

class PartySubIDType(IntField):
    """Proxy of C++ FIX::PartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PartySubIDType self) -> PartySubIDType
        __init__(FIX::PartySubIDType self, FIX::INT const & value) -> PartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PartySubIDType
    __del__ = lambda self: None
PartySubIDType_swigregister = _quickfix.PartySubIDType_swigregister
PartySubIDType_swigregister(PartySubIDType)

class NoNestedPartySubIDs(IntField):
    """Proxy of C++ FIX::NoNestedPartySubIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNestedPartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNestedPartySubIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNestedPartySubIDs self) -> NoNestedPartySubIDs
        __init__(FIX::NoNestedPartySubIDs self, FIX::NUMINGROUP const & value) -> NoNestedPartySubIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNestedPartySubIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNestedPartySubIDs
    __del__ = lambda self: None
NoNestedPartySubIDs_swigregister = _quickfix.NoNestedPartySubIDs_swigregister
NoNestedPartySubIDs_swigregister(NoNestedPartySubIDs)

class NestedPartySubIDType(IntField):
    """Proxy of C++ FIX::NestedPartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedPartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NestedPartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NestedPartySubIDType self) -> NestedPartySubIDType
        __init__(FIX::NestedPartySubIDType self, FIX::INT const & value) -> NestedPartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NestedPartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NestedPartySubIDType
    __del__ = lambda self: None
NestedPartySubIDType_swigregister = _quickfix.NestedPartySubIDType_swigregister
NestedPartySubIDType_swigregister(NestedPartySubIDType)

class NoNested2PartySubIDs(IntField):
    """Proxy of C++ FIX::NoNested2PartySubIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNested2PartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNested2PartySubIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNested2PartySubIDs self) -> NoNested2PartySubIDs
        __init__(FIX::NoNested2PartySubIDs self, FIX::NUMINGROUP const & value) -> NoNested2PartySubIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNested2PartySubIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNested2PartySubIDs
    __del__ = lambda self: None
NoNested2PartySubIDs_swigregister = _quickfix.NoNested2PartySubIDs_swigregister
NoNested2PartySubIDs_swigregister(NoNested2PartySubIDs)

class Nested2PartySubIDType(IntField):
    """Proxy of C++ FIX::Nested2PartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested2PartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested2PartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested2PartySubIDType self) -> Nested2PartySubIDType
        __init__(FIX::Nested2PartySubIDType self, FIX::INT const & value) -> Nested2PartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_Nested2PartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested2PartySubIDType
    __del__ = lambda self: None
Nested2PartySubIDType_swigregister = _quickfix.Nested2PartySubIDType_swigregister
Nested2PartySubIDType_swigregister(Nested2PartySubIDType)

class AllocIntermedReqType(IntField):
    """Proxy of C++ FIX::AllocIntermedReqType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocIntermedReqType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocIntermedReqType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocIntermedReqType self) -> AllocIntermedReqType
        __init__(FIX::AllocIntermedReqType self, FIX::INT const & value) -> AllocIntermedReqType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocIntermedReqType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocIntermedReqType
    __del__ = lambda self: None
AllocIntermedReqType_swigregister = _quickfix.AllocIntermedReqType_swigregister
AllocIntermedReqType_swigregister(AllocIntermedReqType)

class UnderlyingPx(DoubleField):
    """Proxy of C++ FIX::UnderlyingPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingPx self) -> UnderlyingPx
        __init__(FIX::UnderlyingPx self, FIX::PRICE const & value) -> UnderlyingPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_UnderlyingPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingPx
    __del__ = lambda self: None
UnderlyingPx_swigregister = _quickfix.UnderlyingPx_swigregister
UnderlyingPx_swigregister(UnderlyingPx)

class PriceDelta(DoubleField):
    """Proxy of C++ FIX::PriceDelta class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceDelta, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriceDelta, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriceDelta self) -> PriceDelta
        __init__(FIX::PriceDelta self, FIX::FLOAT const & value) -> PriceDelta

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_PriceDelta(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriceDelta
    __del__ = lambda self: None
PriceDelta_swigregister = _quickfix.PriceDelta_swigregister
PriceDelta_swigregister(PriceDelta)

class ApplQueueMax(IntField):
    """Proxy of C++ FIX::ApplQueueMax class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplQueueMax, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplQueueMax, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplQueueMax self) -> ApplQueueMax
        __init__(FIX::ApplQueueMax self, FIX::INT const & value) -> ApplQueueMax

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ApplQueueMax(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplQueueMax
    __del__ = lambda self: None
ApplQueueMax_swigregister = _quickfix.ApplQueueMax_swigregister
ApplQueueMax_swigregister(ApplQueueMax)

class ApplQueueDepth(IntField):
    """Proxy of C++ FIX::ApplQueueDepth class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplQueueDepth, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplQueueDepth, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplQueueDepth self) -> ApplQueueDepth
        __init__(FIX::ApplQueueDepth self, FIX::INT const & value) -> ApplQueueDepth

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ApplQueueDepth(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplQueueDepth
    __del__ = lambda self: None
ApplQueueDepth_swigregister = _quickfix.ApplQueueDepth_swigregister
ApplQueueDepth_swigregister(ApplQueueDepth)

class ApplQueueResolution(IntField):
    """Proxy of C++ FIX::ApplQueueResolution class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplQueueResolution, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplQueueResolution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplQueueResolution self) -> ApplQueueResolution
        __init__(FIX::ApplQueueResolution self, FIX::INT const & value) -> ApplQueueResolution

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ApplQueueResolution(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplQueueResolution
    __del__ = lambda self: None
ApplQueueResolution_swigregister = _quickfix.ApplQueueResolution_swigregister
ApplQueueResolution_swigregister(ApplQueueResolution)

class ApplQueueAction(IntField):
    """Proxy of C++ FIX::ApplQueueAction class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplQueueAction, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplQueueAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplQueueAction self) -> ApplQueueAction
        __init__(FIX::ApplQueueAction self, FIX::INT const & value) -> ApplQueueAction

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ApplQueueAction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplQueueAction
    __del__ = lambda self: None
ApplQueueAction_swigregister = _quickfix.ApplQueueAction_swigregister
ApplQueueAction_swigregister(ApplQueueAction)

class NoAltMDSource(IntField):
    """Proxy of C++ FIX::NoAltMDSource class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoAltMDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoAltMDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoAltMDSource self) -> NoAltMDSource
        __init__(FIX::NoAltMDSource self, FIX::NUMINGROUP const & value) -> NoAltMDSource

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoAltMDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoAltMDSource
    __del__ = lambda self: None
NoAltMDSource_swigregister = _quickfix.NoAltMDSource_swigregister
NoAltMDSource_swigregister(NoAltMDSource)

class AltMDSourceID(StringField):
    """Proxy of C++ FIX::AltMDSourceID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AltMDSourceID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AltMDSourceID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AltMDSourceID self) -> AltMDSourceID
        __init__(FIX::AltMDSourceID self, FIX::STRING const & value) -> AltMDSourceID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AltMDSourceID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AltMDSourceID
    __del__ = lambda self: None
AltMDSourceID_swigregister = _quickfix.AltMDSourceID_swigregister
AltMDSourceID_swigregister(AltMDSourceID)

class SecondaryTradeReportID(StringField):
    """Proxy of C++ FIX::SecondaryTradeReportID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryTradeReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryTradeReportID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryTradeReportID self) -> SecondaryTradeReportID
        __init__(FIX::SecondaryTradeReportID self, FIX::STRING const & value) -> SecondaryTradeReportID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecondaryTradeReportID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryTradeReportID
    __del__ = lambda self: None
SecondaryTradeReportID_swigregister = _quickfix.SecondaryTradeReportID_swigregister
SecondaryTradeReportID_swigregister(SecondaryTradeReportID)

class AvgPxIndicator(IntField):
    """Proxy of C++ FIX::AvgPxIndicator class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgPxIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AvgPxIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AvgPxIndicator self) -> AvgPxIndicator
        __init__(FIX::AvgPxIndicator self, FIX::INT const & value) -> AvgPxIndicator

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AvgPxIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AvgPxIndicator
    __del__ = lambda self: None
AvgPxIndicator_swigregister = _quickfix.AvgPxIndicator_swigregister
AvgPxIndicator_swigregister(AvgPxIndicator)

class TradeLinkID(StringField):
    """Proxy of C++ FIX::TradeLinkID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeLinkID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeLinkID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeLinkID self) -> TradeLinkID
        __init__(FIX::TradeLinkID self, FIX::STRING const & value) -> TradeLinkID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradeLinkID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeLinkID
    __del__ = lambda self: None
TradeLinkID_swigregister = _quickfix.TradeLinkID_swigregister
TradeLinkID_swigregister(TradeLinkID)

class OrderInputDevice(StringField):
    """Proxy of C++ FIX::OrderInputDevice class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderInputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderInputDevice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderInputDevice self) -> OrderInputDevice
        __init__(FIX::OrderInputDevice self, FIX::STRING const & value) -> OrderInputDevice

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OrderInputDevice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderInputDevice
    __del__ = lambda self: None
OrderInputDevice_swigregister = _quickfix.OrderInputDevice_swigregister
OrderInputDevice_swigregister(OrderInputDevice)

class UnderlyingTradingSessionID(StringField):
    """Proxy of C++ FIX::UnderlyingTradingSessionID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingTradingSessionID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingTradingSessionID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingTradingSessionID self) -> UnderlyingTradingSessionID
        __init__(FIX::UnderlyingTradingSessionID self, FIX::STRING const & value) -> UnderlyingTradingSessionID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingTradingSessionID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingTradingSessionID
    __del__ = lambda self: None
UnderlyingTradingSessionID_swigregister = _quickfix.UnderlyingTradingSessionID_swigregister
UnderlyingTradingSessionID_swigregister(UnderlyingTradingSessionID)

class UnderlyingTradingSessionSubID(StringField):
    """Proxy of C++ FIX::UnderlyingTradingSessionSubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingTradingSessionSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingTradingSessionSubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingTradingSessionSubID self) -> UnderlyingTradingSessionSubID
        __init__(FIX::UnderlyingTradingSessionSubID self, FIX::STRING const & value) -> UnderlyingTradingSessionSubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingTradingSessionSubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingTradingSessionSubID
    __del__ = lambda self: None
UnderlyingTradingSessionSubID_swigregister = _quickfix.UnderlyingTradingSessionSubID_swigregister
UnderlyingTradingSessionSubID_swigregister(UnderlyingTradingSessionSubID)

class TradeLegRefID(StringField):
    """Proxy of C++ FIX::TradeLegRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeLegRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeLegRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeLegRefID self) -> TradeLegRefID
        __init__(FIX::TradeLegRefID self, FIX::STRING const & value) -> TradeLegRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradeLegRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeLegRefID
    __del__ = lambda self: None
TradeLegRefID_swigregister = _quickfix.TradeLegRefID_swigregister
TradeLegRefID_swigregister(TradeLegRefID)

class ExchangeRule(StringField):
    """Proxy of C++ FIX::ExchangeRule class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeRule, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeRule, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExchangeRule self) -> ExchangeRule
        __init__(FIX::ExchangeRule self, FIX::STRING const & value) -> ExchangeRule

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ExchangeRule(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExchangeRule
    __del__ = lambda self: None
ExchangeRule_swigregister = _quickfix.ExchangeRule_swigregister
ExchangeRule_swigregister(ExchangeRule)

class TradeAllocIndicator(IntField):
    """Proxy of C++ FIX::TradeAllocIndicator class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeAllocIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeAllocIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeAllocIndicator self) -> TradeAllocIndicator
        __init__(FIX::TradeAllocIndicator self, FIX::INT const & value) -> TradeAllocIndicator

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradeAllocIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeAllocIndicator
    __del__ = lambda self: None
TradeAllocIndicator_swigregister = _quickfix.TradeAllocIndicator_swigregister
TradeAllocIndicator_swigregister(TradeAllocIndicator)

class ExpirationCycle(IntField):
    """Proxy of C++ FIX::ExpirationCycle class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpirationCycle, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpirationCycle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExpirationCycle self) -> ExpirationCycle
        __init__(FIX::ExpirationCycle self, FIX::INT const & value) -> ExpirationCycle

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ExpirationCycle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExpirationCycle
    __del__ = lambda self: None
ExpirationCycle_swigregister = _quickfix.ExpirationCycle_swigregister
ExpirationCycle_swigregister(ExpirationCycle)

class TrdType(IntField):
    """Proxy of C++ FIX::TrdType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrdType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TrdType self) -> TrdType
        __init__(FIX::TrdType self, FIX::INT const & value) -> TrdType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TrdType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TrdType
    __del__ = lambda self: None
TrdType_swigregister = _quickfix.TrdType_swigregister
TrdType_swigregister(TrdType)

class TrdSubType(IntField):
    """Proxy of C++ FIX::TrdSubType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdSubType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrdSubType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TrdSubType self) -> TrdSubType
        __init__(FIX::TrdSubType self, FIX::INT const & value) -> TrdSubType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TrdSubType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TrdSubType
    __del__ = lambda self: None
TrdSubType_swigregister = _quickfix.TrdSubType_swigregister
TrdSubType_swigregister(TrdSubType)

class TransferReason(StringField):
    """Proxy of C++ FIX::TransferReason class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransferReason, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransferReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TransferReason self) -> TransferReason
        __init__(FIX::TransferReason self, FIX::STRING const & value) -> TransferReason

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TransferReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TransferReason
    __del__ = lambda self: None
TransferReason_swigregister = _quickfix.TransferReason_swigregister
TransferReason_swigregister(TransferReason)

class TotNumAssignmentReports(IntField):
    """Proxy of C++ FIX::TotNumAssignmentReports class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNumAssignmentReports, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNumAssignmentReports, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNumAssignmentReports self) -> TotNumAssignmentReports
        __init__(FIX::TotNumAssignmentReports self, FIX::INT const & value) -> TotNumAssignmentReports

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNumAssignmentReports(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNumAssignmentReports
    __del__ = lambda self: None
TotNumAssignmentReports_swigregister = _quickfix.TotNumAssignmentReports_swigregister
TotNumAssignmentReports_swigregister(TotNumAssignmentReports)

class AsgnRptID(StringField):
    """Proxy of C++ FIX::AsgnRptID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsgnRptID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AsgnRptID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AsgnRptID self) -> AsgnRptID
        __init__(FIX::AsgnRptID self, FIX::STRING const & value) -> AsgnRptID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AsgnRptID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AsgnRptID
    __del__ = lambda self: None
AsgnRptID_swigregister = _quickfix.AsgnRptID_swigregister
AsgnRptID_swigregister(AsgnRptID)

class ThresholdAmount(DoubleField):
    """Proxy of C++ FIX::ThresholdAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThresholdAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThresholdAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ThresholdAmount self) -> ThresholdAmount
        __init__(FIX::ThresholdAmount self, FIX::PRICEOFFSET const & value) -> ThresholdAmount

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_ThresholdAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ThresholdAmount
    __del__ = lambda self: None
ThresholdAmount_swigregister = _quickfix.ThresholdAmount_swigregister
ThresholdAmount_swigregister(ThresholdAmount)

class PegMoveType(IntField):
    """Proxy of C++ FIX::PegMoveType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegMoveType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegMoveType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegMoveType self) -> PegMoveType
        __init__(FIX::PegMoveType self, FIX::INT const & value) -> PegMoveType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PegMoveType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegMoveType
    __del__ = lambda self: None
PegMoveType_swigregister = _quickfix.PegMoveType_swigregister
PegMoveType_swigregister(PegMoveType)

class PegOffsetType(IntField):
    """Proxy of C++ FIX::PegOffsetType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegOffsetType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegOffsetType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegOffsetType self) -> PegOffsetType
        __init__(FIX::PegOffsetType self, FIX::INT const & value) -> PegOffsetType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PegOffsetType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegOffsetType
    __del__ = lambda self: None
PegOffsetType_swigregister = _quickfix.PegOffsetType_swigregister
PegOffsetType_swigregister(PegOffsetType)

class PegLimitType(IntField):
    """Proxy of C++ FIX::PegLimitType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegLimitType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegLimitType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegLimitType self) -> PegLimitType
        __init__(FIX::PegLimitType self, FIX::INT const & value) -> PegLimitType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PegLimitType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegLimitType
    __del__ = lambda self: None
PegLimitType_swigregister = _quickfix.PegLimitType_swigregister
PegLimitType_swigregister(PegLimitType)

class PegRoundDirection(IntField):
    """Proxy of C++ FIX::PegRoundDirection class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegRoundDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegRoundDirection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegRoundDirection self) -> PegRoundDirection
        __init__(FIX::PegRoundDirection self, FIX::INT const & value) -> PegRoundDirection

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PegRoundDirection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegRoundDirection
    __del__ = lambda self: None
PegRoundDirection_swigregister = _quickfix.PegRoundDirection_swigregister
PegRoundDirection_swigregister(PegRoundDirection)

class PeggedPrice(DoubleField):
    """Proxy of C++ FIX::PeggedPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeggedPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeggedPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PeggedPrice self) -> PeggedPrice
        __init__(FIX::PeggedPrice self, FIX::PRICE const & value) -> PeggedPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_PeggedPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PeggedPrice
    __del__ = lambda self: None
PeggedPrice_swigregister = _quickfix.PeggedPrice_swigregister
PeggedPrice_swigregister(PeggedPrice)

class PegScope(IntField):
    """Proxy of C++ FIX::PegScope class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegScope, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegScope, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegScope self) -> PegScope
        __init__(FIX::PegScope self, FIX::INT const & value) -> PegScope

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PegScope(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegScope
    __del__ = lambda self: None
PegScope_swigregister = _quickfix.PegScope_swigregister
PegScope_swigregister(PegScope)

class DiscretionMoveType(IntField):
    """Proxy of C++ FIX::DiscretionMoveType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionMoveType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionMoveType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DiscretionMoveType self) -> DiscretionMoveType
        __init__(FIX::DiscretionMoveType self, FIX::INT const & value) -> DiscretionMoveType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DiscretionMoveType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DiscretionMoveType
    __del__ = lambda self: None
DiscretionMoveType_swigregister = _quickfix.DiscretionMoveType_swigregister
DiscretionMoveType_swigregister(DiscretionMoveType)

class DiscretionOffsetType(IntField):
    """Proxy of C++ FIX::DiscretionOffsetType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionOffsetType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionOffsetType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DiscretionOffsetType self) -> DiscretionOffsetType
        __init__(FIX::DiscretionOffsetType self, FIX::INT const & value) -> DiscretionOffsetType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DiscretionOffsetType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DiscretionOffsetType
    __del__ = lambda self: None
DiscretionOffsetType_swigregister = _quickfix.DiscretionOffsetType_swigregister
DiscretionOffsetType_swigregister(DiscretionOffsetType)

class DiscretionLimitType(IntField):
    """Proxy of C++ FIX::DiscretionLimitType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionLimitType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionLimitType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DiscretionLimitType self) -> DiscretionLimitType
        __init__(FIX::DiscretionLimitType self, FIX::INT const & value) -> DiscretionLimitType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DiscretionLimitType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DiscretionLimitType
    __del__ = lambda self: None
DiscretionLimitType_swigregister = _quickfix.DiscretionLimitType_swigregister
DiscretionLimitType_swigregister(DiscretionLimitType)

class DiscretionRoundDirection(IntField):
    """Proxy of C++ FIX::DiscretionRoundDirection class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionRoundDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionRoundDirection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DiscretionRoundDirection self) -> DiscretionRoundDirection
        __init__(FIX::DiscretionRoundDirection self, FIX::INT const & value) -> DiscretionRoundDirection

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DiscretionRoundDirection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DiscretionRoundDirection
    __del__ = lambda self: None
DiscretionRoundDirection_swigregister = _quickfix.DiscretionRoundDirection_swigregister
DiscretionRoundDirection_swigregister(DiscretionRoundDirection)

class DiscretionPrice(DoubleField):
    """Proxy of C++ FIX::DiscretionPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DiscretionPrice self) -> DiscretionPrice
        __init__(FIX::DiscretionPrice self, FIX::PRICE const & value) -> DiscretionPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_DiscretionPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DiscretionPrice
    __del__ = lambda self: None
DiscretionPrice_swigregister = _quickfix.DiscretionPrice_swigregister
DiscretionPrice_swigregister(DiscretionPrice)

class DiscretionScope(IntField):
    """Proxy of C++ FIX::DiscretionScope class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscretionScope, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscretionScope, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DiscretionScope self) -> DiscretionScope
        __init__(FIX::DiscretionScope self, FIX::INT const & value) -> DiscretionScope

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DiscretionScope(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DiscretionScope
    __del__ = lambda self: None
DiscretionScope_swigregister = _quickfix.DiscretionScope_swigregister
DiscretionScope_swigregister(DiscretionScope)

class TargetStrategy(IntField):
    """Proxy of C++ FIX::TargetStrategy class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetStrategy, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TargetStrategy, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TargetStrategy self) -> TargetStrategy
        __init__(FIX::TargetStrategy self, FIX::INT const & value) -> TargetStrategy

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TargetStrategy(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TargetStrategy
    __del__ = lambda self: None
TargetStrategy_swigregister = _quickfix.TargetStrategy_swigregister
TargetStrategy_swigregister(TargetStrategy)

class TargetStrategyParameters(StringField):
    """Proxy of C++ FIX::TargetStrategyParameters class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetStrategyParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TargetStrategyParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TargetStrategyParameters self) -> TargetStrategyParameters
        __init__(FIX::TargetStrategyParameters self, FIX::STRING const & value) -> TargetStrategyParameters

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TargetStrategyParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TargetStrategyParameters
    __del__ = lambda self: None
TargetStrategyParameters_swigregister = _quickfix.TargetStrategyParameters_swigregister
TargetStrategyParameters_swigregister(TargetStrategyParameters)

class ParticipationRate(DoubleField):
    """Proxy of C++ FIX::ParticipationRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParticipationRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParticipationRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ParticipationRate self) -> ParticipationRate
        __init__(FIX::ParticipationRate self, FIX::PERCENTAGE const & value) -> ParticipationRate

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_ParticipationRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ParticipationRate
    __del__ = lambda self: None
ParticipationRate_swigregister = _quickfix.ParticipationRate_swigregister
ParticipationRate_swigregister(ParticipationRate)

class TargetStrategyPerformance(DoubleField):
    """Proxy of C++ FIX::TargetStrategyPerformance class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetStrategyPerformance, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TargetStrategyPerformance, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TargetStrategyPerformance self) -> TargetStrategyPerformance
        __init__(FIX::TargetStrategyPerformance self, FIX::FLOAT const & value) -> TargetStrategyPerformance

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_TargetStrategyPerformance(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TargetStrategyPerformance
    __del__ = lambda self: None
TargetStrategyPerformance_swigregister = _quickfix.TargetStrategyPerformance_swigregister
TargetStrategyPerformance_swigregister(TargetStrategyPerformance)

class LastLiquidityInd(IntField):
    """Proxy of C++ FIX::LastLiquidityInd class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastLiquidityInd, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastLiquidityInd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastLiquidityInd self) -> LastLiquidityInd
        __init__(FIX::LastLiquidityInd self, FIX::INT const & value) -> LastLiquidityInd

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LastLiquidityInd(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastLiquidityInd
    __del__ = lambda self: None
LastLiquidityInd_swigregister = _quickfix.LastLiquidityInd_swigregister
LastLiquidityInd_swigregister(LastLiquidityInd)

class PublishTrdIndicator(BoolField):
    """Proxy of C++ FIX::PublishTrdIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublishTrdIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublishTrdIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PublishTrdIndicator self) -> PublishTrdIndicator
        __init__(FIX::PublishTrdIndicator self, FIX::BOOLEAN const & value) -> PublishTrdIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_PublishTrdIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PublishTrdIndicator
    __del__ = lambda self: None
PublishTrdIndicator_swigregister = _quickfix.PublishTrdIndicator_swigregister
PublishTrdIndicator_swigregister(PublishTrdIndicator)

class ShortSaleReason(IntField):
    """Proxy of C++ FIX::ShortSaleReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortSaleReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortSaleReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ShortSaleReason self) -> ShortSaleReason
        __init__(FIX::ShortSaleReason self, FIX::INT const & value) -> ShortSaleReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ShortSaleReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ShortSaleReason
    __del__ = lambda self: None
ShortSaleReason_swigregister = _quickfix.ShortSaleReason_swigregister
ShortSaleReason_swigregister(ShortSaleReason)

class QtyType(IntField):
    """Proxy of C++ FIX::QtyType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QtyType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QtyType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QtyType self) -> QtyType
        __init__(FIX::QtyType self, FIX::INT const & value) -> QtyType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QtyType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QtyType
    __del__ = lambda self: None
QtyType_swigregister = _quickfix.QtyType_swigregister
QtyType_swigregister(QtyType)

class SecondaryTrdType(IntField):
    """Proxy of C++ FIX::SecondaryTrdType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryTrdType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryTrdType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryTrdType self) -> SecondaryTrdType
        __init__(FIX::SecondaryTrdType self, FIX::INT const & value) -> SecondaryTrdType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecondaryTrdType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryTrdType
    __del__ = lambda self: None
SecondaryTrdType_swigregister = _quickfix.SecondaryTrdType_swigregister
SecondaryTrdType_swigregister(SecondaryTrdType)

class TradeReportType(IntField):
    """Proxy of C++ FIX::TradeReportType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeReportType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeReportType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeReportType self) -> TradeReportType
        __init__(FIX::TradeReportType self, FIX::INT const & value) -> TradeReportType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradeReportType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeReportType
    __del__ = lambda self: None
TradeReportType_swigregister = _quickfix.TradeReportType_swigregister
TradeReportType_swigregister(TradeReportType)

class AllocNoOrdersType(IntField):
    """Proxy of C++ FIX::AllocNoOrdersType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocNoOrdersType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocNoOrdersType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocNoOrdersType self) -> AllocNoOrdersType
        __init__(FIX::AllocNoOrdersType self, FIX::INT const & value) -> AllocNoOrdersType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocNoOrdersType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocNoOrdersType
    __del__ = lambda self: None
AllocNoOrdersType_swigregister = _quickfix.AllocNoOrdersType_swigregister
AllocNoOrdersType_swigregister(AllocNoOrdersType)

class SharedCommission(DoubleField):
    """Proxy of C++ FIX::SharedCommission class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedCommission, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SharedCommission, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SharedCommission self) -> SharedCommission
        __init__(FIX::SharedCommission self, FIX::AMT const & value) -> SharedCommission

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_SharedCommission(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SharedCommission
    __del__ = lambda self: None
SharedCommission_swigregister = _quickfix.SharedCommission_swigregister
SharedCommission_swigregister(SharedCommission)

class ConfirmReqID(StringField):
    """Proxy of C++ FIX::ConfirmReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfirmReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfirmReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ConfirmReqID self) -> ConfirmReqID
        __init__(FIX::ConfirmReqID self, FIX::STRING const & value) -> ConfirmReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ConfirmReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ConfirmReqID
    __del__ = lambda self: None
ConfirmReqID_swigregister = _quickfix.ConfirmReqID_swigregister
ConfirmReqID_swigregister(ConfirmReqID)

class AvgParPx(DoubleField):
    """Proxy of C++ FIX::AvgParPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AvgParPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AvgParPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AvgParPx self) -> AvgParPx
        __init__(FIX::AvgParPx self, FIX::PRICE const & value) -> AvgParPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_AvgParPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AvgParPx
    __del__ = lambda self: None
AvgParPx_swigregister = _quickfix.AvgParPx_swigregister
AvgParPx_swigregister(AvgParPx)

class ReportedPx(DoubleField):
    """Proxy of C++ FIX::ReportedPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportedPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReportedPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ReportedPx self) -> ReportedPx
        __init__(FIX::ReportedPx self, FIX::PRICE const & value) -> ReportedPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_ReportedPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ReportedPx
    __del__ = lambda self: None
ReportedPx_swigregister = _quickfix.ReportedPx_swigregister
ReportedPx_swigregister(ReportedPx)

class NoCapacities(IntField):
    """Proxy of C++ FIX::NoCapacities class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoCapacities, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoCapacities, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoCapacities self) -> NoCapacities
        __init__(FIX::NoCapacities self, FIX::NUMINGROUP const & value) -> NoCapacities

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoCapacities(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoCapacities
    __del__ = lambda self: None
NoCapacities_swigregister = _quickfix.NoCapacities_swigregister
NoCapacities_swigregister(NoCapacities)

class OrderCapacityQty(DoubleField):
    """Proxy of C++ FIX::OrderCapacityQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderCapacityQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderCapacityQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderCapacityQty self) -> OrderCapacityQty
        __init__(FIX::OrderCapacityQty self, FIX::QTY const & value) -> OrderCapacityQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_OrderCapacityQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderCapacityQty
    __del__ = lambda self: None
OrderCapacityQty_swigregister = _quickfix.OrderCapacityQty_swigregister
OrderCapacityQty_swigregister(OrderCapacityQty)

class NoEvents(IntField):
    """Proxy of C++ FIX::NoEvents class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoEvents, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoEvents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoEvents self) -> NoEvents
        __init__(FIX::NoEvents self, FIX::NUMINGROUP const & value) -> NoEvents

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoEvents(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoEvents
    __del__ = lambda self: None
NoEvents_swigregister = _quickfix.NoEvents_swigregister
NoEvents_swigregister(NoEvents)

class EventType(IntField):
    """Proxy of C++ FIX::EventType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EventType self) -> EventType
        __init__(FIX::EventType self, FIX::INT const & value) -> EventType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_EventType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EventType
    __del__ = lambda self: None
EventType_swigregister = _quickfix.EventType_swigregister
EventType_swigregister(EventType)

class EventDate(StringField):
    """Proxy of C++ FIX::EventDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EventDate self) -> EventDate
        __init__(FIX::EventDate self, FIX::LOCALMKTDATE const & value) -> EventDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_EventDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EventDate
    __del__ = lambda self: None
EventDate_swigregister = _quickfix.EventDate_swigregister
EventDate_swigregister(EventDate)

class EventPx(DoubleField):
    """Proxy of C++ FIX::EventPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EventPx self) -> EventPx
        __init__(FIX::EventPx self, FIX::PRICE const & value) -> EventPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_EventPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EventPx
    __del__ = lambda self: None
EventPx_swigregister = _quickfix.EventPx_swigregister
EventPx_swigregister(EventPx)

class EventText(StringField):
    """Proxy of C++ FIX::EventText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EventText self) -> EventText
        __init__(FIX::EventText self, FIX::STRING const & value) -> EventText

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_EventText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EventText
    __del__ = lambda self: None
EventText_swigregister = _quickfix.EventText_swigregister
EventText_swigregister(EventText)

class PctAtRisk(DoubleField):
    """Proxy of C++ FIX::PctAtRisk class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PctAtRisk, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PctAtRisk, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PctAtRisk self) -> PctAtRisk
        __init__(FIX::PctAtRisk self, FIX::PERCENTAGE const & value) -> PctAtRisk

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_PctAtRisk(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PctAtRisk
    __del__ = lambda self: None
PctAtRisk_swigregister = _quickfix.PctAtRisk_swigregister
PctAtRisk_swigregister(PctAtRisk)

class NoInstrAttrib(IntField):
    """Proxy of C++ FIX::NoInstrAttrib class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoInstrAttrib, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoInstrAttrib, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoInstrAttrib self) -> NoInstrAttrib
        __init__(FIX::NoInstrAttrib self, FIX::NUMINGROUP const & value) -> NoInstrAttrib

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoInstrAttrib(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoInstrAttrib
    __del__ = lambda self: None
NoInstrAttrib_swigregister = _quickfix.NoInstrAttrib_swigregister
NoInstrAttrib_swigregister(NoInstrAttrib)

class InstrAttribType(IntField):
    """Proxy of C++ FIX::InstrAttribType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrAttribType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstrAttribType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InstrAttribType self) -> InstrAttribType
        __init__(FIX::InstrAttribType self, FIX::INT const & value) -> InstrAttribType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_InstrAttribType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InstrAttribType
    __del__ = lambda self: None
InstrAttribType_swigregister = _quickfix.InstrAttribType_swigregister
InstrAttribType_swigregister(InstrAttribType)

class InstrAttribValue(StringField):
    """Proxy of C++ FIX::InstrAttribValue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrAttribValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstrAttribValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InstrAttribValue self) -> InstrAttribValue
        __init__(FIX::InstrAttribValue self, FIX::STRING const & value) -> InstrAttribValue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_InstrAttribValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InstrAttribValue
    __del__ = lambda self: None
InstrAttribValue_swigregister = _quickfix.InstrAttribValue_swigregister
InstrAttribValue_swigregister(InstrAttribValue)

class DatedDate(StringField):
    """Proxy of C++ FIX::DatedDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatedDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DatedDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DatedDate self) -> DatedDate
        __init__(FIX::DatedDate self, FIX::LOCALMKTDATE const & value) -> DatedDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_DatedDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DatedDate
    __del__ = lambda self: None
DatedDate_swigregister = _quickfix.DatedDate_swigregister
DatedDate_swigregister(DatedDate)

class InterestAccrualDate(StringField):
    """Proxy of C++ FIX::InterestAccrualDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterestAccrualDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterestAccrualDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InterestAccrualDate self) -> InterestAccrualDate
        __init__(FIX::InterestAccrualDate self, FIX::LOCALMKTDATE const & value) -> InterestAccrualDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_InterestAccrualDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InterestAccrualDate
    __del__ = lambda self: None
InterestAccrualDate_swigregister = _quickfix.InterestAccrualDate_swigregister
InterestAccrualDate_swigregister(InterestAccrualDate)

class CPProgram(IntField):
    """Proxy of C++ FIX::CPProgram class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPProgram, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPProgram, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CPProgram self) -> CPProgram
        __init__(FIX::CPProgram self, FIX::INT const & value) -> CPProgram

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CPProgram(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CPProgram
    __del__ = lambda self: None
CPProgram_swigregister = _quickfix.CPProgram_swigregister
CPProgram_swigregister(CPProgram)

class CPRegType(StringField):
    """Proxy of C++ FIX::CPRegType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPRegType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPRegType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CPRegType self) -> CPRegType
        __init__(FIX::CPRegType self, FIX::STRING const & value) -> CPRegType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CPRegType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CPRegType
    __del__ = lambda self: None
CPRegType_swigregister = _quickfix.CPRegType_swigregister
CPRegType_swigregister(CPRegType)

class UnderlyingCPProgram(StringField):
    """Proxy of C++ FIX::UnderlyingCPProgram class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCPProgram, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCPProgram, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCPProgram self) -> UnderlyingCPProgram
        __init__(FIX::UnderlyingCPProgram self, FIX::STRING const & value) -> UnderlyingCPProgram

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingCPProgram(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCPProgram
    __del__ = lambda self: None
UnderlyingCPProgram_swigregister = _quickfix.UnderlyingCPProgram_swigregister
UnderlyingCPProgram_swigregister(UnderlyingCPProgram)

class UnderlyingCPRegType(StringField):
    """Proxy of C++ FIX::UnderlyingCPRegType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCPRegType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCPRegType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCPRegType self) -> UnderlyingCPRegType
        __init__(FIX::UnderlyingCPRegType self, FIX::STRING const & value) -> UnderlyingCPRegType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingCPRegType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCPRegType
    __del__ = lambda self: None
UnderlyingCPRegType_swigregister = _quickfix.UnderlyingCPRegType_swigregister
UnderlyingCPRegType_swigregister(UnderlyingCPRegType)

class UnderlyingQty(DoubleField):
    """Proxy of C++ FIX::UnderlyingQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingQty self) -> UnderlyingQty
        __init__(FIX::UnderlyingQty self, FIX::QTY const & value) -> UnderlyingQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_UnderlyingQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingQty
    __del__ = lambda self: None
UnderlyingQty_swigregister = _quickfix.UnderlyingQty_swigregister
UnderlyingQty_swigregister(UnderlyingQty)

class TrdMatchID(StringField):
    """Proxy of C++ FIX::TrdMatchID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdMatchID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrdMatchID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TrdMatchID self) -> TrdMatchID
        __init__(FIX::TrdMatchID self, FIX::STRING const & value) -> TrdMatchID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TrdMatchID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TrdMatchID
    __del__ = lambda self: None
TrdMatchID_swigregister = _quickfix.TrdMatchID_swigregister
TrdMatchID_swigregister(TrdMatchID)

class SecondaryTradeReportRefID(StringField):
    """Proxy of C++ FIX::SecondaryTradeReportRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryTradeReportRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryTradeReportRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryTradeReportRefID self) -> SecondaryTradeReportRefID
        __init__(FIX::SecondaryTradeReportRefID self, FIX::STRING const & value) -> SecondaryTradeReportRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecondaryTradeReportRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryTradeReportRefID
    __del__ = lambda self: None
SecondaryTradeReportRefID_swigregister = _quickfix.SecondaryTradeReportRefID_swigregister
SecondaryTradeReportRefID_swigregister(SecondaryTradeReportRefID)

class UnderlyingDirtyPrice(DoubleField):
    """Proxy of C++ FIX::UnderlyingDirtyPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingDirtyPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingDirtyPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingDirtyPrice self) -> UnderlyingDirtyPrice
        __init__(FIX::UnderlyingDirtyPrice self, FIX::PRICE const & value) -> UnderlyingDirtyPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_UnderlyingDirtyPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingDirtyPrice
    __del__ = lambda self: None
UnderlyingDirtyPrice_swigregister = _quickfix.UnderlyingDirtyPrice_swigregister
UnderlyingDirtyPrice_swigregister(UnderlyingDirtyPrice)

class UnderlyingEndPrice(DoubleField):
    """Proxy of C++ FIX::UnderlyingEndPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingEndPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingEndPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingEndPrice self) -> UnderlyingEndPrice
        __init__(FIX::UnderlyingEndPrice self, FIX::PRICE const & value) -> UnderlyingEndPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_UnderlyingEndPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingEndPrice
    __del__ = lambda self: None
UnderlyingEndPrice_swigregister = _quickfix.UnderlyingEndPrice_swigregister
UnderlyingEndPrice_swigregister(UnderlyingEndPrice)

class UnderlyingStartValue(DoubleField):
    """Proxy of C++ FIX::UnderlyingStartValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStartValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStartValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingStartValue self) -> UnderlyingStartValue
        __init__(FIX::UnderlyingStartValue self, FIX::AMT const & value) -> UnderlyingStartValue

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_UnderlyingStartValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingStartValue
    __del__ = lambda self: None
UnderlyingStartValue_swigregister = _quickfix.UnderlyingStartValue_swigregister
UnderlyingStartValue_swigregister(UnderlyingStartValue)

class UnderlyingCurrentValue(DoubleField):
    """Proxy of C++ FIX::UnderlyingCurrentValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCurrentValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCurrentValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCurrentValue self) -> UnderlyingCurrentValue
        __init__(FIX::UnderlyingCurrentValue self, FIX::AMT const & value) -> UnderlyingCurrentValue

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_UnderlyingCurrentValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCurrentValue
    __del__ = lambda self: None
UnderlyingCurrentValue_swigregister = _quickfix.UnderlyingCurrentValue_swigregister
UnderlyingCurrentValue_swigregister(UnderlyingCurrentValue)

class UnderlyingEndValue(DoubleField):
    """Proxy of C++ FIX::UnderlyingEndValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingEndValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingEndValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingEndValue self) -> UnderlyingEndValue
        __init__(FIX::UnderlyingEndValue self, FIX::AMT const & value) -> UnderlyingEndValue

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_UnderlyingEndValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingEndValue
    __del__ = lambda self: None
UnderlyingEndValue_swigregister = _quickfix.UnderlyingEndValue_swigregister
UnderlyingEndValue_swigregister(UnderlyingEndValue)

class NoUnderlyingStips(IntField):
    """Proxy of C++ FIX::NoUnderlyingStips class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoUnderlyingStips, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoUnderlyingStips, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoUnderlyingStips self) -> NoUnderlyingStips
        __init__(FIX::NoUnderlyingStips self, FIX::NUMINGROUP const & value) -> NoUnderlyingStips

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoUnderlyingStips(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoUnderlyingStips
    __del__ = lambda self: None
NoUnderlyingStips_swigregister = _quickfix.NoUnderlyingStips_swigregister
NoUnderlyingStips_swigregister(NoUnderlyingStips)

class UnderlyingStipType(StringField):
    """Proxy of C++ FIX::UnderlyingStipType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStipType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStipType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingStipType self) -> UnderlyingStipType
        __init__(FIX::UnderlyingStipType self, FIX::STRING const & value) -> UnderlyingStipType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingStipType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingStipType
    __del__ = lambda self: None
UnderlyingStipType_swigregister = _quickfix.UnderlyingStipType_swigregister
UnderlyingStipType_swigregister(UnderlyingStipType)

class UnderlyingStipValue(StringField):
    """Proxy of C++ FIX::UnderlyingStipValue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStipValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStipValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingStipValue self) -> UnderlyingStipValue
        __init__(FIX::UnderlyingStipValue self, FIX::STRING const & value) -> UnderlyingStipValue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingStipValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingStipValue
    __del__ = lambda self: None
UnderlyingStipValue_swigregister = _quickfix.UnderlyingStipValue_swigregister
UnderlyingStipValue_swigregister(UnderlyingStipValue)

class MaturityNetMoney(DoubleField):
    """Proxy of C++ FIX::MaturityNetMoney class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityNetMoney, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityNetMoney, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaturityNetMoney self) -> MaturityNetMoney
        __init__(FIX::MaturityNetMoney self, FIX::AMT const & value) -> MaturityNetMoney

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_MaturityNetMoney(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaturityNetMoney
    __del__ = lambda self: None
MaturityNetMoney_swigregister = _quickfix.MaturityNetMoney_swigregister
MaturityNetMoney_swigregister(MaturityNetMoney)

class MiscFeeBasis(IntField):
    """Proxy of C++ FIX::MiscFeeBasis class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MiscFeeBasis, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MiscFeeBasis, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MiscFeeBasis self) -> MiscFeeBasis
        __init__(FIX::MiscFeeBasis self, FIX::INT const & value) -> MiscFeeBasis

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MiscFeeBasis(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MiscFeeBasis
    __del__ = lambda self: None
MiscFeeBasis_swigregister = _quickfix.MiscFeeBasis_swigregister
MiscFeeBasis_swigregister(MiscFeeBasis)

class TotNoAllocs(IntField):
    """Proxy of C++ FIX::TotNoAllocs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoAllocs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoAllocs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNoAllocs self) -> TotNoAllocs
        __init__(FIX::TotNoAllocs self, FIX::INT const & value) -> TotNoAllocs

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNoAllocs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNoAllocs
    __del__ = lambda self: None
TotNoAllocs_swigregister = _quickfix.TotNoAllocs_swigregister
TotNoAllocs_swigregister(TotNoAllocs)

class LastFragment(BoolField):
    """Proxy of C++ FIX::LastFragment class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastFragment, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastFragment, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastFragment self) -> LastFragment
        __init__(FIX::LastFragment self, FIX::BOOLEAN const & value) -> LastFragment

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_LastFragment(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastFragment
    __del__ = lambda self: None
LastFragment_swigregister = _quickfix.LastFragment_swigregister
LastFragment_swigregister(LastFragment)

class CollReqID(StringField):
    """Proxy of C++ FIX::CollReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollReqID self) -> CollReqID
        __init__(FIX::CollReqID self, FIX::STRING const & value) -> CollReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CollReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollReqID
    __del__ = lambda self: None
CollReqID_swigregister = _quickfix.CollReqID_swigregister
CollReqID_swigregister(CollReqID)

class CollAsgnReason(IntField):
    """Proxy of C++ FIX::CollAsgnReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollAsgnReason self) -> CollAsgnReason
        __init__(FIX::CollAsgnReason self, FIX::INT const & value) -> CollAsgnReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CollAsgnReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollAsgnReason
    __del__ = lambda self: None
CollAsgnReason_swigregister = _quickfix.CollAsgnReason_swigregister
CollAsgnReason_swigregister(CollAsgnReason)

class CollInquiryQualifier(IntField):
    """Proxy of C++ FIX::CollInquiryQualifier class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollInquiryQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollInquiryQualifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollInquiryQualifier self) -> CollInquiryQualifier
        __init__(FIX::CollInquiryQualifier self, FIX::INT const & value) -> CollInquiryQualifier

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CollInquiryQualifier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollInquiryQualifier
    __del__ = lambda self: None
CollInquiryQualifier_swigregister = _quickfix.CollInquiryQualifier_swigregister
CollInquiryQualifier_swigregister(CollInquiryQualifier)

class NoTrades(IntField):
    """Proxy of C++ FIX::NoTrades class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTrades, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTrades, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoTrades self) -> NoTrades
        __init__(FIX::NoTrades self, FIX::NUMINGROUP const & value) -> NoTrades

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoTrades(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoTrades
    __del__ = lambda self: None
NoTrades_swigregister = _quickfix.NoTrades_swigregister
NoTrades_swigregister(NoTrades)

class MarginRatio(DoubleField):
    """Proxy of C++ FIX::MarginRatio class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarginRatio, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarginRatio, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MarginRatio self) -> MarginRatio
        __init__(FIX::MarginRatio self, FIX::PERCENTAGE const & value) -> MarginRatio

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_MarginRatio(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MarginRatio
    __del__ = lambda self: None
MarginRatio_swigregister = _quickfix.MarginRatio_swigregister
MarginRatio_swigregister(MarginRatio)

class MarginExcess(DoubleField):
    """Proxy of C++ FIX::MarginExcess class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarginExcess, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarginExcess, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MarginExcess self) -> MarginExcess
        __init__(FIX::MarginExcess self, FIX::AMT const & value) -> MarginExcess

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_MarginExcess(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MarginExcess
    __del__ = lambda self: None
MarginExcess_swigregister = _quickfix.MarginExcess_swigregister
MarginExcess_swigregister(MarginExcess)

class TotalNetValue(DoubleField):
    """Proxy of C++ FIX::TotalNetValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotalNetValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotalNetValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotalNetValue self) -> TotalNetValue
        __init__(FIX::TotalNetValue self, FIX::AMT const & value) -> TotalNetValue

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_TotalNetValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotalNetValue
    __del__ = lambda self: None
TotalNetValue_swigregister = _quickfix.TotalNetValue_swigregister
TotalNetValue_swigregister(TotalNetValue)

class CashOutstanding(DoubleField):
    """Proxy of C++ FIX::CashOutstanding class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CashOutstanding, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CashOutstanding, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CashOutstanding self) -> CashOutstanding
        __init__(FIX::CashOutstanding self, FIX::AMT const & value) -> CashOutstanding

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_CashOutstanding(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CashOutstanding
    __del__ = lambda self: None
CashOutstanding_swigregister = _quickfix.CashOutstanding_swigregister
CashOutstanding_swigregister(CashOutstanding)

class CollAsgnID(StringField):
    """Proxy of C++ FIX::CollAsgnID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollAsgnID self) -> CollAsgnID
        __init__(FIX::CollAsgnID self, FIX::STRING const & value) -> CollAsgnID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CollAsgnID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollAsgnID
    __del__ = lambda self: None
CollAsgnID_swigregister = _quickfix.CollAsgnID_swigregister
CollAsgnID_swigregister(CollAsgnID)

class CollAsgnTransType(IntField):
    """Proxy of C++ FIX::CollAsgnTransType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollAsgnTransType self) -> CollAsgnTransType
        __init__(FIX::CollAsgnTransType self, FIX::INT const & value) -> CollAsgnTransType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CollAsgnTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollAsgnTransType
    __del__ = lambda self: None
CollAsgnTransType_swigregister = _quickfix.CollAsgnTransType_swigregister
CollAsgnTransType_swigregister(CollAsgnTransType)

class CollRespID(StringField):
    """Proxy of C++ FIX::CollRespID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollRespID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollRespID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollRespID self) -> CollRespID
        __init__(FIX::CollRespID self, FIX::STRING const & value) -> CollRespID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CollRespID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollRespID
    __del__ = lambda self: None
CollRespID_swigregister = _quickfix.CollRespID_swigregister
CollRespID_swigregister(CollRespID)

class CollAsgnRespType(IntField):
    """Proxy of C++ FIX::CollAsgnRespType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnRespType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnRespType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollAsgnRespType self) -> CollAsgnRespType
        __init__(FIX::CollAsgnRespType self, FIX::INT const & value) -> CollAsgnRespType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CollAsgnRespType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollAsgnRespType
    __del__ = lambda self: None
CollAsgnRespType_swigregister = _quickfix.CollAsgnRespType_swigregister
CollAsgnRespType_swigregister(CollAsgnRespType)

class CollAsgnRejectReason(IntField):
    """Proxy of C++ FIX::CollAsgnRejectReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnRejectReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollAsgnRejectReason self) -> CollAsgnRejectReason
        __init__(FIX::CollAsgnRejectReason self, FIX::INT const & value) -> CollAsgnRejectReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CollAsgnRejectReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollAsgnRejectReason
    __del__ = lambda self: None
CollAsgnRejectReason_swigregister = _quickfix.CollAsgnRejectReason_swigregister
CollAsgnRejectReason_swigregister(CollAsgnRejectReason)

class CollAsgnRefID(StringField):
    """Proxy of C++ FIX::CollAsgnRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAsgnRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollAsgnRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollAsgnRefID self) -> CollAsgnRefID
        __init__(FIX::CollAsgnRefID self, FIX::STRING const & value) -> CollAsgnRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CollAsgnRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollAsgnRefID
    __del__ = lambda self: None
CollAsgnRefID_swigregister = _quickfix.CollAsgnRefID_swigregister
CollAsgnRefID_swigregister(CollAsgnRefID)

class CollRptID(StringField):
    """Proxy of C++ FIX::CollRptID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollRptID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollRptID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollRptID self) -> CollRptID
        __init__(FIX::CollRptID self, FIX::STRING const & value) -> CollRptID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CollRptID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollRptID
    __del__ = lambda self: None
CollRptID_swigregister = _quickfix.CollRptID_swigregister
CollRptID_swigregister(CollRptID)

class CollInquiryID(StringField):
    """Proxy of C++ FIX::CollInquiryID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollInquiryID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollInquiryID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollInquiryID self) -> CollInquiryID
        __init__(FIX::CollInquiryID self, FIX::STRING const & value) -> CollInquiryID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_CollInquiryID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollInquiryID
    __del__ = lambda self: None
CollInquiryID_swigregister = _quickfix.CollInquiryID_swigregister
CollInquiryID_swigregister(CollInquiryID)

class CollStatus(IntField):
    """Proxy of C++ FIX::CollStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollStatus self) -> CollStatus
        __init__(FIX::CollStatus self, FIX::INT const & value) -> CollStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CollStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollStatus
    __del__ = lambda self: None
CollStatus_swigregister = _quickfix.CollStatus_swigregister
CollStatus_swigregister(CollStatus)

class TotNumReports(IntField):
    """Proxy of C++ FIX::TotNumReports class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNumReports, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNumReports, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNumReports self) -> TotNumReports
        __init__(FIX::TotNumReports self, FIX::INT const & value) -> TotNumReports

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNumReports(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNumReports
    __del__ = lambda self: None
TotNumReports_swigregister = _quickfix.TotNumReports_swigregister
TotNumReports_swigregister(TotNumReports)

class LastRptRequested(BoolField):
    """Proxy of C++ FIX::LastRptRequested class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastRptRequested, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastRptRequested, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastRptRequested self) -> LastRptRequested
        __init__(FIX::LastRptRequested self, FIX::BOOLEAN const & value) -> LastRptRequested

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_LastRptRequested(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastRptRequested
    __del__ = lambda self: None
LastRptRequested_swigregister = _quickfix.LastRptRequested_swigregister
LastRptRequested_swigregister(LastRptRequested)

class AgreementDesc(StringField):
    """Proxy of C++ FIX::AgreementDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgreementDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AgreementDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AgreementDesc self) -> AgreementDesc
        __init__(FIX::AgreementDesc self, FIX::STRING const & value) -> AgreementDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AgreementDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AgreementDesc
    __del__ = lambda self: None
AgreementDesc_swigregister = _quickfix.AgreementDesc_swigregister
AgreementDesc_swigregister(AgreementDesc)

class AgreementID(StringField):
    """Proxy of C++ FIX::AgreementID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgreementID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AgreementID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AgreementID self) -> AgreementID
        __init__(FIX::AgreementID self, FIX::STRING const & value) -> AgreementID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AgreementID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AgreementID
    __del__ = lambda self: None
AgreementID_swigregister = _quickfix.AgreementID_swigregister
AgreementID_swigregister(AgreementID)

class AgreementDate(StringField):
    """Proxy of C++ FIX::AgreementDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgreementDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AgreementDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AgreementDate self) -> AgreementDate
        __init__(FIX::AgreementDate self, FIX::LOCALMKTDATE const & value) -> AgreementDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_AgreementDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AgreementDate
    __del__ = lambda self: None
AgreementDate_swigregister = _quickfix.AgreementDate_swigregister
AgreementDate_swigregister(AgreementDate)

class StartDate(StringField):
    """Proxy of C++ FIX::StartDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StartDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StartDate self) -> StartDate
        __init__(FIX::StartDate self, FIX::LOCALMKTDATE const & value) -> StartDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_StartDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StartDate
    __del__ = lambda self: None
StartDate_swigregister = _quickfix.StartDate_swigregister
StartDate_swigregister(StartDate)

class EndDate(StringField):
    """Proxy of C++ FIX::EndDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EndDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EndDate self) -> EndDate
        __init__(FIX::EndDate self, FIX::LOCALMKTDATE const & value) -> EndDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_EndDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EndDate
    __del__ = lambda self: None
EndDate_swigregister = _quickfix.EndDate_swigregister
EndDate_swigregister(EndDate)

class AgreementCurrency(StringField):
    """Proxy of C++ FIX::AgreementCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgreementCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AgreementCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AgreementCurrency self) -> AgreementCurrency
        __init__(FIX::AgreementCurrency self, FIX::CURRENCY const & value) -> AgreementCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_AgreementCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AgreementCurrency
    __del__ = lambda self: None
AgreementCurrency_swigregister = _quickfix.AgreementCurrency_swigregister
AgreementCurrency_swigregister(AgreementCurrency)

class DeliveryType(IntField):
    """Proxy of C++ FIX::DeliveryType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeliveryType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeliveryType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeliveryType self) -> DeliveryType
        __init__(FIX::DeliveryType self, FIX::INT const & value) -> DeliveryType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DeliveryType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeliveryType
    __del__ = lambda self: None
DeliveryType_swigregister = _quickfix.DeliveryType_swigregister
DeliveryType_swigregister(DeliveryType)

class EndAccruedInterestAmt(DoubleField):
    """Proxy of C++ FIX::EndAccruedInterestAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndAccruedInterestAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EndAccruedInterestAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EndAccruedInterestAmt self) -> EndAccruedInterestAmt
        __init__(FIX::EndAccruedInterestAmt self, FIX::AMT const & value) -> EndAccruedInterestAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_EndAccruedInterestAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EndAccruedInterestAmt
    __del__ = lambda self: None
EndAccruedInterestAmt_swigregister = _quickfix.EndAccruedInterestAmt_swigregister
EndAccruedInterestAmt_swigregister(EndAccruedInterestAmt)

class StartCash(DoubleField):
    """Proxy of C++ FIX::StartCash class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartCash, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StartCash, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StartCash self) -> StartCash
        __init__(FIX::StartCash self, FIX::AMT const & value) -> StartCash

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_StartCash(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StartCash
    __del__ = lambda self: None
StartCash_swigregister = _quickfix.StartCash_swigregister
StartCash_swigregister(StartCash)

class EndCash(DoubleField):
    """Proxy of C++ FIX::EndCash class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndCash, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EndCash, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EndCash self) -> EndCash
        __init__(FIX::EndCash self, FIX::AMT const & value) -> EndCash

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_EndCash(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EndCash
    __del__ = lambda self: None
EndCash_swigregister = _quickfix.EndCash_swigregister
EndCash_swigregister(EndCash)

class UserRequestID(StringField):
    """Proxy of C++ FIX::UserRequestID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserRequestID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserRequestID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UserRequestID self) -> UserRequestID
        __init__(FIX::UserRequestID self, FIX::STRING const & value) -> UserRequestID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UserRequestID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UserRequestID
    __del__ = lambda self: None
UserRequestID_swigregister = _quickfix.UserRequestID_swigregister
UserRequestID_swigregister(UserRequestID)

class UserRequestType(IntField):
    """Proxy of C++ FIX::UserRequestType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserRequestType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UserRequestType self) -> UserRequestType
        __init__(FIX::UserRequestType self, FIX::INT const & value) -> UserRequestType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UserRequestType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UserRequestType
    __del__ = lambda self: None
UserRequestType_swigregister = _quickfix.UserRequestType_swigregister
UserRequestType_swigregister(UserRequestType)

class NewPassword(StringField):
    """Proxy of C++ FIX::NewPassword class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewPassword, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewPassword, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NewPassword self) -> NewPassword
        __init__(FIX::NewPassword self, FIX::STRING const & value) -> NewPassword

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_NewPassword(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NewPassword
    __del__ = lambda self: None
NewPassword_swigregister = _quickfix.NewPassword_swigregister
NewPassword_swigregister(NewPassword)

class UserStatus(IntField):
    """Proxy of C++ FIX::UserStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UserStatus self) -> UserStatus
        __init__(FIX::UserStatus self, FIX::INT const & value) -> UserStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UserStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UserStatus
    __del__ = lambda self: None
UserStatus_swigregister = _quickfix.UserStatus_swigregister
UserStatus_swigregister(UserStatus)

class UserStatusText(StringField):
    """Proxy of C++ FIX::UserStatusText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UserStatusText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UserStatusText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UserStatusText self) -> UserStatusText
        __init__(FIX::UserStatusText self, FIX::STRING const & value) -> UserStatusText

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UserStatusText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UserStatusText
    __del__ = lambda self: None
UserStatusText_swigregister = _quickfix.UserStatusText_swigregister
UserStatusText_swigregister(UserStatusText)

class StatusValue(IntField):
    """Proxy of C++ FIX::StatusValue class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatusValue, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatusValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StatusValue self) -> StatusValue
        __init__(FIX::StatusValue self, FIX::INT const & value) -> StatusValue

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StatusValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StatusValue
    __del__ = lambda self: None
StatusValue_swigregister = _quickfix.StatusValue_swigregister
StatusValue_swigregister(StatusValue)

class StatusText(StringField):
    """Proxy of C++ FIX::StatusText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatusText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatusText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StatusText self) -> StatusText
        __init__(FIX::StatusText self, FIX::STRING const & value) -> StatusText

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StatusText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StatusText
    __del__ = lambda self: None
StatusText_swigregister = _quickfix.StatusText_swigregister
StatusText_swigregister(StatusText)

class RefCompID(StringField):
    """Proxy of C++ FIX::RefCompID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefCompID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefCompID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefCompID self) -> RefCompID
        __init__(FIX::RefCompID self, FIX::STRING const & value) -> RefCompID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RefCompID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefCompID
    __del__ = lambda self: None
RefCompID_swigregister = _quickfix.RefCompID_swigregister
RefCompID_swigregister(RefCompID)

class RefSubID(StringField):
    """Proxy of C++ FIX::RefSubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefSubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefSubID self) -> RefSubID
        __init__(FIX::RefSubID self, FIX::STRING const & value) -> RefSubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RefSubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefSubID
    __del__ = lambda self: None
RefSubID_swigregister = _quickfix.RefSubID_swigregister
RefSubID_swigregister(RefSubID)

class NetworkResponseID(StringField):
    """Proxy of C++ FIX::NetworkResponseID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkResponseID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkResponseID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NetworkResponseID self) -> NetworkResponseID
        __init__(FIX::NetworkResponseID self, FIX::STRING const & value) -> NetworkResponseID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_NetworkResponseID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NetworkResponseID
    __del__ = lambda self: None
NetworkResponseID_swigregister = _quickfix.NetworkResponseID_swigregister
NetworkResponseID_swigregister(NetworkResponseID)

class NetworkRequestID(StringField):
    """Proxy of C++ FIX::NetworkRequestID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkRequestID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkRequestID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NetworkRequestID self) -> NetworkRequestID
        __init__(FIX::NetworkRequestID self, FIX::STRING const & value) -> NetworkRequestID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_NetworkRequestID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NetworkRequestID
    __del__ = lambda self: None
NetworkRequestID_swigregister = _quickfix.NetworkRequestID_swigregister
NetworkRequestID_swigregister(NetworkRequestID)

class LastNetworkResponseID(StringField):
    """Proxy of C++ FIX::LastNetworkResponseID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastNetworkResponseID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastNetworkResponseID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastNetworkResponseID self) -> LastNetworkResponseID
        __init__(FIX::LastNetworkResponseID self, FIX::STRING const & value) -> LastNetworkResponseID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LastNetworkResponseID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastNetworkResponseID
    __del__ = lambda self: None
LastNetworkResponseID_swigregister = _quickfix.LastNetworkResponseID_swigregister
LastNetworkResponseID_swigregister(LastNetworkResponseID)

class NetworkRequestType(IntField):
    """Proxy of C++ FIX::NetworkRequestType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkRequestType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkRequestType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NetworkRequestType self) -> NetworkRequestType
        __init__(FIX::NetworkRequestType self, FIX::INT const & value) -> NetworkRequestType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NetworkRequestType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NetworkRequestType
    __del__ = lambda self: None
NetworkRequestType_swigregister = _quickfix.NetworkRequestType_swigregister
NetworkRequestType_swigregister(NetworkRequestType)

class NoCompIDs(IntField):
    """Proxy of C++ FIX::NoCompIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoCompIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoCompIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoCompIDs self) -> NoCompIDs
        __init__(FIX::NoCompIDs self, FIX::NUMINGROUP const & value) -> NoCompIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoCompIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoCompIDs
    __del__ = lambda self: None
NoCompIDs_swigregister = _quickfix.NoCompIDs_swigregister
NoCompIDs_swigregister(NoCompIDs)

class NetworkStatusResponseType(IntField):
    """Proxy of C++ FIX::NetworkStatusResponseType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkStatusResponseType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkStatusResponseType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NetworkStatusResponseType self) -> NetworkStatusResponseType
        __init__(FIX::NetworkStatusResponseType self, FIX::INT const & value) -> NetworkStatusResponseType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NetworkStatusResponseType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NetworkStatusResponseType
    __del__ = lambda self: None
NetworkStatusResponseType_swigregister = _quickfix.NetworkStatusResponseType_swigregister
NetworkStatusResponseType_swigregister(NetworkStatusResponseType)

class NoCollInquiryQualifier(IntField):
    """Proxy of C++ FIX::NoCollInquiryQualifier class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoCollInquiryQualifier, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoCollInquiryQualifier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoCollInquiryQualifier self) -> NoCollInquiryQualifier
        __init__(FIX::NoCollInquiryQualifier self, FIX::NUMINGROUP const & value) -> NoCollInquiryQualifier

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoCollInquiryQualifier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoCollInquiryQualifier
    __del__ = lambda self: None
NoCollInquiryQualifier_swigregister = _quickfix.NoCollInquiryQualifier_swigregister
NoCollInquiryQualifier_swigregister(NoCollInquiryQualifier)

class TrdRptStatus(IntField):
    """Proxy of C++ FIX::TrdRptStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdRptStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrdRptStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TrdRptStatus self) -> TrdRptStatus
        __init__(FIX::TrdRptStatus self, FIX::INT const & value) -> TrdRptStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TrdRptStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TrdRptStatus
    __del__ = lambda self: None
TrdRptStatus_swigregister = _quickfix.TrdRptStatus_swigregister
TrdRptStatus_swigregister(TrdRptStatus)

class AffirmStatus(IntField):
    """Proxy of C++ FIX::AffirmStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AffirmStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AffirmStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AffirmStatus self) -> AffirmStatus
        __init__(FIX::AffirmStatus self, FIX::INT const & value) -> AffirmStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AffirmStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AffirmStatus
    __del__ = lambda self: None
AffirmStatus_swigregister = _quickfix.AffirmStatus_swigregister
AffirmStatus_swigregister(AffirmStatus)

class UnderlyingStrikeCurrency(StringField):
    """Proxy of C++ FIX::UnderlyingStrikeCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingStrikeCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingStrikeCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingStrikeCurrency self) -> UnderlyingStrikeCurrency
        __init__(FIX::UnderlyingStrikeCurrency self, FIX::CURRENCY const & value) -> UnderlyingStrikeCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_UnderlyingStrikeCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingStrikeCurrency
    __del__ = lambda self: None
UnderlyingStrikeCurrency_swigregister = _quickfix.UnderlyingStrikeCurrency_swigregister
UnderlyingStrikeCurrency_swigregister(UnderlyingStrikeCurrency)

class LegStrikeCurrency(StringField):
    """Proxy of C++ FIX::LegStrikeCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegStrikeCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegStrikeCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegStrikeCurrency self) -> LegStrikeCurrency
        __init__(FIX::LegStrikeCurrency self, FIX::CURRENCY const & value) -> LegStrikeCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_LegStrikeCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegStrikeCurrency
    __del__ = lambda self: None
LegStrikeCurrency_swigregister = _quickfix.LegStrikeCurrency_swigregister
LegStrikeCurrency_swigregister(LegStrikeCurrency)

class TimeBracket(StringField):
    """Proxy of C++ FIX::TimeBracket class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeBracket, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeBracket, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TimeBracket self) -> TimeBracket
        __init__(FIX::TimeBracket self, FIX::STRING const & value) -> TimeBracket

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TimeBracket(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TimeBracket
    __del__ = lambda self: None
TimeBracket_swigregister = _quickfix.TimeBracket_swigregister
TimeBracket_swigregister(TimeBracket)

class CollAction(IntField):
    """Proxy of C++ FIX::CollAction class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollAction, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollAction self) -> CollAction
        __init__(FIX::CollAction self, FIX::INT const & value) -> CollAction

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CollAction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollAction
    __del__ = lambda self: None
CollAction_swigregister = _quickfix.CollAction_swigregister
CollAction_swigregister(CollAction)

class CollInquiryStatus(IntField):
    """Proxy of C++ FIX::CollInquiryStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollInquiryStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollInquiryStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollInquiryStatus self) -> CollInquiryStatus
        __init__(FIX::CollInquiryStatus self, FIX::INT const & value) -> CollInquiryStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CollInquiryStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollInquiryStatus
    __del__ = lambda self: None
CollInquiryStatus_swigregister = _quickfix.CollInquiryStatus_swigregister
CollInquiryStatus_swigregister(CollInquiryStatus)

class CollInquiryResult(IntField):
    """Proxy of C++ FIX::CollInquiryResult class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollInquiryResult, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollInquiryResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollInquiryResult self) -> CollInquiryResult
        __init__(FIX::CollInquiryResult self, FIX::INT const & value) -> CollInquiryResult

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CollInquiryResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollInquiryResult
    __del__ = lambda self: None
CollInquiryResult_swigregister = _quickfix.CollInquiryResult_swigregister
CollInquiryResult_swigregister(CollInquiryResult)

class StrikeCurrency(StringField):
    """Proxy of C++ FIX::StrikeCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikeCurrency self) -> StrikeCurrency
        __init__(FIX::StrikeCurrency self, FIX::CURRENCY const & value) -> StrikeCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_StrikeCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikeCurrency
    __del__ = lambda self: None
StrikeCurrency_swigregister = _quickfix.StrikeCurrency_swigregister
StrikeCurrency_swigregister(StrikeCurrency)

class NoNested3PartyIDs(IntField):
    """Proxy of C++ FIX::NoNested3PartyIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNested3PartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNested3PartyIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNested3PartyIDs self) -> NoNested3PartyIDs
        __init__(FIX::NoNested3PartyIDs self, FIX::NUMINGROUP const & value) -> NoNested3PartyIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNested3PartyIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNested3PartyIDs
    __del__ = lambda self: None
NoNested3PartyIDs_swigregister = _quickfix.NoNested3PartyIDs_swigregister
NoNested3PartyIDs_swigregister(NoNested3PartyIDs)

class Nested3PartyID(StringField):
    """Proxy of C++ FIX::Nested3PartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested3PartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested3PartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested3PartyID self) -> Nested3PartyID
        __init__(FIX::Nested3PartyID self, FIX::STRING const & value) -> Nested3PartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Nested3PartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested3PartyID
    __del__ = lambda self: None
Nested3PartyID_swigregister = _quickfix.Nested3PartyID_swigregister
Nested3PartyID_swigregister(Nested3PartyID)

class Nested3PartyIDSource(CharField):
    """Proxy of C++ FIX::Nested3PartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested3PartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested3PartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested3PartyIDSource self) -> Nested3PartyIDSource
        __init__(FIX::Nested3PartyIDSource self, FIX::CHAR const & value) -> Nested3PartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_Nested3PartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested3PartyIDSource
    __del__ = lambda self: None
Nested3PartyIDSource_swigregister = _quickfix.Nested3PartyIDSource_swigregister
Nested3PartyIDSource_swigregister(Nested3PartyIDSource)

class Nested3PartyRole(IntField):
    """Proxy of C++ FIX::Nested3PartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested3PartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested3PartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested3PartyRole self) -> Nested3PartyRole
        __init__(FIX::Nested3PartyRole self, FIX::INT const & value) -> Nested3PartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_Nested3PartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested3PartyRole
    __del__ = lambda self: None
Nested3PartyRole_swigregister = _quickfix.Nested3PartyRole_swigregister
Nested3PartyRole_swigregister(Nested3PartyRole)

class NoNested3PartySubIDs(IntField):
    """Proxy of C++ FIX::NoNested3PartySubIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNested3PartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNested3PartySubIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNested3PartySubIDs self) -> NoNested3PartySubIDs
        __init__(FIX::NoNested3PartySubIDs self, FIX::NUMINGROUP const & value) -> NoNested3PartySubIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNested3PartySubIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNested3PartySubIDs
    __del__ = lambda self: None
NoNested3PartySubIDs_swigregister = _quickfix.NoNested3PartySubIDs_swigregister
NoNested3PartySubIDs_swigregister(NoNested3PartySubIDs)

class Nested3PartySubID(StringField):
    """Proxy of C++ FIX::Nested3PartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested3PartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested3PartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested3PartySubID self) -> Nested3PartySubID
        __init__(FIX::Nested3PartySubID self, FIX::STRING const & value) -> Nested3PartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Nested3PartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested3PartySubID
    __del__ = lambda self: None
Nested3PartySubID_swigregister = _quickfix.Nested3PartySubID_swigregister
Nested3PartySubID_swigregister(Nested3PartySubID)

class Nested3PartySubIDType(IntField):
    """Proxy of C++ FIX::Nested3PartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested3PartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested3PartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested3PartySubIDType self) -> Nested3PartySubIDType
        __init__(FIX::Nested3PartySubIDType self, FIX::INT const & value) -> Nested3PartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_Nested3PartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested3PartySubIDType
    __del__ = lambda self: None
Nested3PartySubIDType_swigregister = _quickfix.Nested3PartySubIDType_swigregister
Nested3PartySubIDType_swigregister(Nested3PartySubIDType)

class LegContractSettlMonth(StringField):
    """Proxy of C++ FIX::LegContractSettlMonth class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegContractSettlMonth, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegContractSettlMonth, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegContractSettlMonth self) -> LegContractSettlMonth
        __init__(FIX::LegContractSettlMonth self, FIX::MONTHYEAR const & value) -> LegContractSettlMonth

        Parameters:
            value: FIX::MONTHYEAR const &

        """
        this = _quickfix.new_LegContractSettlMonth(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegContractSettlMonth
    __del__ = lambda self: None
LegContractSettlMonth_swigregister = _quickfix.LegContractSettlMonth_swigregister
LegContractSettlMonth_swigregister(LegContractSettlMonth)

class LegInterestAccrualDate(StringField):
    """Proxy of C++ FIX::LegInterestAccrualDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegInterestAccrualDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegInterestAccrualDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegInterestAccrualDate self) -> LegInterestAccrualDate
        __init__(FIX::LegInterestAccrualDate self, FIX::LOCALMKTDATE const & value) -> LegInterestAccrualDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_LegInterestAccrualDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegInterestAccrualDate
    __del__ = lambda self: None
LegInterestAccrualDate_swigregister = _quickfix.LegInterestAccrualDate_swigregister
LegInterestAccrualDate_swigregister(LegInterestAccrualDate)

class LegOrderQty(DoubleField):
    """Proxy of C++ FIX::LegOrderQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegOrderQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegOrderQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegOrderQty self) -> LegOrderQty
        __init__(FIX::LegOrderQty self, FIX::QTY const & value) -> LegOrderQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LegOrderQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegOrderQty
    __del__ = lambda self: None
LegOrderQty_swigregister = _quickfix.LegOrderQty_swigregister
LegOrderQty_swigregister(LegOrderQty)

class NoStrategyParameters(IntField):
    """Proxy of C++ FIX::NoStrategyParameters class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoStrategyParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoStrategyParameters, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoStrategyParameters self) -> NoStrategyParameters
        __init__(FIX::NoStrategyParameters self, FIX::NUMINGROUP const & value) -> NoStrategyParameters

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoStrategyParameters(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoStrategyParameters
    __del__ = lambda self: None
NoStrategyParameters_swigregister = _quickfix.NoStrategyParameters_swigregister
NoStrategyParameters_swigregister(NoStrategyParameters)

class StrategyParameterName(StringField):
    """Proxy of C++ FIX::StrategyParameterName class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyParameterName, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyParameterName, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrategyParameterName self) -> StrategyParameterName
        __init__(FIX::StrategyParameterName self, FIX::STRING const & value) -> StrategyParameterName

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StrategyParameterName(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrategyParameterName
    __del__ = lambda self: None
StrategyParameterName_swigregister = _quickfix.StrategyParameterName_swigregister
StrategyParameterName_swigregister(StrategyParameterName)

class StrategyParameterType(IntField):
    """Proxy of C++ FIX::StrategyParameterType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyParameterType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyParameterType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrategyParameterType self) -> StrategyParameterType
        __init__(FIX::StrategyParameterType self, FIX::INT const & value) -> StrategyParameterType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StrategyParameterType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrategyParameterType
    __del__ = lambda self: None
StrategyParameterType_swigregister = _quickfix.StrategyParameterType_swigregister
StrategyParameterType_swigregister(StrategyParameterType)

class StrategyParameterValue(StringField):
    """Proxy of C++ FIX::StrategyParameterValue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrategyParameterValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrategyParameterValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrategyParameterValue self) -> StrategyParameterValue
        __init__(FIX::StrategyParameterValue self, FIX::STRING const & value) -> StrategyParameterValue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StrategyParameterValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrategyParameterValue
    __del__ = lambda self: None
StrategyParameterValue_swigregister = _quickfix.StrategyParameterValue_swigregister
StrategyParameterValue_swigregister(StrategyParameterValue)

class HostCrossID(StringField):
    """Proxy of C++ FIX::HostCrossID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostCrossID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HostCrossID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::HostCrossID self) -> HostCrossID
        __init__(FIX::HostCrossID self, FIX::STRING const & value) -> HostCrossID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_HostCrossID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_HostCrossID
    __del__ = lambda self: None
HostCrossID_swigregister = _quickfix.HostCrossID_swigregister
HostCrossID_swigregister(HostCrossID)

class SideTimeInForce(UtcTimeStampField):
    """Proxy of C++ FIX::SideTimeInForce class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideTimeInForce, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideTimeInForce, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideTimeInForce self) -> SideTimeInForce
        __init__(FIX::SideTimeInForce self, bool showMilliseconds) -> SideTimeInForce

        Parameters:
            showMilliseconds: bool

        __init__(FIX::SideTimeInForce self, FIX::UTCTIMESTAMP const & value) -> SideTimeInForce

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::SideTimeInForce self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> SideTimeInForce

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_SideTimeInForce(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideTimeInForce
    __del__ = lambda self: None
SideTimeInForce_swigregister = _quickfix.SideTimeInForce_swigregister
SideTimeInForce_swigregister(SideTimeInForce)

class MDReportID(IntField):
    """Proxy of C++ FIX::MDReportID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDReportID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDReportID self) -> MDReportID
        __init__(FIX::MDReportID self, FIX::INT const & value) -> MDReportID

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MDReportID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDReportID
    __del__ = lambda self: None
MDReportID_swigregister = _quickfix.MDReportID_swigregister
MDReportID_swigregister(MDReportID)

class SecurityReportID(IntField):
    """Proxy of C++ FIX::SecurityReportID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityReportID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityReportID self) -> SecurityReportID
        __init__(FIX::SecurityReportID self, FIX::INT const & value) -> SecurityReportID

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecurityReportID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityReportID
    __del__ = lambda self: None
SecurityReportID_swigregister = _quickfix.SecurityReportID_swigregister
SecurityReportID_swigregister(SecurityReportID)

class SecurityStatus(StringField):
    """Proxy of C++ FIX::SecurityStatus class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityStatus self) -> SecurityStatus
        __init__(FIX::SecurityStatus self, FIX::STRING const & value) -> SecurityStatus

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityStatus
    __del__ = lambda self: None
SecurityStatus_swigregister = _quickfix.SecurityStatus_swigregister
SecurityStatus_swigregister(SecurityStatus)

class SettleOnOpenFlag(StringField):
    """Proxy of C++ FIX::SettleOnOpenFlag class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettleOnOpenFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettleOnOpenFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettleOnOpenFlag self) -> SettleOnOpenFlag
        __init__(FIX::SettleOnOpenFlag self, FIX::STRING const & value) -> SettleOnOpenFlag

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettleOnOpenFlag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettleOnOpenFlag
    __del__ = lambda self: None
SettleOnOpenFlag_swigregister = _quickfix.SettleOnOpenFlag_swigregister
SettleOnOpenFlag_swigregister(SettleOnOpenFlag)

class StrikeMultiplier(DoubleField):
    """Proxy of C++ FIX::StrikeMultiplier class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeMultiplier, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeMultiplier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikeMultiplier self) -> StrikeMultiplier
        __init__(FIX::StrikeMultiplier self, FIX::FLOAT const & value) -> StrikeMultiplier

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_StrikeMultiplier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikeMultiplier
    __del__ = lambda self: None
StrikeMultiplier_swigregister = _quickfix.StrikeMultiplier_swigregister
StrikeMultiplier_swigregister(StrikeMultiplier)

class StrikeValue(DoubleField):
    """Proxy of C++ FIX::StrikeValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikeValue self) -> StrikeValue
        __init__(FIX::StrikeValue self, FIX::FLOAT const & value) -> StrikeValue

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_StrikeValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikeValue
    __del__ = lambda self: None
StrikeValue_swigregister = _quickfix.StrikeValue_swigregister
StrikeValue_swigregister(StrikeValue)

class MinPriceIncrement(DoubleField):
    """Proxy of C++ FIX::MinPriceIncrement class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinPriceIncrement, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinPriceIncrement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MinPriceIncrement self) -> MinPriceIncrement
        __init__(FIX::MinPriceIncrement self, FIX::FLOAT const & value) -> MinPriceIncrement

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_MinPriceIncrement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MinPriceIncrement
    __del__ = lambda self: None
MinPriceIncrement_swigregister = _quickfix.MinPriceIncrement_swigregister
MinPriceIncrement_swigregister(MinPriceIncrement)

class PositionLimit(IntField):
    """Proxy of C++ FIX::PositionLimit class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionLimit, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositionLimit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PositionLimit self) -> PositionLimit
        __init__(FIX::PositionLimit self, FIX::INT const & value) -> PositionLimit

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PositionLimit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PositionLimit
    __del__ = lambda self: None
PositionLimit_swigregister = _quickfix.PositionLimit_swigregister
PositionLimit_swigregister(PositionLimit)

class NTPositionLimit(IntField):
    """Proxy of C++ FIX::NTPositionLimit class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NTPositionLimit, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NTPositionLimit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NTPositionLimit self) -> NTPositionLimit
        __init__(FIX::NTPositionLimit self, FIX::INT const & value) -> NTPositionLimit

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NTPositionLimit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NTPositionLimit
    __del__ = lambda self: None
NTPositionLimit_swigregister = _quickfix.NTPositionLimit_swigregister
NTPositionLimit_swigregister(NTPositionLimit)

class UnderlyingAllocationPercent(DoubleField):
    """Proxy of C++ FIX::UnderlyingAllocationPercent class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingAllocationPercent, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingAllocationPercent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingAllocationPercent self) -> UnderlyingAllocationPercent
        __init__(FIX::UnderlyingAllocationPercent self, FIX::PERCENTAGE const & value) -> UnderlyingAllocationPercent

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_UnderlyingAllocationPercent(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingAllocationPercent
    __del__ = lambda self: None
UnderlyingAllocationPercent_swigregister = _quickfix.UnderlyingAllocationPercent_swigregister
UnderlyingAllocationPercent_swigregister(UnderlyingAllocationPercent)

class UnderlyingCashAmount(DoubleField):
    """Proxy of C++ FIX::UnderlyingCashAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCashAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCashAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCashAmount self) -> UnderlyingCashAmount
        __init__(FIX::UnderlyingCashAmount self, FIX::AMT const & value) -> UnderlyingCashAmount

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_UnderlyingCashAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCashAmount
    __del__ = lambda self: None
UnderlyingCashAmount_swigregister = _quickfix.UnderlyingCashAmount_swigregister
UnderlyingCashAmount_swigregister(UnderlyingCashAmount)

class UnderlyingCashType(StringField):
    """Proxy of C++ FIX::UnderlyingCashType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCashType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCashType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCashType self) -> UnderlyingCashType
        __init__(FIX::UnderlyingCashType self, FIX::STRING const & value) -> UnderlyingCashType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingCashType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCashType
    __del__ = lambda self: None
UnderlyingCashType_swigregister = _quickfix.UnderlyingCashType_swigregister
UnderlyingCashType_swigregister(UnderlyingCashType)

class UnderlyingSettlementType(IntField):
    """Proxy of C++ FIX::UnderlyingSettlementType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSettlementType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSettlementType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSettlementType self) -> UnderlyingSettlementType
        __init__(FIX::UnderlyingSettlementType self, FIX::INT const & value) -> UnderlyingSettlementType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingSettlementType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlementType
    __del__ = lambda self: None
UnderlyingSettlementType_swigregister = _quickfix.UnderlyingSettlementType_swigregister
UnderlyingSettlementType_swigregister(UnderlyingSettlementType)

class QuantityDate(StringField):
    """Proxy of C++ FIX::QuantityDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantityDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantityDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuantityDate self) -> QuantityDate
        __init__(FIX::QuantityDate self, FIX::LOCALMKTDATE const & value) -> QuantityDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_QuantityDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuantityDate
    __del__ = lambda self: None
QuantityDate_swigregister = _quickfix.QuantityDate_swigregister
QuantityDate_swigregister(QuantityDate)

class ContIntRptID(StringField):
    """Proxy of C++ FIX::ContIntRptID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContIntRptID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContIntRptID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContIntRptID self) -> ContIntRptID
        __init__(FIX::ContIntRptID self, FIX::STRING const & value) -> ContIntRptID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ContIntRptID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContIntRptID
    __del__ = lambda self: None
ContIntRptID_swigregister = _quickfix.ContIntRptID_swigregister
ContIntRptID_swigregister(ContIntRptID)

class LateIndicator(BoolField):
    """Proxy of C++ FIX::LateIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LateIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LateIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LateIndicator self) -> LateIndicator
        __init__(FIX::LateIndicator self, FIX::BOOLEAN const & value) -> LateIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_LateIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LateIndicator
    __del__ = lambda self: None
LateIndicator_swigregister = _quickfix.LateIndicator_swigregister
LateIndicator_swigregister(LateIndicator)

class InputSource(StringField):
    """Proxy of C++ FIX::InputSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InputSource self) -> InputSource
        __init__(FIX::InputSource self, FIX::STRING const & value) -> InputSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_InputSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InputSource
    __del__ = lambda self: None
InputSource_swigregister = _quickfix.InputSource_swigregister
InputSource_swigregister(InputSource)

class SecurityUpdateAction(CharField):
    """Proxy of C++ FIX::SecurityUpdateAction class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityUpdateAction, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityUpdateAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityUpdateAction self) -> SecurityUpdateAction
        __init__(FIX::SecurityUpdateAction self, FIX::CHAR const & value) -> SecurityUpdateAction

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SecurityUpdateAction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityUpdateAction
    __del__ = lambda self: None
SecurityUpdateAction_swigregister = _quickfix.SecurityUpdateAction_swigregister
SecurityUpdateAction_swigregister(SecurityUpdateAction)

class NoExpiration(IntField):
    """Proxy of C++ FIX::NoExpiration class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoExpiration, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoExpiration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoExpiration self) -> NoExpiration
        __init__(FIX::NoExpiration self, FIX::NUMINGROUP const & value) -> NoExpiration

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoExpiration(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoExpiration
    __del__ = lambda self: None
NoExpiration_swigregister = _quickfix.NoExpiration_swigregister
NoExpiration_swigregister(NoExpiration)

class ExpType(IntField):
    """Proxy of C++ FIX::ExpType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExpType self) -> ExpType
        __init__(FIX::ExpType self, FIX::INT const & value) -> ExpType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ExpType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExpType
    __del__ = lambda self: None
ExpType_swigregister = _quickfix.ExpType_swigregister
ExpType_swigregister(ExpType)

class ExpQty(DoubleField):
    """Proxy of C++ FIX::ExpQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExpQty self) -> ExpQty
        __init__(FIX::ExpQty self, FIX::QTY const & value) -> ExpQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_ExpQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExpQty
    __del__ = lambda self: None
ExpQty_swigregister = _quickfix.ExpQty_swigregister
ExpQty_swigregister(ExpQty)

class NoUnderlyingAmounts(IntField):
    """Proxy of C++ FIX::NoUnderlyingAmounts class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoUnderlyingAmounts, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoUnderlyingAmounts, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoUnderlyingAmounts self) -> NoUnderlyingAmounts
        __init__(FIX::NoUnderlyingAmounts self, FIX::NUMINGROUP const & value) -> NoUnderlyingAmounts

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoUnderlyingAmounts(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoUnderlyingAmounts
    __del__ = lambda self: None
NoUnderlyingAmounts_swigregister = _quickfix.NoUnderlyingAmounts_swigregister
NoUnderlyingAmounts_swigregister(NoUnderlyingAmounts)

class UnderlyingPayAmount(DoubleField):
    """Proxy of C++ FIX::UnderlyingPayAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingPayAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingPayAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingPayAmount self) -> UnderlyingPayAmount
        __init__(FIX::UnderlyingPayAmount self, FIX::AMT const & value) -> UnderlyingPayAmount

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_UnderlyingPayAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingPayAmount
    __del__ = lambda self: None
UnderlyingPayAmount_swigregister = _quickfix.UnderlyingPayAmount_swigregister
UnderlyingPayAmount_swigregister(UnderlyingPayAmount)

class UnderlyingCollectAmount(DoubleField):
    """Proxy of C++ FIX::UnderlyingCollectAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCollectAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCollectAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCollectAmount self) -> UnderlyingCollectAmount
        __init__(FIX::UnderlyingCollectAmount self, FIX::AMT const & value) -> UnderlyingCollectAmount

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_UnderlyingCollectAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCollectAmount
    __del__ = lambda self: None
UnderlyingCollectAmount_swigregister = _quickfix.UnderlyingCollectAmount_swigregister
UnderlyingCollectAmount_swigregister(UnderlyingCollectAmount)

class UnderlyingSettlementDate(StringField):
    """Proxy of C++ FIX::UnderlyingSettlementDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSettlementDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSettlementDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSettlementDate self) -> UnderlyingSettlementDate
        __init__(FIX::UnderlyingSettlementDate self, FIX::LOCALMKTDATE const & value) -> UnderlyingSettlementDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_UnderlyingSettlementDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlementDate
    __del__ = lambda self: None
UnderlyingSettlementDate_swigregister = _quickfix.UnderlyingSettlementDate_swigregister
UnderlyingSettlementDate_swigregister(UnderlyingSettlementDate)

class UnderlyingSettlementStatus(StringField):
    """Proxy of C++ FIX::UnderlyingSettlementStatus class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSettlementStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSettlementStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSettlementStatus self) -> UnderlyingSettlementStatus
        __init__(FIX::UnderlyingSettlementStatus self, FIX::STRING const & value) -> UnderlyingSettlementStatus

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSettlementStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlementStatus
    __del__ = lambda self: None
UnderlyingSettlementStatus_swigregister = _quickfix.UnderlyingSettlementStatus_swigregister
UnderlyingSettlementStatus_swigregister(UnderlyingSettlementStatus)

class SecondaryIndividualAllocID(StringField):
    """Proxy of C++ FIX::SecondaryIndividualAllocID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryIndividualAllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryIndividualAllocID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryIndividualAllocID self) -> SecondaryIndividualAllocID
        __init__(FIX::SecondaryIndividualAllocID self, FIX::STRING const & value) -> SecondaryIndividualAllocID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecondaryIndividualAllocID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryIndividualAllocID
    __del__ = lambda self: None
SecondaryIndividualAllocID_swigregister = _quickfix.SecondaryIndividualAllocID_swigregister
SecondaryIndividualAllocID_swigregister(SecondaryIndividualAllocID)

class LegReportID(StringField):
    """Proxy of C++ FIX::LegReportID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegReportID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegReportID self) -> LegReportID
        __init__(FIX::LegReportID self, FIX::STRING const & value) -> LegReportID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegReportID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegReportID
    __del__ = lambda self: None
LegReportID_swigregister = _quickfix.LegReportID_swigregister
LegReportID_swigregister(LegReportID)

class RndPx(DoubleField):
    """Proxy of C++ FIX::RndPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RndPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RndPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RndPx self) -> RndPx
        __init__(FIX::RndPx self, FIX::PRICE const & value) -> RndPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_RndPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RndPx
    __del__ = lambda self: None
RndPx_swigregister = _quickfix.RndPx_swigregister
RndPx_swigregister(RndPx)

class IndividualAllocType(IntField):
    """Proxy of C++ FIX::IndividualAllocType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndividualAllocType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndividualAllocType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::IndividualAllocType self) -> IndividualAllocType
        __init__(FIX::IndividualAllocType self, FIX::INT const & value) -> IndividualAllocType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_IndividualAllocType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_IndividualAllocType
    __del__ = lambda self: None
IndividualAllocType_swigregister = _quickfix.IndividualAllocType_swigregister
IndividualAllocType_swigregister(IndividualAllocType)

class AllocCustomerCapacity(StringField):
    """Proxy of C++ FIX::AllocCustomerCapacity class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocCustomerCapacity, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocCustomerCapacity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocCustomerCapacity self) -> AllocCustomerCapacity
        __init__(FIX::AllocCustomerCapacity self, FIX::STRING const & value) -> AllocCustomerCapacity

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AllocCustomerCapacity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocCustomerCapacity
    __del__ = lambda self: None
AllocCustomerCapacity_swigregister = _quickfix.AllocCustomerCapacity_swigregister
AllocCustomerCapacity_swigregister(AllocCustomerCapacity)

class TierCode(StringField):
    """Proxy of C++ FIX::TierCode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TierCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TierCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TierCode self) -> TierCode
        __init__(FIX::TierCode self, FIX::STRING const & value) -> TierCode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TierCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TierCode
    __del__ = lambda self: None
TierCode_swigregister = _quickfix.TierCode_swigregister
TierCode_swigregister(TierCode)

class UnitOfMeasure(StringField):
    """Proxy of C++ FIX::UnitOfMeasure class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitOfMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitOfMeasure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnitOfMeasure self) -> UnitOfMeasure
        __init__(FIX::UnitOfMeasure self, FIX::STRING const & value) -> UnitOfMeasure

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnitOfMeasure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnitOfMeasure
    __del__ = lambda self: None
UnitOfMeasure_swigregister = _quickfix.UnitOfMeasure_swigregister
UnitOfMeasure_swigregister(UnitOfMeasure)

class TimeUnit(StringField):
    """Proxy of C++ FIX::TimeUnit class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TimeUnit self) -> TimeUnit
        __init__(FIX::TimeUnit self, FIX::STRING const & value) -> TimeUnit

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TimeUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TimeUnit
    __del__ = lambda self: None
TimeUnit_swigregister = _quickfix.TimeUnit_swigregister
TimeUnit_swigregister(TimeUnit)

class UnderlyingUnitOfMeasure(StringField):
    """Proxy of C++ FIX::UnderlyingUnitOfMeasure class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingUnitOfMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingUnitOfMeasure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingUnitOfMeasure self) -> UnderlyingUnitOfMeasure
        __init__(FIX::UnderlyingUnitOfMeasure self, FIX::STRING const & value) -> UnderlyingUnitOfMeasure

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingUnitOfMeasure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingUnitOfMeasure
    __del__ = lambda self: None
UnderlyingUnitOfMeasure_swigregister = _quickfix.UnderlyingUnitOfMeasure_swigregister
UnderlyingUnitOfMeasure_swigregister(UnderlyingUnitOfMeasure)

class LegUnitOfMeasure(StringField):
    """Proxy of C++ FIX::LegUnitOfMeasure class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegUnitOfMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegUnitOfMeasure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegUnitOfMeasure self) -> LegUnitOfMeasure
        __init__(FIX::LegUnitOfMeasure self, FIX::STRING const & value) -> LegUnitOfMeasure

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegUnitOfMeasure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegUnitOfMeasure
    __del__ = lambda self: None
LegUnitOfMeasure_swigregister = _quickfix.LegUnitOfMeasure_swigregister
LegUnitOfMeasure_swigregister(LegUnitOfMeasure)

class UnderlyingTimeUnit(StringField):
    """Proxy of C++ FIX::UnderlyingTimeUnit class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingTimeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingTimeUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingTimeUnit self) -> UnderlyingTimeUnit
        __init__(FIX::UnderlyingTimeUnit self, FIX::STRING const & value) -> UnderlyingTimeUnit

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingTimeUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingTimeUnit
    __del__ = lambda self: None
UnderlyingTimeUnit_swigregister = _quickfix.UnderlyingTimeUnit_swigregister
UnderlyingTimeUnit_swigregister(UnderlyingTimeUnit)

class LegTimeUnit(StringField):
    """Proxy of C++ FIX::LegTimeUnit class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegTimeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegTimeUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegTimeUnit self) -> LegTimeUnit
        __init__(FIX::LegTimeUnit self, FIX::STRING const & value) -> LegTimeUnit

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegTimeUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegTimeUnit
    __del__ = lambda self: None
LegTimeUnit_swigregister = _quickfix.LegTimeUnit_swigregister
LegTimeUnit_swigregister(LegTimeUnit)

class AllocMethod(IntField):
    """Proxy of C++ FIX::AllocMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocMethod self) -> AllocMethod
        __init__(FIX::AllocMethod self, FIX::INT const & value) -> AllocMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_AllocMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocMethod
    __del__ = lambda self: None
AllocMethod_swigregister = _quickfix.AllocMethod_swigregister
AllocMethod_swigregister(AllocMethod)

class TradeID(StringField):
    """Proxy of C++ FIX::TradeID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeID self) -> TradeID
        __init__(FIX::TradeID self, FIX::STRING const & value) -> TradeID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradeID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeID
    __del__ = lambda self: None
TradeID_swigregister = _quickfix.TradeID_swigregister
TradeID_swigregister(TradeID)

class SideTradeReportID(StringField):
    """Proxy of C++ FIX::SideTradeReportID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideTradeReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideTradeReportID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideTradeReportID self) -> SideTradeReportID
        __init__(FIX::SideTradeReportID self, FIX::STRING const & value) -> SideTradeReportID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SideTradeReportID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideTradeReportID
    __del__ = lambda self: None
SideTradeReportID_swigregister = _quickfix.SideTradeReportID_swigregister
SideTradeReportID_swigregister(SideTradeReportID)

class SideFillStationCd(StringField):
    """Proxy of C++ FIX::SideFillStationCd class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideFillStationCd, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideFillStationCd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideFillStationCd self) -> SideFillStationCd
        __init__(FIX::SideFillStationCd self, FIX::STRING const & value) -> SideFillStationCd

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SideFillStationCd(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideFillStationCd
    __del__ = lambda self: None
SideFillStationCd_swigregister = _quickfix.SideFillStationCd_swigregister
SideFillStationCd_swigregister(SideFillStationCd)

class SideReasonCd(StringField):
    """Proxy of C++ FIX::SideReasonCd class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideReasonCd, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideReasonCd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideReasonCd self) -> SideReasonCd
        __init__(FIX::SideReasonCd self, FIX::STRING const & value) -> SideReasonCd

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SideReasonCd(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideReasonCd
    __del__ = lambda self: None
SideReasonCd_swigregister = _quickfix.SideReasonCd_swigregister
SideReasonCd_swigregister(SideReasonCd)

class SideTrdSubTyp(IntField):
    """Proxy of C++ FIX::SideTrdSubTyp class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideTrdSubTyp, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideTrdSubTyp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideTrdSubTyp self) -> SideTrdSubTyp
        __init__(FIX::SideTrdSubTyp self, FIX::INT const & value) -> SideTrdSubTyp

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SideTrdSubTyp(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideTrdSubTyp
    __del__ = lambda self: None
SideTrdSubTyp_swigregister = _quickfix.SideTrdSubTyp_swigregister
SideTrdSubTyp_swigregister(SideTrdSubTyp)

class SideQty(IntField):
    """Proxy of C++ FIX::SideQty class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideQty, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideQty self) -> SideQty
        __init__(FIX::SideQty self, FIX::INT const & value) -> SideQty

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SideQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideQty
    __del__ = lambda self: None
SideQty_swigregister = _quickfix.SideQty_swigregister
SideQty_swigregister(SideQty)

class MessageEventSource(StringField):
    """Proxy of C++ FIX::MessageEventSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageEventSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessageEventSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MessageEventSource self) -> MessageEventSource
        __init__(FIX::MessageEventSource self, FIX::STRING const & value) -> MessageEventSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MessageEventSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MessageEventSource
    __del__ = lambda self: None
MessageEventSource_swigregister = _quickfix.MessageEventSource_swigregister
MessageEventSource_swigregister(MessageEventSource)

class SideTrdRegTimestamp(UtcTimeStampField):
    """Proxy of C++ FIX::SideTrdRegTimestamp class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideTrdRegTimestamp, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideTrdRegTimestamp, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideTrdRegTimestamp self) -> SideTrdRegTimestamp
        __init__(FIX::SideTrdRegTimestamp self, bool showMilliseconds) -> SideTrdRegTimestamp

        Parameters:
            showMilliseconds: bool

        __init__(FIX::SideTrdRegTimestamp self, FIX::UTCTIMESTAMP const & value) -> SideTrdRegTimestamp

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::SideTrdRegTimestamp self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> SideTrdRegTimestamp

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_SideTrdRegTimestamp(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideTrdRegTimestamp
    __del__ = lambda self: None
SideTrdRegTimestamp_swigregister = _quickfix.SideTrdRegTimestamp_swigregister
SideTrdRegTimestamp_swigregister(SideTrdRegTimestamp)

class SideTrdRegTimestampType(IntField):
    """Proxy of C++ FIX::SideTrdRegTimestampType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideTrdRegTimestampType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideTrdRegTimestampType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideTrdRegTimestampType self) -> SideTrdRegTimestampType
        __init__(FIX::SideTrdRegTimestampType self, FIX::INT const & value) -> SideTrdRegTimestampType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SideTrdRegTimestampType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideTrdRegTimestampType
    __del__ = lambda self: None
SideTrdRegTimestampType_swigregister = _quickfix.SideTrdRegTimestampType_swigregister
SideTrdRegTimestampType_swigregister(SideTrdRegTimestampType)

class SideTrdRegTimestampSrc(StringField):
    """Proxy of C++ FIX::SideTrdRegTimestampSrc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideTrdRegTimestampSrc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideTrdRegTimestampSrc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideTrdRegTimestampSrc self) -> SideTrdRegTimestampSrc
        __init__(FIX::SideTrdRegTimestampSrc self, FIX::STRING const & value) -> SideTrdRegTimestampSrc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SideTrdRegTimestampSrc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideTrdRegTimestampSrc
    __del__ = lambda self: None
SideTrdRegTimestampSrc_swigregister = _quickfix.SideTrdRegTimestampSrc_swigregister
SideTrdRegTimestampSrc_swigregister(SideTrdRegTimestampSrc)

class AsOfIndicator(CharField):
    """Proxy of C++ FIX::AsOfIndicator class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsOfIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AsOfIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AsOfIndicator self) -> AsOfIndicator
        __init__(FIX::AsOfIndicator self, FIX::CHAR const & value) -> AsOfIndicator

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_AsOfIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AsOfIndicator
    __del__ = lambda self: None
AsOfIndicator_swigregister = _quickfix.AsOfIndicator_swigregister
AsOfIndicator_swigregister(AsOfIndicator)

class NoSideTrdRegTS(IntField):
    """Proxy of C++ FIX::NoSideTrdRegTS class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSideTrdRegTS, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSideTrdRegTS, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoSideTrdRegTS self) -> NoSideTrdRegTS
        __init__(FIX::NoSideTrdRegTS self, FIX::NUMINGROUP const & value) -> NoSideTrdRegTS

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoSideTrdRegTS(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoSideTrdRegTS
    __del__ = lambda self: None
NoSideTrdRegTS_swigregister = _quickfix.NoSideTrdRegTS_swigregister
NoSideTrdRegTS_swigregister(NoSideTrdRegTS)

class LegOptionRatio(DoubleField):
    """Proxy of C++ FIX::LegOptionRatio class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegOptionRatio, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegOptionRatio, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegOptionRatio self) -> LegOptionRatio
        __init__(FIX::LegOptionRatio self, FIX::FLOAT const & value) -> LegOptionRatio

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_LegOptionRatio(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegOptionRatio
    __del__ = lambda self: None
LegOptionRatio_swigregister = _quickfix.LegOptionRatio_swigregister
LegOptionRatio_swigregister(LegOptionRatio)

class NoInstrumentParties(IntField):
    """Proxy of C++ FIX::NoInstrumentParties class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoInstrumentParties, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoInstrumentParties, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoInstrumentParties self) -> NoInstrumentParties
        __init__(FIX::NoInstrumentParties self, FIX::NUMINGROUP const & value) -> NoInstrumentParties

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoInstrumentParties(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoInstrumentParties
    __del__ = lambda self: None
NoInstrumentParties_swigregister = _quickfix.NoInstrumentParties_swigregister
NoInstrumentParties_swigregister(NoInstrumentParties)

class InstrumentPartyID(StringField):
    """Proxy of C++ FIX::InstrumentPartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentPartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentPartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InstrumentPartyID self) -> InstrumentPartyID
        __init__(FIX::InstrumentPartyID self, FIX::STRING const & value) -> InstrumentPartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_InstrumentPartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InstrumentPartyID
    __del__ = lambda self: None
InstrumentPartyID_swigregister = _quickfix.InstrumentPartyID_swigregister
InstrumentPartyID_swigregister(InstrumentPartyID)

class TradeVolume(DoubleField):
    """Proxy of C++ FIX::TradeVolume class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeVolume, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeVolume self) -> TradeVolume
        __init__(FIX::TradeVolume self, FIX::QTY const & value) -> TradeVolume

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_TradeVolume(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeVolume
    __del__ = lambda self: None
TradeVolume_swigregister = _quickfix.TradeVolume_swigregister
TradeVolume_swigregister(TradeVolume)

class MDBookType(IntField):
    """Proxy of C++ FIX::MDBookType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDBookType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDBookType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDBookType self) -> MDBookType
        __init__(FIX::MDBookType self, FIX::INT const & value) -> MDBookType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MDBookType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDBookType
    __del__ = lambda self: None
MDBookType_swigregister = _quickfix.MDBookType_swigregister
MDBookType_swigregister(MDBookType)

class MDFeedType(StringField):
    """Proxy of C++ FIX::MDFeedType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDFeedType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDFeedType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDFeedType self) -> MDFeedType
        __init__(FIX::MDFeedType self, FIX::STRING const & value) -> MDFeedType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MDFeedType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDFeedType
    __del__ = lambda self: None
MDFeedType_swigregister = _quickfix.MDFeedType_swigregister
MDFeedType_swigregister(MDFeedType)

class MDPriceLevel(IntField):
    """Proxy of C++ FIX::MDPriceLevel class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDPriceLevel, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDPriceLevel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDPriceLevel self) -> MDPriceLevel
        __init__(FIX::MDPriceLevel self, FIX::INT const & value) -> MDPriceLevel

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MDPriceLevel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDPriceLevel
    __del__ = lambda self: None
MDPriceLevel_swigregister = _quickfix.MDPriceLevel_swigregister
MDPriceLevel_swigregister(MDPriceLevel)

class MDOriginType(IntField):
    """Proxy of C++ FIX::MDOriginType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOriginType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDOriginType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDOriginType self) -> MDOriginType
        __init__(FIX::MDOriginType self, FIX::INT const & value) -> MDOriginType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MDOriginType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDOriginType
    __del__ = lambda self: None
MDOriginType_swigregister = _quickfix.MDOriginType_swigregister
MDOriginType_swigregister(MDOriginType)

class FirstPx(DoubleField):
    """Proxy of C++ FIX::FirstPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirstPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FirstPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FirstPx self) -> FirstPx
        __init__(FIX::FirstPx self, FIX::PRICE const & value) -> FirstPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_FirstPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FirstPx
    __del__ = lambda self: None
FirstPx_swigregister = _quickfix.FirstPx_swigregister
FirstPx_swigregister(FirstPx)

class MDEntrySpotRate(DoubleField):
    """Proxy of C++ FIX::MDEntrySpotRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntrySpotRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntrySpotRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntrySpotRate self) -> MDEntrySpotRate
        __init__(FIX::MDEntrySpotRate self, FIX::FLOAT const & value) -> MDEntrySpotRate

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_MDEntrySpotRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntrySpotRate
    __del__ = lambda self: None
MDEntrySpotRate_swigregister = _quickfix.MDEntrySpotRate_swigregister
MDEntrySpotRate_swigregister(MDEntrySpotRate)

class MDEntryForwardPoints(DoubleField):
    """Proxy of C++ FIX::MDEntryForwardPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDEntryForwardPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDEntryForwardPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDEntryForwardPoints self) -> MDEntryForwardPoints
        __init__(FIX::MDEntryForwardPoints self, FIX::PRICEOFFSET const & value) -> MDEntryForwardPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_MDEntryForwardPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDEntryForwardPoints
    __del__ = lambda self: None
MDEntryForwardPoints_swigregister = _quickfix.MDEntryForwardPoints_swigregister
MDEntryForwardPoints_swigregister(MDEntryForwardPoints)

class ManualOrderIndicator(BoolField):
    """Proxy of C++ FIX::ManualOrderIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ManualOrderIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ManualOrderIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ManualOrderIndicator self) -> ManualOrderIndicator
        __init__(FIX::ManualOrderIndicator self, FIX::BOOLEAN const & value) -> ManualOrderIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_ManualOrderIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ManualOrderIndicator
    __del__ = lambda self: None
ManualOrderIndicator_swigregister = _quickfix.ManualOrderIndicator_swigregister
ManualOrderIndicator_swigregister(ManualOrderIndicator)

class CustDirectedOrder(BoolField):
    """Proxy of C++ FIX::CustDirectedOrder class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustDirectedOrder, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustDirectedOrder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CustDirectedOrder self) -> CustDirectedOrder
        __init__(FIX::CustDirectedOrder self, FIX::BOOLEAN const & value) -> CustDirectedOrder

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_CustDirectedOrder(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CustDirectedOrder
    __del__ = lambda self: None
CustDirectedOrder_swigregister = _quickfix.CustDirectedOrder_swigregister
CustDirectedOrder_swigregister(CustDirectedOrder)

class ReceivedDeptID(StringField):
    """Proxy of C++ FIX::ReceivedDeptID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReceivedDeptID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReceivedDeptID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ReceivedDeptID self) -> ReceivedDeptID
        __init__(FIX::ReceivedDeptID self, FIX::STRING const & value) -> ReceivedDeptID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ReceivedDeptID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ReceivedDeptID
    __del__ = lambda self: None
ReceivedDeptID_swigregister = _quickfix.ReceivedDeptID_swigregister
ReceivedDeptID_swigregister(ReceivedDeptID)

class CustOrderHandlingInst(StringField):
    """Proxy of C++ FIX::CustOrderHandlingInst class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustOrderHandlingInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CustOrderHandlingInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CustOrderHandlingInst self) -> CustOrderHandlingInst
        __init__(FIX::CustOrderHandlingInst self, FIX::MULTIPLESTRINGVALUE const & value) -> CustOrderHandlingInst

        Parameters:
            value: FIX::MULTIPLESTRINGVALUE const &

        """
        this = _quickfix.new_CustOrderHandlingInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CustOrderHandlingInst
    __del__ = lambda self: None
CustOrderHandlingInst_swigregister = _quickfix.CustOrderHandlingInst_swigregister
CustOrderHandlingInst_swigregister(CustOrderHandlingInst)

class OrderHandlingInstSource(IntField):
    """Proxy of C++ FIX::OrderHandlingInstSource class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderHandlingInstSource, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderHandlingInstSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderHandlingInstSource self) -> OrderHandlingInstSource
        __init__(FIX::OrderHandlingInstSource self, FIX::INT const & value) -> OrderHandlingInstSource

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_OrderHandlingInstSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderHandlingInstSource
    __del__ = lambda self: None
OrderHandlingInstSource_swigregister = _quickfix.OrderHandlingInstSource_swigregister
OrderHandlingInstSource_swigregister(OrderHandlingInstSource)

class DeskType(StringField):
    """Proxy of C++ FIX::DeskType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeskType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeskType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeskType self) -> DeskType
        __init__(FIX::DeskType self, FIX::STRING const & value) -> DeskType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DeskType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeskType
    __del__ = lambda self: None
DeskType_swigregister = _quickfix.DeskType_swigregister
DeskType_swigregister(DeskType)

class DeskTypeSource(IntField):
    """Proxy of C++ FIX::DeskTypeSource class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeskTypeSource, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeskTypeSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeskTypeSource self) -> DeskTypeSource
        __init__(FIX::DeskTypeSource self, FIX::INT const & value) -> DeskTypeSource

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DeskTypeSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeskTypeSource
    __del__ = lambda self: None
DeskTypeSource_swigregister = _quickfix.DeskTypeSource_swigregister
DeskTypeSource_swigregister(DeskTypeSource)

class DeskOrderHandlingInst(StringField):
    """Proxy of C++ FIX::DeskOrderHandlingInst class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeskOrderHandlingInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeskOrderHandlingInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DeskOrderHandlingInst self) -> DeskOrderHandlingInst
        __init__(FIX::DeskOrderHandlingInst self, FIX::MULTIPLESTRINGVALUE const & value) -> DeskOrderHandlingInst

        Parameters:
            value: FIX::MULTIPLESTRINGVALUE const &

        """
        this = _quickfix.new_DeskOrderHandlingInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DeskOrderHandlingInst
    __del__ = lambda self: None
DeskOrderHandlingInst_swigregister = _quickfix.DeskOrderHandlingInst_swigregister
DeskOrderHandlingInst_swigregister(DeskOrderHandlingInst)

class ExecAckStatus(CharField):
    """Proxy of C++ FIX::ExecAckStatus class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecAckStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecAckStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecAckStatus self) -> ExecAckStatus
        __init__(FIX::ExecAckStatus self, FIX::CHAR const & value) -> ExecAckStatus

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_ExecAckStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecAckStatus
    __del__ = lambda self: None
ExecAckStatus_swigregister = _quickfix.ExecAckStatus_swigregister
ExecAckStatus_swigregister(ExecAckStatus)

class UnderlyingDeliveryAmount(DoubleField):
    """Proxy of C++ FIX::UnderlyingDeliveryAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingDeliveryAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingDeliveryAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingDeliveryAmount self) -> UnderlyingDeliveryAmount
        __init__(FIX::UnderlyingDeliveryAmount self, FIX::AMT const & value) -> UnderlyingDeliveryAmount

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_UnderlyingDeliveryAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingDeliveryAmount
    __del__ = lambda self: None
UnderlyingDeliveryAmount_swigregister = _quickfix.UnderlyingDeliveryAmount_swigregister
UnderlyingDeliveryAmount_swigregister(UnderlyingDeliveryAmount)

class UnderlyingCapValue(DoubleField):
    """Proxy of C++ FIX::UnderlyingCapValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingCapValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingCapValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingCapValue self) -> UnderlyingCapValue
        __init__(FIX::UnderlyingCapValue self, FIX::AMT const & value) -> UnderlyingCapValue

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_UnderlyingCapValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingCapValue
    __del__ = lambda self: None
UnderlyingCapValue_swigregister = _quickfix.UnderlyingCapValue_swigregister
UnderlyingCapValue_swigregister(UnderlyingCapValue)

class UnderlyingSettlMethod(StringField):
    """Proxy of C++ FIX::UnderlyingSettlMethod class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSettlMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSettlMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSettlMethod self) -> UnderlyingSettlMethod
        __init__(FIX::UnderlyingSettlMethod self, FIX::STRING const & value) -> UnderlyingSettlMethod

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSettlMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlMethod
    __del__ = lambda self: None
UnderlyingSettlMethod_swigregister = _quickfix.UnderlyingSettlMethod_swigregister
UnderlyingSettlMethod_swigregister(UnderlyingSettlMethod)

class SecondaryTradeID(StringField):
    """Proxy of C++ FIX::SecondaryTradeID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryTradeID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryTradeID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryTradeID self) -> SecondaryTradeID
        __init__(FIX::SecondaryTradeID self, FIX::STRING const & value) -> SecondaryTradeID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecondaryTradeID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryTradeID
    __del__ = lambda self: None
SecondaryTradeID_swigregister = _quickfix.SecondaryTradeID_swigregister
SecondaryTradeID_swigregister(SecondaryTradeID)

class FirmTradeID(StringField):
    """Proxy of C++ FIX::FirmTradeID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirmTradeID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FirmTradeID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FirmTradeID self) -> FirmTradeID
        __init__(FIX::FirmTradeID self, FIX::STRING const & value) -> FirmTradeID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_FirmTradeID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FirmTradeID
    __del__ = lambda self: None
FirmTradeID_swigregister = _quickfix.FirmTradeID_swigregister
FirmTradeID_swigregister(FirmTradeID)

class SecondaryFirmTradeID(StringField):
    """Proxy of C++ FIX::SecondaryFirmTradeID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryFirmTradeID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryFirmTradeID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryFirmTradeID self) -> SecondaryFirmTradeID
        __init__(FIX::SecondaryFirmTradeID self, FIX::STRING const & value) -> SecondaryFirmTradeID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecondaryFirmTradeID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryFirmTradeID
    __del__ = lambda self: None
SecondaryFirmTradeID_swigregister = _quickfix.SecondaryFirmTradeID_swigregister
SecondaryFirmTradeID_swigregister(SecondaryFirmTradeID)

class CollApplType(IntField):
    """Proxy of C++ FIX::CollApplType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CollApplType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CollApplType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CollApplType self) -> CollApplType
        __init__(FIX::CollApplType self, FIX::INT const & value) -> CollApplType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_CollApplType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CollApplType
    __del__ = lambda self: None
CollApplType_swigregister = _quickfix.CollApplType_swigregister
CollApplType_swigregister(CollApplType)

class UnderlyingAdjustedQuantity(DoubleField):
    """Proxy of C++ FIX::UnderlyingAdjustedQuantity class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingAdjustedQuantity, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingAdjustedQuantity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingAdjustedQuantity self) -> UnderlyingAdjustedQuantity
        __init__(FIX::UnderlyingAdjustedQuantity self, FIX::QTY const & value) -> UnderlyingAdjustedQuantity

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_UnderlyingAdjustedQuantity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingAdjustedQuantity
    __del__ = lambda self: None
UnderlyingAdjustedQuantity_swigregister = _quickfix.UnderlyingAdjustedQuantity_swigregister
UnderlyingAdjustedQuantity_swigregister(UnderlyingAdjustedQuantity)

class UnderlyingFXRate(DoubleField):
    """Proxy of C++ FIX::UnderlyingFXRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingFXRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingFXRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingFXRate self) -> UnderlyingFXRate
        __init__(FIX::UnderlyingFXRate self, FIX::FLOAT const & value) -> UnderlyingFXRate

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_UnderlyingFXRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingFXRate
    __del__ = lambda self: None
UnderlyingFXRate_swigregister = _quickfix.UnderlyingFXRate_swigregister
UnderlyingFXRate_swigregister(UnderlyingFXRate)

class UnderlyingFXRateCalc(CharField):
    """Proxy of C++ FIX::UnderlyingFXRateCalc class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingFXRateCalc, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingFXRateCalc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingFXRateCalc self) -> UnderlyingFXRateCalc
        __init__(FIX::UnderlyingFXRateCalc self, FIX::CHAR const & value) -> UnderlyingFXRateCalc

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_UnderlyingFXRateCalc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingFXRateCalc
    __del__ = lambda self: None
UnderlyingFXRateCalc_swigregister = _quickfix.UnderlyingFXRateCalc_swigregister
UnderlyingFXRateCalc_swigregister(UnderlyingFXRateCalc)

class AllocPositionEffect(CharField):
    """Proxy of C++ FIX::AllocPositionEffect class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocPositionEffect, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocPositionEffect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocPositionEffect self) -> AllocPositionEffect
        __init__(FIX::AllocPositionEffect self, FIX::CHAR const & value) -> AllocPositionEffect

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_AllocPositionEffect(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocPositionEffect
    __del__ = lambda self: None
AllocPositionEffect_swigregister = _quickfix.AllocPositionEffect_swigregister
AllocPositionEffect_swigregister(AllocPositionEffect)

class DealingCapacity(CharField):
    """Proxy of C++ FIX::DealingCapacity class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DealingCapacity, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DealingCapacity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DealingCapacity self) -> DealingCapacity
        __init__(FIX::DealingCapacity self, FIX::CHAR const & value) -> DealingCapacity

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DealingCapacity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DealingCapacity
    __del__ = lambda self: None
DealingCapacity_swigregister = _quickfix.DealingCapacity_swigregister
DealingCapacity_swigregister(DealingCapacity)

class InstrmtAssignmentMethod(CharField):
    """Proxy of C++ FIX::InstrmtAssignmentMethod class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrmtAssignmentMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstrmtAssignmentMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InstrmtAssignmentMethod self) -> InstrmtAssignmentMethod
        __init__(FIX::InstrmtAssignmentMethod self, FIX::CHAR const & value) -> InstrmtAssignmentMethod

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_InstrmtAssignmentMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InstrmtAssignmentMethod
    __del__ = lambda self: None
InstrmtAssignmentMethod_swigregister = _quickfix.InstrmtAssignmentMethod_swigregister
InstrmtAssignmentMethod_swigregister(InstrmtAssignmentMethod)

class InstrumentPartyIDSource(CharField):
    """Proxy of C++ FIX::InstrumentPartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentPartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentPartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InstrumentPartyIDSource self) -> InstrumentPartyIDSource
        __init__(FIX::InstrumentPartyIDSource self, FIX::CHAR const & value) -> InstrumentPartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_InstrumentPartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InstrumentPartyIDSource
    __del__ = lambda self: None
InstrumentPartyIDSource_swigregister = _quickfix.InstrumentPartyIDSource_swigregister
InstrumentPartyIDSource_swigregister(InstrumentPartyIDSource)

class InstrumentPartyRole(IntField):
    """Proxy of C++ FIX::InstrumentPartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentPartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InstrumentPartyRole self) -> InstrumentPartyRole
        __init__(FIX::InstrumentPartyRole self, FIX::INT const & value) -> InstrumentPartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_InstrumentPartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InstrumentPartyRole
    __del__ = lambda self: None
InstrumentPartyRole_swigregister = _quickfix.InstrumentPartyRole_swigregister
InstrumentPartyRole_swigregister(InstrumentPartyRole)

class NoInstrumentPartySubIDs(IntField):
    """Proxy of C++ FIX::NoInstrumentPartySubIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoInstrumentPartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoInstrumentPartySubIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoInstrumentPartySubIDs self) -> NoInstrumentPartySubIDs
        __init__(FIX::NoInstrumentPartySubIDs self, FIX::NUMINGROUP const & value) -> NoInstrumentPartySubIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoInstrumentPartySubIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoInstrumentPartySubIDs
    __del__ = lambda self: None
NoInstrumentPartySubIDs_swigregister = _quickfix.NoInstrumentPartySubIDs_swigregister
NoInstrumentPartySubIDs_swigregister(NoInstrumentPartySubIDs)

class InstrumentPartySubID(StringField):
    """Proxy of C++ FIX::InstrumentPartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentPartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentPartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InstrumentPartySubID self) -> InstrumentPartySubID
        __init__(FIX::InstrumentPartySubID self, FIX::STRING const & value) -> InstrumentPartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_InstrumentPartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InstrumentPartySubID
    __del__ = lambda self: None
InstrumentPartySubID_swigregister = _quickfix.InstrumentPartySubID_swigregister
InstrumentPartySubID_swigregister(InstrumentPartySubID)

class InstrumentPartySubIDType(IntField):
    """Proxy of C++ FIX::InstrumentPartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentPartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentPartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::InstrumentPartySubIDType self) -> InstrumentPartySubIDType
        __init__(FIX::InstrumentPartySubIDType self, FIX::INT const & value) -> InstrumentPartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_InstrumentPartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_InstrumentPartySubIDType
    __del__ = lambda self: None
InstrumentPartySubIDType_swigregister = _quickfix.InstrumentPartySubIDType_swigregister
InstrumentPartySubIDType_swigregister(InstrumentPartySubIDType)

class PositionCurrency(StringField):
    """Proxy of C++ FIX::PositionCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositionCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PositionCurrency self) -> PositionCurrency
        __init__(FIX::PositionCurrency self, FIX::STRING const & value) -> PositionCurrency

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PositionCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PositionCurrency
    __del__ = lambda self: None
PositionCurrency_swigregister = _quickfix.PositionCurrency_swigregister
PositionCurrency_swigregister(PositionCurrency)

class CalculatedCcyLastQty(DoubleField):
    """Proxy of C++ FIX::CalculatedCcyLastQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalculatedCcyLastQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CalculatedCcyLastQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CalculatedCcyLastQty self) -> CalculatedCcyLastQty
        __init__(FIX::CalculatedCcyLastQty self, FIX::QTY const & value) -> CalculatedCcyLastQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_CalculatedCcyLastQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CalculatedCcyLastQty
    __del__ = lambda self: None
CalculatedCcyLastQty_swigregister = _quickfix.CalculatedCcyLastQty_swigregister
CalculatedCcyLastQty_swigregister(CalculatedCcyLastQty)

class AggressorIndicator(BoolField):
    """Proxy of C++ FIX::AggressorIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AggressorIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AggressorIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AggressorIndicator self) -> AggressorIndicator
        __init__(FIX::AggressorIndicator self, FIX::BOOLEAN const & value) -> AggressorIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_AggressorIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AggressorIndicator
    __del__ = lambda self: None
AggressorIndicator_swigregister = _quickfix.AggressorIndicator_swigregister
AggressorIndicator_swigregister(AggressorIndicator)

class NoUndlyInstrumentParties(IntField):
    """Proxy of C++ FIX::NoUndlyInstrumentParties class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoUndlyInstrumentParties, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoUndlyInstrumentParties, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoUndlyInstrumentParties self) -> NoUndlyInstrumentParties
        __init__(FIX::NoUndlyInstrumentParties self, FIX::NUMINGROUP const & value) -> NoUndlyInstrumentParties

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoUndlyInstrumentParties(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoUndlyInstrumentParties
    __del__ = lambda self: None
NoUndlyInstrumentParties_swigregister = _quickfix.NoUndlyInstrumentParties_swigregister
NoUndlyInstrumentParties_swigregister(NoUndlyInstrumentParties)

class UndlyInstrumentPartyID(StringField):
    """Proxy of C++ FIX::UndlyInstrumentPartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UndlyInstrumentPartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UndlyInstrumentPartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UndlyInstrumentPartyID self) -> UndlyInstrumentPartyID
        __init__(FIX::UndlyInstrumentPartyID self, FIX::STRING const & value) -> UndlyInstrumentPartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UndlyInstrumentPartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UndlyInstrumentPartyID
    __del__ = lambda self: None
UndlyInstrumentPartyID_swigregister = _quickfix.UndlyInstrumentPartyID_swigregister
UndlyInstrumentPartyID_swigregister(UndlyInstrumentPartyID)

class UndlyInstrumentPartyIDSource(CharField):
    """Proxy of C++ FIX::UndlyInstrumentPartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UndlyInstrumentPartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UndlyInstrumentPartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UndlyInstrumentPartyIDSource self) -> UndlyInstrumentPartyIDSource
        __init__(FIX::UndlyInstrumentPartyIDSource self, FIX::CHAR const & value) -> UndlyInstrumentPartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_UndlyInstrumentPartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UndlyInstrumentPartyIDSource
    __del__ = lambda self: None
UndlyInstrumentPartyIDSource_swigregister = _quickfix.UndlyInstrumentPartyIDSource_swigregister
UndlyInstrumentPartyIDSource_swigregister(UndlyInstrumentPartyIDSource)

class UndlyInstrumentPartyRole(IntField):
    """Proxy of C++ FIX::UndlyInstrumentPartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UndlyInstrumentPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UndlyInstrumentPartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UndlyInstrumentPartyRole self) -> UndlyInstrumentPartyRole
        __init__(FIX::UndlyInstrumentPartyRole self, FIX::INT const & value) -> UndlyInstrumentPartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UndlyInstrumentPartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UndlyInstrumentPartyRole
    __del__ = lambda self: None
UndlyInstrumentPartyRole_swigregister = _quickfix.UndlyInstrumentPartyRole_swigregister
UndlyInstrumentPartyRole_swigregister(UndlyInstrumentPartyRole)

class NoUndlyInstrumentPartySubIDs(IntField):
    """Proxy of C++ FIX::NoUndlyInstrumentPartySubIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoUndlyInstrumentPartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoUndlyInstrumentPartySubIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoUndlyInstrumentPartySubIDs self) -> NoUndlyInstrumentPartySubIDs
        __init__(FIX::NoUndlyInstrumentPartySubIDs self, FIX::NUMINGROUP const & value) -> NoUndlyInstrumentPartySubIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoUndlyInstrumentPartySubIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoUndlyInstrumentPartySubIDs
    __del__ = lambda self: None
NoUndlyInstrumentPartySubIDs_swigregister = _quickfix.NoUndlyInstrumentPartySubIDs_swigregister
NoUndlyInstrumentPartySubIDs_swigregister(NoUndlyInstrumentPartySubIDs)

class UndlyInstrumentPartySubID(StringField):
    """Proxy of C++ FIX::UndlyInstrumentPartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UndlyInstrumentPartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UndlyInstrumentPartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UndlyInstrumentPartySubID self) -> UndlyInstrumentPartySubID
        __init__(FIX::UndlyInstrumentPartySubID self, FIX::STRING const & value) -> UndlyInstrumentPartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UndlyInstrumentPartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UndlyInstrumentPartySubID
    __del__ = lambda self: None
UndlyInstrumentPartySubID_swigregister = _quickfix.UndlyInstrumentPartySubID_swigregister
UndlyInstrumentPartySubID_swigregister(UndlyInstrumentPartySubID)

class UndlyInstrumentPartySubIDType(IntField):
    """Proxy of C++ FIX::UndlyInstrumentPartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UndlyInstrumentPartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UndlyInstrumentPartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UndlyInstrumentPartySubIDType self) -> UndlyInstrumentPartySubIDType
        __init__(FIX::UndlyInstrumentPartySubIDType self, FIX::INT const & value) -> UndlyInstrumentPartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UndlyInstrumentPartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UndlyInstrumentPartySubIDType
    __del__ = lambda self: None
UndlyInstrumentPartySubIDType_swigregister = _quickfix.UndlyInstrumentPartySubIDType_swigregister
UndlyInstrumentPartySubIDType_swigregister(UndlyInstrumentPartySubIDType)

class BidSwapPoints(DoubleField):
    """Proxy of C++ FIX::BidSwapPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidSwapPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidSwapPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::BidSwapPoints self) -> BidSwapPoints
        __init__(FIX::BidSwapPoints self, FIX::PRICEOFFSET const & value) -> BidSwapPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_BidSwapPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_BidSwapPoints
    __del__ = lambda self: None
BidSwapPoints_swigregister = _quickfix.BidSwapPoints_swigregister
BidSwapPoints_swigregister(BidSwapPoints)

class OfferSwapPoints(DoubleField):
    """Proxy of C++ FIX::OfferSwapPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferSwapPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferSwapPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OfferSwapPoints self) -> OfferSwapPoints
        __init__(FIX::OfferSwapPoints self, FIX::PRICEOFFSET const & value) -> OfferSwapPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_OfferSwapPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OfferSwapPoints
    __del__ = lambda self: None
OfferSwapPoints_swigregister = _quickfix.OfferSwapPoints_swigregister
OfferSwapPoints_swigregister(OfferSwapPoints)

class LegBidForwardPoints(DoubleField):
    """Proxy of C++ FIX::LegBidForwardPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegBidForwardPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegBidForwardPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegBidForwardPoints self) -> LegBidForwardPoints
        __init__(FIX::LegBidForwardPoints self, FIX::PRICEOFFSET const & value) -> LegBidForwardPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_LegBidForwardPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegBidForwardPoints
    __del__ = lambda self: None
LegBidForwardPoints_swigregister = _quickfix.LegBidForwardPoints_swigregister
LegBidForwardPoints_swigregister(LegBidForwardPoints)

class LegOfferForwardPoints(DoubleField):
    """Proxy of C++ FIX::LegOfferForwardPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegOfferForwardPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegOfferForwardPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegOfferForwardPoints self) -> LegOfferForwardPoints
        __init__(FIX::LegOfferForwardPoints self, FIX::PRICEOFFSET const & value) -> LegOfferForwardPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_LegOfferForwardPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegOfferForwardPoints
    __del__ = lambda self: None
LegOfferForwardPoints_swigregister = _quickfix.LegOfferForwardPoints_swigregister
LegOfferForwardPoints_swigregister(LegOfferForwardPoints)

class SwapPoints(DoubleField):
    """Proxy of C++ FIX::SwapPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwapPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SwapPoints self) -> SwapPoints
        __init__(FIX::SwapPoints self, FIX::PRICEOFFSET const & value) -> SwapPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_SwapPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SwapPoints
    __del__ = lambda self: None
SwapPoints_swigregister = _quickfix.SwapPoints_swigregister
SwapPoints_swigregister(SwapPoints)

class MDQuoteType(IntField):
    """Proxy of C++ FIX::MDQuoteType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDQuoteType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDQuoteType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDQuoteType self) -> MDQuoteType
        __init__(FIX::MDQuoteType self, FIX::INT const & value) -> MDQuoteType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MDQuoteType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDQuoteType
    __del__ = lambda self: None
MDQuoteType_swigregister = _quickfix.MDQuoteType_swigregister
MDQuoteType_swigregister(MDQuoteType)

class LastSwapPoints(DoubleField):
    """Proxy of C++ FIX::LastSwapPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LastSwapPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LastSwapPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LastSwapPoints self) -> LastSwapPoints
        __init__(FIX::LastSwapPoints self, FIX::PRICEOFFSET const & value) -> LastSwapPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_LastSwapPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LastSwapPoints
    __del__ = lambda self: None
LastSwapPoints_swigregister = _quickfix.LastSwapPoints_swigregister
LastSwapPoints_swigregister(LastSwapPoints)

class SideGrossTradeAmt(DoubleField):
    """Proxy of C++ FIX::SideGrossTradeAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideGrossTradeAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideGrossTradeAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideGrossTradeAmt self) -> SideGrossTradeAmt
        __init__(FIX::SideGrossTradeAmt self, FIX::AMT const & value) -> SideGrossTradeAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_SideGrossTradeAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideGrossTradeAmt
    __del__ = lambda self: None
SideGrossTradeAmt_swigregister = _quickfix.SideGrossTradeAmt_swigregister
SideGrossTradeAmt_swigregister(SideGrossTradeAmt)

class LegLastForwardPoints(DoubleField):
    """Proxy of C++ FIX::LegLastForwardPoints class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegLastForwardPoints, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegLastForwardPoints, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegLastForwardPoints self) -> LegLastForwardPoints
        __init__(FIX::LegLastForwardPoints self, FIX::PRICEOFFSET const & value) -> LegLastForwardPoints

        Parameters:
            value: FIX::PRICEOFFSET const &

        """
        this = _quickfix.new_LegLastForwardPoints(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegLastForwardPoints
    __del__ = lambda self: None
LegLastForwardPoints_swigregister = _quickfix.LegLastForwardPoints_swigregister
LegLastForwardPoints_swigregister(LegLastForwardPoints)

class LegCalculatedCcyLastQty(DoubleField):
    """Proxy of C++ FIX::LegCalculatedCcyLastQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCalculatedCcyLastQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegCalculatedCcyLastQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegCalculatedCcyLastQty self) -> LegCalculatedCcyLastQty
        __init__(FIX::LegCalculatedCcyLastQty self, FIX::QTY const & value) -> LegCalculatedCcyLastQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LegCalculatedCcyLastQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegCalculatedCcyLastQty
    __del__ = lambda self: None
LegCalculatedCcyLastQty_swigregister = _quickfix.LegCalculatedCcyLastQty_swigregister
LegCalculatedCcyLastQty_swigregister(LegCalculatedCcyLastQty)

class LegGrossTradeAmt(DoubleField):
    """Proxy of C++ FIX::LegGrossTradeAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegGrossTradeAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegGrossTradeAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegGrossTradeAmt self) -> LegGrossTradeAmt
        __init__(FIX::LegGrossTradeAmt self, FIX::AMT const & value) -> LegGrossTradeAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_LegGrossTradeAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegGrossTradeAmt
    __del__ = lambda self: None
LegGrossTradeAmt_swigregister = _quickfix.LegGrossTradeAmt_swigregister
LegGrossTradeAmt_swigregister(LegGrossTradeAmt)

class MaturityTime(StringField):
    """Proxy of C++ FIX::MaturityTime class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityTime, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaturityTime self) -> MaturityTime
        __init__(FIX::MaturityTime self, FIX::TZTIMEONLY const & value) -> MaturityTime

        Parameters:
            value: FIX::TZTIMEONLY const &

        """
        this = _quickfix.new_MaturityTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaturityTime
    __del__ = lambda self: None
MaturityTime_swigregister = _quickfix.MaturityTime_swigregister
MaturityTime_swigregister(MaturityTime)

class RefOrderID(StringField):
    """Proxy of C++ FIX::RefOrderID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefOrderID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefOrderID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefOrderID self) -> RefOrderID
        __init__(FIX::RefOrderID self, FIX::STRING const & value) -> RefOrderID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RefOrderID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefOrderID
    __del__ = lambda self: None
RefOrderID_swigregister = _quickfix.RefOrderID_swigregister
RefOrderID_swigregister(RefOrderID)

class RefOrderIDSource(CharField):
    """Proxy of C++ FIX::RefOrderIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefOrderIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefOrderIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefOrderIDSource self) -> RefOrderIDSource
        __init__(FIX::RefOrderIDSource self, FIX::CHAR const & value) -> RefOrderIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_RefOrderIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefOrderIDSource
    __del__ = lambda self: None
RefOrderIDSource_swigregister = _quickfix.RefOrderIDSource_swigregister
RefOrderIDSource_swigregister(RefOrderIDSource)

class SecondaryDisplayQty(DoubleField):
    """Proxy of C++ FIX::SecondaryDisplayQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryDisplayQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryDisplayQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryDisplayQty self) -> SecondaryDisplayQty
        __init__(FIX::SecondaryDisplayQty self, FIX::QTY const & value) -> SecondaryDisplayQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_SecondaryDisplayQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryDisplayQty
    __del__ = lambda self: None
SecondaryDisplayQty_swigregister = _quickfix.SecondaryDisplayQty_swigregister
SecondaryDisplayQty_swigregister(SecondaryDisplayQty)

class DisplayWhen(CharField):
    """Proxy of C++ FIX::DisplayWhen class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayWhen, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayWhen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DisplayWhen self) -> DisplayWhen
        __init__(FIX::DisplayWhen self, FIX::CHAR const & value) -> DisplayWhen

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DisplayWhen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DisplayWhen
    __del__ = lambda self: None
DisplayWhen_swigregister = _quickfix.DisplayWhen_swigregister
DisplayWhen_swigregister(DisplayWhen)

class DisplayMethod(CharField):
    """Proxy of C++ FIX::DisplayMethod class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DisplayMethod self) -> DisplayMethod
        __init__(FIX::DisplayMethod self, FIX::CHAR const & value) -> DisplayMethod

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DisplayMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DisplayMethod
    __del__ = lambda self: None
DisplayMethod_swigregister = _quickfix.DisplayMethod_swigregister
DisplayMethod_swigregister(DisplayMethod)

class DisplayLowQty(DoubleField):
    """Proxy of C++ FIX::DisplayLowQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayLowQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayLowQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DisplayLowQty self) -> DisplayLowQty
        __init__(FIX::DisplayLowQty self, FIX::QTY const & value) -> DisplayLowQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_DisplayLowQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DisplayLowQty
    __del__ = lambda self: None
DisplayLowQty_swigregister = _quickfix.DisplayLowQty_swigregister
DisplayLowQty_swigregister(DisplayLowQty)

class DisplayHighQty(DoubleField):
    """Proxy of C++ FIX::DisplayHighQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayHighQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayHighQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DisplayHighQty self) -> DisplayHighQty
        __init__(FIX::DisplayHighQty self, FIX::QTY const & value) -> DisplayHighQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_DisplayHighQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DisplayHighQty
    __del__ = lambda self: None
DisplayHighQty_swigregister = _quickfix.DisplayHighQty_swigregister
DisplayHighQty_swigregister(DisplayHighQty)

class DisplayMinIncr(DoubleField):
    """Proxy of C++ FIX::DisplayMinIncr class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayMinIncr, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayMinIncr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DisplayMinIncr self) -> DisplayMinIncr
        __init__(FIX::DisplayMinIncr self, FIX::QTY const & value) -> DisplayMinIncr

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_DisplayMinIncr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DisplayMinIncr
    __del__ = lambda self: None
DisplayMinIncr_swigregister = _quickfix.DisplayMinIncr_swigregister
DisplayMinIncr_swigregister(DisplayMinIncr)

class RefreshQty(DoubleField):
    """Proxy of C++ FIX::RefreshQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefreshQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefreshQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefreshQty self) -> RefreshQty
        __init__(FIX::RefreshQty self, FIX::QTY const & value) -> RefreshQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_RefreshQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefreshQty
    __del__ = lambda self: None
RefreshQty_swigregister = _quickfix.RefreshQty_swigregister
RefreshQty_swigregister(RefreshQty)

class MatchIncrement(DoubleField):
    """Proxy of C++ FIX::MatchIncrement class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchIncrement, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatchIncrement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MatchIncrement self) -> MatchIncrement
        __init__(FIX::MatchIncrement self, FIX::QTY const & value) -> MatchIncrement

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MatchIncrement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MatchIncrement
    __del__ = lambda self: None
MatchIncrement_swigregister = _quickfix.MatchIncrement_swigregister
MatchIncrement_swigregister(MatchIncrement)

class MaxPriceLevels(IntField):
    """Proxy of C++ FIX::MaxPriceLevels class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxPriceLevels, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxPriceLevels, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaxPriceLevels self) -> MaxPriceLevels
        __init__(FIX::MaxPriceLevels self, FIX::INT const & value) -> MaxPriceLevels

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MaxPriceLevels(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaxPriceLevels
    __del__ = lambda self: None
MaxPriceLevels_swigregister = _quickfix.MaxPriceLevels_swigregister
MaxPriceLevels_swigregister(MaxPriceLevels)

class PreTradeAnonymity(BoolField):
    """Proxy of C++ FIX::PreTradeAnonymity class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PreTradeAnonymity, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PreTradeAnonymity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PreTradeAnonymity self) -> PreTradeAnonymity
        __init__(FIX::PreTradeAnonymity self, FIX::BOOLEAN const & value) -> PreTradeAnonymity

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_PreTradeAnonymity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PreTradeAnonymity
    __del__ = lambda self: None
PreTradeAnonymity_swigregister = _quickfix.PreTradeAnonymity_swigregister
PreTradeAnonymity_swigregister(PreTradeAnonymity)

class PriceProtectionScope(CharField):
    """Proxy of C++ FIX::PriceProtectionScope class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceProtectionScope, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriceProtectionScope, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriceProtectionScope self) -> PriceProtectionScope
        __init__(FIX::PriceProtectionScope self, FIX::CHAR const & value) -> PriceProtectionScope

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_PriceProtectionScope(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriceProtectionScope
    __del__ = lambda self: None
PriceProtectionScope_swigregister = _quickfix.PriceProtectionScope_swigregister
PriceProtectionScope_swigregister(PriceProtectionScope)

class LotType(CharField):
    """Proxy of C++ FIX::LotType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LotType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LotType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LotType self) -> LotType
        __init__(FIX::LotType self, FIX::CHAR const & value) -> LotType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_LotType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LotType
    __del__ = lambda self: None
LotType_swigregister = _quickfix.LotType_swigregister
LotType_swigregister(LotType)

class PegPriceType(IntField):
    """Proxy of C++ FIX::PegPriceType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegPriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegPriceType self) -> PegPriceType
        __init__(FIX::PegPriceType self, FIX::INT const & value) -> PegPriceType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PegPriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegPriceType
    __del__ = lambda self: None
PegPriceType_swigregister = _quickfix.PegPriceType_swigregister
PegPriceType_swigregister(PegPriceType)

class PeggedRefPrice(DoubleField):
    """Proxy of C++ FIX::PeggedRefPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PeggedRefPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PeggedRefPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PeggedRefPrice self) -> PeggedRefPrice
        __init__(FIX::PeggedRefPrice self, FIX::PRICE const & value) -> PeggedRefPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_PeggedRefPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PeggedRefPrice
    __del__ = lambda self: None
PeggedRefPrice_swigregister = _quickfix.PeggedRefPrice_swigregister
PeggedRefPrice_swigregister(PeggedRefPrice)

class PegSecurityIDSource(StringField):
    """Proxy of C++ FIX::PegSecurityIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegSecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegSecurityIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegSecurityIDSource self) -> PegSecurityIDSource
        __init__(FIX::PegSecurityIDSource self, FIX::STRING const & value) -> PegSecurityIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PegSecurityIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegSecurityIDSource
    __del__ = lambda self: None
PegSecurityIDSource_swigregister = _quickfix.PegSecurityIDSource_swigregister
PegSecurityIDSource_swigregister(PegSecurityIDSource)

class PegSecurityID(StringField):
    """Proxy of C++ FIX::PegSecurityID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegSecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegSecurityID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegSecurityID self) -> PegSecurityID
        __init__(FIX::PegSecurityID self, FIX::STRING const & value) -> PegSecurityID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PegSecurityID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegSecurityID
    __del__ = lambda self: None
PegSecurityID_swigregister = _quickfix.PegSecurityID_swigregister
PegSecurityID_swigregister(PegSecurityID)

class PegSymbol(StringField):
    """Proxy of C++ FIX::PegSymbol class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegSymbol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegSymbol self) -> PegSymbol
        __init__(FIX::PegSymbol self, FIX::STRING const & value) -> PegSymbol

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PegSymbol(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegSymbol
    __del__ = lambda self: None
PegSymbol_swigregister = _quickfix.PegSymbol_swigregister
PegSymbol_swigregister(PegSymbol)

class PegSecurityDesc(StringField):
    """Proxy of C++ FIX::PegSecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PegSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PegSecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PegSecurityDesc self) -> PegSecurityDesc
        __init__(FIX::PegSecurityDesc self, FIX::STRING const & value) -> PegSecurityDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PegSecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PegSecurityDesc
    __del__ = lambda self: None
PegSecurityDesc_swigregister = _quickfix.PegSecurityDesc_swigregister
PegSecurityDesc_swigregister(PegSecurityDesc)

class TriggerType(CharField):
    """Proxy of C++ FIX::TriggerType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerType self) -> TriggerType
        __init__(FIX::TriggerType self, FIX::CHAR const & value) -> TriggerType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TriggerType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerType
    __del__ = lambda self: None
TriggerType_swigregister = _quickfix.TriggerType_swigregister
TriggerType_swigregister(TriggerType)

class TriggerAction(CharField):
    """Proxy of C++ FIX::TriggerAction class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerAction, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerAction self) -> TriggerAction
        __init__(FIX::TriggerAction self, FIX::CHAR const & value) -> TriggerAction

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TriggerAction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerAction
    __del__ = lambda self: None
TriggerAction_swigregister = _quickfix.TriggerAction_swigregister
TriggerAction_swigregister(TriggerAction)

class TriggerPrice(DoubleField):
    """Proxy of C++ FIX::TriggerPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerPrice self) -> TriggerPrice
        __init__(FIX::TriggerPrice self, FIX::PRICE const & value) -> TriggerPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_TriggerPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerPrice
    __del__ = lambda self: None
TriggerPrice_swigregister = _quickfix.TriggerPrice_swigregister
TriggerPrice_swigregister(TriggerPrice)

class TriggerSymbol(StringField):
    """Proxy of C++ FIX::TriggerSymbol class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerSymbol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerSymbol self) -> TriggerSymbol
        __init__(FIX::TriggerSymbol self, FIX::STRING const & value) -> TriggerSymbol

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TriggerSymbol(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerSymbol
    __del__ = lambda self: None
TriggerSymbol_swigregister = _quickfix.TriggerSymbol_swigregister
TriggerSymbol_swigregister(TriggerSymbol)

class TriggerSecurityID(StringField):
    """Proxy of C++ FIX::TriggerSecurityID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerSecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerSecurityID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerSecurityID self) -> TriggerSecurityID
        __init__(FIX::TriggerSecurityID self, FIX::STRING const & value) -> TriggerSecurityID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TriggerSecurityID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerSecurityID
    __del__ = lambda self: None
TriggerSecurityID_swigregister = _quickfix.TriggerSecurityID_swigregister
TriggerSecurityID_swigregister(TriggerSecurityID)

class TriggerSecurityIDSource(StringField):
    """Proxy of C++ FIX::TriggerSecurityIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerSecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerSecurityIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerSecurityIDSource self) -> TriggerSecurityIDSource
        __init__(FIX::TriggerSecurityIDSource self, FIX::STRING const & value) -> TriggerSecurityIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TriggerSecurityIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerSecurityIDSource
    __del__ = lambda self: None
TriggerSecurityIDSource_swigregister = _quickfix.TriggerSecurityIDSource_swigregister
TriggerSecurityIDSource_swigregister(TriggerSecurityIDSource)

class TriggerSecurityDesc(StringField):
    """Proxy of C++ FIX::TriggerSecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerSecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerSecurityDesc self) -> TriggerSecurityDesc
        __init__(FIX::TriggerSecurityDesc self, FIX::STRING const & value) -> TriggerSecurityDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TriggerSecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerSecurityDesc
    __del__ = lambda self: None
TriggerSecurityDesc_swigregister = _quickfix.TriggerSecurityDesc_swigregister
TriggerSecurityDesc_swigregister(TriggerSecurityDesc)

class TriggerPriceType(CharField):
    """Proxy of C++ FIX::TriggerPriceType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerPriceType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerPriceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerPriceType self) -> TriggerPriceType
        __init__(FIX::TriggerPriceType self, FIX::CHAR const & value) -> TriggerPriceType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TriggerPriceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerPriceType
    __del__ = lambda self: None
TriggerPriceType_swigregister = _quickfix.TriggerPriceType_swigregister
TriggerPriceType_swigregister(TriggerPriceType)

class TriggerPriceTypeScope(CharField):
    """Proxy of C++ FIX::TriggerPriceTypeScope class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerPriceTypeScope, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerPriceTypeScope, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerPriceTypeScope self) -> TriggerPriceTypeScope
        __init__(FIX::TriggerPriceTypeScope self, FIX::CHAR const & value) -> TriggerPriceTypeScope

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TriggerPriceTypeScope(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerPriceTypeScope
    __del__ = lambda self: None
TriggerPriceTypeScope_swigregister = _quickfix.TriggerPriceTypeScope_swigregister
TriggerPriceTypeScope_swigregister(TriggerPriceTypeScope)

class TriggerPriceDirection(CharField):
    """Proxy of C++ FIX::TriggerPriceDirection class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerPriceDirection, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerPriceDirection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerPriceDirection self) -> TriggerPriceDirection
        __init__(FIX::TriggerPriceDirection self, FIX::CHAR const & value) -> TriggerPriceDirection

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TriggerPriceDirection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerPriceDirection
    __del__ = lambda self: None
TriggerPriceDirection_swigregister = _quickfix.TriggerPriceDirection_swigregister
TriggerPriceDirection_swigregister(TriggerPriceDirection)

class TriggerNewPrice(DoubleField):
    """Proxy of C++ FIX::TriggerNewPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerNewPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerNewPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerNewPrice self) -> TriggerNewPrice
        __init__(FIX::TriggerNewPrice self, FIX::PRICE const & value) -> TriggerNewPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_TriggerNewPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerNewPrice
    __del__ = lambda self: None
TriggerNewPrice_swigregister = _quickfix.TriggerNewPrice_swigregister
TriggerNewPrice_swigregister(TriggerNewPrice)

class TriggerOrderType(CharField):
    """Proxy of C++ FIX::TriggerOrderType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerOrderType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerOrderType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerOrderType self) -> TriggerOrderType
        __init__(FIX::TriggerOrderType self, FIX::CHAR const & value) -> TriggerOrderType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TriggerOrderType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerOrderType
    __del__ = lambda self: None
TriggerOrderType_swigregister = _quickfix.TriggerOrderType_swigregister
TriggerOrderType_swigregister(TriggerOrderType)

class TriggerNewQty(DoubleField):
    """Proxy of C++ FIX::TriggerNewQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerNewQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerNewQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerNewQty self) -> TriggerNewQty
        __init__(FIX::TriggerNewQty self, FIX::QTY const & value) -> TriggerNewQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_TriggerNewQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerNewQty
    __del__ = lambda self: None
TriggerNewQty_swigregister = _quickfix.TriggerNewQty_swigregister
TriggerNewQty_swigregister(TriggerNewQty)

class TriggerTradingSessionID(StringField):
    """Proxy of C++ FIX::TriggerTradingSessionID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerTradingSessionID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerTradingSessionID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerTradingSessionID self) -> TriggerTradingSessionID
        __init__(FIX::TriggerTradingSessionID self, FIX::STRING const & value) -> TriggerTradingSessionID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TriggerTradingSessionID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerTradingSessionID
    __del__ = lambda self: None
TriggerTradingSessionID_swigregister = _quickfix.TriggerTradingSessionID_swigregister
TriggerTradingSessionID_swigregister(TriggerTradingSessionID)

class TriggerTradingSessionSubID(StringField):
    """Proxy of C++ FIX::TriggerTradingSessionSubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriggerTradingSessionSubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriggerTradingSessionSubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TriggerTradingSessionSubID self) -> TriggerTradingSessionSubID
        __init__(FIX::TriggerTradingSessionSubID self, FIX::STRING const & value) -> TriggerTradingSessionSubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TriggerTradingSessionSubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TriggerTradingSessionSubID
    __del__ = lambda self: None
TriggerTradingSessionSubID_swigregister = _quickfix.TriggerTradingSessionSubID_swigregister
TriggerTradingSessionSubID_swigregister(TriggerTradingSessionSubID)

class OrderCategory(CharField):
    """Proxy of C++ FIX::OrderCategory class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderCategory, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderCategory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderCategory self) -> OrderCategory
        __init__(FIX::OrderCategory self, FIX::CHAR const & value) -> OrderCategory

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_OrderCategory(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderCategory
    __del__ = lambda self: None
OrderCategory_swigregister = _quickfix.OrderCategory_swigregister
OrderCategory_swigregister(OrderCategory)

class NoRootPartyIDs(IntField):
    """Proxy of C++ FIX::NoRootPartyIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRootPartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoRootPartyIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoRootPartyIDs self) -> NoRootPartyIDs
        __init__(FIX::NoRootPartyIDs self, FIX::NUMINGROUP const & value) -> NoRootPartyIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoRootPartyIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoRootPartyIDs
    __del__ = lambda self: None
NoRootPartyIDs_swigregister = _quickfix.NoRootPartyIDs_swigregister
NoRootPartyIDs_swigregister(NoRootPartyIDs)

class RootPartyID(StringField):
    """Proxy of C++ FIX::RootPartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RootPartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RootPartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RootPartyID self) -> RootPartyID
        __init__(FIX::RootPartyID self, FIX::STRING const & value) -> RootPartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RootPartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RootPartyID
    __del__ = lambda self: None
RootPartyID_swigregister = _quickfix.RootPartyID_swigregister
RootPartyID_swigregister(RootPartyID)

class RootPartyIDSource(CharField):
    """Proxy of C++ FIX::RootPartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RootPartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RootPartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RootPartyIDSource self) -> RootPartyIDSource
        __init__(FIX::RootPartyIDSource self, FIX::CHAR const & value) -> RootPartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_RootPartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RootPartyIDSource
    __del__ = lambda self: None
RootPartyIDSource_swigregister = _quickfix.RootPartyIDSource_swigregister
RootPartyIDSource_swigregister(RootPartyIDSource)

class RootPartyRole(IntField):
    """Proxy of C++ FIX::RootPartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RootPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RootPartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RootPartyRole self) -> RootPartyRole
        __init__(FIX::RootPartyRole self, FIX::INT const & value) -> RootPartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RootPartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RootPartyRole
    __del__ = lambda self: None
RootPartyRole_swigregister = _quickfix.RootPartyRole_swigregister
RootPartyRole_swigregister(RootPartyRole)

class NoRootPartySubIDs(IntField):
    """Proxy of C++ FIX::NoRootPartySubIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRootPartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoRootPartySubIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoRootPartySubIDs self) -> NoRootPartySubIDs
        __init__(FIX::NoRootPartySubIDs self, FIX::NUMINGROUP const & value) -> NoRootPartySubIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoRootPartySubIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoRootPartySubIDs
    __del__ = lambda self: None
NoRootPartySubIDs_swigregister = _quickfix.NoRootPartySubIDs_swigregister
NoRootPartySubIDs_swigregister(NoRootPartySubIDs)

class RootPartySubID(StringField):
    """Proxy of C++ FIX::RootPartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RootPartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RootPartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RootPartySubID self) -> RootPartySubID
        __init__(FIX::RootPartySubID self, FIX::STRING const & value) -> RootPartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RootPartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RootPartySubID
    __del__ = lambda self: None
RootPartySubID_swigregister = _quickfix.RootPartySubID_swigregister
RootPartySubID_swigregister(RootPartySubID)

class RootPartySubIDType(IntField):
    """Proxy of C++ FIX::RootPartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RootPartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RootPartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RootPartySubIDType self) -> RootPartySubIDType
        __init__(FIX::RootPartySubIDType self, FIX::INT const & value) -> RootPartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RootPartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RootPartySubIDType
    __del__ = lambda self: None
RootPartySubIDType_swigregister = _quickfix.RootPartySubIDType_swigregister
RootPartySubIDType_swigregister(RootPartySubIDType)

class TradeHandlingInstr(CharField):
    """Proxy of C++ FIX::TradeHandlingInstr class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeHandlingInstr, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeHandlingInstr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradeHandlingInstr self) -> TradeHandlingInstr
        __init__(FIX::TradeHandlingInstr self, FIX::CHAR const & value) -> TradeHandlingInstr

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TradeHandlingInstr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradeHandlingInstr
    __del__ = lambda self: None
TradeHandlingInstr_swigregister = _quickfix.TradeHandlingInstr_swigregister
TradeHandlingInstr_swigregister(TradeHandlingInstr)

class OrigTradeHandlingInstr(CharField):
    """Proxy of C++ FIX::OrigTradeHandlingInstr class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigTradeHandlingInstr, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigTradeHandlingInstr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigTradeHandlingInstr self) -> OrigTradeHandlingInstr
        __init__(FIX::OrigTradeHandlingInstr self, FIX::CHAR const & value) -> OrigTradeHandlingInstr

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_OrigTradeHandlingInstr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigTradeHandlingInstr
    __del__ = lambda self: None
OrigTradeHandlingInstr_swigregister = _quickfix.OrigTradeHandlingInstr_swigregister
OrigTradeHandlingInstr_swigregister(OrigTradeHandlingInstr)

class OrigTradeDate(StringField):
    """Proxy of C++ FIX::OrigTradeDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigTradeDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigTradeDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigTradeDate self) -> OrigTradeDate
        __init__(FIX::OrigTradeDate self, FIX::LOCALMKTDATE const & value) -> OrigTradeDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_OrigTradeDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigTradeDate
    __del__ = lambda self: None
OrigTradeDate_swigregister = _quickfix.OrigTradeDate_swigregister
OrigTradeDate_swigregister(OrigTradeDate)

class OrigTradeID(StringField):
    """Proxy of C++ FIX::OrigTradeID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigTradeID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigTradeID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigTradeID self) -> OrigTradeID
        __init__(FIX::OrigTradeID self, FIX::STRING const & value) -> OrigTradeID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OrigTradeID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigTradeID
    __del__ = lambda self: None
OrigTradeID_swigregister = _quickfix.OrigTradeID_swigregister
OrigTradeID_swigregister(OrigTradeID)

class OrigSecondaryTradeID(StringField):
    """Proxy of C++ FIX::OrigSecondaryTradeID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigSecondaryTradeID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigSecondaryTradeID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigSecondaryTradeID self) -> OrigSecondaryTradeID
        __init__(FIX::OrigSecondaryTradeID self, FIX::STRING const & value) -> OrigSecondaryTradeID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_OrigSecondaryTradeID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigSecondaryTradeID
    __del__ = lambda self: None
OrigSecondaryTradeID_swigregister = _quickfix.OrigSecondaryTradeID_swigregister
OrigSecondaryTradeID_swigregister(OrigSecondaryTradeID)

class TZTransactTime(StringField):
    """Proxy of C++ FIX::TZTransactTime class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TZTransactTime, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TZTransactTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TZTransactTime self) -> TZTransactTime
        __init__(FIX::TZTransactTime self, FIX::TZTIMESTAMP const & value) -> TZTransactTime

        Parameters:
            value: FIX::TZTIMESTAMP const &

        """
        this = _quickfix.new_TZTransactTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TZTransactTime
    __del__ = lambda self: None
TZTransactTime_swigregister = _quickfix.TZTransactTime_swigregister
TZTransactTime_swigregister(TZTransactTime)

class ExDestinationIDSource(CharField):
    """Proxy of C++ FIX::ExDestinationIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExDestinationIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExDestinationIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExDestinationIDSource self) -> ExDestinationIDSource
        __init__(FIX::ExDestinationIDSource self, FIX::CHAR const & value) -> ExDestinationIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_ExDestinationIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExDestinationIDSource
    __del__ = lambda self: None
ExDestinationIDSource_swigregister = _quickfix.ExDestinationIDSource_swigregister
ExDestinationIDSource_swigregister(ExDestinationIDSource)

class ReportedPxDiff(BoolField):
    """Proxy of C++ FIX::ReportedPxDiff class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportedPxDiff, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReportedPxDiff, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ReportedPxDiff self) -> ReportedPxDiff
        __init__(FIX::ReportedPxDiff self, FIX::BOOLEAN const & value) -> ReportedPxDiff

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_ReportedPxDiff(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ReportedPxDiff
    __del__ = lambda self: None
ReportedPxDiff_swigregister = _quickfix.ReportedPxDiff_swigregister
ReportedPxDiff_swigregister(ReportedPxDiff)

class RptSys(StringField):
    """Proxy of C++ FIX::RptSys class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RptSys, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RptSys, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RptSys self) -> RptSys
        __init__(FIX::RptSys self, FIX::STRING const & value) -> RptSys

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RptSys(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RptSys
    __del__ = lambda self: None
RptSys_swigregister = _quickfix.RptSys_swigregister
RptSys_swigregister(RptSys)

class AllocClearingFeeIndicator(StringField):
    """Proxy of C++ FIX::AllocClearingFeeIndicator class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocClearingFeeIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllocClearingFeeIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AllocClearingFeeIndicator self) -> AllocClearingFeeIndicator
        __init__(FIX::AllocClearingFeeIndicator self, FIX::STRING const & value) -> AllocClearingFeeIndicator

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_AllocClearingFeeIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AllocClearingFeeIndicator
    __del__ = lambda self: None
AllocClearingFeeIndicator_swigregister = _quickfix.AllocClearingFeeIndicator_swigregister
AllocClearingFeeIndicator_swigregister(AllocClearingFeeIndicator)

class DisplayQty(DoubleField):
    """Proxy of C++ FIX::DisplayQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DisplayQty self) -> DisplayQty
        __init__(FIX::DisplayQty self, FIX::QTY const & value) -> DisplayQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_DisplayQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DisplayQty
    __del__ = lambda self: None
DisplayQty_swigregister = _quickfix.DisplayQty_swigregister
DisplayQty_swigregister(DisplayQty)

class ExchangeSpecialInstructions(StringField):
    """Proxy of C++ FIX::ExchangeSpecialInstructions class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExchangeSpecialInstructions, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExchangeSpecialInstructions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExchangeSpecialInstructions self) -> ExchangeSpecialInstructions
        __init__(FIX::ExchangeSpecialInstructions self, FIX::STRING const & value) -> ExchangeSpecialInstructions

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ExchangeSpecialInstructions(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExchangeSpecialInstructions
    __del__ = lambda self: None
ExchangeSpecialInstructions_swigregister = _quickfix.ExchangeSpecialInstructions_swigregister
ExchangeSpecialInstructions_swigregister(ExchangeSpecialInstructions)

class ExpirationQtyType(IntField):
    """Proxy of C++ FIX::ExpirationQtyType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpirationQtyType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpirationQtyType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExpirationQtyType self) -> ExpirationQtyType
        __init__(FIX::ExpirationQtyType self, FIX::INT const & value) -> ExpirationQtyType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ExpirationQtyType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExpirationQtyType
    __del__ = lambda self: None
ExpirationQtyType_swigregister = _quickfix.ExpirationQtyType_swigregister
ExpirationQtyType_swigregister(ExpirationQtyType)

class MaxTradeVol(DoubleField):
    """Proxy of C++ FIX::MaxTradeVol class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxTradeVol, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxTradeVol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaxTradeVol self) -> MaxTradeVol
        __init__(FIX::MaxTradeVol self, FIX::QTY const & value) -> MaxTradeVol

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MaxTradeVol(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaxTradeVol
    __del__ = lambda self: None
MaxTradeVol_swigregister = _quickfix.MaxTradeVol_swigregister
MaxTradeVol_swigregister(MaxTradeVol)

class NoMDFeedTypes(IntField):
    """Proxy of C++ FIX::NoMDFeedTypes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMDFeedTypes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoMDFeedTypes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoMDFeedTypes self) -> NoMDFeedTypes
        __init__(FIX::NoMDFeedTypes self, FIX::NUMINGROUP const & value) -> NoMDFeedTypes

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoMDFeedTypes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoMDFeedTypes
    __del__ = lambda self: None
NoMDFeedTypes_swigregister = _quickfix.NoMDFeedTypes_swigregister
NoMDFeedTypes_swigregister(NoMDFeedTypes)

class MatchAlgorithm(StringField):
    """Proxy of C++ FIX::MatchAlgorithm class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatchAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatchAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MatchAlgorithm self) -> MatchAlgorithm
        __init__(FIX::MatchAlgorithm self, FIX::STRING const & value) -> MatchAlgorithm

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MatchAlgorithm(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MatchAlgorithm
    __del__ = lambda self: None
MatchAlgorithm_swigregister = _quickfix.MatchAlgorithm_swigregister
MatchAlgorithm_swigregister(MatchAlgorithm)

class MaxPriceVariation(DoubleField):
    """Proxy of C++ FIX::MaxPriceVariation class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxPriceVariation, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxPriceVariation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaxPriceVariation self) -> MaxPriceVariation
        __init__(FIX::MaxPriceVariation self, FIX::FLOAT const & value) -> MaxPriceVariation

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_MaxPriceVariation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaxPriceVariation
    __del__ = lambda self: None
MaxPriceVariation_swigregister = _quickfix.MaxPriceVariation_swigregister
MaxPriceVariation_swigregister(MaxPriceVariation)

class ImpliedMarketIndicator(IntField):
    """Proxy of C++ FIX::ImpliedMarketIndicator class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImpliedMarketIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImpliedMarketIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ImpliedMarketIndicator self) -> ImpliedMarketIndicator
        __init__(FIX::ImpliedMarketIndicator self, FIX::INT const & value) -> ImpliedMarketIndicator

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ImpliedMarketIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ImpliedMarketIndicator
    __del__ = lambda self: None
ImpliedMarketIndicator_swigregister = _quickfix.ImpliedMarketIndicator_swigregister
ImpliedMarketIndicator_swigregister(ImpliedMarketIndicator)

class EventTime(UtcTimeStampField):
    """Proxy of C++ FIX::EventTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EventTime self) -> EventTime
        __init__(FIX::EventTime self, bool showMilliseconds) -> EventTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::EventTime self, FIX::UTCTIMESTAMP const & value) -> EventTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::EventTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> EventTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_EventTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EventTime
    __del__ = lambda self: None
EventTime_swigregister = _quickfix.EventTime_swigregister
EventTime_swigregister(EventTime)

class MinPriceIncrementAmount(DoubleField):
    """Proxy of C++ FIX::MinPriceIncrementAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinPriceIncrementAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinPriceIncrementAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MinPriceIncrementAmount self) -> MinPriceIncrementAmount
        __init__(FIX::MinPriceIncrementAmount self, FIX::AMT const & value) -> MinPriceIncrementAmount

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_MinPriceIncrementAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MinPriceIncrementAmount
    __del__ = lambda self: None
MinPriceIncrementAmount_swigregister = _quickfix.MinPriceIncrementAmount_swigregister
MinPriceIncrementAmount_swigregister(MinPriceIncrementAmount)

class UnitOfMeasureQty(DoubleField):
    """Proxy of C++ FIX::UnitOfMeasureQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitOfMeasureQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnitOfMeasureQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnitOfMeasureQty self) -> UnitOfMeasureQty
        __init__(FIX::UnitOfMeasureQty self, FIX::QTY const & value) -> UnitOfMeasureQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_UnitOfMeasureQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnitOfMeasureQty
    __del__ = lambda self: None
UnitOfMeasureQty_swigregister = _quickfix.UnitOfMeasureQty_swigregister
UnitOfMeasureQty_swigregister(UnitOfMeasureQty)

class LowLimitPrice(DoubleField):
    """Proxy of C++ FIX::LowLimitPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LowLimitPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LowLimitPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LowLimitPrice self) -> LowLimitPrice
        __init__(FIX::LowLimitPrice self, FIX::PRICE const & value) -> LowLimitPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_LowLimitPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LowLimitPrice
    __del__ = lambda self: None
LowLimitPrice_swigregister = _quickfix.LowLimitPrice_swigregister
LowLimitPrice_swigregister(LowLimitPrice)

class HighLimitPrice(DoubleField):
    """Proxy of C++ FIX::HighLimitPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HighLimitPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HighLimitPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::HighLimitPrice self) -> HighLimitPrice
        __init__(FIX::HighLimitPrice self, FIX::PRICE const & value) -> HighLimitPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_HighLimitPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_HighLimitPrice
    __del__ = lambda self: None
HighLimitPrice_swigregister = _quickfix.HighLimitPrice_swigregister
HighLimitPrice_swigregister(HighLimitPrice)

class TradingReferencePrice(DoubleField):
    """Proxy of C++ FIX::TradingReferencePrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradingReferencePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradingReferencePrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradingReferencePrice self) -> TradingReferencePrice
        __init__(FIX::TradingReferencePrice self, FIX::PRICE const & value) -> TradingReferencePrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_TradingReferencePrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradingReferencePrice
    __del__ = lambda self: None
TradingReferencePrice_swigregister = _quickfix.TradingReferencePrice_swigregister
TradingReferencePrice_swigregister(TradingReferencePrice)

class SecurityGroup(StringField):
    """Proxy of C++ FIX::SecurityGroup class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityGroup self) -> SecurityGroup
        __init__(FIX::SecurityGroup self, FIX::STRING const & value) -> SecurityGroup

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityGroup(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityGroup
    __del__ = lambda self: None
SecurityGroup_swigregister = _quickfix.SecurityGroup_swigregister
SecurityGroup_swigregister(SecurityGroup)

class LegNumber(IntField):
    """Proxy of C++ FIX::LegNumber class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegNumber, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegNumber, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegNumber self) -> LegNumber
        __init__(FIX::LegNumber self, FIX::INT const & value) -> LegNumber

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegNumber(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegNumber
    __del__ = lambda self: None
LegNumber_swigregister = _quickfix.LegNumber_swigregister
LegNumber_swigregister(LegNumber)

class SettlementCycleNo(IntField):
    """Proxy of C++ FIX::SettlementCycleNo class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlementCycleNo, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlementCycleNo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlementCycleNo self) -> SettlementCycleNo
        __init__(FIX::SettlementCycleNo self, FIX::INT const & value) -> SettlementCycleNo

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SettlementCycleNo(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlementCycleNo
    __del__ = lambda self: None
SettlementCycleNo_swigregister = _quickfix.SettlementCycleNo_swigregister
SettlementCycleNo_swigregister(SettlementCycleNo)

class SideCurrency(StringField):
    """Proxy of C++ FIX::SideCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideCurrency self) -> SideCurrency
        __init__(FIX::SideCurrency self, FIX::CURRENCY const & value) -> SideCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_SideCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideCurrency
    __del__ = lambda self: None
SideCurrency_swigregister = _quickfix.SideCurrency_swigregister
SideCurrency_swigregister(SideCurrency)

class SideSettlCurrency(StringField):
    """Proxy of C++ FIX::SideSettlCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideSettlCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideSettlCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideSettlCurrency self) -> SideSettlCurrency
        __init__(FIX::SideSettlCurrency self, FIX::CURRENCY const & value) -> SideSettlCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_SideSettlCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideSettlCurrency
    __del__ = lambda self: None
SideSettlCurrency_swigregister = _quickfix.SideSettlCurrency_swigregister
SideSettlCurrency_swigregister(SideSettlCurrency)

class ApplExtID(IntField):
    """Proxy of C++ FIX::ApplExtID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplExtID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplExtID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplExtID self) -> ApplExtID
        __init__(FIX::ApplExtID self, FIX::INT const & value) -> ApplExtID

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ApplExtID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplExtID
    __del__ = lambda self: None
ApplExtID_swigregister = _quickfix.ApplExtID_swigregister
ApplExtID_swigregister(ApplExtID)

class CcyAmt(DoubleField):
    """Proxy of C++ FIX::CcyAmt class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CcyAmt, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CcyAmt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CcyAmt self) -> CcyAmt
        __init__(FIX::CcyAmt self, FIX::AMT const & value) -> CcyAmt

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_CcyAmt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CcyAmt
    __del__ = lambda self: None
CcyAmt_swigregister = _quickfix.CcyAmt_swigregister
CcyAmt_swigregister(CcyAmt)

class NoSettlDetails(IntField):
    """Proxy of C++ FIX::NoSettlDetails class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSettlDetails, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSettlDetails, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoSettlDetails self) -> NoSettlDetails
        __init__(FIX::NoSettlDetails self, FIX::NUMINGROUP const & value) -> NoSettlDetails

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoSettlDetails(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoSettlDetails
    __del__ = lambda self: None
NoSettlDetails_swigregister = _quickfix.NoSettlDetails_swigregister
NoSettlDetails_swigregister(NoSettlDetails)

class SettlObligMode(IntField):
    """Proxy of C++ FIX::SettlObligMode class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlObligMode, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlObligMode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlObligMode self) -> SettlObligMode
        __init__(FIX::SettlObligMode self, FIX::INT const & value) -> SettlObligMode

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SettlObligMode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlObligMode
    __del__ = lambda self: None
SettlObligMode_swigregister = _quickfix.SettlObligMode_swigregister
SettlObligMode_swigregister(SettlObligMode)

class SettlObligMsgID(StringField):
    """Proxy of C++ FIX::SettlObligMsgID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlObligMsgID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlObligMsgID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlObligMsgID self) -> SettlObligMsgID
        __init__(FIX::SettlObligMsgID self, FIX::STRING const & value) -> SettlObligMsgID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlObligMsgID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlObligMsgID
    __del__ = lambda self: None
SettlObligMsgID_swigregister = _quickfix.SettlObligMsgID_swigregister
SettlObligMsgID_swigregister(SettlObligMsgID)

class SettlObligID(StringField):
    """Proxy of C++ FIX::SettlObligID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlObligID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlObligID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlObligID self) -> SettlObligID
        __init__(FIX::SettlObligID self, FIX::STRING const & value) -> SettlObligID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlObligID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlObligID
    __del__ = lambda self: None
SettlObligID_swigregister = _quickfix.SettlObligID_swigregister
SettlObligID_swigregister(SettlObligID)

class SettlObligTransType(CharField):
    """Proxy of C++ FIX::SettlObligTransType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlObligTransType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlObligTransType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlObligTransType self) -> SettlObligTransType
        __init__(FIX::SettlObligTransType self, FIX::CHAR const & value) -> SettlObligTransType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SettlObligTransType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlObligTransType
    __del__ = lambda self: None
SettlObligTransType_swigregister = _quickfix.SettlObligTransType_swigregister
SettlObligTransType_swigregister(SettlObligTransType)

class SettlObligRefID(StringField):
    """Proxy of C++ FIX::SettlObligRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlObligRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlObligRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlObligRefID self) -> SettlObligRefID
        __init__(FIX::SettlObligRefID self, FIX::STRING const & value) -> SettlObligRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SettlObligRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlObligRefID
    __del__ = lambda self: None
SettlObligRefID_swigregister = _quickfix.SettlObligRefID_swigregister
SettlObligRefID_swigregister(SettlObligRefID)

class SettlObligSource(CharField):
    """Proxy of C++ FIX::SettlObligSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlObligSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlObligSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlObligSource self) -> SettlObligSource
        __init__(FIX::SettlObligSource self, FIX::CHAR const & value) -> SettlObligSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SettlObligSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlObligSource
    __del__ = lambda self: None
SettlObligSource_swigregister = _quickfix.SettlObligSource_swigregister
SettlObligSource_swigregister(SettlObligSource)

class NoSettlOblig(IntField):
    """Proxy of C++ FIX::NoSettlOblig class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoSettlOblig, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoSettlOblig, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoSettlOblig self) -> NoSettlOblig
        __init__(FIX::NoSettlOblig self, FIX::NUMINGROUP const & value) -> NoSettlOblig

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoSettlOblig(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoSettlOblig
    __del__ = lambda self: None
NoSettlOblig_swigregister = _quickfix.NoSettlOblig_swigregister
NoSettlOblig_swigregister(NoSettlOblig)

class QuoteMsgID(StringField):
    """Proxy of C++ FIX::QuoteMsgID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteMsgID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteMsgID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteMsgID self) -> QuoteMsgID
        __init__(FIX::QuoteMsgID self, FIX::STRING const & value) -> QuoteMsgID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_QuoteMsgID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteMsgID
    __del__ = lambda self: None
QuoteMsgID_swigregister = _quickfix.QuoteMsgID_swigregister
QuoteMsgID_swigregister(QuoteMsgID)

class QuoteEntryStatus(IntField):
    """Proxy of C++ FIX::QuoteEntryStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuoteEntryStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuoteEntryStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::QuoteEntryStatus self) -> QuoteEntryStatus
        __init__(FIX::QuoteEntryStatus self, FIX::INT const & value) -> QuoteEntryStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_QuoteEntryStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_QuoteEntryStatus
    __del__ = lambda self: None
QuoteEntryStatus_swigregister = _quickfix.QuoteEntryStatus_swigregister
QuoteEntryStatus_swigregister(QuoteEntryStatus)

class TotNoCxldQuotes(IntField):
    """Proxy of C++ FIX::TotNoCxldQuotes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoCxldQuotes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoCxldQuotes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNoCxldQuotes self) -> TotNoCxldQuotes
        __init__(FIX::TotNoCxldQuotes self, FIX::INT const & value) -> TotNoCxldQuotes

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNoCxldQuotes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNoCxldQuotes
    __del__ = lambda self: None
TotNoCxldQuotes_swigregister = _quickfix.TotNoCxldQuotes_swigregister
TotNoCxldQuotes_swigregister(TotNoCxldQuotes)

class TotNoAccQuotes(IntField):
    """Proxy of C++ FIX::TotNoAccQuotes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoAccQuotes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoAccQuotes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNoAccQuotes self) -> TotNoAccQuotes
        __init__(FIX::TotNoAccQuotes self, FIX::INT const & value) -> TotNoAccQuotes

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNoAccQuotes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNoAccQuotes
    __del__ = lambda self: None
TotNoAccQuotes_swigregister = _quickfix.TotNoAccQuotes_swigregister
TotNoAccQuotes_swigregister(TotNoAccQuotes)

class TotNoRejQuotes(IntField):
    """Proxy of C++ FIX::TotNoRejQuotes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoRejQuotes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoRejQuotes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNoRejQuotes self) -> TotNoRejQuotes
        __init__(FIX::TotNoRejQuotes self, FIX::INT const & value) -> TotNoRejQuotes

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNoRejQuotes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNoRejQuotes
    __del__ = lambda self: None
TotNoRejQuotes_swigregister = _quickfix.TotNoRejQuotes_swigregister
TotNoRejQuotes_swigregister(TotNoRejQuotes)

class PrivateQuote(BoolField):
    """Proxy of C++ FIX::PrivateQuote class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrivateQuote, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PrivateQuote, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PrivateQuote self) -> PrivateQuote
        __init__(FIX::PrivateQuote self, FIX::BOOLEAN const & value) -> PrivateQuote

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_PrivateQuote(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PrivateQuote
    __del__ = lambda self: None
PrivateQuote_swigregister = _quickfix.PrivateQuote_swigregister
PrivateQuote_swigregister(PrivateQuote)

class RespondentType(IntField):
    """Proxy of C++ FIX::RespondentType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RespondentType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RespondentType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RespondentType self) -> RespondentType
        __init__(FIX::RespondentType self, FIX::INT const & value) -> RespondentType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RespondentType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RespondentType
    __del__ = lambda self: None
RespondentType_swigregister = _quickfix.RespondentType_swigregister
RespondentType_swigregister(RespondentType)

class MDSubBookType(IntField):
    """Proxy of C++ FIX::MDSubBookType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSubBookType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDSubBookType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDSubBookType self) -> MDSubBookType
        __init__(FIX::MDSubBookType self, FIX::INT const & value) -> MDSubBookType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MDSubBookType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDSubBookType
    __del__ = lambda self: None
MDSubBookType_swigregister = _quickfix.MDSubBookType_swigregister
MDSubBookType_swigregister(MDSubBookType)

class SecurityTradingEvent(IntField):
    """Proxy of C++ FIX::SecurityTradingEvent class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityTradingEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityTradingEvent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityTradingEvent self) -> SecurityTradingEvent
        __init__(FIX::SecurityTradingEvent self, FIX::INT const & value) -> SecurityTradingEvent

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecurityTradingEvent(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityTradingEvent
    __del__ = lambda self: None
SecurityTradingEvent_swigregister = _quickfix.SecurityTradingEvent_swigregister
SecurityTradingEvent_swigregister(SecurityTradingEvent)

class NoStatsIndicators(IntField):
    """Proxy of C++ FIX::NoStatsIndicators class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoStatsIndicators, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoStatsIndicators, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoStatsIndicators self) -> NoStatsIndicators
        __init__(FIX::NoStatsIndicators self, FIX::NUMINGROUP const & value) -> NoStatsIndicators

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoStatsIndicators(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoStatsIndicators
    __del__ = lambda self: None
NoStatsIndicators_swigregister = _quickfix.NoStatsIndicators_swigregister
NoStatsIndicators_swigregister(NoStatsIndicators)

class StatsType(IntField):
    """Proxy of C++ FIX::StatsType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatsType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatsType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StatsType self) -> StatsType
        __init__(FIX::StatsType self, FIX::INT const & value) -> StatsType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StatsType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StatsType
    __del__ = lambda self: None
StatsType_swigregister = _quickfix.StatsType_swigregister
StatsType_swigregister(StatsType)

class NoOfSecSizes(IntField):
    """Proxy of C++ FIX::NoOfSecSizes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoOfSecSizes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoOfSecSizes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoOfSecSizes self) -> NoOfSecSizes
        __init__(FIX::NoOfSecSizes self, FIX::NUMINGROUP const & value) -> NoOfSecSizes

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoOfSecSizes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoOfSecSizes
    __del__ = lambda self: None
NoOfSecSizes_swigregister = _quickfix.NoOfSecSizes_swigregister
NoOfSecSizes_swigregister(NoOfSecSizes)

class MDSecSizeType(IntField):
    """Proxy of C++ FIX::MDSecSizeType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSecSizeType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDSecSizeType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDSecSizeType self) -> MDSecSizeType
        __init__(FIX::MDSecSizeType self, FIX::INT const & value) -> MDSecSizeType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MDSecSizeType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDSecSizeType
    __del__ = lambda self: None
MDSecSizeType_swigregister = _quickfix.MDSecSizeType_swigregister
MDSecSizeType_swigregister(MDSecSizeType)

class MDSecSize(DoubleField):
    """Proxy of C++ FIX::MDSecSize class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSecSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDSecSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDSecSize self) -> MDSecSize
        __init__(FIX::MDSecSize self, FIX::QTY const & value) -> MDSecSize

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MDSecSize(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDSecSize
    __del__ = lambda self: None
MDSecSize_swigregister = _quickfix.MDSecSize_swigregister
MDSecSize_swigregister(MDSecSize)

class ApplID(StringField):
    """Proxy of C++ FIX::ApplID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplID self) -> ApplID
        __init__(FIX::ApplID self, FIX::STRING const & value) -> ApplID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ApplID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplID
    __del__ = lambda self: None
ApplID_swigregister = _quickfix.ApplID_swigregister
ApplID_swigregister(ApplID)

class ApplSeqNum(IntField):
    """Proxy of C++ FIX::ApplSeqNum class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplSeqNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplSeqNum self) -> ApplSeqNum
        __init__(FIX::ApplSeqNum self, FIX::SEQNUM const & value) -> ApplSeqNum

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_ApplSeqNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplSeqNum
    __del__ = lambda self: None
ApplSeqNum_swigregister = _quickfix.ApplSeqNum_swigregister
ApplSeqNum_swigregister(ApplSeqNum)

class ApplBegSeqNum(IntField):
    """Proxy of C++ FIX::ApplBegSeqNum class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplBegSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplBegSeqNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplBegSeqNum self) -> ApplBegSeqNum
        __init__(FIX::ApplBegSeqNum self, FIX::SEQNUM const & value) -> ApplBegSeqNum

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_ApplBegSeqNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplBegSeqNum
    __del__ = lambda self: None
ApplBegSeqNum_swigregister = _quickfix.ApplBegSeqNum_swigregister
ApplBegSeqNum_swigregister(ApplBegSeqNum)

class ApplEndSeqNum(IntField):
    """Proxy of C++ FIX::ApplEndSeqNum class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplEndSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplEndSeqNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplEndSeqNum self) -> ApplEndSeqNum
        __init__(FIX::ApplEndSeqNum self, FIX::SEQNUM const & value) -> ApplEndSeqNum

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_ApplEndSeqNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplEndSeqNum
    __del__ = lambda self: None
ApplEndSeqNum_swigregister = _quickfix.ApplEndSeqNum_swigregister
ApplEndSeqNum_swigregister(ApplEndSeqNum)

class SecurityXMLLen(IntField):
    """Proxy of C++ FIX::SecurityXMLLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityXMLLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityXMLLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityXMLLen self) -> SecurityXMLLen
        __init__(FIX::SecurityXMLLen self, FIX::LENGTH const & value) -> SecurityXMLLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_SecurityXMLLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityXMLLen
    __del__ = lambda self: None
SecurityXMLLen_swigregister = _quickfix.SecurityXMLLen_swigregister
SecurityXMLLen_swigregister(SecurityXMLLen)

class SecurityXML(StringField):
    """Proxy of C++ FIX::SecurityXML class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityXML, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityXML, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityXML self) -> SecurityXML
        __init__(FIX::SecurityXML self, FIX::XMLDATA const & value) -> SecurityXML

        Parameters:
            value: FIX::XMLDATA const &

        """
        this = _quickfix.new_SecurityXML(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityXML
    __del__ = lambda self: None
SecurityXML_swigregister = _quickfix.SecurityXML_swigregister
SecurityXML_swigregister(SecurityXML)

class SecurityXMLSchema(StringField):
    """Proxy of C++ FIX::SecurityXMLSchema class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityXMLSchema, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityXMLSchema, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityXMLSchema self) -> SecurityXMLSchema
        __init__(FIX::SecurityXMLSchema self, FIX::STRING const & value) -> SecurityXMLSchema

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityXMLSchema(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityXMLSchema
    __del__ = lambda self: None
SecurityXMLSchema_swigregister = _quickfix.SecurityXMLSchema_swigregister
SecurityXMLSchema_swigregister(SecurityXMLSchema)

class RefreshIndicator(BoolField):
    """Proxy of C++ FIX::RefreshIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefreshIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefreshIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefreshIndicator self) -> RefreshIndicator
        __init__(FIX::RefreshIndicator self, FIX::BOOLEAN const & value) -> RefreshIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_RefreshIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefreshIndicator
    __del__ = lambda self: None
RefreshIndicator_swigregister = _quickfix.RefreshIndicator_swigregister
RefreshIndicator_swigregister(RefreshIndicator)

class Volatility(DoubleField):
    """Proxy of C++ FIX::Volatility class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Volatility, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Volatility, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Volatility self) -> Volatility
        __init__(FIX::Volatility self, FIX::FLOAT const & value) -> Volatility

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_Volatility(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Volatility
    __del__ = lambda self: None
Volatility_swigregister = _quickfix.Volatility_swigregister
Volatility_swigregister(Volatility)

class TimeToExpiration(DoubleField):
    """Proxy of C++ FIX::TimeToExpiration class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeToExpiration, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeToExpiration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TimeToExpiration self) -> TimeToExpiration
        __init__(FIX::TimeToExpiration self, FIX::FLOAT const & value) -> TimeToExpiration

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_TimeToExpiration(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TimeToExpiration
    __del__ = lambda self: None
TimeToExpiration_swigregister = _quickfix.TimeToExpiration_swigregister
TimeToExpiration_swigregister(TimeToExpiration)

class RiskFreeRate(DoubleField):
    """Proxy of C++ FIX::RiskFreeRate class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RiskFreeRate, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RiskFreeRate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RiskFreeRate self) -> RiskFreeRate
        __init__(FIX::RiskFreeRate self, FIX::FLOAT const & value) -> RiskFreeRate

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_RiskFreeRate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RiskFreeRate
    __del__ = lambda self: None
RiskFreeRate_swigregister = _quickfix.RiskFreeRate_swigregister
RiskFreeRate_swigregister(RiskFreeRate)

class PriceUnitOfMeasure(StringField):
    """Proxy of C++ FIX::PriceUnitOfMeasure class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceUnitOfMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriceUnitOfMeasure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriceUnitOfMeasure self) -> PriceUnitOfMeasure
        __init__(FIX::PriceUnitOfMeasure self, FIX::STRING const & value) -> PriceUnitOfMeasure

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PriceUnitOfMeasure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriceUnitOfMeasure
    __del__ = lambda self: None
PriceUnitOfMeasure_swigregister = _quickfix.PriceUnitOfMeasure_swigregister
PriceUnitOfMeasure_swigregister(PriceUnitOfMeasure)

class PriceUnitOfMeasureQty(DoubleField):
    """Proxy of C++ FIX::PriceUnitOfMeasureQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceUnitOfMeasureQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriceUnitOfMeasureQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriceUnitOfMeasureQty self) -> PriceUnitOfMeasureQty
        __init__(FIX::PriceUnitOfMeasureQty self, FIX::QTY const & value) -> PriceUnitOfMeasureQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_PriceUnitOfMeasureQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriceUnitOfMeasureQty
    __del__ = lambda self: None
PriceUnitOfMeasureQty_swigregister = _quickfix.PriceUnitOfMeasureQty_swigregister
PriceUnitOfMeasureQty_swigregister(PriceUnitOfMeasureQty)

class SettlMethod(CharField):
    """Proxy of C++ FIX::SettlMethod class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettlMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SettlMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SettlMethod self) -> SettlMethod
        __init__(FIX::SettlMethod self, FIX::CHAR const & value) -> SettlMethod

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_SettlMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SettlMethod
    __del__ = lambda self: None
SettlMethod_swigregister = _quickfix.SettlMethod_swigregister
SettlMethod_swigregister(SettlMethod)

class ExerciseStyle(IntField):
    """Proxy of C++ FIX::ExerciseStyle class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExerciseStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExerciseStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExerciseStyle self) -> ExerciseStyle
        __init__(FIX::ExerciseStyle self, FIX::INT const & value) -> ExerciseStyle

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ExerciseStyle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExerciseStyle
    __del__ = lambda self: None
ExerciseStyle_swigregister = _quickfix.ExerciseStyle_swigregister
ExerciseStyle_swigregister(ExerciseStyle)

class OptPayAmount(DoubleField):
    """Proxy of C++ FIX::OptPayAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptPayAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptPayAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OptPayAmount self) -> OptPayAmount
        __init__(FIX::OptPayAmount self, FIX::AMT const & value) -> OptPayAmount

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_OptPayAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OptPayAmount
    __del__ = lambda self: None
OptPayAmount_swigregister = _quickfix.OptPayAmount_swigregister
OptPayAmount_swigregister(OptPayAmount)

class PriceQuoteMethod(StringField):
    """Proxy of C++ FIX::PriceQuoteMethod class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceQuoteMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriceQuoteMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriceQuoteMethod self) -> PriceQuoteMethod
        __init__(FIX::PriceQuoteMethod self, FIX::STRING const & value) -> PriceQuoteMethod

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_PriceQuoteMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriceQuoteMethod
    __del__ = lambda self: None
PriceQuoteMethod_swigregister = _quickfix.PriceQuoteMethod_swigregister
PriceQuoteMethod_swigregister(PriceQuoteMethod)

class FuturesValuationMethod(StringField):
    """Proxy of C++ FIX::FuturesValuationMethod class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FuturesValuationMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FuturesValuationMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FuturesValuationMethod self) -> FuturesValuationMethod
        __init__(FIX::FuturesValuationMethod self, FIX::STRING const & value) -> FuturesValuationMethod

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_FuturesValuationMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FuturesValuationMethod
    __del__ = lambda self: None
FuturesValuationMethod_swigregister = _quickfix.FuturesValuationMethod_swigregister
FuturesValuationMethod_swigregister(FuturesValuationMethod)

class ListMethod(IntField):
    """Proxy of C++ FIX::ListMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListMethod self) -> ListMethod
        __init__(FIX::ListMethod self, FIX::INT const & value) -> ListMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ListMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListMethod
    __del__ = lambda self: None
ListMethod_swigregister = _quickfix.ListMethod_swigregister
ListMethod_swigregister(ListMethod)

class CapPrice(DoubleField):
    """Proxy of C++ FIX::CapPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CapPrice self) -> CapPrice
        __init__(FIX::CapPrice self, FIX::PRICE const & value) -> CapPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_CapPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CapPrice
    __del__ = lambda self: None
CapPrice_swigregister = _quickfix.CapPrice_swigregister
CapPrice_swigregister(CapPrice)

class FloorPrice(DoubleField):
    """Proxy of C++ FIX::FloorPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloorPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloorPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FloorPrice self) -> FloorPrice
        __init__(FIX::FloorPrice self, FIX::PRICE const & value) -> FloorPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_FloorPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FloorPrice
    __del__ = lambda self: None
FloorPrice_swigregister = _quickfix.FloorPrice_swigregister
FloorPrice_swigregister(FloorPrice)

class NoStrikeRules(IntField):
    """Proxy of C++ FIX::NoStrikeRules class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoStrikeRules, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoStrikeRules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoStrikeRules self) -> NoStrikeRules
        __init__(FIX::NoStrikeRules self, FIX::NUMINGROUP const & value) -> NoStrikeRules

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoStrikeRules(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoStrikeRules
    __del__ = lambda self: None
NoStrikeRules_swigregister = _quickfix.NoStrikeRules_swigregister
NoStrikeRules_swigregister(NoStrikeRules)

class StartStrikePxRange(DoubleField):
    """Proxy of C++ FIX::StartStrikePxRange class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartStrikePxRange, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StartStrikePxRange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StartStrikePxRange self) -> StartStrikePxRange
        __init__(FIX::StartStrikePxRange self, FIX::PRICE const & value) -> StartStrikePxRange

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_StartStrikePxRange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StartStrikePxRange
    __del__ = lambda self: None
StartStrikePxRange_swigregister = _quickfix.StartStrikePxRange_swigregister
StartStrikePxRange_swigregister(StartStrikePxRange)

class EndStrikePxRange(DoubleField):
    """Proxy of C++ FIX::EndStrikePxRange class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndStrikePxRange, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EndStrikePxRange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EndStrikePxRange self) -> EndStrikePxRange
        __init__(FIX::EndStrikePxRange self, FIX::PRICE const & value) -> EndStrikePxRange

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_EndStrikePxRange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EndStrikePxRange
    __del__ = lambda self: None
EndStrikePxRange_swigregister = _quickfix.EndStrikePxRange_swigregister
EndStrikePxRange_swigregister(EndStrikePxRange)

class StrikeIncrement(DoubleField):
    """Proxy of C++ FIX::StrikeIncrement class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeIncrement, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeIncrement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikeIncrement self) -> StrikeIncrement
        __init__(FIX::StrikeIncrement self, FIX::FLOAT const & value) -> StrikeIncrement

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_StrikeIncrement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikeIncrement
    __del__ = lambda self: None
StrikeIncrement_swigregister = _quickfix.StrikeIncrement_swigregister
StrikeIncrement_swigregister(StrikeIncrement)

class NoTickRules(IntField):
    """Proxy of C++ FIX::NoTickRules class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTickRules, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTickRules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoTickRules self) -> NoTickRules
        __init__(FIX::NoTickRules self, FIX::NUMINGROUP const & value) -> NoTickRules

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoTickRules(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoTickRules
    __del__ = lambda self: None
NoTickRules_swigregister = _quickfix.NoTickRules_swigregister
NoTickRules_swigregister(NoTickRules)

class StartTickPriceRange(DoubleField):
    """Proxy of C++ FIX::StartTickPriceRange class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartTickPriceRange, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StartTickPriceRange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StartTickPriceRange self) -> StartTickPriceRange
        __init__(FIX::StartTickPriceRange self, FIX::PRICE const & value) -> StartTickPriceRange

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_StartTickPriceRange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StartTickPriceRange
    __del__ = lambda self: None
StartTickPriceRange_swigregister = _quickfix.StartTickPriceRange_swigregister
StartTickPriceRange_swigregister(StartTickPriceRange)

class EndTickPriceRange(DoubleField):
    """Proxy of C++ FIX::EndTickPriceRange class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndTickPriceRange, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EndTickPriceRange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EndTickPriceRange self) -> EndTickPriceRange
        __init__(FIX::EndTickPriceRange self, FIX::PRICE const & value) -> EndTickPriceRange

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_EndTickPriceRange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EndTickPriceRange
    __del__ = lambda self: None
EndTickPriceRange_swigregister = _quickfix.EndTickPriceRange_swigregister
EndTickPriceRange_swigregister(EndTickPriceRange)

class TickIncrement(DoubleField):
    """Proxy of C++ FIX::TickIncrement class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TickIncrement, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TickIncrement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TickIncrement self) -> TickIncrement
        __init__(FIX::TickIncrement self, FIX::PRICE const & value) -> TickIncrement

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_TickIncrement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TickIncrement
    __del__ = lambda self: None
TickIncrement_swigregister = _quickfix.TickIncrement_swigregister
TickIncrement_swigregister(TickIncrement)

class TickRuleType(IntField):
    """Proxy of C++ FIX::TickRuleType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TickRuleType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TickRuleType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TickRuleType self) -> TickRuleType
        __init__(FIX::TickRuleType self, FIX::INT const & value) -> TickRuleType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TickRuleType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TickRuleType
    __del__ = lambda self: None
TickRuleType_swigregister = _quickfix.TickRuleType_swigregister
TickRuleType_swigregister(TickRuleType)

class NestedInstrAttribType(IntField):
    """Proxy of C++ FIX::NestedInstrAttribType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedInstrAttribType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NestedInstrAttribType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NestedInstrAttribType self) -> NestedInstrAttribType
        __init__(FIX::NestedInstrAttribType self, FIX::INT const & value) -> NestedInstrAttribType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NestedInstrAttribType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NestedInstrAttribType
    __del__ = lambda self: None
NestedInstrAttribType_swigregister = _quickfix.NestedInstrAttribType_swigregister
NestedInstrAttribType_swigregister(NestedInstrAttribType)

class NestedInstrAttribValue(StringField):
    """Proxy of C++ FIX::NestedInstrAttribValue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NestedInstrAttribValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NestedInstrAttribValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NestedInstrAttribValue self) -> NestedInstrAttribValue
        __init__(FIX::NestedInstrAttribValue self, FIX::STRING const & value) -> NestedInstrAttribValue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_NestedInstrAttribValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NestedInstrAttribValue
    __del__ = lambda self: None
NestedInstrAttribValue_swigregister = _quickfix.NestedInstrAttribValue_swigregister
NestedInstrAttribValue_swigregister(NestedInstrAttribValue)

class LegMaturityTime(StringField):
    """Proxy of C++ FIX::LegMaturityTime class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegMaturityTime, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegMaturityTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegMaturityTime self) -> LegMaturityTime
        __init__(FIX::LegMaturityTime self, FIX::TZTIMEONLY const & value) -> LegMaturityTime

        Parameters:
            value: FIX::TZTIMEONLY const &

        """
        this = _quickfix.new_LegMaturityTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegMaturityTime
    __del__ = lambda self: None
LegMaturityTime_swigregister = _quickfix.LegMaturityTime_swigregister
LegMaturityTime_swigregister(LegMaturityTime)

class UnderlyingMaturityTime(StringField):
    """Proxy of C++ FIX::UnderlyingMaturityTime class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingMaturityTime, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingMaturityTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingMaturityTime self) -> UnderlyingMaturityTime
        __init__(FIX::UnderlyingMaturityTime self, FIX::TZTIMEONLY const & value) -> UnderlyingMaturityTime

        Parameters:
            value: FIX::TZTIMEONLY const &

        """
        this = _quickfix.new_UnderlyingMaturityTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingMaturityTime
    __del__ = lambda self: None
UnderlyingMaturityTime_swigregister = _quickfix.UnderlyingMaturityTime_swigregister
UnderlyingMaturityTime_swigregister(UnderlyingMaturityTime)

class DerivativeSymbol(StringField):
    """Proxy of C++ FIX::DerivativeSymbol class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSymbol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSymbol self) -> DerivativeSymbol
        __init__(FIX::DerivativeSymbol self, FIX::STRING const & value) -> DerivativeSymbol

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSymbol(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSymbol
    __del__ = lambda self: None
DerivativeSymbol_swigregister = _quickfix.DerivativeSymbol_swigregister
DerivativeSymbol_swigregister(DerivativeSymbol)

class DerivativeSymbolSfx(StringField):
    """Proxy of C++ FIX::DerivativeSymbolSfx class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSymbolSfx, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSymbolSfx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSymbolSfx self) -> DerivativeSymbolSfx
        __init__(FIX::DerivativeSymbolSfx self, FIX::STRING const & value) -> DerivativeSymbolSfx

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSymbolSfx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSymbolSfx
    __del__ = lambda self: None
DerivativeSymbolSfx_swigregister = _quickfix.DerivativeSymbolSfx_swigregister
DerivativeSymbolSfx_swigregister(DerivativeSymbolSfx)

class DerivativeSecurityID(StringField):
    """Proxy of C++ FIX::DerivativeSecurityID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityID self) -> DerivativeSecurityID
        __init__(FIX::DerivativeSecurityID self, FIX::STRING const & value) -> DerivativeSecurityID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSecurityID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityID
    __del__ = lambda self: None
DerivativeSecurityID_swigregister = _quickfix.DerivativeSecurityID_swigregister
DerivativeSecurityID_swigregister(DerivativeSecurityID)

class DerivativeSecurityIDSource(StringField):
    """Proxy of C++ FIX::DerivativeSecurityIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityIDSource self) -> DerivativeSecurityIDSource
        __init__(FIX::DerivativeSecurityIDSource self, FIX::STRING const & value) -> DerivativeSecurityIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSecurityIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityIDSource
    __del__ = lambda self: None
DerivativeSecurityIDSource_swigregister = _quickfix.DerivativeSecurityIDSource_swigregister
DerivativeSecurityIDSource_swigregister(DerivativeSecurityIDSource)

class NoDerivativeSecurityAltID(IntField):
    """Proxy of C++ FIX::NoDerivativeSecurityAltID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDerivativeSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoDerivativeSecurityAltID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoDerivativeSecurityAltID self) -> NoDerivativeSecurityAltID
        __init__(FIX::NoDerivativeSecurityAltID self, FIX::NUMINGROUP const & value) -> NoDerivativeSecurityAltID

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoDerivativeSecurityAltID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoDerivativeSecurityAltID
    __del__ = lambda self: None
NoDerivativeSecurityAltID_swigregister = _quickfix.NoDerivativeSecurityAltID_swigregister
NoDerivativeSecurityAltID_swigregister(NoDerivativeSecurityAltID)

class DerivativeSecurityAltID(StringField):
    """Proxy of C++ FIX::DerivativeSecurityAltID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityAltID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityAltID self) -> DerivativeSecurityAltID
        __init__(FIX::DerivativeSecurityAltID self, FIX::STRING const & value) -> DerivativeSecurityAltID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSecurityAltID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityAltID
    __del__ = lambda self: None
DerivativeSecurityAltID_swigregister = _quickfix.DerivativeSecurityAltID_swigregister
DerivativeSecurityAltID_swigregister(DerivativeSecurityAltID)

class DerivativeSecurityAltIDSource(StringField):
    """Proxy of C++ FIX::DerivativeSecurityAltIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityAltIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityAltIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityAltIDSource self) -> DerivativeSecurityAltIDSource
        __init__(FIX::DerivativeSecurityAltIDSource self, FIX::STRING const & value) -> DerivativeSecurityAltIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSecurityAltIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityAltIDSource
    __del__ = lambda self: None
DerivativeSecurityAltIDSource_swigregister = _quickfix.DerivativeSecurityAltIDSource_swigregister
DerivativeSecurityAltIDSource_swigregister(DerivativeSecurityAltIDSource)

class SecondaryLowLimitPrice(DoubleField):
    """Proxy of C++ FIX::SecondaryLowLimitPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryLowLimitPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryLowLimitPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryLowLimitPrice self) -> SecondaryLowLimitPrice
        __init__(FIX::SecondaryLowLimitPrice self, FIX::PRICE const & value) -> SecondaryLowLimitPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_SecondaryLowLimitPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryLowLimitPrice
    __del__ = lambda self: None
SecondaryLowLimitPrice_swigregister = _quickfix.SecondaryLowLimitPrice_swigregister
SecondaryLowLimitPrice_swigregister(SecondaryLowLimitPrice)

class MaturityRuleID(StringField):
    """Proxy of C++ FIX::MaturityRuleID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityRuleID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityRuleID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaturityRuleID self) -> MaturityRuleID
        __init__(FIX::MaturityRuleID self, FIX::STRING const & value) -> MaturityRuleID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MaturityRuleID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaturityRuleID
    __del__ = lambda self: None
MaturityRuleID_swigregister = _quickfix.MaturityRuleID_swigregister
MaturityRuleID_swigregister(MaturityRuleID)

class StrikeRuleID(StringField):
    """Proxy of C++ FIX::StrikeRuleID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeRuleID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeRuleID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikeRuleID self) -> StrikeRuleID
        __init__(FIX::StrikeRuleID self, FIX::STRING const & value) -> StrikeRuleID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StrikeRuleID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikeRuleID
    __del__ = lambda self: None
StrikeRuleID_swigregister = _quickfix.StrikeRuleID_swigregister
StrikeRuleID_swigregister(StrikeRuleID)

class LegUnitOfMeasureQty(DoubleField):
    """Proxy of C++ FIX::LegUnitOfMeasureQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegUnitOfMeasureQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegUnitOfMeasureQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegUnitOfMeasureQty self) -> LegUnitOfMeasureQty
        __init__(FIX::LegUnitOfMeasureQty self, FIX::QTY const & value) -> LegUnitOfMeasureQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LegUnitOfMeasureQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegUnitOfMeasureQty
    __del__ = lambda self: None
LegUnitOfMeasureQty_swigregister = _quickfix.LegUnitOfMeasureQty_swigregister
LegUnitOfMeasureQty_swigregister(LegUnitOfMeasureQty)

class DerivativeOptPayAmount(DoubleField):
    """Proxy of C++ FIX::DerivativeOptPayAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeOptPayAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeOptPayAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeOptPayAmount self) -> DerivativeOptPayAmount
        __init__(FIX::DerivativeOptPayAmount self, FIX::AMT const & value) -> DerivativeOptPayAmount

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_DerivativeOptPayAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeOptPayAmount
    __del__ = lambda self: None
DerivativeOptPayAmount_swigregister = _quickfix.DerivativeOptPayAmount_swigregister
DerivativeOptPayAmount_swigregister(DerivativeOptPayAmount)

class EndMaturityMonthYear(StringField):
    """Proxy of C++ FIX::EndMaturityMonthYear class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndMaturityMonthYear, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EndMaturityMonthYear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EndMaturityMonthYear self) -> EndMaturityMonthYear
        __init__(FIX::EndMaturityMonthYear self, FIX::MONTHYEAR const & value) -> EndMaturityMonthYear

        Parameters:
            value: FIX::MONTHYEAR const &

        """
        this = _quickfix.new_EndMaturityMonthYear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EndMaturityMonthYear
    __del__ = lambda self: None
EndMaturityMonthYear_swigregister = _quickfix.EndMaturityMonthYear_swigregister
EndMaturityMonthYear_swigregister(EndMaturityMonthYear)

class ProductComplex(StringField):
    """Proxy of C++ FIX::ProductComplex class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProductComplex, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProductComplex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ProductComplex self) -> ProductComplex
        __init__(FIX::ProductComplex self, FIX::STRING const & value) -> ProductComplex

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ProductComplex(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ProductComplex
    __del__ = lambda self: None
ProductComplex_swigregister = _quickfix.ProductComplex_swigregister
ProductComplex_swigregister(ProductComplex)

class DerivativeProductComplex(StringField):
    """Proxy of C++ FIX::DerivativeProductComplex class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeProductComplex, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeProductComplex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeProductComplex self) -> DerivativeProductComplex
        __init__(FIX::DerivativeProductComplex self, FIX::STRING const & value) -> DerivativeProductComplex

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeProductComplex(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeProductComplex
    __del__ = lambda self: None
DerivativeProductComplex_swigregister = _quickfix.DerivativeProductComplex_swigregister
DerivativeProductComplex_swigregister(DerivativeProductComplex)

class MaturityMonthYearIncrement(IntField):
    """Proxy of C++ FIX::MaturityMonthYearIncrement class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityMonthYearIncrement, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityMonthYearIncrement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaturityMonthYearIncrement self) -> MaturityMonthYearIncrement
        __init__(FIX::MaturityMonthYearIncrement self, FIX::INT const & value) -> MaturityMonthYearIncrement

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MaturityMonthYearIncrement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaturityMonthYearIncrement
    __del__ = lambda self: None
MaturityMonthYearIncrement_swigregister = _quickfix.MaturityMonthYearIncrement_swigregister
MaturityMonthYearIncrement_swigregister(MaturityMonthYearIncrement)

class SecondaryHighLimitPrice(DoubleField):
    """Proxy of C++ FIX::SecondaryHighLimitPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryHighLimitPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryHighLimitPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryHighLimitPrice self) -> SecondaryHighLimitPrice
        __init__(FIX::SecondaryHighLimitPrice self, FIX::PRICE const & value) -> SecondaryHighLimitPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_SecondaryHighLimitPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryHighLimitPrice
    __del__ = lambda self: None
SecondaryHighLimitPrice_swigregister = _quickfix.SecondaryHighLimitPrice_swigregister
SecondaryHighLimitPrice_swigregister(SecondaryHighLimitPrice)

class MinLotSize(DoubleField):
    """Proxy of C++ FIX::MinLotSize class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinLotSize, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinLotSize, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MinLotSize self) -> MinLotSize
        __init__(FIX::MinLotSize self, FIX::QTY const & value) -> MinLotSize

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_MinLotSize(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MinLotSize
    __del__ = lambda self: None
MinLotSize_swigregister = _quickfix.MinLotSize_swigregister
MinLotSize_swigregister(MinLotSize)

class NoExecInstRules(IntField):
    """Proxy of C++ FIX::NoExecInstRules class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoExecInstRules, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoExecInstRules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoExecInstRules self) -> NoExecInstRules
        __init__(FIX::NoExecInstRules self, FIX::NUMINGROUP const & value) -> NoExecInstRules

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoExecInstRules(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoExecInstRules
    __del__ = lambda self: None
NoExecInstRules_swigregister = _quickfix.NoExecInstRules_swigregister
NoExecInstRules_swigregister(NoExecInstRules)

class NoLotTypeRules(IntField):
    """Proxy of C++ FIX::NoLotTypeRules class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoLotTypeRules, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoLotTypeRules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoLotTypeRules self) -> NoLotTypeRules
        __init__(FIX::NoLotTypeRules self, FIX::NUMINGROUP const & value) -> NoLotTypeRules

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoLotTypeRules(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoLotTypeRules
    __del__ = lambda self: None
NoLotTypeRules_swigregister = _quickfix.NoLotTypeRules_swigregister
NoLotTypeRules_swigregister(NoLotTypeRules)

class NoMatchRules(IntField):
    """Proxy of C++ FIX::NoMatchRules class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMatchRules, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoMatchRules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoMatchRules self) -> NoMatchRules
        __init__(FIX::NoMatchRules self, FIX::NUMINGROUP const & value) -> NoMatchRules

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoMatchRules(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoMatchRules
    __del__ = lambda self: None
NoMatchRules_swigregister = _quickfix.NoMatchRules_swigregister
NoMatchRules_swigregister(NoMatchRules)

class NoMaturityRules(IntField):
    """Proxy of C++ FIX::NoMaturityRules class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMaturityRules, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoMaturityRules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoMaturityRules self) -> NoMaturityRules
        __init__(FIX::NoMaturityRules self, FIX::NUMINGROUP const & value) -> NoMaturityRules

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoMaturityRules(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoMaturityRules
    __del__ = lambda self: None
NoMaturityRules_swigregister = _quickfix.NoMaturityRules_swigregister
NoMaturityRules_swigregister(NoMaturityRules)

class NoOrdTypeRules(IntField):
    """Proxy of C++ FIX::NoOrdTypeRules class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoOrdTypeRules, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoOrdTypeRules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoOrdTypeRules self) -> NoOrdTypeRules
        __init__(FIX::NoOrdTypeRules self, FIX::NUMINGROUP const & value) -> NoOrdTypeRules

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoOrdTypeRules(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoOrdTypeRules
    __del__ = lambda self: None
NoOrdTypeRules_swigregister = _quickfix.NoOrdTypeRules_swigregister
NoOrdTypeRules_swigregister(NoOrdTypeRules)

class NoTimeInForceRules(IntField):
    """Proxy of C++ FIX::NoTimeInForceRules class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTimeInForceRules, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTimeInForceRules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoTimeInForceRules self) -> NoTimeInForceRules
        __init__(FIX::NoTimeInForceRules self, FIX::NUMINGROUP const & value) -> NoTimeInForceRules

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoTimeInForceRules(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoTimeInForceRules
    __del__ = lambda self: None
NoTimeInForceRules_swigregister = _quickfix.NoTimeInForceRules_swigregister
NoTimeInForceRules_swigregister(NoTimeInForceRules)

class SecondaryTradingReferencePrice(DoubleField):
    """Proxy of C++ FIX::SecondaryTradingReferencePrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryTradingReferencePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryTradingReferencePrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryTradingReferencePrice self) -> SecondaryTradingReferencePrice
        __init__(FIX::SecondaryTradingReferencePrice self, FIX::PRICE const & value) -> SecondaryTradingReferencePrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_SecondaryTradingReferencePrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryTradingReferencePrice
    __del__ = lambda self: None
SecondaryTradingReferencePrice_swigregister = _quickfix.SecondaryTradingReferencePrice_swigregister
SecondaryTradingReferencePrice_swigregister(SecondaryTradingReferencePrice)

class StartMaturityMonthYear(StringField):
    """Proxy of C++ FIX::StartMaturityMonthYear class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StartMaturityMonthYear, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StartMaturityMonthYear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StartMaturityMonthYear self) -> StartMaturityMonthYear
        __init__(FIX::StartMaturityMonthYear self, FIX::MONTHYEAR const & value) -> StartMaturityMonthYear

        Parameters:
            value: FIX::MONTHYEAR const &

        """
        this = _quickfix.new_StartMaturityMonthYear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StartMaturityMonthYear
    __del__ = lambda self: None
StartMaturityMonthYear_swigregister = _quickfix.StartMaturityMonthYear_swigregister
StartMaturityMonthYear_swigregister(StartMaturityMonthYear)

class FlexProductEligibilityIndicator(BoolField):
    """Proxy of C++ FIX::FlexProductEligibilityIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlexProductEligibilityIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlexProductEligibilityIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FlexProductEligibilityIndicator self) -> FlexProductEligibilityIndicator
        __init__(FIX::FlexProductEligibilityIndicator self, FIX::BOOLEAN const & value) -> FlexProductEligibilityIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_FlexProductEligibilityIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FlexProductEligibilityIndicator
    __del__ = lambda self: None
FlexProductEligibilityIndicator_swigregister = _quickfix.FlexProductEligibilityIndicator_swigregister
FlexProductEligibilityIndicator_swigregister(FlexProductEligibilityIndicator)

class DerivFlexProductEligibilityIndicator(BoolField):
    """Proxy of C++ FIX::DerivFlexProductEligibilityIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivFlexProductEligibilityIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivFlexProductEligibilityIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivFlexProductEligibilityIndicator self) -> DerivFlexProductEligibilityIndicator
        __init__(FIX::DerivFlexProductEligibilityIndicator self, FIX::BOOLEAN const & value) -> DerivFlexProductEligibilityIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_DerivFlexProductEligibilityIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivFlexProductEligibilityIndicator
    __del__ = lambda self: None
DerivFlexProductEligibilityIndicator_swigregister = _quickfix.DerivFlexProductEligibilityIndicator_swigregister
DerivFlexProductEligibilityIndicator_swigregister(DerivFlexProductEligibilityIndicator)

class FlexibleIndicator(BoolField):
    """Proxy of C++ FIX::FlexibleIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlexibleIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlexibleIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FlexibleIndicator self) -> FlexibleIndicator
        __init__(FIX::FlexibleIndicator self, FIX::BOOLEAN const & value) -> FlexibleIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_FlexibleIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FlexibleIndicator
    __del__ = lambda self: None
FlexibleIndicator_swigregister = _quickfix.FlexibleIndicator_swigregister
FlexibleIndicator_swigregister(FlexibleIndicator)

class TradingCurrency(StringField):
    """Proxy of C++ FIX::TradingCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradingCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradingCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradingCurrency self) -> TradingCurrency
        __init__(FIX::TradingCurrency self, FIX::CURRENCY const & value) -> TradingCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_TradingCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradingCurrency
    __del__ = lambda self: None
TradingCurrency_swigregister = _quickfix.TradingCurrency_swigregister
TradingCurrency_swigregister(TradingCurrency)

class DerivativeProduct(IntField):
    """Proxy of C++ FIX::DerivativeProduct class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeProduct, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeProduct, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeProduct self) -> DerivativeProduct
        __init__(FIX::DerivativeProduct self, FIX::INT const & value) -> DerivativeProduct

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativeProduct(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeProduct
    __del__ = lambda self: None
DerivativeProduct_swigregister = _quickfix.DerivativeProduct_swigregister
DerivativeProduct_swigregister(DerivativeProduct)

class DerivativeSecurityGroup(StringField):
    """Proxy of C++ FIX::DerivativeSecurityGroup class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityGroup, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityGroup self) -> DerivativeSecurityGroup
        __init__(FIX::DerivativeSecurityGroup self, FIX::STRING const & value) -> DerivativeSecurityGroup

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSecurityGroup(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityGroup
    __del__ = lambda self: None
DerivativeSecurityGroup_swigregister = _quickfix.DerivativeSecurityGroup_swigregister
DerivativeSecurityGroup_swigregister(DerivativeSecurityGroup)

class DerivativeCFICode(StringField):
    """Proxy of C++ FIX::DerivativeCFICode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeCFICode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeCFICode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeCFICode self) -> DerivativeCFICode
        __init__(FIX::DerivativeCFICode self, FIX::STRING const & value) -> DerivativeCFICode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeCFICode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeCFICode
    __del__ = lambda self: None
DerivativeCFICode_swigregister = _quickfix.DerivativeCFICode_swigregister
DerivativeCFICode_swigregister(DerivativeCFICode)

class DerivativeSecurityType(StringField):
    """Proxy of C++ FIX::DerivativeSecurityType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityType self) -> DerivativeSecurityType
        __init__(FIX::DerivativeSecurityType self, FIX::STRING const & value) -> DerivativeSecurityType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSecurityType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityType
    __del__ = lambda self: None
DerivativeSecurityType_swigregister = _quickfix.DerivativeSecurityType_swigregister
DerivativeSecurityType_swigregister(DerivativeSecurityType)

class DerivativeSecuritySubType(StringField):
    """Proxy of C++ FIX::DerivativeSecuritySubType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecuritySubType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecuritySubType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecuritySubType self) -> DerivativeSecuritySubType
        __init__(FIX::DerivativeSecuritySubType self, FIX::STRING const & value) -> DerivativeSecuritySubType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSecuritySubType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecuritySubType
    __del__ = lambda self: None
DerivativeSecuritySubType_swigregister = _quickfix.DerivativeSecuritySubType_swigregister
DerivativeSecuritySubType_swigregister(DerivativeSecuritySubType)

class DerivativeMaturityMonthYear(StringField):
    """Proxy of C++ FIX::DerivativeMaturityMonthYear class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeMaturityMonthYear, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeMaturityMonthYear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeMaturityMonthYear self) -> DerivativeMaturityMonthYear
        __init__(FIX::DerivativeMaturityMonthYear self, FIX::MONTHYEAR const & value) -> DerivativeMaturityMonthYear

        Parameters:
            value: FIX::MONTHYEAR const &

        """
        this = _quickfix.new_DerivativeMaturityMonthYear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeMaturityMonthYear
    __del__ = lambda self: None
DerivativeMaturityMonthYear_swigregister = _quickfix.DerivativeMaturityMonthYear_swigregister
DerivativeMaturityMonthYear_swigregister(DerivativeMaturityMonthYear)

class DerivativeMaturityDate(StringField):
    """Proxy of C++ FIX::DerivativeMaturityDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeMaturityDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeMaturityDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeMaturityDate self) -> DerivativeMaturityDate
        __init__(FIX::DerivativeMaturityDate self, FIX::LOCALMKTDATE const & value) -> DerivativeMaturityDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_DerivativeMaturityDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeMaturityDate
    __del__ = lambda self: None
DerivativeMaturityDate_swigregister = _quickfix.DerivativeMaturityDate_swigregister
DerivativeMaturityDate_swigregister(DerivativeMaturityDate)

class DerivativeMaturityTime(StringField):
    """Proxy of C++ FIX::DerivativeMaturityTime class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeMaturityTime, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeMaturityTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeMaturityTime self) -> DerivativeMaturityTime
        __init__(FIX::DerivativeMaturityTime self, FIX::TZTIMEONLY const & value) -> DerivativeMaturityTime

        Parameters:
            value: FIX::TZTIMEONLY const &

        """
        this = _quickfix.new_DerivativeMaturityTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeMaturityTime
    __del__ = lambda self: None
DerivativeMaturityTime_swigregister = _quickfix.DerivativeMaturityTime_swigregister
DerivativeMaturityTime_swigregister(DerivativeMaturityTime)

class DerivativeSettleOnOpenFlag(StringField):
    """Proxy of C++ FIX::DerivativeSettleOnOpenFlag class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSettleOnOpenFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSettleOnOpenFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSettleOnOpenFlag self) -> DerivativeSettleOnOpenFlag
        __init__(FIX::DerivativeSettleOnOpenFlag self, FIX::STRING const & value) -> DerivativeSettleOnOpenFlag

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSettleOnOpenFlag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSettleOnOpenFlag
    __del__ = lambda self: None
DerivativeSettleOnOpenFlag_swigregister = _quickfix.DerivativeSettleOnOpenFlag_swigregister
DerivativeSettleOnOpenFlag_swigregister(DerivativeSettleOnOpenFlag)

class DerivativeInstrmtAssignmentMethod(CharField):
    """Proxy of C++ FIX::DerivativeInstrmtAssignmentMethod class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeInstrmtAssignmentMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeInstrmtAssignmentMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeInstrmtAssignmentMethod self) -> DerivativeInstrmtAssignmentMethod
        __init__(FIX::DerivativeInstrmtAssignmentMethod self, FIX::CHAR const & value) -> DerivativeInstrmtAssignmentMethod

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DerivativeInstrmtAssignmentMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeInstrmtAssignmentMethod
    __del__ = lambda self: None
DerivativeInstrmtAssignmentMethod_swigregister = _quickfix.DerivativeInstrmtAssignmentMethod_swigregister
DerivativeInstrmtAssignmentMethod_swigregister(DerivativeInstrmtAssignmentMethod)

class DerivativeSecurityStatus(StringField):
    """Proxy of C++ FIX::DerivativeSecurityStatus class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityStatus self) -> DerivativeSecurityStatus
        __init__(FIX::DerivativeSecurityStatus self, FIX::STRING const & value) -> DerivativeSecurityStatus

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSecurityStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityStatus
    __del__ = lambda self: None
DerivativeSecurityStatus_swigregister = _quickfix.DerivativeSecurityStatus_swigregister
DerivativeSecurityStatus_swigregister(DerivativeSecurityStatus)

class DerivativeInstrRegistry(StringField):
    """Proxy of C++ FIX::DerivativeInstrRegistry class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeInstrRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeInstrRegistry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeInstrRegistry self) -> DerivativeInstrRegistry
        __init__(FIX::DerivativeInstrRegistry self, FIX::STRING const & value) -> DerivativeInstrRegistry

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeInstrRegistry(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeInstrRegistry
    __del__ = lambda self: None
DerivativeInstrRegistry_swigregister = _quickfix.DerivativeInstrRegistry_swigregister
DerivativeInstrRegistry_swigregister(DerivativeInstrRegistry)

class DerivativeCountryOfIssue(StringField):
    """Proxy of C++ FIX::DerivativeCountryOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeCountryOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeCountryOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeCountryOfIssue self) -> DerivativeCountryOfIssue
        __init__(FIX::DerivativeCountryOfIssue self, FIX::COUNTRY const & value) -> DerivativeCountryOfIssue

        Parameters:
            value: FIX::COUNTRY const &

        """
        this = _quickfix.new_DerivativeCountryOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeCountryOfIssue
    __del__ = lambda self: None
DerivativeCountryOfIssue_swigregister = _quickfix.DerivativeCountryOfIssue_swigregister
DerivativeCountryOfIssue_swigregister(DerivativeCountryOfIssue)

class DerivativeStateOrProvinceOfIssue(StringField):
    """Proxy of C++ FIX::DerivativeStateOrProvinceOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeStateOrProvinceOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeStateOrProvinceOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeStateOrProvinceOfIssue self) -> DerivativeStateOrProvinceOfIssue
        __init__(FIX::DerivativeStateOrProvinceOfIssue self, FIX::STRING const & value) -> DerivativeStateOrProvinceOfIssue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeStateOrProvinceOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeStateOrProvinceOfIssue
    __del__ = lambda self: None
DerivativeStateOrProvinceOfIssue_swigregister = _quickfix.DerivativeStateOrProvinceOfIssue_swigregister
DerivativeStateOrProvinceOfIssue_swigregister(DerivativeStateOrProvinceOfIssue)

class DerivativeLocaleOfIssue(StringField):
    """Proxy of C++ FIX::DerivativeLocaleOfIssue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeLocaleOfIssue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeLocaleOfIssue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeLocaleOfIssue self) -> DerivativeLocaleOfIssue
        __init__(FIX::DerivativeLocaleOfIssue self, FIX::STRING const & value) -> DerivativeLocaleOfIssue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeLocaleOfIssue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeLocaleOfIssue
    __del__ = lambda self: None
DerivativeLocaleOfIssue_swigregister = _quickfix.DerivativeLocaleOfIssue_swigregister
DerivativeLocaleOfIssue_swigregister(DerivativeLocaleOfIssue)

class DerivativeStrikePrice(DoubleField):
    """Proxy of C++ FIX::DerivativeStrikePrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeStrikePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeStrikePrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeStrikePrice self) -> DerivativeStrikePrice
        __init__(FIX::DerivativeStrikePrice self, FIX::PRICE const & value) -> DerivativeStrikePrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_DerivativeStrikePrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeStrikePrice
    __del__ = lambda self: None
DerivativeStrikePrice_swigregister = _quickfix.DerivativeStrikePrice_swigregister
DerivativeStrikePrice_swigregister(DerivativeStrikePrice)

class DerivativeStrikeCurrency(StringField):
    """Proxy of C++ FIX::DerivativeStrikeCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeStrikeCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeStrikeCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeStrikeCurrency self) -> DerivativeStrikeCurrency
        __init__(FIX::DerivativeStrikeCurrency self, FIX::CURRENCY const & value) -> DerivativeStrikeCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_DerivativeStrikeCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeStrikeCurrency
    __del__ = lambda self: None
DerivativeStrikeCurrency_swigregister = _quickfix.DerivativeStrikeCurrency_swigregister
DerivativeStrikeCurrency_swigregister(DerivativeStrikeCurrency)

class DerivativeStrikeMultiplier(DoubleField):
    """Proxy of C++ FIX::DerivativeStrikeMultiplier class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeStrikeMultiplier, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeStrikeMultiplier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeStrikeMultiplier self) -> DerivativeStrikeMultiplier
        __init__(FIX::DerivativeStrikeMultiplier self, FIX::FLOAT const & value) -> DerivativeStrikeMultiplier

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_DerivativeStrikeMultiplier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeStrikeMultiplier
    __del__ = lambda self: None
DerivativeStrikeMultiplier_swigregister = _quickfix.DerivativeStrikeMultiplier_swigregister
DerivativeStrikeMultiplier_swigregister(DerivativeStrikeMultiplier)

class DerivativeStrikeValue(DoubleField):
    """Proxy of C++ FIX::DerivativeStrikeValue class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeStrikeValue, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeStrikeValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeStrikeValue self) -> DerivativeStrikeValue
        __init__(FIX::DerivativeStrikeValue self, FIX::FLOAT const & value) -> DerivativeStrikeValue

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_DerivativeStrikeValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeStrikeValue
    __del__ = lambda self: None
DerivativeStrikeValue_swigregister = _quickfix.DerivativeStrikeValue_swigregister
DerivativeStrikeValue_swigregister(DerivativeStrikeValue)

class DerivativeOptAttribute(CharField):
    """Proxy of C++ FIX::DerivativeOptAttribute class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeOptAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeOptAttribute, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeOptAttribute self) -> DerivativeOptAttribute
        __init__(FIX::DerivativeOptAttribute self, FIX::CHAR const & value) -> DerivativeOptAttribute

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DerivativeOptAttribute(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeOptAttribute
    __del__ = lambda self: None
DerivativeOptAttribute_swigregister = _quickfix.DerivativeOptAttribute_swigregister
DerivativeOptAttribute_swigregister(DerivativeOptAttribute)

class DerivativeContractMultiplier(DoubleField):
    """Proxy of C++ FIX::DerivativeContractMultiplier class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeContractMultiplier, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeContractMultiplier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeContractMultiplier self) -> DerivativeContractMultiplier
        __init__(FIX::DerivativeContractMultiplier self, FIX::FLOAT const & value) -> DerivativeContractMultiplier

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_DerivativeContractMultiplier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeContractMultiplier
    __del__ = lambda self: None
DerivativeContractMultiplier_swigregister = _quickfix.DerivativeContractMultiplier_swigregister
DerivativeContractMultiplier_swigregister(DerivativeContractMultiplier)

class DerivativeMinPriceIncrement(DoubleField):
    """Proxy of C++ FIX::DerivativeMinPriceIncrement class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeMinPriceIncrement, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeMinPriceIncrement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeMinPriceIncrement self) -> DerivativeMinPriceIncrement
        __init__(FIX::DerivativeMinPriceIncrement self, FIX::FLOAT const & value) -> DerivativeMinPriceIncrement

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_DerivativeMinPriceIncrement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeMinPriceIncrement
    __del__ = lambda self: None
DerivativeMinPriceIncrement_swigregister = _quickfix.DerivativeMinPriceIncrement_swigregister
DerivativeMinPriceIncrement_swigregister(DerivativeMinPriceIncrement)

class DerivativeMinPriceIncrementAmount(DoubleField):
    """Proxy of C++ FIX::DerivativeMinPriceIncrementAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeMinPriceIncrementAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeMinPriceIncrementAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeMinPriceIncrementAmount self) -> DerivativeMinPriceIncrementAmount
        __init__(FIX::DerivativeMinPriceIncrementAmount self, FIX::AMT const & value) -> DerivativeMinPriceIncrementAmount

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_DerivativeMinPriceIncrementAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeMinPriceIncrementAmount
    __del__ = lambda self: None
DerivativeMinPriceIncrementAmount_swigregister = _quickfix.DerivativeMinPriceIncrementAmount_swigregister
DerivativeMinPriceIncrementAmount_swigregister(DerivativeMinPriceIncrementAmount)

class DerivativeUnitOfMeasure(StringField):
    """Proxy of C++ FIX::DerivativeUnitOfMeasure class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeUnitOfMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeUnitOfMeasure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeUnitOfMeasure self) -> DerivativeUnitOfMeasure
        __init__(FIX::DerivativeUnitOfMeasure self, FIX::STRING const & value) -> DerivativeUnitOfMeasure

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeUnitOfMeasure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeUnitOfMeasure
    __del__ = lambda self: None
DerivativeUnitOfMeasure_swigregister = _quickfix.DerivativeUnitOfMeasure_swigregister
DerivativeUnitOfMeasure_swigregister(DerivativeUnitOfMeasure)

class DerivativeUnitOfMeasureQty(DoubleField):
    """Proxy of C++ FIX::DerivativeUnitOfMeasureQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeUnitOfMeasureQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeUnitOfMeasureQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeUnitOfMeasureQty self) -> DerivativeUnitOfMeasureQty
        __init__(FIX::DerivativeUnitOfMeasureQty self, FIX::QTY const & value) -> DerivativeUnitOfMeasureQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_DerivativeUnitOfMeasureQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeUnitOfMeasureQty
    __del__ = lambda self: None
DerivativeUnitOfMeasureQty_swigregister = _quickfix.DerivativeUnitOfMeasureQty_swigregister
DerivativeUnitOfMeasureQty_swigregister(DerivativeUnitOfMeasureQty)

class DerivativeTimeUnit(StringField):
    """Proxy of C++ FIX::DerivativeTimeUnit class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeTimeUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeTimeUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeTimeUnit self) -> DerivativeTimeUnit
        __init__(FIX::DerivativeTimeUnit self, FIX::STRING const & value) -> DerivativeTimeUnit

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeTimeUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeTimeUnit
    __del__ = lambda self: None
DerivativeTimeUnit_swigregister = _quickfix.DerivativeTimeUnit_swigregister
DerivativeTimeUnit_swigregister(DerivativeTimeUnit)

class DerivativeSecurityExchange(StringField):
    """Proxy of C++ FIX::DerivativeSecurityExchange class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityExchange, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityExchange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityExchange self) -> DerivativeSecurityExchange
        __init__(FIX::DerivativeSecurityExchange self, FIX::EXCHANGE const & value) -> DerivativeSecurityExchange

        Parameters:
            value: FIX::EXCHANGE const &

        """
        this = _quickfix.new_DerivativeSecurityExchange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityExchange
    __del__ = lambda self: None
DerivativeSecurityExchange_swigregister = _quickfix.DerivativeSecurityExchange_swigregister
DerivativeSecurityExchange_swigregister(DerivativeSecurityExchange)

class DerivativePositionLimit(IntField):
    """Proxy of C++ FIX::DerivativePositionLimit class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativePositionLimit, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativePositionLimit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativePositionLimit self) -> DerivativePositionLimit
        __init__(FIX::DerivativePositionLimit self, FIX::INT const & value) -> DerivativePositionLimit

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativePositionLimit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativePositionLimit
    __del__ = lambda self: None
DerivativePositionLimit_swigregister = _quickfix.DerivativePositionLimit_swigregister
DerivativePositionLimit_swigregister(DerivativePositionLimit)

class DerivativeNTPositionLimit(IntField):
    """Proxy of C++ FIX::DerivativeNTPositionLimit class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeNTPositionLimit, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeNTPositionLimit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeNTPositionLimit self) -> DerivativeNTPositionLimit
        __init__(FIX::DerivativeNTPositionLimit self, FIX::INT const & value) -> DerivativeNTPositionLimit

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativeNTPositionLimit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeNTPositionLimit
    __del__ = lambda self: None
DerivativeNTPositionLimit_swigregister = _quickfix.DerivativeNTPositionLimit_swigregister
DerivativeNTPositionLimit_swigregister(DerivativeNTPositionLimit)

class DerivativeIssuer(StringField):
    """Proxy of C++ FIX::DerivativeIssuer class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeIssuer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeIssuer self) -> DerivativeIssuer
        __init__(FIX::DerivativeIssuer self, FIX::STRING const & value) -> DerivativeIssuer

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeIssuer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeIssuer
    __del__ = lambda self: None
DerivativeIssuer_swigregister = _quickfix.DerivativeIssuer_swigregister
DerivativeIssuer_swigregister(DerivativeIssuer)

class DerivativeIssueDate(StringField):
    """Proxy of C++ FIX::DerivativeIssueDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeIssueDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeIssueDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeIssueDate self) -> DerivativeIssueDate
        __init__(FIX::DerivativeIssueDate self, FIX::LOCALMKTDATE const & value) -> DerivativeIssueDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_DerivativeIssueDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeIssueDate
    __del__ = lambda self: None
DerivativeIssueDate_swigregister = _quickfix.DerivativeIssueDate_swigregister
DerivativeIssueDate_swigregister(DerivativeIssueDate)

class DerivativeEncodedIssuerLen(IntField):
    """Proxy of C++ FIX::DerivativeEncodedIssuerLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeEncodedIssuerLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeEncodedIssuerLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeEncodedIssuerLen self) -> DerivativeEncodedIssuerLen
        __init__(FIX::DerivativeEncodedIssuerLen self, FIX::LENGTH const & value) -> DerivativeEncodedIssuerLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_DerivativeEncodedIssuerLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeEncodedIssuerLen
    __del__ = lambda self: None
DerivativeEncodedIssuerLen_swigregister = _quickfix.DerivativeEncodedIssuerLen_swigregister
DerivativeEncodedIssuerLen_swigregister(DerivativeEncodedIssuerLen)

class DerivativeEncodedIssuer(StringField):
    """Proxy of C++ FIX::DerivativeEncodedIssuer class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeEncodedIssuer, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeEncodedIssuer, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeEncodedIssuer self) -> DerivativeEncodedIssuer
        __init__(FIX::DerivativeEncodedIssuer self, FIX::DATA const & value) -> DerivativeEncodedIssuer

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_DerivativeEncodedIssuer(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeEncodedIssuer
    __del__ = lambda self: None
DerivativeEncodedIssuer_swigregister = _quickfix.DerivativeEncodedIssuer_swigregister
DerivativeEncodedIssuer_swigregister(DerivativeEncodedIssuer)

class DerivativeSecurityDesc(StringField):
    """Proxy of C++ FIX::DerivativeSecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityDesc self) -> DerivativeSecurityDesc
        __init__(FIX::DerivativeSecurityDesc self, FIX::STRING const & value) -> DerivativeSecurityDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityDesc
    __del__ = lambda self: None
DerivativeSecurityDesc_swigregister = _quickfix.DerivativeSecurityDesc_swigregister
DerivativeSecurityDesc_swigregister(DerivativeSecurityDesc)

class DerivativeEncodedSecurityDescLen(IntField):
    """Proxy of C++ FIX::DerivativeEncodedSecurityDescLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeEncodedSecurityDescLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeEncodedSecurityDescLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeEncodedSecurityDescLen self) -> DerivativeEncodedSecurityDescLen
        __init__(FIX::DerivativeEncodedSecurityDescLen self, FIX::LENGTH const & value) -> DerivativeEncodedSecurityDescLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_DerivativeEncodedSecurityDescLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeEncodedSecurityDescLen
    __del__ = lambda self: None
DerivativeEncodedSecurityDescLen_swigregister = _quickfix.DerivativeEncodedSecurityDescLen_swigregister
DerivativeEncodedSecurityDescLen_swigregister(DerivativeEncodedSecurityDescLen)

class DerivativeEncodedSecurityDesc(StringField):
    """Proxy of C++ FIX::DerivativeEncodedSecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeEncodedSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeEncodedSecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeEncodedSecurityDesc self) -> DerivativeEncodedSecurityDesc
        __init__(FIX::DerivativeEncodedSecurityDesc self, FIX::DATA const & value) -> DerivativeEncodedSecurityDesc

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_DerivativeEncodedSecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeEncodedSecurityDesc
    __del__ = lambda self: None
DerivativeEncodedSecurityDesc_swigregister = _quickfix.DerivativeEncodedSecurityDesc_swigregister
DerivativeEncodedSecurityDesc_swigregister(DerivativeEncodedSecurityDesc)

class DerivativeSecurityXMLLen(IntField):
    """Proxy of C++ FIX::DerivativeSecurityXMLLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityXMLLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityXMLLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityXMLLen self) -> DerivativeSecurityXMLLen
        __init__(FIX::DerivativeSecurityXMLLen self, FIX::LENGTH const & value) -> DerivativeSecurityXMLLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_DerivativeSecurityXMLLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityXMLLen
    __del__ = lambda self: None
DerivativeSecurityXMLLen_swigregister = _quickfix.DerivativeSecurityXMLLen_swigregister
DerivativeSecurityXMLLen_swigregister(DerivativeSecurityXMLLen)

class DerivativeSecurityXML(StringField):
    """Proxy of C++ FIX::DerivativeSecurityXML class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityXML, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityXML, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityXML self) -> DerivativeSecurityXML
        __init__(FIX::DerivativeSecurityXML self, FIX::DATA const & value) -> DerivativeSecurityXML

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_DerivativeSecurityXML(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityXML
    __del__ = lambda self: None
DerivativeSecurityXML_swigregister = _quickfix.DerivativeSecurityXML_swigregister
DerivativeSecurityXML_swigregister(DerivativeSecurityXML)

class DerivativeSecurityXMLSchema(StringField):
    """Proxy of C++ FIX::DerivativeSecurityXMLSchema class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSecurityXMLSchema, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSecurityXMLSchema, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSecurityXMLSchema self) -> DerivativeSecurityXMLSchema
        __init__(FIX::DerivativeSecurityXMLSchema self, FIX::STRING const & value) -> DerivativeSecurityXMLSchema

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeSecurityXMLSchema(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityXMLSchema
    __del__ = lambda self: None
DerivativeSecurityXMLSchema_swigregister = _quickfix.DerivativeSecurityXMLSchema_swigregister
DerivativeSecurityXMLSchema_swigregister(DerivativeSecurityXMLSchema)

class DerivativeContractSettlMonth(StringField):
    """Proxy of C++ FIX::DerivativeContractSettlMonth class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeContractSettlMonth, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeContractSettlMonth, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeContractSettlMonth self) -> DerivativeContractSettlMonth
        __init__(FIX::DerivativeContractSettlMonth self, FIX::MONTHYEAR const & value) -> DerivativeContractSettlMonth

        Parameters:
            value: FIX::MONTHYEAR const &

        """
        this = _quickfix.new_DerivativeContractSettlMonth(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeContractSettlMonth
    __del__ = lambda self: None
DerivativeContractSettlMonth_swigregister = _quickfix.DerivativeContractSettlMonth_swigregister
DerivativeContractSettlMonth_swigregister(DerivativeContractSettlMonth)

class NoDerivativeEvents(IntField):
    """Proxy of C++ FIX::NoDerivativeEvents class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDerivativeEvents, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoDerivativeEvents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoDerivativeEvents self) -> NoDerivativeEvents
        __init__(FIX::NoDerivativeEvents self, FIX::NUMINGROUP const & value) -> NoDerivativeEvents

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoDerivativeEvents(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoDerivativeEvents
    __del__ = lambda self: None
NoDerivativeEvents_swigregister = _quickfix.NoDerivativeEvents_swigregister
NoDerivativeEvents_swigregister(NoDerivativeEvents)

class DerivativeEventType(IntField):
    """Proxy of C++ FIX::DerivativeEventType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeEventType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeEventType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeEventType self) -> DerivativeEventType
        __init__(FIX::DerivativeEventType self, FIX::INT const & value) -> DerivativeEventType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativeEventType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeEventType
    __del__ = lambda self: None
DerivativeEventType_swigregister = _quickfix.DerivativeEventType_swigregister
DerivativeEventType_swigregister(DerivativeEventType)

class DerivativeEventDate(StringField):
    """Proxy of C++ FIX::DerivativeEventDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeEventDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeEventDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeEventDate self) -> DerivativeEventDate
        __init__(FIX::DerivativeEventDate self, FIX::LOCALMKTDATE const & value) -> DerivativeEventDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_DerivativeEventDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeEventDate
    __del__ = lambda self: None
DerivativeEventDate_swigregister = _quickfix.DerivativeEventDate_swigregister
DerivativeEventDate_swigregister(DerivativeEventDate)

class DerivativeEventTime(UtcTimeStampField):
    """Proxy of C++ FIX::DerivativeEventTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeEventTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeEventTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeEventTime self) -> DerivativeEventTime
        __init__(FIX::DerivativeEventTime self, bool showMilliseconds) -> DerivativeEventTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::DerivativeEventTime self, FIX::UTCTIMESTAMP const & value) -> DerivativeEventTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::DerivativeEventTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> DerivativeEventTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_DerivativeEventTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeEventTime
    __del__ = lambda self: None
DerivativeEventTime_swigregister = _quickfix.DerivativeEventTime_swigregister
DerivativeEventTime_swigregister(DerivativeEventTime)

class DerivativeEventPx(DoubleField):
    """Proxy of C++ FIX::DerivativeEventPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeEventPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeEventPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeEventPx self) -> DerivativeEventPx
        __init__(FIX::DerivativeEventPx self, FIX::PRICE const & value) -> DerivativeEventPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_DerivativeEventPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeEventPx
    __del__ = lambda self: None
DerivativeEventPx_swigregister = _quickfix.DerivativeEventPx_swigregister
DerivativeEventPx_swigregister(DerivativeEventPx)

class DerivativeEventText(StringField):
    """Proxy of C++ FIX::DerivativeEventText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeEventText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeEventText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeEventText self) -> DerivativeEventText
        __init__(FIX::DerivativeEventText self, FIX::STRING const & value) -> DerivativeEventText

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeEventText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeEventText
    __del__ = lambda self: None
DerivativeEventText_swigregister = _quickfix.DerivativeEventText_swigregister
DerivativeEventText_swigregister(DerivativeEventText)

class NoDerivativeInstrumentParties(IntField):
    """Proxy of C++ FIX::NoDerivativeInstrumentParties class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDerivativeInstrumentParties, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoDerivativeInstrumentParties, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoDerivativeInstrumentParties self) -> NoDerivativeInstrumentParties
        __init__(FIX::NoDerivativeInstrumentParties self, FIX::NUMINGROUP const & value) -> NoDerivativeInstrumentParties

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoDerivativeInstrumentParties(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoDerivativeInstrumentParties
    __del__ = lambda self: None
NoDerivativeInstrumentParties_swigregister = _quickfix.NoDerivativeInstrumentParties_swigregister
NoDerivativeInstrumentParties_swigregister(NoDerivativeInstrumentParties)

class DerivativeInstrumentPartyID(StringField):
    """Proxy of C++ FIX::DerivativeInstrumentPartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeInstrumentPartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeInstrumentPartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeInstrumentPartyID self) -> DerivativeInstrumentPartyID
        __init__(FIX::DerivativeInstrumentPartyID self, FIX::STRING const & value) -> DerivativeInstrumentPartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeInstrumentPartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeInstrumentPartyID
    __del__ = lambda self: None
DerivativeInstrumentPartyID_swigregister = _quickfix.DerivativeInstrumentPartyID_swigregister
DerivativeInstrumentPartyID_swigregister(DerivativeInstrumentPartyID)

class DerivativeInstrumentPartyIDSource(StringField):
    """Proxy of C++ FIX::DerivativeInstrumentPartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeInstrumentPartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeInstrumentPartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeInstrumentPartyIDSource self) -> DerivativeInstrumentPartyIDSource
        __init__(FIX::DerivativeInstrumentPartyIDSource self, FIX::STRING const & value) -> DerivativeInstrumentPartyIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeInstrumentPartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeInstrumentPartyIDSource
    __del__ = lambda self: None
DerivativeInstrumentPartyIDSource_swigregister = _quickfix.DerivativeInstrumentPartyIDSource_swigregister
DerivativeInstrumentPartyIDSource_swigregister(DerivativeInstrumentPartyIDSource)

class DerivativeInstrumentPartyRole(IntField):
    """Proxy of C++ FIX::DerivativeInstrumentPartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeInstrumentPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeInstrumentPartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeInstrumentPartyRole self) -> DerivativeInstrumentPartyRole
        __init__(FIX::DerivativeInstrumentPartyRole self, FIX::INT const & value) -> DerivativeInstrumentPartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativeInstrumentPartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeInstrumentPartyRole
    __del__ = lambda self: None
DerivativeInstrumentPartyRole_swigregister = _quickfix.DerivativeInstrumentPartyRole_swigregister
DerivativeInstrumentPartyRole_swigregister(DerivativeInstrumentPartyRole)

class NoDerivativeInstrumentPartySubIDs(IntField):
    """Proxy of C++ FIX::NoDerivativeInstrumentPartySubIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDerivativeInstrumentPartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoDerivativeInstrumentPartySubIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoDerivativeInstrumentPartySubIDs self) -> NoDerivativeInstrumentPartySubIDs
        __init__(FIX::NoDerivativeInstrumentPartySubIDs self, FIX::NUMINGROUP const & value) -> NoDerivativeInstrumentPartySubIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoDerivativeInstrumentPartySubIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoDerivativeInstrumentPartySubIDs
    __del__ = lambda self: None
NoDerivativeInstrumentPartySubIDs_swigregister = _quickfix.NoDerivativeInstrumentPartySubIDs_swigregister
NoDerivativeInstrumentPartySubIDs_swigregister(NoDerivativeInstrumentPartySubIDs)

class DerivativeInstrumentPartySubID(StringField):
    """Proxy of C++ FIX::DerivativeInstrumentPartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeInstrumentPartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeInstrumentPartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeInstrumentPartySubID self) -> DerivativeInstrumentPartySubID
        __init__(FIX::DerivativeInstrumentPartySubID self, FIX::STRING const & value) -> DerivativeInstrumentPartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeInstrumentPartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeInstrumentPartySubID
    __del__ = lambda self: None
DerivativeInstrumentPartySubID_swigregister = _quickfix.DerivativeInstrumentPartySubID_swigregister
DerivativeInstrumentPartySubID_swigregister(DerivativeInstrumentPartySubID)

class DerivativeInstrumentPartySubIDType(IntField):
    """Proxy of C++ FIX::DerivativeInstrumentPartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeInstrumentPartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeInstrumentPartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeInstrumentPartySubIDType self) -> DerivativeInstrumentPartySubIDType
        __init__(FIX::DerivativeInstrumentPartySubIDType self, FIX::INT const & value) -> DerivativeInstrumentPartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativeInstrumentPartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeInstrumentPartySubIDType
    __del__ = lambda self: None
DerivativeInstrumentPartySubIDType_swigregister = _quickfix.DerivativeInstrumentPartySubIDType_swigregister
DerivativeInstrumentPartySubIDType_swigregister(DerivativeInstrumentPartySubIDType)

class DerivativeExerciseStyle(CharField):
    """Proxy of C++ FIX::DerivativeExerciseStyle class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeExerciseStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeExerciseStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeExerciseStyle self) -> DerivativeExerciseStyle
        __init__(FIX::DerivativeExerciseStyle self, FIX::CHAR const & value) -> DerivativeExerciseStyle

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DerivativeExerciseStyle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeExerciseStyle
    __del__ = lambda self: None
DerivativeExerciseStyle_swigregister = _quickfix.DerivativeExerciseStyle_swigregister
DerivativeExerciseStyle_swigregister(DerivativeExerciseStyle)

class MarketSegmentID(StringField):
    """Proxy of C++ FIX::MarketSegmentID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketSegmentID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketSegmentID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MarketSegmentID self) -> MarketSegmentID
        __init__(FIX::MarketSegmentID self, FIX::STRING const & value) -> MarketSegmentID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MarketSegmentID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MarketSegmentID
    __del__ = lambda self: None
MarketSegmentID_swigregister = _quickfix.MarketSegmentID_swigregister
MarketSegmentID_swigregister(MarketSegmentID)

class MarketID(StringField):
    """Proxy of C++ FIX::MarketID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MarketID self) -> MarketID
        __init__(FIX::MarketID self, FIX::EXCHANGE const & value) -> MarketID

        Parameters:
            value: FIX::EXCHANGE const &

        """
        this = _quickfix.new_MarketID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MarketID
    __del__ = lambda self: None
MarketID_swigregister = _quickfix.MarketID_swigregister
MarketID_swigregister(MarketID)

class MaturityMonthYearIncrementUnits(IntField):
    """Proxy of C++ FIX::MaturityMonthYearIncrementUnits class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityMonthYearIncrementUnits, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityMonthYearIncrementUnits, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaturityMonthYearIncrementUnits self) -> MaturityMonthYearIncrementUnits
        __init__(FIX::MaturityMonthYearIncrementUnits self, FIX::INT const & value) -> MaturityMonthYearIncrementUnits

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MaturityMonthYearIncrementUnits(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaturityMonthYearIncrementUnits
    __del__ = lambda self: None
MaturityMonthYearIncrementUnits_swigregister = _quickfix.MaturityMonthYearIncrementUnits_swigregister
MaturityMonthYearIncrementUnits_swigregister(MaturityMonthYearIncrementUnits)

class MaturityMonthYearFormat(IntField):
    """Proxy of C++ FIX::MaturityMonthYearFormat class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaturityMonthYearFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaturityMonthYearFormat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MaturityMonthYearFormat self) -> MaturityMonthYearFormat
        __init__(FIX::MaturityMonthYearFormat self, FIX::INT const & value) -> MaturityMonthYearFormat

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MaturityMonthYearFormat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MaturityMonthYearFormat
    __del__ = lambda self: None
MaturityMonthYearFormat_swigregister = _quickfix.MaturityMonthYearFormat_swigregister
MaturityMonthYearFormat_swigregister(MaturityMonthYearFormat)

class StrikeExerciseStyle(IntField):
    """Proxy of C++ FIX::StrikeExerciseStyle class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikeExerciseStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikeExerciseStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikeExerciseStyle self) -> StrikeExerciseStyle
        __init__(FIX::StrikeExerciseStyle self, FIX::INT const & value) -> StrikeExerciseStyle

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StrikeExerciseStyle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikeExerciseStyle
    __del__ = lambda self: None
StrikeExerciseStyle_swigregister = _quickfix.StrikeExerciseStyle_swigregister
StrikeExerciseStyle_swigregister(StrikeExerciseStyle)

class SecondaryPriceLimitType(IntField):
    """Proxy of C++ FIX::SecondaryPriceLimitType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecondaryPriceLimitType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecondaryPriceLimitType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecondaryPriceLimitType self) -> SecondaryPriceLimitType
        __init__(FIX::SecondaryPriceLimitType self, FIX::INT const & value) -> SecondaryPriceLimitType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecondaryPriceLimitType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecondaryPriceLimitType
    __del__ = lambda self: None
SecondaryPriceLimitType_swigregister = _quickfix.SecondaryPriceLimitType_swigregister
SecondaryPriceLimitType_swigregister(SecondaryPriceLimitType)

class PriceLimitType(IntField):
    """Proxy of C++ FIX::PriceLimitType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PriceLimitType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PriceLimitType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::PriceLimitType self) -> PriceLimitType
        __init__(FIX::PriceLimitType self, FIX::INT const & value) -> PriceLimitType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_PriceLimitType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_PriceLimitType
    __del__ = lambda self: None
PriceLimitType_swigregister = _quickfix.PriceLimitType_swigregister
PriceLimitType_swigregister(PriceLimitType)

class ExecInstValue(CharField):
    """Proxy of C++ FIX::ExecInstValue class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExecInstValue, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExecInstValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ExecInstValue self) -> ExecInstValue
        __init__(FIX::ExecInstValue self, FIX::CHAR const & value) -> ExecInstValue

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_ExecInstValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ExecInstValue
    __del__ = lambda self: None
ExecInstValue_swigregister = _quickfix.ExecInstValue_swigregister
ExecInstValue_swigregister(ExecInstValue)

class NoTradingSessionRules(IntField):
    """Proxy of C++ FIX::NoTradingSessionRules class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTradingSessionRules, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTradingSessionRules, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoTradingSessionRules self) -> NoTradingSessionRules
        __init__(FIX::NoTradingSessionRules self, FIX::NUMINGROUP const & value) -> NoTradingSessionRules

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoTradingSessionRules(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoTradingSessionRules
    __del__ = lambda self: None
NoTradingSessionRules_swigregister = _quickfix.NoTradingSessionRules_swigregister
NoTradingSessionRules_swigregister(NoTradingSessionRules)

class NoMarketSegments(IntField):
    """Proxy of C++ FIX::NoMarketSegments class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoMarketSegments, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoMarketSegments, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoMarketSegments self) -> NoMarketSegments
        __init__(FIX::NoMarketSegments self, FIX::NUMINGROUP const & value) -> NoMarketSegments

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoMarketSegments(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoMarketSegments
    __del__ = lambda self: None
NoMarketSegments_swigregister = _quickfix.NoMarketSegments_swigregister
NoMarketSegments_swigregister(NoMarketSegments)

class NoDerivativeInstrAttrib(IntField):
    """Proxy of C++ FIX::NoDerivativeInstrAttrib class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoDerivativeInstrAttrib, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoDerivativeInstrAttrib, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoDerivativeInstrAttrib self) -> NoDerivativeInstrAttrib
        __init__(FIX::NoDerivativeInstrAttrib self, FIX::NUMINGROUP const & value) -> NoDerivativeInstrAttrib

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoDerivativeInstrAttrib(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoDerivativeInstrAttrib
    __del__ = lambda self: None
NoDerivativeInstrAttrib_swigregister = _quickfix.NoDerivativeInstrAttrib_swigregister
NoDerivativeInstrAttrib_swigregister(NoDerivativeInstrAttrib)

class NoNestedInstrAttrib(IntField):
    """Proxy of C++ FIX::NoNestedInstrAttrib class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNestedInstrAttrib, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNestedInstrAttrib, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNestedInstrAttrib self) -> NoNestedInstrAttrib
        __init__(FIX::NoNestedInstrAttrib self, FIX::NUMINGROUP const & value) -> NoNestedInstrAttrib

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNestedInstrAttrib(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNestedInstrAttrib
    __del__ = lambda self: None
NoNestedInstrAttrib_swigregister = _quickfix.NoNestedInstrAttrib_swigregister
NoNestedInstrAttrib_swigregister(NoNestedInstrAttrib)

class DerivativeInstrAttribType(IntField):
    """Proxy of C++ FIX::DerivativeInstrAttribType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeInstrAttribType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeInstrAttribType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeInstrAttribType self) -> DerivativeInstrAttribType
        __init__(FIX::DerivativeInstrAttribType self, FIX::INT const & value) -> DerivativeInstrAttribType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativeInstrAttribType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeInstrAttribType
    __del__ = lambda self: None
DerivativeInstrAttribType_swigregister = _quickfix.DerivativeInstrAttribType_swigregister
DerivativeInstrAttribType_swigregister(DerivativeInstrAttribType)

class DerivativeInstrAttribValue(StringField):
    """Proxy of C++ FIX::DerivativeInstrAttribValue class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeInstrAttribValue, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeInstrAttribValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeInstrAttribValue self) -> DerivativeInstrAttribValue
        __init__(FIX::DerivativeInstrAttribValue self, FIX::STRING const & value) -> DerivativeInstrAttribValue

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeInstrAttribValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeInstrAttribValue
    __del__ = lambda self: None
DerivativeInstrAttribValue_swigregister = _quickfix.DerivativeInstrAttribValue_swigregister
DerivativeInstrAttribValue_swigregister(DerivativeInstrAttribValue)

class DerivativePriceUnitOfMeasure(StringField):
    """Proxy of C++ FIX::DerivativePriceUnitOfMeasure class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativePriceUnitOfMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativePriceUnitOfMeasure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativePriceUnitOfMeasure self) -> DerivativePriceUnitOfMeasure
        __init__(FIX::DerivativePriceUnitOfMeasure self, FIX::STRING const & value) -> DerivativePriceUnitOfMeasure

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativePriceUnitOfMeasure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativePriceUnitOfMeasure
    __del__ = lambda self: None
DerivativePriceUnitOfMeasure_swigregister = _quickfix.DerivativePriceUnitOfMeasure_swigregister
DerivativePriceUnitOfMeasure_swigregister(DerivativePriceUnitOfMeasure)

class DerivativePriceUnitOfMeasureQty(DoubleField):
    """Proxy of C++ FIX::DerivativePriceUnitOfMeasureQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativePriceUnitOfMeasureQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativePriceUnitOfMeasureQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativePriceUnitOfMeasureQty self) -> DerivativePriceUnitOfMeasureQty
        __init__(FIX::DerivativePriceUnitOfMeasureQty self, FIX::QTY const & value) -> DerivativePriceUnitOfMeasureQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_DerivativePriceUnitOfMeasureQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativePriceUnitOfMeasureQty
    __del__ = lambda self: None
DerivativePriceUnitOfMeasureQty_swigregister = _quickfix.DerivativePriceUnitOfMeasureQty_swigregister
DerivativePriceUnitOfMeasureQty_swigregister(DerivativePriceUnitOfMeasureQty)

class DerivativeSettlMethod(CharField):
    """Proxy of C++ FIX::DerivativeSettlMethod class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeSettlMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeSettlMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeSettlMethod self) -> DerivativeSettlMethod
        __init__(FIX::DerivativeSettlMethod self, FIX::CHAR const & value) -> DerivativeSettlMethod

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_DerivativeSettlMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeSettlMethod
    __del__ = lambda self: None
DerivativeSettlMethod_swigregister = _quickfix.DerivativeSettlMethod_swigregister
DerivativeSettlMethod_swigregister(DerivativeSettlMethod)

class DerivativePriceQuoteMethod(StringField):
    """Proxy of C++ FIX::DerivativePriceQuoteMethod class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativePriceQuoteMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativePriceQuoteMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativePriceQuoteMethod self) -> DerivativePriceQuoteMethod
        __init__(FIX::DerivativePriceQuoteMethod self, FIX::STRING const & value) -> DerivativePriceQuoteMethod

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativePriceQuoteMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativePriceQuoteMethod
    __del__ = lambda self: None
DerivativePriceQuoteMethod_swigregister = _quickfix.DerivativePriceQuoteMethod_swigregister
DerivativePriceQuoteMethod_swigregister(DerivativePriceQuoteMethod)

class DerivativeFuturesValuationMethod(StringField):
    """Proxy of C++ FIX::DerivativeFuturesValuationMethod class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeFuturesValuationMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeFuturesValuationMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeFuturesValuationMethod self) -> DerivativeFuturesValuationMethod
        __init__(FIX::DerivativeFuturesValuationMethod self, FIX::STRING const & value) -> DerivativeFuturesValuationMethod

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeFuturesValuationMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeFuturesValuationMethod
    __del__ = lambda self: None
DerivativeFuturesValuationMethod_swigregister = _quickfix.DerivativeFuturesValuationMethod_swigregister
DerivativeFuturesValuationMethod_swigregister(DerivativeFuturesValuationMethod)

class DerivativeListMethod(IntField):
    """Proxy of C++ FIX::DerivativeListMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeListMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeListMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeListMethod self) -> DerivativeListMethod
        __init__(FIX::DerivativeListMethod self, FIX::INT const & value) -> DerivativeListMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativeListMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeListMethod
    __del__ = lambda self: None
DerivativeListMethod_swigregister = _quickfix.DerivativeListMethod_swigregister
DerivativeListMethod_swigregister(DerivativeListMethod)

class DerivativeCapPrice(DoubleField):
    """Proxy of C++ FIX::DerivativeCapPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeCapPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeCapPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeCapPrice self) -> DerivativeCapPrice
        __init__(FIX::DerivativeCapPrice self, FIX::PRICE const & value) -> DerivativeCapPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_DerivativeCapPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeCapPrice
    __del__ = lambda self: None
DerivativeCapPrice_swigregister = _quickfix.DerivativeCapPrice_swigregister
DerivativeCapPrice_swigregister(DerivativeCapPrice)

class DerivativeFloorPrice(DoubleField):
    """Proxy of C++ FIX::DerivativeFloorPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeFloorPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeFloorPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeFloorPrice self) -> DerivativeFloorPrice
        __init__(FIX::DerivativeFloorPrice self, FIX::PRICE const & value) -> DerivativeFloorPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_DerivativeFloorPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeFloorPrice
    __del__ = lambda self: None
DerivativeFloorPrice_swigregister = _quickfix.DerivativeFloorPrice_swigregister
DerivativeFloorPrice_swigregister(DerivativeFloorPrice)

class DerivativePutOrCall(IntField):
    """Proxy of C++ FIX::DerivativePutOrCall class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativePutOrCall, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativePutOrCall, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativePutOrCall self) -> DerivativePutOrCall
        __init__(FIX::DerivativePutOrCall self, FIX::INT const & value) -> DerivativePutOrCall

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativePutOrCall(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativePutOrCall
    __del__ = lambda self: None
DerivativePutOrCall_swigregister = _quickfix.DerivativePutOrCall_swigregister
DerivativePutOrCall_swigregister(DerivativePutOrCall)

class ListUpdateAction(CharField):
    """Proxy of C++ FIX::ListUpdateAction class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListUpdateAction, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListUpdateAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListUpdateAction self) -> ListUpdateAction
        __init__(FIX::ListUpdateAction self, FIX::CHAR const & value) -> ListUpdateAction

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_ListUpdateAction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListUpdateAction
    __del__ = lambda self: None
ListUpdateAction_swigregister = _quickfix.ListUpdateAction_swigregister
ListUpdateAction_swigregister(ListUpdateAction)

class ParentMktSegmID(StringField):
    """Proxy of C++ FIX::ParentMktSegmID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParentMktSegmID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParentMktSegmID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ParentMktSegmID self) -> ParentMktSegmID
        __init__(FIX::ParentMktSegmID self, FIX::STRING const & value) -> ParentMktSegmID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ParentMktSegmID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ParentMktSegmID
    __del__ = lambda self: None
ParentMktSegmID_swigregister = _quickfix.ParentMktSegmID_swigregister
ParentMktSegmID_swigregister(ParentMktSegmID)

class TradingSessionDesc(StringField):
    """Proxy of C++ FIX::TradingSessionDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradingSessionDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradingSessionDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradingSessionDesc self) -> TradingSessionDesc
        __init__(FIX::TradingSessionDesc self, FIX::STRING const & value) -> TradingSessionDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TradingSessionDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradingSessionDesc
    __del__ = lambda self: None
TradingSessionDesc_swigregister = _quickfix.TradingSessionDesc_swigregister
TradingSessionDesc_swigregister(TradingSessionDesc)

class TradSesUpdateAction(CharField):
    """Proxy of C++ FIX::TradSesUpdateAction class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesUpdateAction, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesUpdateAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesUpdateAction self) -> TradSesUpdateAction
        __init__(FIX::TradSesUpdateAction self, FIX::CHAR const & value) -> TradSesUpdateAction

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TradSesUpdateAction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesUpdateAction
    __del__ = lambda self: None
TradSesUpdateAction_swigregister = _quickfix.TradSesUpdateAction_swigregister
TradSesUpdateAction_swigregister(TradSesUpdateAction)

class RejectText(StringField):
    """Proxy of C++ FIX::RejectText class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RejectText, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RejectText, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RejectText self) -> RejectText
        __init__(FIX::RejectText self, FIX::STRING const & value) -> RejectText

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RejectText(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RejectText
    __del__ = lambda self: None
RejectText_swigregister = _quickfix.RejectText_swigregister
RejectText_swigregister(RejectText)

class FeeMultiplier(DoubleField):
    """Proxy of C++ FIX::FeeMultiplier class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeeMultiplier, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FeeMultiplier, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FeeMultiplier self) -> FeeMultiplier
        __init__(FIX::FeeMultiplier self, FIX::FLOAT const & value) -> FeeMultiplier

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_FeeMultiplier(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FeeMultiplier
    __del__ = lambda self: None
FeeMultiplier_swigregister = _quickfix.FeeMultiplier_swigregister
FeeMultiplier_swigregister(FeeMultiplier)

class UnderlyingLegSymbol(StringField):
    """Proxy of C++ FIX::UnderlyingLegSymbol class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegSymbol, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegSymbol self) -> UnderlyingLegSymbol
        __init__(FIX::UnderlyingLegSymbol self, FIX::STRING const & value) -> UnderlyingLegSymbol

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegSymbol(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSymbol
    __del__ = lambda self: None
UnderlyingLegSymbol_swigregister = _quickfix.UnderlyingLegSymbol_swigregister
UnderlyingLegSymbol_swigregister(UnderlyingLegSymbol)

class UnderlyingLegSymbolSfx(StringField):
    """Proxy of C++ FIX::UnderlyingLegSymbolSfx class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegSymbolSfx, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegSymbolSfx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegSymbolSfx self) -> UnderlyingLegSymbolSfx
        __init__(FIX::UnderlyingLegSymbolSfx self, FIX::STRING const & value) -> UnderlyingLegSymbolSfx

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegSymbolSfx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSymbolSfx
    __del__ = lambda self: None
UnderlyingLegSymbolSfx_swigregister = _quickfix.UnderlyingLegSymbolSfx_swigregister
UnderlyingLegSymbolSfx_swigregister(UnderlyingLegSymbolSfx)

class UnderlyingLegSecurityID(StringField):
    """Proxy of C++ FIX::UnderlyingLegSecurityID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegSecurityID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegSecurityID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegSecurityID self) -> UnderlyingLegSecurityID
        __init__(FIX::UnderlyingLegSecurityID self, FIX::STRING const & value) -> UnderlyingLegSecurityID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegSecurityID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityID
    __del__ = lambda self: None
UnderlyingLegSecurityID_swigregister = _quickfix.UnderlyingLegSecurityID_swigregister
UnderlyingLegSecurityID_swigregister(UnderlyingLegSecurityID)

class UnderlyingLegSecurityIDSource(StringField):
    """Proxy of C++ FIX::UnderlyingLegSecurityIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegSecurityIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegSecurityIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegSecurityIDSource self) -> UnderlyingLegSecurityIDSource
        __init__(FIX::UnderlyingLegSecurityIDSource self, FIX::STRING const & value) -> UnderlyingLegSecurityIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegSecurityIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityIDSource
    __del__ = lambda self: None
UnderlyingLegSecurityIDSource_swigregister = _quickfix.UnderlyingLegSecurityIDSource_swigregister
UnderlyingLegSecurityIDSource_swigregister(UnderlyingLegSecurityIDSource)

class NoUnderlyingLegSecurityAltID(IntField):
    """Proxy of C++ FIX::NoUnderlyingLegSecurityAltID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoUnderlyingLegSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoUnderlyingLegSecurityAltID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoUnderlyingLegSecurityAltID self) -> NoUnderlyingLegSecurityAltID
        __init__(FIX::NoUnderlyingLegSecurityAltID self, FIX::NUMINGROUP const & value) -> NoUnderlyingLegSecurityAltID

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoUnderlyingLegSecurityAltID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoUnderlyingLegSecurityAltID
    __del__ = lambda self: None
NoUnderlyingLegSecurityAltID_swigregister = _quickfix.NoUnderlyingLegSecurityAltID_swigregister
NoUnderlyingLegSecurityAltID_swigregister(NoUnderlyingLegSecurityAltID)

class UnderlyingLegSecurityAltID(StringField):
    """Proxy of C++ FIX::UnderlyingLegSecurityAltID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegSecurityAltID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegSecurityAltID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegSecurityAltID self) -> UnderlyingLegSecurityAltID
        __init__(FIX::UnderlyingLegSecurityAltID self, FIX::STRING const & value) -> UnderlyingLegSecurityAltID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegSecurityAltID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityAltID
    __del__ = lambda self: None
UnderlyingLegSecurityAltID_swigregister = _quickfix.UnderlyingLegSecurityAltID_swigregister
UnderlyingLegSecurityAltID_swigregister(UnderlyingLegSecurityAltID)

class UnderlyingLegSecurityAltIDSource(StringField):
    """Proxy of C++ FIX::UnderlyingLegSecurityAltIDSource class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegSecurityAltIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegSecurityAltIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegSecurityAltIDSource self) -> UnderlyingLegSecurityAltIDSource
        __init__(FIX::UnderlyingLegSecurityAltIDSource self, FIX::STRING const & value) -> UnderlyingLegSecurityAltIDSource

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegSecurityAltIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityAltIDSource
    __del__ = lambda self: None
UnderlyingLegSecurityAltIDSource_swigregister = _quickfix.UnderlyingLegSecurityAltIDSource_swigregister
UnderlyingLegSecurityAltIDSource_swigregister(UnderlyingLegSecurityAltIDSource)

class UnderlyingLegSecurityType(StringField):
    """Proxy of C++ FIX::UnderlyingLegSecurityType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegSecurityType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegSecurityType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegSecurityType self) -> UnderlyingLegSecurityType
        __init__(FIX::UnderlyingLegSecurityType self, FIX::STRING const & value) -> UnderlyingLegSecurityType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegSecurityType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityType
    __del__ = lambda self: None
UnderlyingLegSecurityType_swigregister = _quickfix.UnderlyingLegSecurityType_swigregister
UnderlyingLegSecurityType_swigregister(UnderlyingLegSecurityType)

class UnderlyingLegSecuritySubType(StringField):
    """Proxy of C++ FIX::UnderlyingLegSecuritySubType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegSecuritySubType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegSecuritySubType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegSecuritySubType self) -> UnderlyingLegSecuritySubType
        __init__(FIX::UnderlyingLegSecuritySubType self, FIX::STRING const & value) -> UnderlyingLegSecuritySubType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegSecuritySubType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecuritySubType
    __del__ = lambda self: None
UnderlyingLegSecuritySubType_swigregister = _quickfix.UnderlyingLegSecuritySubType_swigregister
UnderlyingLegSecuritySubType_swigregister(UnderlyingLegSecuritySubType)

class UnderlyingLegMaturityMonthYear(StringField):
    """Proxy of C++ FIX::UnderlyingLegMaturityMonthYear class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegMaturityMonthYear, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegMaturityMonthYear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegMaturityMonthYear self) -> UnderlyingLegMaturityMonthYear
        __init__(FIX::UnderlyingLegMaturityMonthYear self, FIX::MONTHYEAR const & value) -> UnderlyingLegMaturityMonthYear

        Parameters:
            value: FIX::MONTHYEAR const &

        """
        this = _quickfix.new_UnderlyingLegMaturityMonthYear(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegMaturityMonthYear
    __del__ = lambda self: None
UnderlyingLegMaturityMonthYear_swigregister = _quickfix.UnderlyingLegMaturityMonthYear_swigregister
UnderlyingLegMaturityMonthYear_swigregister(UnderlyingLegMaturityMonthYear)

class UnderlyingLegStrikePrice(DoubleField):
    """Proxy of C++ FIX::UnderlyingLegStrikePrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegStrikePrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegStrikePrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegStrikePrice self) -> UnderlyingLegStrikePrice
        __init__(FIX::UnderlyingLegStrikePrice self, FIX::PRICE const & value) -> UnderlyingLegStrikePrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_UnderlyingLegStrikePrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegStrikePrice
    __del__ = lambda self: None
UnderlyingLegStrikePrice_swigregister = _quickfix.UnderlyingLegStrikePrice_swigregister
UnderlyingLegStrikePrice_swigregister(UnderlyingLegStrikePrice)

class UnderlyingLegSecurityExchange(StringField):
    """Proxy of C++ FIX::UnderlyingLegSecurityExchange class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegSecurityExchange, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegSecurityExchange, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegSecurityExchange self) -> UnderlyingLegSecurityExchange
        __init__(FIX::UnderlyingLegSecurityExchange self, FIX::STRING const & value) -> UnderlyingLegSecurityExchange

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegSecurityExchange(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityExchange
    __del__ = lambda self: None
UnderlyingLegSecurityExchange_swigregister = _quickfix.UnderlyingLegSecurityExchange_swigregister
UnderlyingLegSecurityExchange_swigregister(UnderlyingLegSecurityExchange)

class NoOfLegUnderlyings(IntField):
    """Proxy of C++ FIX::NoOfLegUnderlyings class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoOfLegUnderlyings, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoOfLegUnderlyings, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoOfLegUnderlyings self) -> NoOfLegUnderlyings
        __init__(FIX::NoOfLegUnderlyings self, FIX::NUMINGROUP const & value) -> NoOfLegUnderlyings

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoOfLegUnderlyings(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoOfLegUnderlyings
    __del__ = lambda self: None
NoOfLegUnderlyings_swigregister = _quickfix.NoOfLegUnderlyings_swigregister
NoOfLegUnderlyings_swigregister(NoOfLegUnderlyings)

class UnderlyingLegPutOrCall(IntField):
    """Proxy of C++ FIX::UnderlyingLegPutOrCall class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegPutOrCall, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegPutOrCall, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegPutOrCall self) -> UnderlyingLegPutOrCall
        __init__(FIX::UnderlyingLegPutOrCall self, FIX::INT const & value) -> UnderlyingLegPutOrCall

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingLegPutOrCall(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegPutOrCall
    __del__ = lambda self: None
UnderlyingLegPutOrCall_swigregister = _quickfix.UnderlyingLegPutOrCall_swigregister
UnderlyingLegPutOrCall_swigregister(UnderlyingLegPutOrCall)

class UnderlyingLegCFICode(StringField):
    """Proxy of C++ FIX::UnderlyingLegCFICode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegCFICode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegCFICode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegCFICode self) -> UnderlyingLegCFICode
        __init__(FIX::UnderlyingLegCFICode self, FIX::STRING const & value) -> UnderlyingLegCFICode

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegCFICode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegCFICode
    __del__ = lambda self: None
UnderlyingLegCFICode_swigregister = _quickfix.UnderlyingLegCFICode_swigregister
UnderlyingLegCFICode_swigregister(UnderlyingLegCFICode)

class UnderlyingLegMaturityDate(StringField):
    """Proxy of C++ FIX::UnderlyingLegMaturityDate class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegMaturityDate, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegMaturityDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegMaturityDate self) -> UnderlyingLegMaturityDate
        __init__(FIX::UnderlyingLegMaturityDate self, FIX::LOCALMKTDATE const & value) -> UnderlyingLegMaturityDate

        Parameters:
            value: FIX::LOCALMKTDATE const &

        """
        this = _quickfix.new_UnderlyingLegMaturityDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegMaturityDate
    __del__ = lambda self: None
UnderlyingLegMaturityDate_swigregister = _quickfix.UnderlyingLegMaturityDate_swigregister
UnderlyingLegMaturityDate_swigregister(UnderlyingLegMaturityDate)

class ApplReqID(StringField):
    """Proxy of C++ FIX::ApplReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplReqID self) -> ApplReqID
        __init__(FIX::ApplReqID self, FIX::STRING const & value) -> ApplReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ApplReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplReqID
    __del__ = lambda self: None
ApplReqID_swigregister = _quickfix.ApplReqID_swigregister
ApplReqID_swigregister(ApplReqID)

class ApplReqType(IntField):
    """Proxy of C++ FIX::ApplReqType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplReqType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplReqType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplReqType self) -> ApplReqType
        __init__(FIX::ApplReqType self, FIX::INT const & value) -> ApplReqType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ApplReqType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplReqType
    __del__ = lambda self: None
ApplReqType_swigregister = _quickfix.ApplReqType_swigregister
ApplReqType_swigregister(ApplReqType)

class ApplResponseType(IntField):
    """Proxy of C++ FIX::ApplResponseType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplResponseType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplResponseType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplResponseType self) -> ApplResponseType
        __init__(FIX::ApplResponseType self, FIX::INT const & value) -> ApplResponseType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ApplResponseType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplResponseType
    __del__ = lambda self: None
ApplResponseType_swigregister = _quickfix.ApplResponseType_swigregister
ApplResponseType_swigregister(ApplResponseType)

class ApplTotalMessageCount(IntField):
    """Proxy of C++ FIX::ApplTotalMessageCount class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplTotalMessageCount, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplTotalMessageCount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplTotalMessageCount self) -> ApplTotalMessageCount
        __init__(FIX::ApplTotalMessageCount self, FIX::INT const & value) -> ApplTotalMessageCount

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ApplTotalMessageCount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplTotalMessageCount
    __del__ = lambda self: None
ApplTotalMessageCount_swigregister = _quickfix.ApplTotalMessageCount_swigregister
ApplTotalMessageCount_swigregister(ApplTotalMessageCount)

class ApplLastSeqNum(IntField):
    """Proxy of C++ FIX::ApplLastSeqNum class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplLastSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplLastSeqNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplLastSeqNum self) -> ApplLastSeqNum
        __init__(FIX::ApplLastSeqNum self, FIX::SEQNUM const & value) -> ApplLastSeqNum

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_ApplLastSeqNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplLastSeqNum
    __del__ = lambda self: None
ApplLastSeqNum_swigregister = _quickfix.ApplLastSeqNum_swigregister
ApplLastSeqNum_swigregister(ApplLastSeqNum)

class NoApplIDs(IntField):
    """Proxy of C++ FIX::NoApplIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoApplIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoApplIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoApplIDs self) -> NoApplIDs
        __init__(FIX::NoApplIDs self, FIX::NUMINGROUP const & value) -> NoApplIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoApplIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoApplIDs
    __del__ = lambda self: None
NoApplIDs_swigregister = _quickfix.NoApplIDs_swigregister
NoApplIDs_swigregister(NoApplIDs)

class ApplResendFlag(BoolField):
    """Proxy of C++ FIX::ApplResendFlag class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplResendFlag, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplResendFlag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplResendFlag self) -> ApplResendFlag
        __init__(FIX::ApplResendFlag self, FIX::BOOLEAN const & value) -> ApplResendFlag

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_ApplResendFlag(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplResendFlag
    __del__ = lambda self: None
ApplResendFlag_swigregister = _quickfix.ApplResendFlag_swigregister
ApplResendFlag_swigregister(ApplResendFlag)

class ApplResponseID(StringField):
    """Proxy of C++ FIX::ApplResponseID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplResponseID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplResponseID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplResponseID self) -> ApplResponseID
        __init__(FIX::ApplResponseID self, FIX::STRING const & value) -> ApplResponseID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ApplResponseID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplResponseID
    __del__ = lambda self: None
ApplResponseID_swigregister = _quickfix.ApplResponseID_swigregister
ApplResponseID_swigregister(ApplResponseID)

class ApplResponseError(IntField):
    """Proxy of C++ FIX::ApplResponseError class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplResponseError, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplResponseError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplResponseError self) -> ApplResponseError
        __init__(FIX::ApplResponseError self, FIX::INT const & value) -> ApplResponseError

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ApplResponseError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplResponseError
    __del__ = lambda self: None
ApplResponseError_swigregister = _quickfix.ApplResponseError_swigregister
ApplResponseError_swigregister(ApplResponseError)

class RefApplID(StringField):
    """Proxy of C++ FIX::RefApplID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefApplID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefApplID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefApplID self) -> RefApplID
        __init__(FIX::RefApplID self, FIX::STRING const & value) -> RefApplID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RefApplID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefApplID
    __del__ = lambda self: None
RefApplID_swigregister = _quickfix.RefApplID_swigregister
RefApplID_swigregister(RefApplID)

class ApplReportID(StringField):
    """Proxy of C++ FIX::ApplReportID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplReportID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplReportID self) -> ApplReportID
        __init__(FIX::ApplReportID self, FIX::STRING const & value) -> ApplReportID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ApplReportID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplReportID
    __del__ = lambda self: None
ApplReportID_swigregister = _quickfix.ApplReportID_swigregister
ApplReportID_swigregister(ApplReportID)

class RefApplLastSeqNum(IntField):
    """Proxy of C++ FIX::RefApplLastSeqNum class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefApplLastSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefApplLastSeqNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefApplLastSeqNum self) -> RefApplLastSeqNum
        __init__(FIX::RefApplLastSeqNum self, FIX::SEQNUM const & value) -> RefApplLastSeqNum

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_RefApplLastSeqNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefApplLastSeqNum
    __del__ = lambda self: None
RefApplLastSeqNum_swigregister = _quickfix.RefApplLastSeqNum_swigregister
RefApplLastSeqNum_swigregister(RefApplLastSeqNum)

class LegPutOrCall(IntField):
    """Proxy of C++ FIX::LegPutOrCall class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPutOrCall, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegPutOrCall, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegPutOrCall self) -> LegPutOrCall
        __init__(FIX::LegPutOrCall self, FIX::INT const & value) -> LegPutOrCall

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegPutOrCall(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegPutOrCall
    __del__ = lambda self: None
LegPutOrCall_swigregister = _quickfix.LegPutOrCall_swigregister
LegPutOrCall_swigregister(LegPutOrCall)

class TotNoFills(IntField):
    """Proxy of C++ FIX::TotNoFills class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TotNoFills, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TotNoFills, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TotNoFills self) -> TotNoFills
        __init__(FIX::TotNoFills self, FIX::INT const & value) -> TotNoFills

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TotNoFills(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TotNoFills
    __del__ = lambda self: None
TotNoFills_swigregister = _quickfix.TotNoFills_swigregister
TotNoFills_swigregister(TotNoFills)

class NoFills(IntField):
    """Proxy of C++ FIX::NoFills class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoFills, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoFills, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoFills self) -> NoFills
        __init__(FIX::NoFills self, FIX::NUMINGROUP const & value) -> NoFills

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoFills(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoFills
    __del__ = lambda self: None
NoFills_swigregister = _quickfix.NoFills_swigregister
NoFills_swigregister(NoFills)

class FillExecID(StringField):
    """Proxy of C++ FIX::FillExecID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FillExecID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FillExecID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FillExecID self) -> FillExecID
        __init__(FIX::FillExecID self, FIX::STRING const & value) -> FillExecID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_FillExecID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FillExecID
    __del__ = lambda self: None
FillExecID_swigregister = _quickfix.FillExecID_swigregister
FillExecID_swigregister(FillExecID)

class FillPx(DoubleField):
    """Proxy of C++ FIX::FillPx class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FillPx, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FillPx, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FillPx self) -> FillPx
        __init__(FIX::FillPx self, FIX::PRICE const & value) -> FillPx

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_FillPx(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FillPx
    __del__ = lambda self: None
FillPx_swigregister = _quickfix.FillPx_swigregister
FillPx_swigregister(FillPx)

class FillQty(DoubleField):
    """Proxy of C++ FIX::FillQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FillQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FillQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FillQty self) -> FillQty
        __init__(FIX::FillQty self, FIX::QTY const & value) -> FillQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_FillQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FillQty
    __del__ = lambda self: None
FillQty_swigregister = _quickfix.FillQty_swigregister
FillQty_swigregister(FillQty)

class LegAllocID(StringField):
    """Proxy of C++ FIX::LegAllocID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegAllocID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegAllocID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegAllocID self) -> LegAllocID
        __init__(FIX::LegAllocID self, FIX::STRING const & value) -> LegAllocID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegAllocID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegAllocID
    __del__ = lambda self: None
LegAllocID_swigregister = _quickfix.LegAllocID_swigregister
LegAllocID_swigregister(LegAllocID)

class LegAllocSettlCurrency(StringField):
    """Proxy of C++ FIX::LegAllocSettlCurrency class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegAllocSettlCurrency, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegAllocSettlCurrency, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegAllocSettlCurrency self) -> LegAllocSettlCurrency
        __init__(FIX::LegAllocSettlCurrency self, FIX::CURRENCY const & value) -> LegAllocSettlCurrency

        Parameters:
            value: FIX::CURRENCY const &

        """
        this = _quickfix.new_LegAllocSettlCurrency(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegAllocSettlCurrency
    __del__ = lambda self: None
LegAllocSettlCurrency_swigregister = _quickfix.LegAllocSettlCurrency_swigregister
LegAllocSettlCurrency_swigregister(LegAllocSettlCurrency)

class TradSesEvent(IntField):
    """Proxy of C++ FIX::TradSesEvent class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradSesEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradSesEvent, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradSesEvent self) -> TradSesEvent
        __init__(FIX::TradSesEvent self, FIX::INT const & value) -> TradSesEvent

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradSesEvent(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradSesEvent
    __del__ = lambda self: None
TradSesEvent_swigregister = _quickfix.TradSesEvent_swigregister
TradSesEvent_swigregister(TradSesEvent)

class MassActionReportID(StringField):
    """Proxy of C++ FIX::MassActionReportID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassActionReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassActionReportID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MassActionReportID self) -> MassActionReportID
        __init__(FIX::MassActionReportID self, FIX::STRING const & value) -> MassActionReportID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MassActionReportID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MassActionReportID
    __del__ = lambda self: None
MassActionReportID_swigregister = _quickfix.MassActionReportID_swigregister
MassActionReportID_swigregister(MassActionReportID)

class NoNotAffectedOrders(IntField):
    """Proxy of C++ FIX::NoNotAffectedOrders class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNotAffectedOrders, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNotAffectedOrders, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNotAffectedOrders self) -> NoNotAffectedOrders
        __init__(FIX::NoNotAffectedOrders self, FIX::NUMINGROUP const & value) -> NoNotAffectedOrders

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNotAffectedOrders(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNotAffectedOrders
    __del__ = lambda self: None
NoNotAffectedOrders_swigregister = _quickfix.NoNotAffectedOrders_swigregister
NoNotAffectedOrders_swigregister(NoNotAffectedOrders)

class NotAffectedOrderID(StringField):
    """Proxy of C++ FIX::NotAffectedOrderID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotAffectedOrderID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotAffectedOrderID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NotAffectedOrderID self) -> NotAffectedOrderID
        __init__(FIX::NotAffectedOrderID self, FIX::STRING const & value) -> NotAffectedOrderID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_NotAffectedOrderID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NotAffectedOrderID
    __del__ = lambda self: None
NotAffectedOrderID_swigregister = _quickfix.NotAffectedOrderID_swigregister
NotAffectedOrderID_swigregister(NotAffectedOrderID)

class NotAffOrigClOrdID(StringField):
    """Proxy of C++ FIX::NotAffOrigClOrdID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotAffOrigClOrdID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotAffOrigClOrdID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NotAffOrigClOrdID self) -> NotAffOrigClOrdID
        __init__(FIX::NotAffOrigClOrdID self, FIX::STRING const & value) -> NotAffOrigClOrdID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_NotAffOrigClOrdID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NotAffOrigClOrdID
    __del__ = lambda self: None
NotAffOrigClOrdID_swigregister = _quickfix.NotAffOrigClOrdID_swigregister
NotAffOrigClOrdID_swigregister(NotAffOrigClOrdID)

class MassActionType(IntField):
    """Proxy of C++ FIX::MassActionType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassActionType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassActionType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MassActionType self) -> MassActionType
        __init__(FIX::MassActionType self, FIX::INT const & value) -> MassActionType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MassActionType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MassActionType
    __del__ = lambda self: None
MassActionType_swigregister = _quickfix.MassActionType_swigregister
MassActionType_swigregister(MassActionType)

class MassActionScope(IntField):
    """Proxy of C++ FIX::MassActionScope class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassActionScope, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassActionScope, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MassActionScope self) -> MassActionScope
        __init__(FIX::MassActionScope self, FIX::INT const & value) -> MassActionScope

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MassActionScope(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MassActionScope
    __del__ = lambda self: None
MassActionScope_swigregister = _quickfix.MassActionScope_swigregister
MassActionScope_swigregister(MassActionScope)

class MassActionResponse(IntField):
    """Proxy of C++ FIX::MassActionResponse class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassActionResponse, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassActionResponse, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MassActionResponse self) -> MassActionResponse
        __init__(FIX::MassActionResponse self, FIX::INT const & value) -> MassActionResponse

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MassActionResponse(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MassActionResponse
    __del__ = lambda self: None
MassActionResponse_swigregister = _quickfix.MassActionResponse_swigregister
MassActionResponse_swigregister(MassActionResponse)

class MassActionRejectReason(IntField):
    """Proxy of C++ FIX::MassActionRejectReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassActionRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassActionRejectReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MassActionRejectReason self) -> MassActionRejectReason
        __init__(FIX::MassActionRejectReason self, FIX::INT const & value) -> MassActionRejectReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MassActionRejectReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MassActionRejectReason
    __del__ = lambda self: None
MassActionRejectReason_swigregister = _quickfix.MassActionRejectReason_swigregister
MassActionRejectReason_swigregister(MassActionRejectReason)

class MultilegModel(IntField):
    """Proxy of C++ FIX::MultilegModel class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultilegModel, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultilegModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MultilegModel self) -> MultilegModel
        __init__(FIX::MultilegModel self, FIX::INT const & value) -> MultilegModel

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MultilegModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MultilegModel
    __del__ = lambda self: None
MultilegModel_swigregister = _quickfix.MultilegModel_swigregister
MultilegModel_swigregister(MultilegModel)

class MultilegPriceMethod(IntField):
    """Proxy of C++ FIX::MultilegPriceMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultilegPriceMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultilegPriceMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MultilegPriceMethod self) -> MultilegPriceMethod
        __init__(FIX::MultilegPriceMethod self, FIX::INT const & value) -> MultilegPriceMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_MultilegPriceMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MultilegPriceMethod
    __del__ = lambda self: None
MultilegPriceMethod_swigregister = _quickfix.MultilegPriceMethod_swigregister
MultilegPriceMethod_swigregister(MultilegPriceMethod)

class LegVolatility(DoubleField):
    """Proxy of C++ FIX::LegVolatility class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegVolatility, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegVolatility, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegVolatility self) -> LegVolatility
        __init__(FIX::LegVolatility self, FIX::FLOAT const & value) -> LegVolatility

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_LegVolatility(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegVolatility
    __del__ = lambda self: None
LegVolatility_swigregister = _quickfix.LegVolatility_swigregister
LegVolatility_swigregister(LegVolatility)

class DividendYield(DoubleField):
    """Proxy of C++ FIX::DividendYield class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DividendYield, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DividendYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DividendYield self) -> DividendYield
        __init__(FIX::DividendYield self, FIX::PERCENTAGE const & value) -> DividendYield

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_DividendYield(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DividendYield
    __del__ = lambda self: None
DividendYield_swigregister = _quickfix.DividendYield_swigregister
DividendYield_swigregister(DividendYield)

class LegDividendYield(DoubleField):
    """Proxy of C++ FIX::LegDividendYield class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegDividendYield, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegDividendYield, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegDividendYield self) -> LegDividendYield
        __init__(FIX::LegDividendYield self, FIX::PERCENTAGE const & value) -> LegDividendYield

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_LegDividendYield(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegDividendYield
    __del__ = lambda self: None
LegDividendYield_swigregister = _quickfix.LegDividendYield_swigregister
LegDividendYield_swigregister(LegDividendYield)

class CurrencyRatio(DoubleField):
    """Proxy of C++ FIX::CurrencyRatio class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurrencyRatio, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurrencyRatio, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::CurrencyRatio self) -> CurrencyRatio
        __init__(FIX::CurrencyRatio self, FIX::FLOAT const & value) -> CurrencyRatio

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_CurrencyRatio(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_CurrencyRatio
    __del__ = lambda self: None
CurrencyRatio_swigregister = _quickfix.CurrencyRatio_swigregister
CurrencyRatio_swigregister(CurrencyRatio)

class LegCurrencyRatio(DoubleField):
    """Proxy of C++ FIX::LegCurrencyRatio class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegCurrencyRatio, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegCurrencyRatio, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegCurrencyRatio self) -> LegCurrencyRatio
        __init__(FIX::LegCurrencyRatio self, FIX::FLOAT const & value) -> LegCurrencyRatio

        Parameters:
            value: FIX::FLOAT const &

        """
        this = _quickfix.new_LegCurrencyRatio(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegCurrencyRatio
    __del__ = lambda self: None
LegCurrencyRatio_swigregister = _quickfix.LegCurrencyRatio_swigregister
LegCurrencyRatio_swigregister(LegCurrencyRatio)

class LegExecInst(StringField):
    """Proxy of C++ FIX::LegExecInst class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegExecInst, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegExecInst, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegExecInst self) -> LegExecInst
        __init__(FIX::LegExecInst self, FIX::MULTIPLECHARVALUE const & value) -> LegExecInst

        Parameters:
            value: FIX::MULTIPLECHARVALUE const &

        """
        this = _quickfix.new_LegExecInst(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegExecInst
    __del__ = lambda self: None
LegExecInst_swigregister = _quickfix.LegExecInst_swigregister
LegExecInst_swigregister(LegExecInst)

class ContingencyType(IntField):
    """Proxy of C++ FIX::ContingencyType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContingencyType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContingencyType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContingencyType self) -> ContingencyType
        __init__(FIX::ContingencyType self, FIX::INT const & value) -> ContingencyType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ContingencyType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContingencyType
    __del__ = lambda self: None
ContingencyType_swigregister = _quickfix.ContingencyType_swigregister
ContingencyType_swigregister(ContingencyType)

class ListRejectReason(IntField):
    """Proxy of C++ FIX::ListRejectReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListRejectReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListRejectReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ListRejectReason self) -> ListRejectReason
        __init__(FIX::ListRejectReason self, FIX::INT const & value) -> ListRejectReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ListRejectReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ListRejectReason
    __del__ = lambda self: None
ListRejectReason_swigregister = _quickfix.ListRejectReason_swigregister
ListRejectReason_swigregister(ListRejectReason)

class NoTrdRepIndicators(IntField):
    """Proxy of C++ FIX::NoTrdRepIndicators class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTrdRepIndicators, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTrdRepIndicators, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoTrdRepIndicators self) -> NoTrdRepIndicators
        __init__(FIX::NoTrdRepIndicators self, FIX::NUMINGROUP const & value) -> NoTrdRepIndicators

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoTrdRepIndicators(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoTrdRepIndicators
    __del__ = lambda self: None
NoTrdRepIndicators_swigregister = _quickfix.NoTrdRepIndicators_swigregister
NoTrdRepIndicators_swigregister(NoTrdRepIndicators)

class TrdRepPartyRole(IntField):
    """Proxy of C++ FIX::TrdRepPartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdRepPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrdRepPartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TrdRepPartyRole self) -> TrdRepPartyRole
        __init__(FIX::TrdRepPartyRole self, FIX::INT const & value) -> TrdRepPartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TrdRepPartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TrdRepPartyRole
    __del__ = lambda self: None
TrdRepPartyRole_swigregister = _quickfix.TrdRepPartyRole_swigregister
TrdRepPartyRole_swigregister(TrdRepPartyRole)

class TrdRepIndicator(BoolField):
    """Proxy of C++ FIX::TrdRepIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrdRepIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrdRepIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TrdRepIndicator self) -> TrdRepIndicator
        __init__(FIX::TrdRepIndicator self, FIX::BOOLEAN const & value) -> TrdRepIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_TrdRepIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TrdRepIndicator
    __del__ = lambda self: None
TrdRepIndicator_swigregister = _quickfix.TrdRepIndicator_swigregister
TrdRepIndicator_swigregister(TrdRepIndicator)

class TradePublishIndicator(IntField):
    """Proxy of C++ FIX::TradePublishIndicator class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradePublishIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradePublishIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TradePublishIndicator self) -> TradePublishIndicator
        __init__(FIX::TradePublishIndicator self, FIX::INT const & value) -> TradePublishIndicator

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TradePublishIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TradePublishIndicator
    __del__ = lambda self: None
TradePublishIndicator_swigregister = _quickfix.TradePublishIndicator_swigregister
TradePublishIndicator_swigregister(TradePublishIndicator)

class UnderlyingLegOptAttribute(CharField):
    """Proxy of C++ FIX::UnderlyingLegOptAttribute class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegOptAttribute, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegOptAttribute, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegOptAttribute self) -> UnderlyingLegOptAttribute
        __init__(FIX::UnderlyingLegOptAttribute self, FIX::CHAR const & value) -> UnderlyingLegOptAttribute

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_UnderlyingLegOptAttribute(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegOptAttribute
    __del__ = lambda self: None
UnderlyingLegOptAttribute_swigregister = _quickfix.UnderlyingLegOptAttribute_swigregister
UnderlyingLegOptAttribute_swigregister(UnderlyingLegOptAttribute)

class UnderlyingLegSecurityDesc(StringField):
    """Proxy of C++ FIX::UnderlyingLegSecurityDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegSecurityDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegSecurityDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegSecurityDesc self) -> UnderlyingLegSecurityDesc
        __init__(FIX::UnderlyingLegSecurityDesc self, FIX::STRING const & value) -> UnderlyingLegSecurityDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingLegSecurityDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityDesc
    __del__ = lambda self: None
UnderlyingLegSecurityDesc_swigregister = _quickfix.UnderlyingLegSecurityDesc_swigregister
UnderlyingLegSecurityDesc_swigregister(UnderlyingLegSecurityDesc)

class MarketReqID(StringField):
    """Proxy of C++ FIX::MarketReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MarketReqID self) -> MarketReqID
        __init__(FIX::MarketReqID self, FIX::STRING const & value) -> MarketReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MarketReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MarketReqID
    __del__ = lambda self: None
MarketReqID_swigregister = _quickfix.MarketReqID_swigregister
MarketReqID_swigregister(MarketReqID)

class MarketReportID(StringField):
    """Proxy of C++ FIX::MarketReportID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketReportID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketReportID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MarketReportID self) -> MarketReportID
        __init__(FIX::MarketReportID self, FIX::STRING const & value) -> MarketReportID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MarketReportID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MarketReportID
    __del__ = lambda self: None
MarketReportID_swigregister = _quickfix.MarketReportID_swigregister
MarketReportID_swigregister(MarketReportID)

class MarketUpdateAction(CharField):
    """Proxy of C++ FIX::MarketUpdateAction class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketUpdateAction, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketUpdateAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MarketUpdateAction self) -> MarketUpdateAction
        __init__(FIX::MarketUpdateAction self, FIX::CHAR const & value) -> MarketUpdateAction

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_MarketUpdateAction(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MarketUpdateAction
    __del__ = lambda self: None
MarketUpdateAction_swigregister = _quickfix.MarketUpdateAction_swigregister
MarketUpdateAction_swigregister(MarketUpdateAction)

class MarketSegmentDesc(StringField):
    """Proxy of C++ FIX::MarketSegmentDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketSegmentDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketSegmentDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MarketSegmentDesc self) -> MarketSegmentDesc
        __init__(FIX::MarketSegmentDesc self, FIX::STRING const & value) -> MarketSegmentDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MarketSegmentDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MarketSegmentDesc
    __del__ = lambda self: None
MarketSegmentDesc_swigregister = _quickfix.MarketSegmentDesc_swigregister
MarketSegmentDesc_swigregister(MarketSegmentDesc)

class EncodedMktSegmDescLen(IntField):
    """Proxy of C++ FIX::EncodedMktSegmDescLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedMktSegmDescLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedMktSegmDescLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedMktSegmDescLen self) -> EncodedMktSegmDescLen
        __init__(FIX::EncodedMktSegmDescLen self, FIX::LENGTH const & value) -> EncodedMktSegmDescLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedMktSegmDescLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedMktSegmDescLen
    __del__ = lambda self: None
EncodedMktSegmDescLen_swigregister = _quickfix.EncodedMktSegmDescLen_swigregister
EncodedMktSegmDescLen_swigregister(EncodedMktSegmDescLen)

class EncodedMktSegmDesc(StringField):
    """Proxy of C++ FIX::EncodedMktSegmDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedMktSegmDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedMktSegmDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedMktSegmDesc self) -> EncodedMktSegmDesc
        __init__(FIX::EncodedMktSegmDesc self, FIX::DATA const & value) -> EncodedMktSegmDesc

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedMktSegmDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedMktSegmDesc
    __del__ = lambda self: None
EncodedMktSegmDesc_swigregister = _quickfix.EncodedMktSegmDesc_swigregister
EncodedMktSegmDesc_swigregister(EncodedMktSegmDesc)

class ApplNewSeqNum(IntField):
    """Proxy of C++ FIX::ApplNewSeqNum class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplNewSeqNum, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplNewSeqNum, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplNewSeqNum self) -> ApplNewSeqNum
        __init__(FIX::ApplNewSeqNum self, FIX::SEQNUM const & value) -> ApplNewSeqNum

        Parameters:
            value: FIX::SEQNUM const &

        """
        this = _quickfix.new_ApplNewSeqNum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplNewSeqNum
    __del__ = lambda self: None
ApplNewSeqNum_swigregister = _quickfix.ApplNewSeqNum_swigregister
ApplNewSeqNum_swigregister(ApplNewSeqNum)

class EncryptedPasswordMethod(IntField):
    """Proxy of C++ FIX::EncryptedPasswordMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncryptedPasswordMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncryptedPasswordMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncryptedPasswordMethod self) -> EncryptedPasswordMethod
        __init__(FIX::EncryptedPasswordMethod self, FIX::INT const & value) -> EncryptedPasswordMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_EncryptedPasswordMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncryptedPasswordMethod
    __del__ = lambda self: None
EncryptedPasswordMethod_swigregister = _quickfix.EncryptedPasswordMethod_swigregister
EncryptedPasswordMethod_swigregister(EncryptedPasswordMethod)

class EncryptedPasswordLen(IntField):
    """Proxy of C++ FIX::EncryptedPasswordLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncryptedPasswordLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncryptedPasswordLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncryptedPasswordLen self) -> EncryptedPasswordLen
        __init__(FIX::EncryptedPasswordLen self, FIX::LENGTH const & value) -> EncryptedPasswordLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncryptedPasswordLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncryptedPasswordLen
    __del__ = lambda self: None
EncryptedPasswordLen_swigregister = _quickfix.EncryptedPasswordLen_swigregister
EncryptedPasswordLen_swigregister(EncryptedPasswordLen)

class EncryptedPassword(StringField):
    """Proxy of C++ FIX::EncryptedPassword class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncryptedPassword, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncryptedPassword, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncryptedPassword self) -> EncryptedPassword
        __init__(FIX::EncryptedPassword self, FIX::DATA const & value) -> EncryptedPassword

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncryptedPassword(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncryptedPassword
    __del__ = lambda self: None
EncryptedPassword_swigregister = _quickfix.EncryptedPassword_swigregister
EncryptedPassword_swigregister(EncryptedPassword)

class EncryptedNewPasswordLen(IntField):
    """Proxy of C++ FIX::EncryptedNewPasswordLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncryptedNewPasswordLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncryptedNewPasswordLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncryptedNewPasswordLen self) -> EncryptedNewPasswordLen
        __init__(FIX::EncryptedNewPasswordLen self, FIX::LENGTH const & value) -> EncryptedNewPasswordLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncryptedNewPasswordLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncryptedNewPasswordLen
    __del__ = lambda self: None
EncryptedNewPasswordLen_swigregister = _quickfix.EncryptedNewPasswordLen_swigregister
EncryptedNewPasswordLen_swigregister(EncryptedNewPasswordLen)

class EncryptedNewPassword(StringField):
    """Proxy of C++ FIX::EncryptedNewPassword class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncryptedNewPassword, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncryptedNewPassword, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncryptedNewPassword self) -> EncryptedNewPassword
        __init__(FIX::EncryptedNewPassword self, FIX::DATA const & value) -> EncryptedNewPassword

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncryptedNewPassword(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncryptedNewPassword
    __del__ = lambda self: None
EncryptedNewPassword_swigregister = _quickfix.EncryptedNewPassword_swigregister
EncryptedNewPassword_swigregister(EncryptedNewPassword)

class UnderlyingLegMaturityTime(StringField):
    """Proxy of C++ FIX::UnderlyingLegMaturityTime class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingLegMaturityTime, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingLegMaturityTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingLegMaturityTime self) -> UnderlyingLegMaturityTime
        __init__(FIX::UnderlyingLegMaturityTime self, FIX::TZTIMEONLY const & value) -> UnderlyingLegMaturityTime

        Parameters:
            value: FIX::TZTIMEONLY const &

        """
        this = _quickfix.new_UnderlyingLegMaturityTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingLegMaturityTime
    __del__ = lambda self: None
UnderlyingLegMaturityTime_swigregister = _quickfix.UnderlyingLegMaturityTime_swigregister
UnderlyingLegMaturityTime_swigregister(UnderlyingLegMaturityTime)

class RefApplExtID(IntField):
    """Proxy of C++ FIX::RefApplExtID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefApplExtID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefApplExtID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefApplExtID self) -> RefApplExtID
        __init__(FIX::RefApplExtID self, FIX::INT const & value) -> RefApplExtID

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RefApplExtID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefApplExtID
    __del__ = lambda self: None
RefApplExtID_swigregister = _quickfix.RefApplExtID_swigregister
RefApplExtID_swigregister(RefApplExtID)

class DefaultApplExtID(IntField):
    """Proxy of C++ FIX::DefaultApplExtID class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultApplExtID, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultApplExtID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DefaultApplExtID self) -> DefaultApplExtID
        __init__(FIX::DefaultApplExtID self, FIX::INT const & value) -> DefaultApplExtID

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DefaultApplExtID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DefaultApplExtID
    __del__ = lambda self: None
DefaultApplExtID_swigregister = _quickfix.DefaultApplExtID_swigregister
DefaultApplExtID_swigregister(DefaultApplExtID)

class DefaultCstmApplVerID(StringField):
    """Proxy of C++ FIX::DefaultCstmApplVerID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultCstmApplVerID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultCstmApplVerID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DefaultCstmApplVerID self) -> DefaultCstmApplVerID
        __init__(FIX::DefaultCstmApplVerID self, FIX::STRING const & value) -> DefaultCstmApplVerID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DefaultCstmApplVerID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DefaultCstmApplVerID
    __del__ = lambda self: None
DefaultCstmApplVerID_swigregister = _quickfix.DefaultCstmApplVerID_swigregister
DefaultCstmApplVerID_swigregister(DefaultCstmApplVerID)

class SessionStatus(IntField):
    """Proxy of C++ FIX::SessionStatus class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionStatus, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SessionStatus, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SessionStatus self) -> SessionStatus
        __init__(FIX::SessionStatus self, FIX::INT const & value) -> SessionStatus

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SessionStatus(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SessionStatus
    __del__ = lambda self: None
SessionStatus_swigregister = _quickfix.SessionStatus_swigregister
SessionStatus_swigregister(SessionStatus)

class DefaultVerIndicator(BoolField):
    """Proxy of C++ FIX::DefaultVerIndicator class"""
    __swig_setmethods__ = {}
    for _s in [BoolField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultVerIndicator, name, value)
    __swig_getmethods__ = {}
    for _s in [BoolField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultVerIndicator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DefaultVerIndicator self) -> DefaultVerIndicator
        __init__(FIX::DefaultVerIndicator self, FIX::BOOLEAN const & value) -> DefaultVerIndicator

        Parameters:
            value: FIX::BOOLEAN const &

        """
        this = _quickfix.new_DefaultVerIndicator(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DefaultVerIndicator
    __del__ = lambda self: None
DefaultVerIndicator_swigregister = _quickfix.DefaultVerIndicator_swigregister
DefaultVerIndicator_swigregister(DefaultVerIndicator)

class Nested4PartySubIDType(IntField):
    """Proxy of C++ FIX::Nested4PartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested4PartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested4PartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested4PartySubIDType self) -> Nested4PartySubIDType
        __init__(FIX::Nested4PartySubIDType self, FIX::INT const & value) -> Nested4PartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_Nested4PartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested4PartySubIDType
    __del__ = lambda self: None
Nested4PartySubIDType_swigregister = _quickfix.Nested4PartySubIDType_swigregister
Nested4PartySubIDType_swigregister(Nested4PartySubIDType)

class Nested4PartySubID(StringField):
    """Proxy of C++ FIX::Nested4PartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested4PartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested4PartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested4PartySubID self) -> Nested4PartySubID
        __init__(FIX::Nested4PartySubID self, FIX::STRING const & value) -> Nested4PartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Nested4PartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested4PartySubID
    __del__ = lambda self: None
Nested4PartySubID_swigregister = _quickfix.Nested4PartySubID_swigregister
Nested4PartySubID_swigregister(Nested4PartySubID)

class NoNested4PartySubIDs(IntField):
    """Proxy of C++ FIX::NoNested4PartySubIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNested4PartySubIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNested4PartySubIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNested4PartySubIDs self) -> NoNested4PartySubIDs
        __init__(FIX::NoNested4PartySubIDs self, FIX::NUMINGROUP const & value) -> NoNested4PartySubIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNested4PartySubIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNested4PartySubIDs
    __del__ = lambda self: None
NoNested4PartySubIDs_swigregister = _quickfix.NoNested4PartySubIDs_swigregister
NoNested4PartySubIDs_swigregister(NoNested4PartySubIDs)

class NoNested4PartyIDs(IntField):
    """Proxy of C++ FIX::NoNested4PartyIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNested4PartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNested4PartyIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNested4PartyIDs self) -> NoNested4PartyIDs
        __init__(FIX::NoNested4PartyIDs self, FIX::NUMINGROUP const & value) -> NoNested4PartyIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNested4PartyIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNested4PartyIDs
    __del__ = lambda self: None
NoNested4PartyIDs_swigregister = _quickfix.NoNested4PartyIDs_swigregister
NoNested4PartyIDs_swigregister(NoNested4PartyIDs)

class Nested4PartyID(StringField):
    """Proxy of C++ FIX::Nested4PartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested4PartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested4PartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested4PartyID self) -> Nested4PartyID
        __init__(FIX::Nested4PartyID self, FIX::STRING const & value) -> Nested4PartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Nested4PartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested4PartyID
    __del__ = lambda self: None
Nested4PartyID_swigregister = _quickfix.Nested4PartyID_swigregister
Nested4PartyID_swigregister(Nested4PartyID)

class Nested4PartyIDSource(CharField):
    """Proxy of C++ FIX::Nested4PartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested4PartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested4PartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested4PartyIDSource self) -> Nested4PartyIDSource
        __init__(FIX::Nested4PartyIDSource self, FIX::CHAR const & value) -> Nested4PartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_Nested4PartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested4PartyIDSource
    __del__ = lambda self: None
Nested4PartyIDSource_swigregister = _quickfix.Nested4PartyIDSource_swigregister
Nested4PartyIDSource_swigregister(Nested4PartyIDSource)

class Nested4PartyRole(IntField):
    """Proxy of C++ FIX::Nested4PartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nested4PartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nested4PartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Nested4PartyRole self) -> Nested4PartyRole
        __init__(FIX::Nested4PartyRole self, FIX::INT const & value) -> Nested4PartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_Nested4PartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Nested4PartyRole
    __del__ = lambda self: None
Nested4PartyRole_swigregister = _quickfix.Nested4PartyRole_swigregister
Nested4PartyRole_swigregister(Nested4PartyRole)

class LegLastQty(DoubleField):
    """Proxy of C++ FIX::LegLastQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegLastQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegLastQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegLastQty self) -> LegLastQty
        __init__(FIX::LegLastQty self, FIX::QTY const & value) -> LegLastQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LegLastQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegLastQty
    __del__ = lambda self: None
LegLastQty_swigregister = _quickfix.LegLastQty_swigregister
LegLastQty_swigregister(LegLastQty)

class UnderlyingExerciseStyle(IntField):
    """Proxy of C++ FIX::UnderlyingExerciseStyle class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingExerciseStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingExerciseStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingExerciseStyle self) -> UnderlyingExerciseStyle
        __init__(FIX::UnderlyingExerciseStyle self, FIX::INT const & value) -> UnderlyingExerciseStyle

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingExerciseStyle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingExerciseStyle
    __del__ = lambda self: None
UnderlyingExerciseStyle_swigregister = _quickfix.UnderlyingExerciseStyle_swigregister
UnderlyingExerciseStyle_swigregister(UnderlyingExerciseStyle)

class LegExerciseStyle(IntField):
    """Proxy of C++ FIX::LegExerciseStyle class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegExerciseStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegExerciseStyle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegExerciseStyle self) -> LegExerciseStyle
        __init__(FIX::LegExerciseStyle self, FIX::INT const & value) -> LegExerciseStyle

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegExerciseStyle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegExerciseStyle
    __del__ = lambda self: None
LegExerciseStyle_swigregister = _quickfix.LegExerciseStyle_swigregister
LegExerciseStyle_swigregister(LegExerciseStyle)

class LegPriceUnitOfMeasure(StringField):
    """Proxy of C++ FIX::LegPriceUnitOfMeasure class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPriceUnitOfMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegPriceUnitOfMeasure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegPriceUnitOfMeasure self) -> LegPriceUnitOfMeasure
        __init__(FIX::LegPriceUnitOfMeasure self, FIX::STRING const & value) -> LegPriceUnitOfMeasure

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_LegPriceUnitOfMeasure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegPriceUnitOfMeasure
    __del__ = lambda self: None
LegPriceUnitOfMeasure_swigregister = _quickfix.LegPriceUnitOfMeasure_swigregister
LegPriceUnitOfMeasure_swigregister(LegPriceUnitOfMeasure)

class LegPriceUnitOfMeasureQty(DoubleField):
    """Proxy of C++ FIX::LegPriceUnitOfMeasureQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegPriceUnitOfMeasureQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegPriceUnitOfMeasureQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegPriceUnitOfMeasureQty self) -> LegPriceUnitOfMeasureQty
        __init__(FIX::LegPriceUnitOfMeasureQty self, FIX::QTY const & value) -> LegPriceUnitOfMeasureQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_LegPriceUnitOfMeasureQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegPriceUnitOfMeasureQty
    __del__ = lambda self: None
LegPriceUnitOfMeasureQty_swigregister = _quickfix.LegPriceUnitOfMeasureQty_swigregister
LegPriceUnitOfMeasureQty_swigregister(LegPriceUnitOfMeasureQty)

class UnderlyingUnitOfMeasureQty(DoubleField):
    """Proxy of C++ FIX::UnderlyingUnitOfMeasureQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingUnitOfMeasureQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingUnitOfMeasureQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingUnitOfMeasureQty self) -> UnderlyingUnitOfMeasureQty
        __init__(FIX::UnderlyingUnitOfMeasureQty self, FIX::QTY const & value) -> UnderlyingUnitOfMeasureQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_UnderlyingUnitOfMeasureQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingUnitOfMeasureQty
    __del__ = lambda self: None
UnderlyingUnitOfMeasureQty_swigregister = _quickfix.UnderlyingUnitOfMeasureQty_swigregister
UnderlyingUnitOfMeasureQty_swigregister(UnderlyingUnitOfMeasureQty)

class UnderlyingPriceUnitOfMeasure(StringField):
    """Proxy of C++ FIX::UnderlyingPriceUnitOfMeasure class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingPriceUnitOfMeasure, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingPriceUnitOfMeasure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingPriceUnitOfMeasure self) -> UnderlyingPriceUnitOfMeasure
        __init__(FIX::UnderlyingPriceUnitOfMeasure self, FIX::STRING const & value) -> UnderlyingPriceUnitOfMeasure

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingPriceUnitOfMeasure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingPriceUnitOfMeasure
    __del__ = lambda self: None
UnderlyingPriceUnitOfMeasure_swigregister = _quickfix.UnderlyingPriceUnitOfMeasure_swigregister
UnderlyingPriceUnitOfMeasure_swigregister(UnderlyingPriceUnitOfMeasure)

class UnderlyingPriceUnitOfMeasureQty(DoubleField):
    """Proxy of C++ FIX::UnderlyingPriceUnitOfMeasureQty class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingPriceUnitOfMeasureQty, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingPriceUnitOfMeasureQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingPriceUnitOfMeasureQty self) -> UnderlyingPriceUnitOfMeasureQty
        __init__(FIX::UnderlyingPriceUnitOfMeasureQty self, FIX::QTY const & value) -> UnderlyingPriceUnitOfMeasureQty

        Parameters:
            value: FIX::QTY const &

        """
        this = _quickfix.new_UnderlyingPriceUnitOfMeasureQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingPriceUnitOfMeasureQty
    __del__ = lambda self: None
UnderlyingPriceUnitOfMeasureQty_swigregister = _quickfix.UnderlyingPriceUnitOfMeasureQty_swigregister
UnderlyingPriceUnitOfMeasureQty_swigregister(UnderlyingPriceUnitOfMeasureQty)

class ApplReportType(IntField):
    """Proxy of C++ FIX::ApplReportType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApplReportType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ApplReportType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ApplReportType self) -> ApplReportType
        __init__(FIX::ApplReportType self, FIX::INT const & value) -> ApplReportType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ApplReportType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ApplReportType
    __del__ = lambda self: None
ApplReportType_swigregister = _quickfix.ApplReportType_swigregister
ApplReportType_swigregister(ApplReportType)

class HaltReasonInt(IntField):
    """Proxy of C++ FIX::HaltReasonInt class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaltReasonInt, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaltReasonInt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::HaltReasonInt self) -> HaltReasonInt
        __init__(FIX::HaltReasonInt self, FIX::INT const & value) -> HaltReasonInt

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_HaltReasonInt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_HaltReasonInt
    __del__ = lambda self: None
HaltReasonInt_swigregister = _quickfix.HaltReasonInt_swigregister
HaltReasonInt_swigregister(HaltReasonInt)

class SideLastQty(IntField):
    """Proxy of C++ FIX::SideLastQty class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideLastQty, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideLastQty, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideLastQty self) -> SideLastQty
        __init__(FIX::SideLastQty self, FIX::INT const & value) -> SideLastQty

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SideLastQty(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideLastQty
    __del__ = lambda self: None
SideLastQty_swigregister = _quickfix.SideLastQty_swigregister
SideLastQty_swigregister(SideLastQty)

class UnderlyingInstrumentPartyID(StringField):
    """Proxy of C++ FIX::UnderlyingInstrumentPartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingInstrumentPartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingInstrumentPartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingInstrumentPartyID self) -> UnderlyingInstrumentPartyID
        __init__(FIX::UnderlyingInstrumentPartyID self, FIX::STRING const & value) -> UnderlyingInstrumentPartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingInstrumentPartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrumentPartyID
    __del__ = lambda self: None
UnderlyingInstrumentPartyID_swigregister = _quickfix.UnderlyingInstrumentPartyID_swigregister
UnderlyingInstrumentPartyID_swigregister(UnderlyingInstrumentPartyID)

class UnderlyingInstrumentPartyIDSource(CharField):
    """Proxy of C++ FIX::UnderlyingInstrumentPartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingInstrumentPartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingInstrumentPartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingInstrumentPartyIDSource self) -> UnderlyingInstrumentPartyIDSource
        __init__(FIX::UnderlyingInstrumentPartyIDSource self, FIX::CHAR const & value) -> UnderlyingInstrumentPartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_UnderlyingInstrumentPartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrumentPartyIDSource
    __del__ = lambda self: None
UnderlyingInstrumentPartyIDSource_swigregister = _quickfix.UnderlyingInstrumentPartyIDSource_swigregister
UnderlyingInstrumentPartyIDSource_swigregister(UnderlyingInstrumentPartyIDSource)

class UnderlyingInstrumentPartyRole(IntField):
    """Proxy of C++ FIX::UnderlyingInstrumentPartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingInstrumentPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingInstrumentPartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingInstrumentPartyRole self) -> UnderlyingInstrumentPartyRole
        __init__(FIX::UnderlyingInstrumentPartyRole self, FIX::INT const & value) -> UnderlyingInstrumentPartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingInstrumentPartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrumentPartyRole
    __del__ = lambda self: None
UnderlyingInstrumentPartyRole_swigregister = _quickfix.UnderlyingInstrumentPartyRole_swigregister
UnderlyingInstrumentPartyRole_swigregister(UnderlyingInstrumentPartyRole)

class UnderlyingInstrumentPartySubID(StringField):
    """Proxy of C++ FIX::UnderlyingInstrumentPartySubID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingInstrumentPartySubID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingInstrumentPartySubID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingInstrumentPartySubID self) -> UnderlyingInstrumentPartySubID
        __init__(FIX::UnderlyingInstrumentPartySubID self, FIX::STRING const & value) -> UnderlyingInstrumentPartySubID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingInstrumentPartySubID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrumentPartySubID
    __del__ = lambda self: None
UnderlyingInstrumentPartySubID_swigregister = _quickfix.UnderlyingInstrumentPartySubID_swigregister
UnderlyingInstrumentPartySubID_swigregister(UnderlyingInstrumentPartySubID)

class UnderlyingInstrumentPartySubIDType(IntField):
    """Proxy of C++ FIX::UnderlyingInstrumentPartySubIDType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingInstrumentPartySubIDType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingInstrumentPartySubIDType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingInstrumentPartySubIDType self) -> UnderlyingInstrumentPartySubIDType
        __init__(FIX::UnderlyingInstrumentPartySubIDType self, FIX::INT const & value) -> UnderlyingInstrumentPartySubIDType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingInstrumentPartySubIDType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrumentPartySubIDType
    __del__ = lambda self: None
UnderlyingInstrumentPartySubIDType_swigregister = _quickfix.UnderlyingInstrumentPartySubIDType_swigregister
UnderlyingInstrumentPartySubIDType_swigregister(UnderlyingInstrumentPartySubIDType)

class OptPayoutAmount(DoubleField):
    """Proxy of C++ FIX::OptPayoutAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptPayoutAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptPayoutAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OptPayoutAmount self) -> OptPayoutAmount
        __init__(FIX::OptPayoutAmount self, FIX::AMT const & value) -> OptPayoutAmount

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_OptPayoutAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OptPayoutAmount
    __del__ = lambda self: None
OptPayoutAmount_swigregister = _quickfix.OptPayoutAmount_swigregister
OptPayoutAmount_swigregister(OptPayoutAmount)

class ValuationMethod(StringField):
    """Proxy of C++ FIX::ValuationMethod class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ValuationMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ValuationMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ValuationMethod self) -> ValuationMethod
        __init__(FIX::ValuationMethod self, FIX::STRING const & value) -> ValuationMethod

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ValuationMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ValuationMethod
    __del__ = lambda self: None
ValuationMethod_swigregister = _quickfix.ValuationMethod_swigregister
ValuationMethod_swigregister(ValuationMethod)

class DerivativeValuationMethod(StringField):
    """Proxy of C++ FIX::DerivativeValuationMethod class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeValuationMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeValuationMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeValuationMethod self) -> DerivativeValuationMethod
        __init__(FIX::DerivativeValuationMethod self, FIX::STRING const & value) -> DerivativeValuationMethod

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_DerivativeValuationMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeValuationMethod
    __del__ = lambda self: None
DerivativeValuationMethod_swigregister = _quickfix.DerivativeValuationMethod_swigregister
DerivativeValuationMethod_swigregister(DerivativeValuationMethod)

class SideExecID(StringField):
    """Proxy of C++ FIX::SideExecID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideExecID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideExecID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideExecID self) -> SideExecID
        __init__(FIX::SideExecID self, FIX::STRING const & value) -> SideExecID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SideExecID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideExecID
    __del__ = lambda self: None
SideExecID_swigregister = _quickfix.SideExecID_swigregister
SideExecID_swigregister(SideExecID)

class OrderDelay(IntField):
    """Proxy of C++ FIX::OrderDelay class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderDelay, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderDelay, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderDelay self) -> OrderDelay
        __init__(FIX::OrderDelay self, FIX::INT const & value) -> OrderDelay

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_OrderDelay(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderDelay
    __del__ = lambda self: None
OrderDelay_swigregister = _quickfix.OrderDelay_swigregister
OrderDelay_swigregister(OrderDelay)

class OrderDelayUnit(IntField):
    """Proxy of C++ FIX::OrderDelayUnit class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrderDelayUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrderDelayUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrderDelayUnit self) -> OrderDelayUnit
        __init__(FIX::OrderDelayUnit self, FIX::INT const & value) -> OrderDelayUnit

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_OrderDelayUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrderDelayUnit
    __del__ = lambda self: None
OrderDelayUnit_swigregister = _quickfix.OrderDelayUnit_swigregister
OrderDelayUnit_swigregister(OrderDelayUnit)

class VenueType(CharField):
    """Proxy of C++ FIX::VenueType class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VenueType, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VenueType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::VenueType self) -> VenueType
        __init__(FIX::VenueType self, FIX::CHAR const & value) -> VenueType

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_VenueType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_VenueType
    __del__ = lambda self: None
VenueType_swigregister = _quickfix.VenueType_swigregister
VenueType_swigregister(VenueType)

class RefOrdIDReason(IntField):
    """Proxy of C++ FIX::RefOrdIDReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefOrdIDReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefOrdIDReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefOrdIDReason self) -> RefOrdIDReason
        __init__(FIX::RefOrdIDReason self, FIX::INT const & value) -> RefOrdIDReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RefOrdIDReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefOrdIDReason
    __del__ = lambda self: None
RefOrdIDReason_swigregister = _quickfix.RefOrdIDReason_swigregister
RefOrdIDReason_swigregister(RefOrdIDReason)

class OrigCustOrderCapacity(IntField):
    """Proxy of C++ FIX::OrigCustOrderCapacity class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrigCustOrderCapacity, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrigCustOrderCapacity, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OrigCustOrderCapacity self) -> OrigCustOrderCapacity
        __init__(FIX::OrigCustOrderCapacity self, FIX::INT const & value) -> OrigCustOrderCapacity

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_OrigCustOrderCapacity(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OrigCustOrderCapacity
    __del__ = lambda self: None
OrigCustOrderCapacity_swigregister = _quickfix.OrigCustOrderCapacity_swigregister
OrigCustOrderCapacity_swigregister(OrigCustOrderCapacity)

class RefApplReqID(StringField):
    """Proxy of C++ FIX::RefApplReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefApplReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefApplReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RefApplReqID self) -> RefApplReqID
        __init__(FIX::RefApplReqID self, FIX::STRING const & value) -> RefApplReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RefApplReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RefApplReqID
    __del__ = lambda self: None
RefApplReqID_swigregister = _quickfix.RefApplReqID_swigregister
RefApplReqID_swigregister(RefApplReqID)

class ModelType(IntField):
    """Proxy of C++ FIX::ModelType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModelType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ModelType self) -> ModelType
        __init__(FIX::ModelType self, FIX::INT const & value) -> ModelType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ModelType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ModelType
    __del__ = lambda self: None
ModelType_swigregister = _quickfix.ModelType_swigregister
ModelType_swigregister(ModelType)

class ContractMultiplierUnit(IntField):
    """Proxy of C++ FIX::ContractMultiplierUnit class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContractMultiplierUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContractMultiplierUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ContractMultiplierUnit self) -> ContractMultiplierUnit
        __init__(FIX::ContractMultiplierUnit self, FIX::INT const & value) -> ContractMultiplierUnit

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ContractMultiplierUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ContractMultiplierUnit
    __del__ = lambda self: None
ContractMultiplierUnit_swigregister = _quickfix.ContractMultiplierUnit_swigregister
ContractMultiplierUnit_swigregister(ContractMultiplierUnit)

class LegContractMultiplierUnit(IntField):
    """Proxy of C++ FIX::LegContractMultiplierUnit class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegContractMultiplierUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegContractMultiplierUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegContractMultiplierUnit self) -> LegContractMultiplierUnit
        __init__(FIX::LegContractMultiplierUnit self, FIX::INT const & value) -> LegContractMultiplierUnit

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegContractMultiplierUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegContractMultiplierUnit
    __del__ = lambda self: None
LegContractMultiplierUnit_swigregister = _quickfix.LegContractMultiplierUnit_swigregister
LegContractMultiplierUnit_swigregister(LegContractMultiplierUnit)

class UnderlyingContractMultiplierUnit(IntField):
    """Proxy of C++ FIX::UnderlyingContractMultiplierUnit class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingContractMultiplierUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingContractMultiplierUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingContractMultiplierUnit self) -> UnderlyingContractMultiplierUnit
        __init__(FIX::UnderlyingContractMultiplierUnit self, FIX::INT const & value) -> UnderlyingContractMultiplierUnit

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingContractMultiplierUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingContractMultiplierUnit
    __del__ = lambda self: None
UnderlyingContractMultiplierUnit_swigregister = _quickfix.UnderlyingContractMultiplierUnit_swigregister
UnderlyingContractMultiplierUnit_swigregister(UnderlyingContractMultiplierUnit)

class DerivativeContractMultiplierUnit(IntField):
    """Proxy of C++ FIX::DerivativeContractMultiplierUnit class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeContractMultiplierUnit, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeContractMultiplierUnit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeContractMultiplierUnit self) -> DerivativeContractMultiplierUnit
        __init__(FIX::DerivativeContractMultiplierUnit self, FIX::INT const & value) -> DerivativeContractMultiplierUnit

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativeContractMultiplierUnit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeContractMultiplierUnit
    __del__ = lambda self: None
DerivativeContractMultiplierUnit_swigregister = _quickfix.DerivativeContractMultiplierUnit_swigregister
DerivativeContractMultiplierUnit_swigregister(DerivativeContractMultiplierUnit)

class FlowScheduleType(IntField):
    """Proxy of C++ FIX::FlowScheduleType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlowScheduleType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlowScheduleType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FlowScheduleType self) -> FlowScheduleType
        __init__(FIX::FlowScheduleType self, FIX::INT const & value) -> FlowScheduleType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_FlowScheduleType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FlowScheduleType
    __del__ = lambda self: None
FlowScheduleType_swigregister = _quickfix.FlowScheduleType_swigregister
FlowScheduleType_swigregister(FlowScheduleType)

class LegFlowScheduleType(IntField):
    """Proxy of C++ FIX::LegFlowScheduleType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LegFlowScheduleType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LegFlowScheduleType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LegFlowScheduleType self) -> LegFlowScheduleType
        __init__(FIX::LegFlowScheduleType self, FIX::INT const & value) -> LegFlowScheduleType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_LegFlowScheduleType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LegFlowScheduleType
    __del__ = lambda self: None
LegFlowScheduleType_swigregister = _quickfix.LegFlowScheduleType_swigregister
LegFlowScheduleType_swigregister(LegFlowScheduleType)

class UnderlyingFlowScheduleType(IntField):
    """Proxy of C++ FIX::UnderlyingFlowScheduleType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingFlowScheduleType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingFlowScheduleType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingFlowScheduleType self) -> UnderlyingFlowScheduleType
        __init__(FIX::UnderlyingFlowScheduleType self, FIX::INT const & value) -> UnderlyingFlowScheduleType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingFlowScheduleType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingFlowScheduleType
    __del__ = lambda self: None
UnderlyingFlowScheduleType_swigregister = _quickfix.UnderlyingFlowScheduleType_swigregister
UnderlyingFlowScheduleType_swigregister(UnderlyingFlowScheduleType)

class DerivativeFlowScheduleType(IntField):
    """Proxy of C++ FIX::DerivativeFlowScheduleType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeFlowScheduleType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeFlowScheduleType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DerivativeFlowScheduleType self) -> DerivativeFlowScheduleType
        __init__(FIX::DerivativeFlowScheduleType self, FIX::INT const & value) -> DerivativeFlowScheduleType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_DerivativeFlowScheduleType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DerivativeFlowScheduleType
    __del__ = lambda self: None
DerivativeFlowScheduleType_swigregister = _quickfix.DerivativeFlowScheduleType_swigregister
DerivativeFlowScheduleType_swigregister(DerivativeFlowScheduleType)

class FillLiquidityInd(IntField):
    """Proxy of C++ FIX::FillLiquidityInd class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FillLiquidityInd, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FillLiquidityInd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FillLiquidityInd self) -> FillLiquidityInd
        __init__(FIX::FillLiquidityInd self, FIX::INT const & value) -> FillLiquidityInd

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_FillLiquidityInd(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FillLiquidityInd
    __del__ = lambda self: None
FillLiquidityInd_swigregister = _quickfix.FillLiquidityInd_swigregister
FillLiquidityInd_swigregister(FillLiquidityInd)

class SideLiquidityInd(IntField):
    """Proxy of C++ FIX::SideLiquidityInd class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SideLiquidityInd, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SideLiquidityInd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SideLiquidityInd self) -> SideLiquidityInd
        __init__(FIX::SideLiquidityInd self, FIX::INT const & value) -> SideLiquidityInd

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SideLiquidityInd(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SideLiquidityInd
    __del__ = lambda self: None
SideLiquidityInd_swigregister = _quickfix.SideLiquidityInd_swigregister
SideLiquidityInd_swigregister(SideLiquidityInd)

class NoRateSources(IntField):
    """Proxy of C++ FIX::NoRateSources class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoRateSources, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoRateSources, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoRateSources self) -> NoRateSources
        __init__(FIX::NoRateSources self, FIX::NUMINGROUP const & value) -> NoRateSources

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoRateSources(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoRateSources
    __del__ = lambda self: None
NoRateSources_swigregister = _quickfix.NoRateSources_swigregister
NoRateSources_swigregister(NoRateSources)

class RateSource(IntField):
    """Proxy of C++ FIX::RateSource class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RateSource, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RateSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RateSource self) -> RateSource
        __init__(FIX::RateSource self, FIX::INT const & value) -> RateSource

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RateSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RateSource
    __del__ = lambda self: None
RateSource_swigregister = _quickfix.RateSource_swigregister
RateSource_swigregister(RateSource)

class RateSourceType(IntField):
    """Proxy of C++ FIX::RateSourceType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RateSourceType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RateSourceType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RateSourceType self) -> RateSourceType
        __init__(FIX::RateSourceType self, FIX::INT const & value) -> RateSourceType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_RateSourceType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RateSourceType
    __del__ = lambda self: None
RateSourceType_swigregister = _quickfix.RateSourceType_swigregister
RateSourceType_swigregister(RateSourceType)

class ReferencePage(StringField):
    """Proxy of C++ FIX::ReferencePage class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferencePage, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReferencePage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ReferencePage self) -> ReferencePage
        __init__(FIX::ReferencePage self, FIX::STRING const & value) -> ReferencePage

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_ReferencePage(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ReferencePage
    __del__ = lambda self: None
ReferencePage_swigregister = _quickfix.ReferencePage_swigregister
ReferencePage_swigregister(ReferencePage)

class RestructuringType(StringField):
    """Proxy of C++ FIX::RestructuringType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RestructuringType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RestructuringType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RestructuringType self) -> RestructuringType
        __init__(FIX::RestructuringType self, FIX::STRING const & value) -> RestructuringType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_RestructuringType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RestructuringType
    __del__ = lambda self: None
RestructuringType_swigregister = _quickfix.RestructuringType_swigregister
RestructuringType_swigregister(RestructuringType)

class Seniority(StringField):
    """Proxy of C++ FIX::Seniority class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Seniority, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Seniority, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Seniority self) -> Seniority
        __init__(FIX::Seniority self, FIX::STRING const & value) -> Seniority

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_Seniority(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Seniority
    __del__ = lambda self: None
Seniority_swigregister = _quickfix.Seniority_swigregister
Seniority_swigregister(Seniority)

class NotionalPercentageOutstanding(DoubleField):
    """Proxy of C++ FIX::NotionalPercentageOutstanding class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotionalPercentageOutstanding, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotionalPercentageOutstanding, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NotionalPercentageOutstanding self) -> NotionalPercentageOutstanding
        __init__(FIX::NotionalPercentageOutstanding self, FIX::PERCENTAGE const & value) -> NotionalPercentageOutstanding

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_NotionalPercentageOutstanding(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NotionalPercentageOutstanding
    __del__ = lambda self: None
NotionalPercentageOutstanding_swigregister = _quickfix.NotionalPercentageOutstanding_swigregister
NotionalPercentageOutstanding_swigregister(NotionalPercentageOutstanding)

class OriginalNotionalPercentageOutstanding(DoubleField):
    """Proxy of C++ FIX::OriginalNotionalPercentageOutstanding class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OriginalNotionalPercentageOutstanding, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OriginalNotionalPercentageOutstanding, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OriginalNotionalPercentageOutstanding self) -> OriginalNotionalPercentageOutstanding
        __init__(FIX::OriginalNotionalPercentageOutstanding self, FIX::PERCENTAGE const & value) -> OriginalNotionalPercentageOutstanding

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_OriginalNotionalPercentageOutstanding(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OriginalNotionalPercentageOutstanding
    __del__ = lambda self: None
OriginalNotionalPercentageOutstanding_swigregister = _quickfix.OriginalNotionalPercentageOutstanding_swigregister
OriginalNotionalPercentageOutstanding_swigregister(OriginalNotionalPercentageOutstanding)

class UnderlyingRestructuringType(StringField):
    """Proxy of C++ FIX::UnderlyingRestructuringType class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingRestructuringType, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingRestructuringType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingRestructuringType self) -> UnderlyingRestructuringType
        __init__(FIX::UnderlyingRestructuringType self, FIX::STRING const & value) -> UnderlyingRestructuringType

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingRestructuringType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingRestructuringType
    __del__ = lambda self: None
UnderlyingRestructuringType_swigregister = _quickfix.UnderlyingRestructuringType_swigregister
UnderlyingRestructuringType_swigregister(UnderlyingRestructuringType)

class UnderlyingSeniority(StringField):
    """Proxy of C++ FIX::UnderlyingSeniority class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingSeniority, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingSeniority, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingSeniority self) -> UnderlyingSeniority
        __init__(FIX::UnderlyingSeniority self, FIX::STRING const & value) -> UnderlyingSeniority

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_UnderlyingSeniority(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingSeniority
    __del__ = lambda self: None
UnderlyingSeniority_swigregister = _quickfix.UnderlyingSeniority_swigregister
UnderlyingSeniority_swigregister(UnderlyingSeniority)

class UnderlyingNotionalPercentageOutstanding(DoubleField):
    """Proxy of C++ FIX::UnderlyingNotionalPercentageOutstanding class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingNotionalPercentageOutstanding, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingNotionalPercentageOutstanding, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingNotionalPercentageOutstanding self) -> UnderlyingNotionalPercentageOutstanding
        __init__(FIX::UnderlyingNotionalPercentageOutstanding self, FIX::PERCENTAGE const & value) -> UnderlyingNotionalPercentageOutstanding

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_UnderlyingNotionalPercentageOutstanding(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingNotionalPercentageOutstanding
    __del__ = lambda self: None
UnderlyingNotionalPercentageOutstanding_swigregister = _quickfix.UnderlyingNotionalPercentageOutstanding_swigregister
UnderlyingNotionalPercentageOutstanding_swigregister(UnderlyingNotionalPercentageOutstanding)

class UnderlyingOriginalNotionalPercentageOutstanding(DoubleField):
    """Proxy of C++ FIX::UnderlyingOriginalNotionalPercentageOutstanding class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingOriginalNotionalPercentageOutstanding, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingOriginalNotionalPercentageOutstanding, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingOriginalNotionalPercentageOutstanding self) -> UnderlyingOriginalNotionalPercentageOutstanding
        __init__(FIX::UnderlyingOriginalNotionalPercentageOutstanding self, FIX::PERCENTAGE const & value) -> UnderlyingOriginalNotionalPercentageOutstanding

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_UnderlyingOriginalNotionalPercentageOutstanding(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingOriginalNotionalPercentageOutstanding
    __del__ = lambda self: None
UnderlyingOriginalNotionalPercentageOutstanding_swigregister = _quickfix.UnderlyingOriginalNotionalPercentageOutstanding_swigregister
UnderlyingOriginalNotionalPercentageOutstanding_swigregister(UnderlyingOriginalNotionalPercentageOutstanding)

class AttachmentPoint(DoubleField):
    """Proxy of C++ FIX::AttachmentPoint class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AttachmentPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AttachmentPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::AttachmentPoint self) -> AttachmentPoint
        __init__(FIX::AttachmentPoint self, FIX::PERCENTAGE const & value) -> AttachmentPoint

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_AttachmentPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_AttachmentPoint
    __del__ = lambda self: None
AttachmentPoint_swigregister = _quickfix.AttachmentPoint_swigregister
AttachmentPoint_swigregister(AttachmentPoint)

class DetachmentPoint(DoubleField):
    """Proxy of C++ FIX::DetachmentPoint class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DetachmentPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DetachmentPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DetachmentPoint self) -> DetachmentPoint
        __init__(FIX::DetachmentPoint self, FIX::PERCENTAGE const & value) -> DetachmentPoint

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_DetachmentPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DetachmentPoint
    __del__ = lambda self: None
DetachmentPoint_swigregister = _quickfix.DetachmentPoint_swigregister
DetachmentPoint_swigregister(DetachmentPoint)

class UnderlyingAttachmentPoint(DoubleField):
    """Proxy of C++ FIX::UnderlyingAttachmentPoint class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingAttachmentPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingAttachmentPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingAttachmentPoint self) -> UnderlyingAttachmentPoint
        __init__(FIX::UnderlyingAttachmentPoint self, FIX::PERCENTAGE const & value) -> UnderlyingAttachmentPoint

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_UnderlyingAttachmentPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingAttachmentPoint
    __del__ = lambda self: None
UnderlyingAttachmentPoint_swigregister = _quickfix.UnderlyingAttachmentPoint_swigregister
UnderlyingAttachmentPoint_swigregister(UnderlyingAttachmentPoint)

class UnderlyingDetachmentPoint(DoubleField):
    """Proxy of C++ FIX::UnderlyingDetachmentPoint class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingDetachmentPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingDetachmentPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingDetachmentPoint self) -> UnderlyingDetachmentPoint
        __init__(FIX::UnderlyingDetachmentPoint self, FIX::PERCENTAGE const & value) -> UnderlyingDetachmentPoint

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_UnderlyingDetachmentPoint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingDetachmentPoint
    __del__ = lambda self: None
UnderlyingDetachmentPoint_swigregister = _quickfix.UnderlyingDetachmentPoint_swigregister
UnderlyingDetachmentPoint_swigregister(UnderlyingDetachmentPoint)

class NoTargetPartyIDs(IntField):
    """Proxy of C++ FIX::NoTargetPartyIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoTargetPartyIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoTargetPartyIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoTargetPartyIDs self) -> NoTargetPartyIDs
        __init__(FIX::NoTargetPartyIDs self, FIX::NUMINGROUP const & value) -> NoTargetPartyIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoTargetPartyIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoTargetPartyIDs
    __del__ = lambda self: None
NoTargetPartyIDs_swigregister = _quickfix.NoTargetPartyIDs_swigregister
NoTargetPartyIDs_swigregister(NoTargetPartyIDs)

class TargetPartyID(StringField):
    """Proxy of C++ FIX::TargetPartyID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetPartyID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TargetPartyID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TargetPartyID self) -> TargetPartyID
        __init__(FIX::TargetPartyID self, FIX::STRING const & value) -> TargetPartyID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_TargetPartyID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TargetPartyID
    __del__ = lambda self: None
TargetPartyID_swigregister = _quickfix.TargetPartyID_swigregister
TargetPartyID_swigregister(TargetPartyID)

class TargetPartyIDSource(CharField):
    """Proxy of C++ FIX::TargetPartyIDSource class"""
    __swig_setmethods__ = {}
    for _s in [CharField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetPartyIDSource, name, value)
    __swig_getmethods__ = {}
    for _s in [CharField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TargetPartyIDSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TargetPartyIDSource self) -> TargetPartyIDSource
        __init__(FIX::TargetPartyIDSource self, FIX::CHAR const & value) -> TargetPartyIDSource

        Parameters:
            value: FIX::CHAR const &

        """
        this = _quickfix.new_TargetPartyIDSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TargetPartyIDSource
    __del__ = lambda self: None
TargetPartyIDSource_swigregister = _quickfix.TargetPartyIDSource_swigregister
TargetPartyIDSource_swigregister(TargetPartyIDSource)

class TargetPartyRole(IntField):
    """Proxy of C++ FIX::TargetPartyRole class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetPartyRole, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TargetPartyRole, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::TargetPartyRole self) -> TargetPartyRole
        __init__(FIX::TargetPartyRole self, FIX::INT const & value) -> TargetPartyRole

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_TargetPartyRole(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_TargetPartyRole
    __del__ = lambda self: None
TargetPartyRole_swigregister = _quickfix.TargetPartyRole_swigregister
TargetPartyRole_swigregister(TargetPartyRole)

class SecurityListID(StringField):
    """Proxy of C++ FIX::SecurityListID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityListID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityListID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityListID self) -> SecurityListID
        __init__(FIX::SecurityListID self, FIX::STRING const & value) -> SecurityListID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityListID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityListID
    __del__ = lambda self: None
SecurityListID_swigregister = _quickfix.SecurityListID_swigregister
SecurityListID_swigregister(SecurityListID)

class SecurityListRefID(StringField):
    """Proxy of C++ FIX::SecurityListRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityListRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityListRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityListRefID self) -> SecurityListRefID
        __init__(FIX::SecurityListRefID self, FIX::STRING const & value) -> SecurityListRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityListRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityListRefID
    __del__ = lambda self: None
SecurityListRefID_swigregister = _quickfix.SecurityListRefID_swigregister
SecurityListRefID_swigregister(SecurityListRefID)

class SecurityListDesc(StringField):
    """Proxy of C++ FIX::SecurityListDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityListDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityListDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityListDesc self) -> SecurityListDesc
        __init__(FIX::SecurityListDesc self, FIX::STRING const & value) -> SecurityListDesc

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_SecurityListDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityListDesc
    __del__ = lambda self: None
SecurityListDesc_swigregister = _quickfix.SecurityListDesc_swigregister
SecurityListDesc_swigregister(SecurityListDesc)

class EncodedSecurityListDescLen(IntField):
    """Proxy of C++ FIX::EncodedSecurityListDescLen class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedSecurityListDescLen, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedSecurityListDescLen, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedSecurityListDescLen self) -> EncodedSecurityListDescLen
        __init__(FIX::EncodedSecurityListDescLen self, FIX::LENGTH const & value) -> EncodedSecurityListDescLen

        Parameters:
            value: FIX::LENGTH const &

        """
        this = _quickfix.new_EncodedSecurityListDescLen(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedSecurityListDescLen
    __del__ = lambda self: None
EncodedSecurityListDescLen_swigregister = _quickfix.EncodedSecurityListDescLen_swigregister
EncodedSecurityListDescLen_swigregister(EncodedSecurityListDescLen)

class EncodedSecurityListDesc(StringField):
    """Proxy of C++ FIX::EncodedSecurityListDesc class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncodedSecurityListDesc, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncodedSecurityListDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::EncodedSecurityListDesc self) -> EncodedSecurityListDesc
        __init__(FIX::EncodedSecurityListDesc self, FIX::DATA const & value) -> EncodedSecurityListDesc

        Parameters:
            value: FIX::DATA const &

        """
        this = _quickfix.new_EncodedSecurityListDesc(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_EncodedSecurityListDesc
    __del__ = lambda self: None
EncodedSecurityListDesc_swigregister = _quickfix.EncodedSecurityListDesc_swigregister
EncodedSecurityListDesc_swigregister(EncodedSecurityListDesc)

class SecurityListType(IntField):
    """Proxy of C++ FIX::SecurityListType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityListType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityListType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityListType self) -> SecurityListType
        __init__(FIX::SecurityListType self, FIX::INT const & value) -> SecurityListType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecurityListType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityListType
    __del__ = lambda self: None
SecurityListType_swigregister = _quickfix.SecurityListType_swigregister
SecurityListType_swigregister(SecurityListType)

class SecurityListTypeSource(IntField):
    """Proxy of C++ FIX::SecurityListTypeSource class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SecurityListTypeSource, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SecurityListTypeSource, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SecurityListTypeSource self) -> SecurityListTypeSource
        __init__(FIX::SecurityListTypeSource self, FIX::INT const & value) -> SecurityListTypeSource

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_SecurityListTypeSource(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SecurityListTypeSource
    __del__ = lambda self: None
SecurityListTypeSource_swigregister = _quickfix.SecurityListTypeSource_swigregister
SecurityListTypeSource_swigregister(SecurityListTypeSource)

class NewsID(StringField):
    """Proxy of C++ FIX::NewsID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewsID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewsID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NewsID self) -> NewsID
        __init__(FIX::NewsID self, FIX::STRING const & value) -> NewsID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_NewsID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NewsID
    __del__ = lambda self: None
NewsID_swigregister = _quickfix.NewsID_swigregister
NewsID_swigregister(NewsID)

class NewsCategory(IntField):
    """Proxy of C++ FIX::NewsCategory class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewsCategory, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewsCategory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NewsCategory self) -> NewsCategory
        __init__(FIX::NewsCategory self, FIX::INT const & value) -> NewsCategory

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NewsCategory(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NewsCategory
    __del__ = lambda self: None
NewsCategory_swigregister = _quickfix.NewsCategory_swigregister
NewsCategory_swigregister(NewsCategory)

class LanguageCode(StringField):
    """Proxy of C++ FIX::LanguageCode class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LanguageCode, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LanguageCode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::LanguageCode self) -> LanguageCode
        __init__(FIX::LanguageCode self, FIX::LANGUAGE const & value) -> LanguageCode

        Parameters:
            value: FIX::LANGUAGE const &

        """
        this = _quickfix.new_LanguageCode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_LanguageCode
    __del__ = lambda self: None
LanguageCode_swigregister = _quickfix.LanguageCode_swigregister
LanguageCode_swigregister(LanguageCode)

class NoNewsRefIDs(IntField):
    """Proxy of C++ FIX::NoNewsRefIDs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNewsRefIDs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNewsRefIDs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoNewsRefIDs self) -> NoNewsRefIDs
        __init__(FIX::NoNewsRefIDs self, FIX::NUMINGROUP const & value) -> NoNewsRefIDs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoNewsRefIDs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoNewsRefIDs
    __del__ = lambda self: None
NoNewsRefIDs_swigregister = _quickfix.NoNewsRefIDs_swigregister
NoNewsRefIDs_swigregister(NoNewsRefIDs)

class NewsRefID(StringField):
    """Proxy of C++ FIX::NewsRefID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewsRefID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewsRefID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NewsRefID self) -> NewsRefID
        __init__(FIX::NewsRefID self, FIX::STRING const & value) -> NewsRefID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_NewsRefID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NewsRefID
    __del__ = lambda self: None
NewsRefID_swigregister = _quickfix.NewsRefID_swigregister
NewsRefID_swigregister(NewsRefID)

class NewsRefType(IntField):
    """Proxy of C++ FIX::NewsRefType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NewsRefType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NewsRefType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NewsRefType self) -> NewsRefType
        __init__(FIX::NewsRefType self, FIX::INT const & value) -> NewsRefType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_NewsRefType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NewsRefType
    __del__ = lambda self: None
NewsRefType_swigregister = _quickfix.NewsRefType_swigregister
NewsRefType_swigregister(NewsRefType)

class StrikePriceDeterminationMethod(IntField):
    """Proxy of C++ FIX::StrikePriceDeterminationMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikePriceDeterminationMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikePriceDeterminationMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikePriceDeterminationMethod self) -> StrikePriceDeterminationMethod
        __init__(FIX::StrikePriceDeterminationMethod self, FIX::INT const & value) -> StrikePriceDeterminationMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StrikePriceDeterminationMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikePriceDeterminationMethod
    __del__ = lambda self: None
StrikePriceDeterminationMethod_swigregister = _quickfix.StrikePriceDeterminationMethod_swigregister
StrikePriceDeterminationMethod_swigregister(StrikePriceDeterminationMethod)

class StrikePriceBoundaryMethod(IntField):
    """Proxy of C++ FIX::StrikePriceBoundaryMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikePriceBoundaryMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikePriceBoundaryMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikePriceBoundaryMethod self) -> StrikePriceBoundaryMethod
        __init__(FIX::StrikePriceBoundaryMethod self, FIX::INT const & value) -> StrikePriceBoundaryMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StrikePriceBoundaryMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikePriceBoundaryMethod
    __del__ = lambda self: None
StrikePriceBoundaryMethod_swigregister = _quickfix.StrikePriceBoundaryMethod_swigregister
StrikePriceBoundaryMethod_swigregister(StrikePriceBoundaryMethod)

class StrikePriceBoundaryPrecision(DoubleField):
    """Proxy of C++ FIX::StrikePriceBoundaryPrecision class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrikePriceBoundaryPrecision, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrikePriceBoundaryPrecision, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StrikePriceBoundaryPrecision self) -> StrikePriceBoundaryPrecision
        __init__(FIX::StrikePriceBoundaryPrecision self, FIX::PERCENTAGE const & value) -> StrikePriceBoundaryPrecision

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_StrikePriceBoundaryPrecision(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StrikePriceBoundaryPrecision
    __del__ = lambda self: None
StrikePriceBoundaryPrecision_swigregister = _quickfix.StrikePriceBoundaryPrecision_swigregister
StrikePriceBoundaryPrecision_swigregister(StrikePriceBoundaryPrecision)

class UnderlyingPriceDeterminationMethod(IntField):
    """Proxy of C++ FIX::UnderlyingPriceDeterminationMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnderlyingPriceDeterminationMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnderlyingPriceDeterminationMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::UnderlyingPriceDeterminationMethod self) -> UnderlyingPriceDeterminationMethod
        __init__(FIX::UnderlyingPriceDeterminationMethod self, FIX::INT const & value) -> UnderlyingPriceDeterminationMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_UnderlyingPriceDeterminationMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_UnderlyingPriceDeterminationMethod
    __del__ = lambda self: None
UnderlyingPriceDeterminationMethod_swigregister = _quickfix.UnderlyingPriceDeterminationMethod_swigregister
UnderlyingPriceDeterminationMethod_swigregister(UnderlyingPriceDeterminationMethod)

class OptPayoutType(IntField):
    """Proxy of C++ FIX::OptPayoutType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptPayoutType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptPayoutType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::OptPayoutType self) -> OptPayoutType
        __init__(FIX::OptPayoutType self, FIX::INT const & value) -> OptPayoutType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_OptPayoutType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_OptPayoutType
    __del__ = lambda self: None
OptPayoutType_swigregister = _quickfix.OptPayoutType_swigregister
OptPayoutType_swigregister(OptPayoutType)

class NoComplexEvents(IntField):
    """Proxy of C++ FIX::NoComplexEvents class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoComplexEvents, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoComplexEvents, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoComplexEvents self) -> NoComplexEvents
        __init__(FIX::NoComplexEvents self, FIX::NUMINGROUP const & value) -> NoComplexEvents

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoComplexEvents(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoComplexEvents
    __del__ = lambda self: None
NoComplexEvents_swigregister = _quickfix.NoComplexEvents_swigregister
NoComplexEvents_swigregister(NoComplexEvents)

class ComplexEventType(IntField):
    """Proxy of C++ FIX::ComplexEventType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexEventType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexEventType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexEventType self) -> ComplexEventType
        __init__(FIX::ComplexEventType self, FIX::INT const & value) -> ComplexEventType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ComplexEventType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexEventType
    __del__ = lambda self: None
ComplexEventType_swigregister = _quickfix.ComplexEventType_swigregister
ComplexEventType_swigregister(ComplexEventType)

class ComplexOptPayoutAmount(DoubleField):
    """Proxy of C++ FIX::ComplexOptPayoutAmount class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexOptPayoutAmount, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexOptPayoutAmount, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexOptPayoutAmount self) -> ComplexOptPayoutAmount
        __init__(FIX::ComplexOptPayoutAmount self, FIX::AMT const & value) -> ComplexOptPayoutAmount

        Parameters:
            value: FIX::AMT const &

        """
        this = _quickfix.new_ComplexOptPayoutAmount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexOptPayoutAmount
    __del__ = lambda self: None
ComplexOptPayoutAmount_swigregister = _quickfix.ComplexOptPayoutAmount_swigregister
ComplexOptPayoutAmount_swigregister(ComplexOptPayoutAmount)

class ComplexEventPrice(DoubleField):
    """Proxy of C++ FIX::ComplexEventPrice class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexEventPrice, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexEventPrice, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexEventPrice self) -> ComplexEventPrice
        __init__(FIX::ComplexEventPrice self, FIX::PRICE const & value) -> ComplexEventPrice

        Parameters:
            value: FIX::PRICE const &

        """
        this = _quickfix.new_ComplexEventPrice(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexEventPrice
    __del__ = lambda self: None
ComplexEventPrice_swigregister = _quickfix.ComplexEventPrice_swigregister
ComplexEventPrice_swigregister(ComplexEventPrice)

class ComplexEventPriceBoundaryMethod(IntField):
    """Proxy of C++ FIX::ComplexEventPriceBoundaryMethod class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexEventPriceBoundaryMethod, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexEventPriceBoundaryMethod, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexEventPriceBoundaryMethod self) -> ComplexEventPriceBoundaryMethod
        __init__(FIX::ComplexEventPriceBoundaryMethod self, FIX::INT const & value) -> ComplexEventPriceBoundaryMethod

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ComplexEventPriceBoundaryMethod(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexEventPriceBoundaryMethod
    __del__ = lambda self: None
ComplexEventPriceBoundaryMethod_swigregister = _quickfix.ComplexEventPriceBoundaryMethod_swigregister
ComplexEventPriceBoundaryMethod_swigregister(ComplexEventPriceBoundaryMethod)

class ComplexEventPriceBoundaryPrecision(DoubleField):
    """Proxy of C++ FIX::ComplexEventPriceBoundaryPrecision class"""
    __swig_setmethods__ = {}
    for _s in [DoubleField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexEventPriceBoundaryPrecision, name, value)
    __swig_getmethods__ = {}
    for _s in [DoubleField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexEventPriceBoundaryPrecision, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexEventPriceBoundaryPrecision self) -> ComplexEventPriceBoundaryPrecision
        __init__(FIX::ComplexEventPriceBoundaryPrecision self, FIX::PERCENTAGE const & value) -> ComplexEventPriceBoundaryPrecision

        Parameters:
            value: FIX::PERCENTAGE const &

        """
        this = _quickfix.new_ComplexEventPriceBoundaryPrecision(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexEventPriceBoundaryPrecision
    __del__ = lambda self: None
ComplexEventPriceBoundaryPrecision_swigregister = _quickfix.ComplexEventPriceBoundaryPrecision_swigregister
ComplexEventPriceBoundaryPrecision_swigregister(ComplexEventPriceBoundaryPrecision)

class ComplexEventPriceTimeType(IntField):
    """Proxy of C++ FIX::ComplexEventPriceTimeType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexEventPriceTimeType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexEventPriceTimeType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexEventPriceTimeType self) -> ComplexEventPriceTimeType
        __init__(FIX::ComplexEventPriceTimeType self, FIX::INT const & value) -> ComplexEventPriceTimeType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ComplexEventPriceTimeType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexEventPriceTimeType
    __del__ = lambda self: None
ComplexEventPriceTimeType_swigregister = _quickfix.ComplexEventPriceTimeType_swigregister
ComplexEventPriceTimeType_swigregister(ComplexEventPriceTimeType)

class ComplexEventCondition(IntField):
    """Proxy of C++ FIX::ComplexEventCondition class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexEventCondition, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexEventCondition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexEventCondition self) -> ComplexEventCondition
        __init__(FIX::ComplexEventCondition self, FIX::INT const & value) -> ComplexEventCondition

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_ComplexEventCondition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexEventCondition
    __del__ = lambda self: None
ComplexEventCondition_swigregister = _quickfix.ComplexEventCondition_swigregister
ComplexEventCondition_swigregister(ComplexEventCondition)

class NoComplexEventDates(IntField):
    """Proxy of C++ FIX::NoComplexEventDates class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoComplexEventDates, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoComplexEventDates, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoComplexEventDates self) -> NoComplexEventDates
        __init__(FIX::NoComplexEventDates self, FIX::NUMINGROUP const & value) -> NoComplexEventDates

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoComplexEventDates(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoComplexEventDates
    __del__ = lambda self: None
NoComplexEventDates_swigregister = _quickfix.NoComplexEventDates_swigregister
NoComplexEventDates_swigregister(NoComplexEventDates)

class ComplexEventStartDate(UtcTimeStampField):
    """Proxy of C++ FIX::ComplexEventStartDate class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexEventStartDate, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexEventStartDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexEventStartDate self) -> ComplexEventStartDate
        __init__(FIX::ComplexEventStartDate self, bool showMilliseconds) -> ComplexEventStartDate

        Parameters:
            showMilliseconds: bool

        __init__(FIX::ComplexEventStartDate self, FIX::UTCTIMESTAMP const & value) -> ComplexEventStartDate

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::ComplexEventStartDate self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> ComplexEventStartDate

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_ComplexEventStartDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexEventStartDate
    __del__ = lambda self: None
ComplexEventStartDate_swigregister = _quickfix.ComplexEventStartDate_swigregister
ComplexEventStartDate_swigregister(ComplexEventStartDate)

class ComplexEventEndDate(UtcTimeStampField):
    """Proxy of C++ FIX::ComplexEventEndDate class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexEventEndDate, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexEventEndDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexEventEndDate self) -> ComplexEventEndDate
        __init__(FIX::ComplexEventEndDate self, bool showMilliseconds) -> ComplexEventEndDate

        Parameters:
            showMilliseconds: bool

        __init__(FIX::ComplexEventEndDate self, FIX::UTCTIMESTAMP const & value) -> ComplexEventEndDate

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::ComplexEventEndDate self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> ComplexEventEndDate

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_ComplexEventEndDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexEventEndDate
    __del__ = lambda self: None
ComplexEventEndDate_swigregister = _quickfix.ComplexEventEndDate_swigregister
ComplexEventEndDate_swigregister(ComplexEventEndDate)

class NoComplexEventTimes(IntField):
    """Proxy of C++ FIX::NoComplexEventTimes class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoComplexEventTimes, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoComplexEventTimes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoComplexEventTimes self) -> NoComplexEventTimes
        __init__(FIX::NoComplexEventTimes self, FIX::NUMINGROUP const & value) -> NoComplexEventTimes

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoComplexEventTimes(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoComplexEventTimes
    __del__ = lambda self: None
NoComplexEventTimes_swigregister = _quickfix.NoComplexEventTimes_swigregister
NoComplexEventTimes_swigregister(NoComplexEventTimes)

class ComplexEventStartTime(UtcTimeOnlyField):
    """Proxy of C++ FIX::ComplexEventStartTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeOnlyField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexEventStartTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeOnlyField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexEventStartTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexEventStartTime self) -> ComplexEventStartTime
        __init__(FIX::ComplexEventStartTime self, FIX::UTCTIMEONLY const & value) -> ComplexEventStartTime

        Parameters:
            value: FIX::UTCTIMEONLY const &

        """
        this = _quickfix.new_ComplexEventStartTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexEventStartTime
    __del__ = lambda self: None
ComplexEventStartTime_swigregister = _quickfix.ComplexEventStartTime_swigregister
ComplexEventStartTime_swigregister(ComplexEventStartTime)

class ComplexEventEndTime(UtcTimeOnlyField):
    """Proxy of C++ FIX::ComplexEventEndTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeOnlyField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexEventEndTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeOnlyField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexEventEndTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ComplexEventEndTime self) -> ComplexEventEndTime
        __init__(FIX::ComplexEventEndTime self, FIX::UTCTIMEONLY const & value) -> ComplexEventEndTime

        Parameters:
            value: FIX::UTCTIMEONLY const &

        """
        this = _quickfix.new_ComplexEventEndTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_ComplexEventEndTime
    __del__ = lambda self: None
ComplexEventEndTime_swigregister = _quickfix.ComplexEventEndTime_swigregister
ComplexEventEndTime_swigregister(ComplexEventEndTime)

class StreamAsgnReqID(StringField):
    """Proxy of C++ FIX::StreamAsgnReqID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamAsgnReqID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamAsgnReqID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StreamAsgnReqID self) -> StreamAsgnReqID
        __init__(FIX::StreamAsgnReqID self, FIX::STRING const & value) -> StreamAsgnReqID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StreamAsgnReqID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StreamAsgnReqID
    __del__ = lambda self: None
StreamAsgnReqID_swigregister = _quickfix.StreamAsgnReqID_swigregister
StreamAsgnReqID_swigregister(StreamAsgnReqID)

class StreamAsgnReqType(IntField):
    """Proxy of C++ FIX::StreamAsgnReqType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamAsgnReqType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamAsgnReqType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StreamAsgnReqType self) -> StreamAsgnReqType
        __init__(FIX::StreamAsgnReqType self, FIX::INT const & value) -> StreamAsgnReqType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StreamAsgnReqType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StreamAsgnReqType
    __del__ = lambda self: None
StreamAsgnReqType_swigregister = _quickfix.StreamAsgnReqType_swigregister
StreamAsgnReqType_swigregister(StreamAsgnReqType)

class NoAsgnReqs(IntField):
    """Proxy of C++ FIX::NoAsgnReqs class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoAsgnReqs, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoAsgnReqs, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::NoAsgnReqs self) -> NoAsgnReqs
        __init__(FIX::NoAsgnReqs self, FIX::NUMINGROUP const & value) -> NoAsgnReqs

        Parameters:
            value: FIX::NUMINGROUP const &

        """
        this = _quickfix.new_NoAsgnReqs(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NoAsgnReqs
    __del__ = lambda self: None
NoAsgnReqs_swigregister = _quickfix.NoAsgnReqs_swigregister
NoAsgnReqs_swigregister(NoAsgnReqs)

class MDStreamID(StringField):
    """Proxy of C++ FIX::MDStreamID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDStreamID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDStreamID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::MDStreamID self) -> MDStreamID
        __init__(FIX::MDStreamID self, FIX::STRING const & value) -> MDStreamID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_MDStreamID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MDStreamID
    __del__ = lambda self: None
MDStreamID_swigregister = _quickfix.MDStreamID_swigregister
MDStreamID_swigregister(MDStreamID)

class StreamAsgnRptID(StringField):
    """Proxy of C++ FIX::StreamAsgnRptID class"""
    __swig_setmethods__ = {}
    for _s in [StringField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamAsgnRptID, name, value)
    __swig_getmethods__ = {}
    for _s in [StringField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamAsgnRptID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StreamAsgnRptID self) -> StreamAsgnRptID
        __init__(FIX::StreamAsgnRptID self, FIX::STRING const & value) -> StreamAsgnRptID

        Parameters:
            value: FIX::STRING const &

        """
        this = _quickfix.new_StreamAsgnRptID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StreamAsgnRptID
    __del__ = lambda self: None
StreamAsgnRptID_swigregister = _quickfix.StreamAsgnRptID_swigregister
StreamAsgnRptID_swigregister(StreamAsgnRptID)

class StreamAsgnRejReason(IntField):
    """Proxy of C++ FIX::StreamAsgnRejReason class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamAsgnRejReason, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamAsgnRejReason, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StreamAsgnRejReason self) -> StreamAsgnRejReason
        __init__(FIX::StreamAsgnRejReason self, FIX::INT const & value) -> StreamAsgnRejReason

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StreamAsgnRejReason(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StreamAsgnRejReason
    __del__ = lambda self: None
StreamAsgnRejReason_swigregister = _quickfix.StreamAsgnRejReason_swigregister
StreamAsgnRejReason_swigregister(StreamAsgnRejReason)

class StreamAsgnAckType(IntField):
    """Proxy of C++ FIX::StreamAsgnAckType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamAsgnAckType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamAsgnAckType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StreamAsgnAckType self) -> StreamAsgnAckType
        __init__(FIX::StreamAsgnAckType self, FIX::INT const & value) -> StreamAsgnAckType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StreamAsgnAckType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StreamAsgnAckType
    __del__ = lambda self: None
StreamAsgnAckType_swigregister = _quickfix.StreamAsgnAckType_swigregister
StreamAsgnAckType_swigregister(StreamAsgnAckType)

class RelSymTransactTime(UtcTimeStampField):
    """Proxy of C++ FIX::RelSymTransactTime class"""
    __swig_setmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelSymTransactTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UtcTimeStampField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RelSymTransactTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::RelSymTransactTime self) -> RelSymTransactTime
        __init__(FIX::RelSymTransactTime self, bool showMilliseconds) -> RelSymTransactTime

        Parameters:
            showMilliseconds: bool

        __init__(FIX::RelSymTransactTime self, FIX::UTCTIMESTAMP const & value) -> RelSymTransactTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &

        __init__(FIX::RelSymTransactTime self, FIX::UTCTIMESTAMP const & value, bool showMilliseconds) -> RelSymTransactTime

        Parameters:
            value: FIX::UTCTIMESTAMP const &
            showMilliseconds: bool

        """
        this = _quickfix.new_RelSymTransactTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_RelSymTransactTime
    __del__ = lambda self: None
RelSymTransactTime_swigregister = _quickfix.RelSymTransactTime_swigregister
RelSymTransactTime_swigregister(RelSymTransactTime)

class StreamAsgnType(IntField):
    """Proxy of C++ FIX::StreamAsgnType class"""
    __swig_setmethods__ = {}
    for _s in [IntField]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamAsgnType, name, value)
    __swig_getmethods__ = {}
    for _s in [IntField]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamAsgnType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::StreamAsgnType self) -> StreamAsgnType
        __init__(FIX::StreamAsgnType self, FIX::INT const & value) -> StreamAsgnType

        Parameters:
            value: FIX::INT const &

        """
        this = _quickfix.new_StreamAsgnType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_StreamAsgnType
    __del__ = lambda self: None
StreamAsgnType_swigregister = _quickfix.StreamAsgnType_swigregister
StreamAsgnType_swigregister(StreamAsgnType)

class SessionID(_object):
    """Proxy of C++ FIX::SessionID class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SessionID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SessionID self) -> SessionID
        __init__(FIX::SessionID self, std::string const & beginString, std::string const & senderCompID, std::string const & targetCompID, std::string const & sessionQualifier) -> SessionID

        Parameters:
            beginString: std::string const &
            senderCompID: std::string const &
            targetCompID: std::string const &
            sessionQualifier: std::string const &

        __init__(FIX::SessionID self, std::string const & beginString, std::string const & senderCompID, std::string const & targetCompID) -> SessionID

        Parameters:
            beginString: std::string const &
            senderCompID: std::string const &
            targetCompID: std::string const &

        """
        this = _quickfix.new_SessionID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getBeginString(self) -> "FIX::BeginString const &":
        """
        getBeginString(SessionID self) -> BeginString

        Parameters:
            self: FIX::SessionID const *

        """
        return _quickfix.SessionID_getBeginString(self)


    def getSenderCompID(self) -> "FIX::SenderCompID const &":
        """
        getSenderCompID(SessionID self) -> SenderCompID

        Parameters:
            self: FIX::SessionID const *

        """
        return _quickfix.SessionID_getSenderCompID(self)


    def getTargetCompID(self) -> "FIX::TargetCompID const &":
        """
        getTargetCompID(SessionID self) -> TargetCompID

        Parameters:
            self: FIX::SessionID const *

        """
        return _quickfix.SessionID_getTargetCompID(self)


    def getSessionQualifier(self) -> "std::string const &":
        """
        getSessionQualifier(SessionID self) -> std::string const &

        Parameters:
            self: FIX::SessionID const *

        """
        return _quickfix.SessionID_getSessionQualifier(self)


    def isFIXT(self) -> "bool const":
        """
        isFIXT(SessionID self) -> bool const

        Parameters:
            self: FIX::SessionID const *

        """
        return _quickfix.SessionID_isFIXT(self)


    def toStringFrozen(self) -> "std::string const &":
        """
        toStringFrozen(SessionID self) -> std::string const &

        Parameters:
            self: FIX::SessionID const *

        """
        return _quickfix.SessionID_toStringFrozen(self)


    def fromString(self, str: 'std::string const &') -> "void":
        """
        fromString(SessionID self, std::string const & str)

        Parameters:
            str: std::string const &

        """
        return _quickfix.SessionID_fromString(self, str)


    def toString(self, *args) -> "std::string &":
        """
        toString(SessionID self) -> std::string
        toString(SessionID self, std::string & str) -> std::string &

        Parameters:
            str: std::string &

        """
        return _quickfix.SessionID_toString(self, *args)


    def __invert__(self) -> "FIX::SessionID":
        """
        __invert__(SessionID self) -> SessionID

        Parameters:
            self: FIX::SessionID const *

        """
        return _quickfix.SessionID___invert__(self)


    def __str__(self) -> "std::string":
        """
        __str__(SessionID self) -> std::string

        Parameters:
            self: FIX::SessionID *

        """
        return _quickfix.SessionID___str__(self)

    __swig_destroy__ = _quickfix.delete_SessionID
    __del__ = lambda self: None
SessionID_swigregister = _quickfix.SessionID_swigregister
SessionID_swigregister(SessionID)
cvar = _quickfix.cvar
BeginString_FIXT11 = cvar.BeginString_FIXT11
BeginString_FIX50 = cvar.BeginString_FIX50
BeginString_FIX44 = cvar.BeginString_FIX44
BeginString_FIX43 = cvar.BeginString_FIX43
BeginString_FIX42 = cvar.BeginString_FIX42
BeginString_FIX41 = cvar.BeginString_FIX41
BeginString_FIX40 = cvar.BeginString_FIX40
SessionRejectReason_INVALID_TAG_NUMBER_TEXT = cvar.SessionRejectReason_INVALID_TAG_NUMBER_TEXT
SessionRejectReason_REQUIRED_TAG_MISSING_TEXT = cvar.SessionRejectReason_REQUIRED_TAG_MISSING_TEXT
SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT = cvar.SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT
SessionRejectReason_UNDEFINED_TAG_TEXT = cvar.SessionRejectReason_UNDEFINED_TAG_TEXT
SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT = cvar.SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT
SessionRejectReason_VALUE_IS_INCORRECT_TEXT = cvar.SessionRejectReason_VALUE_IS_INCORRECT_TEXT
SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT = cvar.SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT
SessionRejectReason_DECRYPTION_PROBLEM_TEXT = cvar.SessionRejectReason_DECRYPTION_PROBLEM_TEXT
SessionRejectReason_SIGNATURE_PROBLEM_TEXT = cvar.SessionRejectReason_SIGNATURE_PROBLEM_TEXT
SessionRejectReason_COMPID_PROBLEM_TEXT = cvar.SessionRejectReason_COMPID_PROBLEM_TEXT
SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT = cvar.SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT
SessionRejectReason_INVALID_MSGTYPE_TEXT = cvar.SessionRejectReason_INVALID_MSGTYPE_TEXT
SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT = cvar.SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT
SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT = cvar.SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT
SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT = cvar.SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT
BusinessRejectReason_OTHER_TEXT = cvar.BusinessRejectReason_OTHER_TEXT
BusinessRejectReason_UNKNOWN_ID_TEXT = cvar.BusinessRejectReason_UNKNOWN_ID_TEXT
BusinessRejectReason_UNKNOWN_SECURITY_TEXT = cvar.BusinessRejectReason_UNKNOWN_SECURITY_TEXT
BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT = cvar.BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT
BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT = cvar.BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT
BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT = cvar.BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT
BusinessRejectReason_NOT_AUTHORIZED_TEXT = cvar.BusinessRejectReason_NOT_AUTHORIZED_TEXT
BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT = cvar.BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT
MsgType_Heartbeat = cvar.MsgType_Heartbeat
MsgType_TestRequest = cvar.MsgType_TestRequest
MsgType_ResendRequest = cvar.MsgType_ResendRequest
MsgType_Reject = cvar.MsgType_Reject
MsgType_SequenceReset = cvar.MsgType_SequenceReset
MsgType_Logout = cvar.MsgType_Logout
MsgType_Logon = cvar.MsgType_Logon
MsgType_IOI = cvar.MsgType_IOI
MsgType_Advertisement = cvar.MsgType_Advertisement
MsgType_ExecutionReport = cvar.MsgType_ExecutionReport
MsgType_OrderCancelReject = cvar.MsgType_OrderCancelReject
MsgType_News = cvar.MsgType_News
MsgType_Email = cvar.MsgType_Email
MsgType_NewOrderSingle = cvar.MsgType_NewOrderSingle
MsgType_NewOrderList = cvar.MsgType_NewOrderList
MsgType_OrderCancelRequest = cvar.MsgType_OrderCancelRequest
MsgType_OrderCancelReplaceRequest = cvar.MsgType_OrderCancelReplaceRequest
MsgType_OrderStatusRequest = cvar.MsgType_OrderStatusRequest
MsgType_Allocation = cvar.MsgType_Allocation
MsgType_ListCancelRequest = cvar.MsgType_ListCancelRequest
MsgType_ListExecute = cvar.MsgType_ListExecute
MsgType_ListStatusRequest = cvar.MsgType_ListStatusRequest
MsgType_ListStatus = cvar.MsgType_ListStatus
MsgType_AllocationInstructionAck = cvar.MsgType_AllocationInstructionAck
MsgType_DontKnowTrade = cvar.MsgType_DontKnowTrade
MsgType_QuoteRequest = cvar.MsgType_QuoteRequest
MsgType_Quote = cvar.MsgType_Quote
MsgType_SettlementInstructions = cvar.MsgType_SettlementInstructions
MsgType_MarketDataRequest = cvar.MsgType_MarketDataRequest
MsgType_MarketDataSnapshotFullRefresh = cvar.MsgType_MarketDataSnapshotFullRefresh
MsgType_MarketDataIncrementalRefresh = cvar.MsgType_MarketDataIncrementalRefresh
MsgType_MarketDataRequestReject = cvar.MsgType_MarketDataRequestReject
MsgType_QuoteCancel = cvar.MsgType_QuoteCancel
MsgType_QuoteStatusRequest = cvar.MsgType_QuoteStatusRequest
MsgType_QuoteAcknowledgement = cvar.MsgType_QuoteAcknowledgement
MsgType_SecurityDefinitionRequest = cvar.MsgType_SecurityDefinitionRequest
MsgType_SecurityDefinition = cvar.MsgType_SecurityDefinition
MsgType_SecurityStatusRequest = cvar.MsgType_SecurityStatusRequest
MsgType_SecurityStatus = cvar.MsgType_SecurityStatus
MsgType_TradingSessionStatusRequest = cvar.MsgType_TradingSessionStatusRequest
MsgType_TradingSessionStatus = cvar.MsgType_TradingSessionStatus
MsgType_MassQuote = cvar.MsgType_MassQuote
MsgType_BusinessMessageReject = cvar.MsgType_BusinessMessageReject
MsgType_BidRequest = cvar.MsgType_BidRequest
MsgType_BidResponse = cvar.MsgType_BidResponse
MsgType_ListStrikePrice = cvar.MsgType_ListStrikePrice
MsgType_AllocationAck = cvar.MsgType_AllocationAck
MsgType_MassQuoteAcknowledgement = cvar.MsgType_MassQuoteAcknowledgement
MsgType_XMLnonFIX = cvar.MsgType_XMLnonFIX
MsgType_RegistrationInstructions = cvar.MsgType_RegistrationInstructions
MsgType_RegistrationInstructionsResponse = cvar.MsgType_RegistrationInstructionsResponse
MsgType_OrderMassCancelRequest = cvar.MsgType_OrderMassCancelRequest
MsgType_OrderMassCancelReport = cvar.MsgType_OrderMassCancelReport
MsgType_NewOrderCross = cvar.MsgType_NewOrderCross
MsgType_CrossOrderCancelRequest = cvar.MsgType_CrossOrderCancelRequest
MsgType_CrossOrderCancelReplaceRequest = cvar.MsgType_CrossOrderCancelReplaceRequest
MsgType_SecurityTypeRequest = cvar.MsgType_SecurityTypeRequest
MsgType_SecurityTypes = cvar.MsgType_SecurityTypes
MsgType_SecurityListRequest = cvar.MsgType_SecurityListRequest
MsgType_SecurityList = cvar.MsgType_SecurityList
MsgType_DerivativeSecurityListRequest = cvar.MsgType_DerivativeSecurityListRequest
MsgType_DerivativeSecurityList = cvar.MsgType_DerivativeSecurityList
MsgType_NewOrderMultileg = cvar.MsgType_NewOrderMultileg
MsgType_MultilegOrderCancelReplaceRequest = cvar.MsgType_MultilegOrderCancelReplaceRequest
MsgType_TradeCaptureReportRequest = cvar.MsgType_TradeCaptureReportRequest
MsgType_TradeCaptureReport = cvar.MsgType_TradeCaptureReport
MsgType_OrderMassStatusRequest = cvar.MsgType_OrderMassStatusRequest
MsgType_QuoteRequestReject = cvar.MsgType_QuoteRequestReject
MsgType_RFQRequest = cvar.MsgType_RFQRequest
MsgType_QuoteStatusReport = cvar.MsgType_QuoteStatusReport
MsgType_AllocationInstruction = cvar.MsgType_AllocationInstruction
MsgType_MultilegOrderCancelReplace = cvar.MsgType_MultilegOrderCancelReplace
MsgType_QuoteResponse = cvar.MsgType_QuoteResponse
MsgType_Confirmation = cvar.MsgType_Confirmation
MsgType_PositionMaintenanceRequest = cvar.MsgType_PositionMaintenanceRequest
MsgType_PositionMaintenanceReport = cvar.MsgType_PositionMaintenanceReport
MsgType_RequestForPositions = cvar.MsgType_RequestForPositions
MsgType_RequestForPositionsAck = cvar.MsgType_RequestForPositionsAck
MsgType_PositionReport = cvar.MsgType_PositionReport
MsgType_TradeCaptureReportRequestAck = cvar.MsgType_TradeCaptureReportRequestAck
MsgType_TradeCaptureReportAck = cvar.MsgType_TradeCaptureReportAck
MsgType_AllocationReport = cvar.MsgType_AllocationReport
MsgType_AllocationReportAck = cvar.MsgType_AllocationReportAck
MsgType_ConfirmationAck = cvar.MsgType_ConfirmationAck
MsgType_SettlementInstructionRequest = cvar.MsgType_SettlementInstructionRequest
MsgType_AssignmentReport = cvar.MsgType_AssignmentReport
MsgType_CollateralRequest = cvar.MsgType_CollateralRequest
MsgType_CollateralAssignment = cvar.MsgType_CollateralAssignment
MsgType_CollateralResponse = cvar.MsgType_CollateralResponse
MsgType_CollateralReport = cvar.MsgType_CollateralReport
MsgType_CollateralInquiry = cvar.MsgType_CollateralInquiry
MsgType_NetworkCounterpartySystemStatusRequest = cvar.MsgType_NetworkCounterpartySystemStatusRequest
MsgType_NetworkCounterpartySystemStatusResponse = cvar.MsgType_NetworkCounterpartySystemStatusResponse
MsgType_UserRequest = cvar.MsgType_UserRequest
MsgType_UserResponse = cvar.MsgType_UserResponse
MsgType_CollateralInquiryAck = cvar.MsgType_CollateralInquiryAck
MsgType_ConfirmationRequest = cvar.MsgType_ConfirmationRequest
MsgType_ContraryIntentionReport = cvar.MsgType_ContraryIntentionReport
MsgType_SecurityDefinitionUpdateReport = cvar.MsgType_SecurityDefinitionUpdateReport
MsgType_SecurityListUpdateReport = cvar.MsgType_SecurityListUpdateReport
MsgType_AdjustedPositionReport = cvar.MsgType_AdjustedPositionReport
MsgType_AllocationInstructionAlert = cvar.MsgType_AllocationInstructionAlert
MsgType_ExecutionAcknowledgement = cvar.MsgType_ExecutionAcknowledgement
MsgType_TradingSessionList = cvar.MsgType_TradingSessionList
MsgType_TradingSessionListRequest = cvar.MsgType_TradingSessionListRequest
MsgType_SettlementObligationReport = cvar.MsgType_SettlementObligationReport
MsgType_DerivativeSecurityListUpdateReport = cvar.MsgType_DerivativeSecurityListUpdateReport
MsgType_TradingSessionListUpdateReport = cvar.MsgType_TradingSessionListUpdateReport
MsgType_MarketDefinitionRequest = cvar.MsgType_MarketDefinitionRequest
MsgType_MarketDefinition = cvar.MsgType_MarketDefinition
MsgType_MarketDefinitionUpdateReport = cvar.MsgType_MarketDefinitionUpdateReport
MsgType_ApplicationMessageRequest = cvar.MsgType_ApplicationMessageRequest
MsgType_ApplicationMessageRequestAck = cvar.MsgType_ApplicationMessageRequestAck
MsgType_ApplicationMessageReport = cvar.MsgType_ApplicationMessageReport
MsgType_OrderMassActionReport = cvar.MsgType_OrderMassActionReport
MsgType_OrderMassActionRequest = cvar.MsgType_OrderMassActionRequest
MsgType_UserNotification = cvar.MsgType_UserNotification
MsgType_StreamAssignmentRequest = cvar.MsgType_StreamAssignmentRequest
MsgType_StreamAssignmentReport = cvar.MsgType_StreamAssignmentReport
MsgType_StreamAssignmentReportACK = cvar.MsgType_StreamAssignmentReportACK
PossDupFlag_NO = cvar.PossDupFlag_NO
PossDupFlag_YES = cvar.PossDupFlag_YES
PossResend_NO = cvar.PossResend_NO
PossResend_YES = cvar.PossResend_YES
EncryptMethod_NONE_OTHER = cvar.EncryptMethod_NONE_OTHER
EncryptMethod_PKCS = cvar.EncryptMethod_PKCS
EncryptMethod_DES = cvar.EncryptMethod_DES
EncryptMethod_PKCS_DES = cvar.EncryptMethod_PKCS_DES
EncryptMethod_PGP_DES = cvar.EncryptMethod_PGP_DES
EncryptMethod_PGP_DES_MD5 = cvar.EncryptMethod_PGP_DES_MD5
EncryptMethod_PEM_DES_MD5 = cvar.EncryptMethod_PEM_DES_MD5
EncryptMethod_NONE = cvar.EncryptMethod_NONE
GapFillFlag_NO = cvar.GapFillFlag_NO
GapFillFlag_YES = cvar.GapFillFlag_YES
ResetSeqNumFlag_NO = cvar.ResetSeqNumFlag_NO
ResetSeqNumFlag_YES = cvar.ResetSeqNumFlag_YES
MessageEncoding_ISO_2022_JP = cvar.MessageEncoding_ISO_2022_JP
MessageEncoding_EUC_JP = cvar.MessageEncoding_EUC_JP
MessageEncoding_SHIFT_JIS = cvar.MessageEncoding_SHIFT_JIS
MessageEncoding_UTF_8 = cvar.MessageEncoding_UTF_8
MessageEncoding_JIS = cvar.MessageEncoding_JIS
MessageEncoding_EUC = cvar.MessageEncoding_EUC
MessageEncoding_FOR_USING_SJIS = cvar.MessageEncoding_FOR_USING_SJIS
MessageEncoding_UNICODE = cvar.MessageEncoding_UNICODE
SessionRejectReason_INVALID_TAG_NUMBER = cvar.SessionRejectReason_INVALID_TAG_NUMBER
SessionRejectReason_REQUIRED_TAG_MISSING = cvar.SessionRejectReason_REQUIRED_TAG_MISSING
SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM = cvar.SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM
SessionRejectReason_INVALID_MSGTYPE = cvar.SessionRejectReason_INVALID_MSGTYPE
SessionRejectReason_XML_VALIDATION_ERROR = cvar.SessionRejectReason_XML_VALIDATION_ERROR
SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE = cvar.SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE
SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER = cvar.SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER
SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER = cvar.SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER
SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP = cvar.SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP
SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER = cvar.SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER
SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE = cvar.SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE
SessionRejectReason_UNDEFINED_TAG = cvar.SessionRejectReason_UNDEFINED_TAG
SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE = cvar.SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE
SessionRejectReason_VALUE_IS_INCORRECT = cvar.SessionRejectReason_VALUE_IS_INCORRECT
SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE = cvar.SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE
SessionRejectReason_DECRYPTION_PROBLEM = cvar.SessionRejectReason_DECRYPTION_PROBLEM
SessionRejectReason_SIGNATURE_PROBLEM = cvar.SessionRejectReason_SIGNATURE_PROBLEM
SessionRejectReason_COMPID_PROBLEM = cvar.SessionRejectReason_COMPID_PROBLEM
SessionRejectReason_OTHER = cvar.SessionRejectReason_OTHER
MsgDirection_RECEIVE = cvar.MsgDirection_RECEIVE
MsgDirection_SEND = cvar.MsgDirection_SEND
TestMessageIndicator_YES = cvar.TestMessageIndicator_YES
TestMessageIndicator_NO = cvar.TestMessageIndicator_NO
ApplVerID_FIX27 = cvar.ApplVerID_FIX27
ApplVerID_FIX30 = cvar.ApplVerID_FIX30
ApplVerID_FIX40 = cvar.ApplVerID_FIX40
ApplVerID_FIX41 = cvar.ApplVerID_FIX41
ApplVerID_FIX42 = cvar.ApplVerID_FIX42
ApplVerID_FIX43 = cvar.ApplVerID_FIX43
ApplVerID_FIX44 = cvar.ApplVerID_FIX44
ApplVerID_FIX50 = cvar.ApplVerID_FIX50
ApplVerID_FIX50SP1 = cvar.ApplVerID_FIX50SP1
ApplVerID_FIX50SP2 = cvar.ApplVerID_FIX50SP2
AdvSide_BUY = cvar.AdvSide_BUY
AdvSide_SELL = cvar.AdvSide_SELL
AdvSide_TRADE = cvar.AdvSide_TRADE
AdvSide_CROSS = cvar.AdvSide_CROSS
AdvTransType_CANCEL = cvar.AdvTransType_CANCEL
AdvTransType_NEW = cvar.AdvTransType_NEW
AdvTransType_REPLACE = cvar.AdvTransType_REPLACE
CommType_PER_SHARE = cvar.CommType_PER_SHARE
CommType_PERCENTAGE = cvar.CommType_PERCENTAGE
CommType_ABSOLUTE = cvar.CommType_ABSOLUTE
CommType_PER_BOND = cvar.CommType_PER_BOND
CommType_5 = cvar.CommType_5
CommType_4 = cvar.CommType_4
CommType_PER_UNIT = cvar.CommType_PER_UNIT
CommType_POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER = cvar.CommType_POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER
CommType_PERCENT = cvar.CommType_PERCENT
CommType_PERCENTAGE_WAIVED_4 = cvar.CommType_PERCENTAGE_WAIVED_4
CommType_PERCENTAGE_WAIVED_5 = cvar.CommType_PERCENTAGE_WAIVED_5
CommType_POINTS_PER_BOND_OR_CONTRACT = cvar.CommType_POINTS_PER_BOND_OR_CONTRACT
ExecInst_STAY_ON_OFFERSIDE = cvar.ExecInst_STAY_ON_OFFERSIDE
ExecInst_NOT_HELD = cvar.ExecInst_NOT_HELD
ExecInst_WORK = cvar.ExecInst_WORK
ExecInst_GO_ALONG = cvar.ExecInst_GO_ALONG
ExecInst_OVER_THE_DAY = cvar.ExecInst_OVER_THE_DAY
ExecInst_HELD = cvar.ExecInst_HELD
ExecInst_PARTICIPATE_DONT_INITIATE = cvar.ExecInst_PARTICIPATE_DONT_INITIATE
ExecInst_STRICT_SCALE = cvar.ExecInst_STRICT_SCALE
ExecInst_TRY_TO_SCALE = cvar.ExecInst_TRY_TO_SCALE
ExecInst_STAY_ON_BIDSIDE = cvar.ExecInst_STAY_ON_BIDSIDE
ExecInst_NO_CROSS = cvar.ExecInst_NO_CROSS
ExecInst_OK_TO_CROSS = cvar.ExecInst_OK_TO_CROSS
ExecInst_CALL_FIRST = cvar.ExecInst_CALL_FIRST
ExecInst_PERCENT_OF_VOLUME = cvar.ExecInst_PERCENT_OF_VOLUME
ExecInst_DO_NOT_INCREASE = cvar.ExecInst_DO_NOT_INCREASE
ExecInst_DO_NOT_REDUCE = cvar.ExecInst_DO_NOT_REDUCE
ExecInst_ALL_OR_NONE = cvar.ExecInst_ALL_OR_NONE
ExecInst_INSTITUTIONS_ONLY = cvar.ExecInst_INSTITUTIONS_ONLY
ExecInst_LAST_PEG = cvar.ExecInst_LAST_PEG
ExecInst_MID_PRICE_PEG = cvar.ExecInst_MID_PRICE_PEG
ExecInst_NON_NEGOTIABLE = cvar.ExecInst_NON_NEGOTIABLE
ExecInst_OPENING_PEG = cvar.ExecInst_OPENING_PEG
ExecInst_MARKET_PEG = cvar.ExecInst_MARKET_PEG
ExecInst_PRIMARY_PEG = cvar.ExecInst_PRIMARY_PEG
ExecInst_SUSPEND = cvar.ExecInst_SUSPEND
ExecInst_CUSTOMER_DISPLAY_INSTRUCTION = cvar.ExecInst_CUSTOMER_DISPLAY_INSTRUCTION
ExecInst_NETTING = cvar.ExecInst_NETTING
ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = cvar.ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER
ExecInst_PEG_TO_VWAP = cvar.ExecInst_PEG_TO_VWAP
ExecInst_TRYTOSTOP = cvar.ExecInst_TRYTOSTOP
ExecInst_MIDPRCPEG = cvar.ExecInst_MIDPRCPEG
ExecInst_MARKPEG = cvar.ExecInst_MARKPEG
ExecInst_CANCELONSYSFAIL = cvar.ExecInst_CANCELONSYSFAIL
ExecInst_PRIMPEG = cvar.ExecInst_PRIMPEG
ExecInst_CUSTDISPINST = cvar.ExecInst_CUSTDISPINST
ExecInst_PEGVWAP = cvar.ExecInst_PEGVWAP
ExecInst_TRADEALONG = cvar.ExecInst_TRADEALONG
ExecInst_PERCVOL = cvar.ExecInst_PERCVOL
ExecInst_STAYOFFER = cvar.ExecInst_STAYOFFER
ExecInst_OVERDAY = cvar.ExecInst_OVERDAY
ExecInst_PARTNOTINIT = cvar.ExecInst_PARTNOTINIT
ExecInst_STRICTSCALE = cvar.ExecInst_STRICTSCALE
ExecInst_TRYTOSCALE = cvar.ExecInst_TRYTOSCALE
ExecInst_STAYBID = cvar.ExecInst_STAYBID
ExecInst_NOCROSS = cvar.ExecInst_NOCROSS
ExecInst_OPENPEG = cvar.ExecInst_OPENPEG
ExecInst_CALLFIRST = cvar.ExecInst_CALLFIRST
ExecInst_NONNEGO = cvar.ExecInst_NONNEGO
ExecInst_DNI = cvar.ExecInst_DNI
ExecInst_DNR = cvar.ExecInst_DNR
ExecInst_AON = cvar.ExecInst_AON
ExecInst_RESTATEONSYSFAIL = cvar.ExecInst_RESTATEONSYSFAIL
ExecInst_INSTITONLY = cvar.ExecInst_INSTITONLY
ExecInst_RESTATEONTRADINGHALT = cvar.ExecInst_RESTATEONTRADINGHALT
ExecInst_CANCELONTRADINGHALT = cvar.ExecInst_CANCELONTRADINGHALT
ExecInst_LASTPEG = cvar.ExecInst_LASTPEG
ExecInst_GOALONG = cvar.ExecInst_GOALONG
ExecInst_OKCROSS = cvar.ExecInst_OKCROSS
ExecInst_NOTHELD = cvar.ExecInst_NOTHELD
ExecInst_REINSTATE_ON_SYSTEM_FAILURE = cvar.ExecInst_REINSTATE_ON_SYSTEM_FAILURE
ExecInst_REINSTATE_ON_TRADING_HALT = cvar.ExecInst_REINSTATE_ON_TRADING_HALT
ExecInst_CANCEL_ON_TRADING_HALT = cvar.ExecInst_CANCEL_ON_TRADING_HALT
ExecInst_CANCEL_ON_SYSTEM_FAILURE = cvar.ExecInst_CANCEL_ON_SYSTEM_FAILURE
ExecInst_TRADE_ALONG = cvar.ExecInst_TRADE_ALONG
ExecInst_TRY_TO_STOP = cvar.ExecInst_TRY_TO_STOP
ExecInst_CANCEL_IF_NOT_BEST = cvar.ExecInst_CANCEL_IF_NOT_BEST
ExecInst_TRAILING_STOP_PEG = cvar.ExecInst_TRAILING_STOP_PEG
ExecInst_STRICT_LIMIT = cvar.ExecInst_STRICT_LIMIT
ExecInst_IGNORE_PRICE_VALIDITY_CHECKS = cvar.ExecInst_IGNORE_PRICE_VALIDITY_CHECKS
ExecInst_PEG_TO_LIMIT_PRICE = cvar.ExecInst_PEG_TO_LIMIT_PRICE
ExecInst_WORK_TO_TARGET_STRATEGY = cvar.ExecInst_WORK_TO_TARGET_STRATEGY
ExecInst_STAY_ON_OFFER_SIDE = cvar.ExecInst_STAY_ON_OFFER_SIDE
ExecInst_STAY_ON_BID_SIDE = cvar.ExecInst_STAY_ON_BID_SIDE
ExecInst_REINSTATE_ON_SYSTEM_FAILUE = cvar.ExecInst_REINSTATE_ON_SYSTEM_FAILUE
ExecInst_INTERMARKET_SWEEP = cvar.ExecInst_INTERMARKET_SWEEP
ExecInst_EXTERNAL_ROUTING_ALLOWED = cvar.ExecInst_EXTERNAL_ROUTING_ALLOWED
ExecInst_EXTERNAL_ROUTING_NOT_ALLOWED = cvar.ExecInst_EXTERNAL_ROUTING_NOT_ALLOWED
ExecInst_IMBALANCE_ONLY = cvar.ExecInst_IMBALANCE_ONLY
ExecInst_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE = cvar.ExecInst_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE
ExecInst_BEST_EXECUTION = cvar.ExecInst_BEST_EXECUTION
ExecInst_SUSPEND_ON_SYSTEM_FAILURE = cvar.ExecInst_SUSPEND_ON_SYSTEM_FAILURE
ExecInst_SUSPEND_ON_TRADING_HALT = cvar.ExecInst_SUSPEND_ON_TRADING_HALT
ExecInst_REINSTATE_ON_CONNECTION_LOSS = cvar.ExecInst_REINSTATE_ON_CONNECTION_LOSS
ExecInst_CANCEL_ON_CONNECTION_LOSS = cvar.ExecInst_CANCEL_ON_CONNECTION_LOSS
ExecInst_SUSPEND_ON_CONNECTION_LOSS = cvar.ExecInst_SUSPEND_ON_CONNECTION_LOSS
ExecInst_RELEASE_FROM_SUSPENSION = cvar.ExecInst_RELEASE_FROM_SUSPENSION
ExecInst_EXECUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED = cvar.ExecInst_EXECUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED
ExecInst_EXECUTE_AS_DURATION_NEUTRAL = cvar.ExecInst_EXECUTE_AS_DURATION_NEUTRAL
ExecInst_EXECUTE_AS_FX_NEUTRAL = cvar.ExecInst_EXECUTE_AS_FX_NEUTRAL
ExecTransType_NEW = cvar.ExecTransType_NEW
ExecTransType_CANCEL = cvar.ExecTransType_CANCEL
ExecTransType_CORRECT = cvar.ExecTransType_CORRECT
ExecTransType_STATUS = cvar.ExecTransType_STATUS
HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION = cvar.HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION
HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK = cvar.HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK
HandlInst_MANUAL_ORDER_BEST_EXECUTION = cvar.HandlInst_MANUAL_ORDER_BEST_EXECUTION
IDSource_CUSIP = cvar.IDSource_CUSIP
IDSource_SEDOL = cvar.IDSource_SEDOL
IDSource_QUIK = cvar.IDSource_QUIK
IDSource_ISIN_NUMBER = cvar.IDSource_ISIN_NUMBER
IDSource_RIC_CODE = cvar.IDSource_RIC_CODE
IDSource_ISO_CURRENCY_CODE = cvar.IDSource_ISO_CURRENCY_CODE
IDSource_ISO_COUNTRY_CODE = cvar.IDSource_ISO_COUNTRY_CODE
IDSource_EXCHANGE_SYMBOL = cvar.IDSource_EXCHANGE_SYMBOL
IDSource_CONSOLIDATED_TAPE_ASSOCIATION = cvar.IDSource_CONSOLIDATED_TAPE_ASSOCIATION
IOIOthSvc_AUTEX = cvar.IOIOthSvc_AUTEX
IOIOthSvc_BRIDGE = cvar.IOIOthSvc_BRIDGE
IOIQltyInd_HIGH = cvar.IOIQltyInd_HIGH
IOIQltyInd_LOW = cvar.IOIQltyInd_LOW
IOIQltyInd_MEDIUM = cvar.IOIQltyInd_MEDIUM
IOIShares_LARGE = cvar.IOIShares_LARGE
IOIShares_MEDIUM = cvar.IOIShares_MEDIUM
IOIShares_SMALL = cvar.IOIShares_SMALL
IOITransType_CANCEL = cvar.IOITransType_CANCEL
IOITransType_NEW = cvar.IOITransType_NEW
IOITransType_REPLACE = cvar.IOITransType_REPLACE
LastCapacity_AGENT = cvar.LastCapacity_AGENT
LastCapacity_CROSS_AS_AGENT = cvar.LastCapacity_CROSS_AS_AGENT
LastCapacity_CROSS_AS_PRINCIPAL = cvar.LastCapacity_CROSS_AS_PRINCIPAL
LastCapacity_PRINCIPAL = cvar.LastCapacity_PRINCIPAL
OrdStatus_NEW = cvar.OrdStatus_NEW
OrdStatus_PARTIALLY_FILLED = cvar.OrdStatus_PARTIALLY_FILLED
OrdStatus_FILLED = cvar.OrdStatus_FILLED
OrdStatus_DONE_FOR_DAY = cvar.OrdStatus_DONE_FOR_DAY
OrdStatus_CANCELED = cvar.OrdStatus_CANCELED
OrdStatus_REPLACED = cvar.OrdStatus_REPLACED
OrdStatus_PENDING_CANCEL_REPLACE = cvar.OrdStatus_PENDING_CANCEL_REPLACE
OrdStatus_STOPPED = cvar.OrdStatus_STOPPED
OrdStatus_REJECTED = cvar.OrdStatus_REJECTED
OrdStatus_SUSPENDED = cvar.OrdStatus_SUSPENDED
OrdStatus_PENDING_NEW = cvar.OrdStatus_PENDING_NEW
OrdStatus_CALCULATED = cvar.OrdStatus_CALCULATED
OrdStatus_EXPIRED = cvar.OrdStatus_EXPIRED
OrdStatus_PENDING_CANCEL = cvar.OrdStatus_PENDING_CANCEL
OrdStatus_ACCEPTED_FOR_BIDDING = cvar.OrdStatus_ACCEPTED_FOR_BIDDING
OrdStatus_PENDING_REPLACE = cvar.OrdStatus_PENDING_REPLACE
OrdType_MARKET = cvar.OrdType_MARKET
OrdType_LIMIT = cvar.OrdType_LIMIT
OrdType_STOP = cvar.OrdType_STOP
OrdType_STOP_LIMIT = cvar.OrdType_STOP_LIMIT
OrdType_MARKET_ON_CLOSE = cvar.OrdType_MARKET_ON_CLOSE
OrdType_WITH_OR_WITHOUT = cvar.OrdType_WITH_OR_WITHOUT
OrdType_LIMIT_OR_BETTER = cvar.OrdType_LIMIT_OR_BETTER
OrdType_LIMIT_WITH_OR_WITHOUT = cvar.OrdType_LIMIT_WITH_OR_WITHOUT
OrdType_ON_BASIS = cvar.OrdType_ON_BASIS
OrdType_ON_CLOSE = cvar.OrdType_ON_CLOSE
OrdType_LIMIT_ON_CLOSE = cvar.OrdType_LIMIT_ON_CLOSE
OrdType_FOREX = cvar.OrdType_FOREX
OrdType_PREVIOUSLY_QUOTED = cvar.OrdType_PREVIOUSLY_QUOTED
OrdType_PREVIOUSLY_INDICATED = cvar.OrdType_PREVIOUSLY_INDICATED
OrdType_PEGGED = cvar.OrdType_PEGGED
OrdType_FOREX_C = cvar.OrdType_FOREX_C
OrdType_FOREX_F = cvar.OrdType_FOREX_F
OrdType_FOREX_G = cvar.OrdType_FOREX_G
OrdType_FOREX_H = cvar.OrdType_FOREX_H
OrdType_FUNARI = cvar.OrdType_FUNARI
OrdType_MARKET_IF_TOUCHED = cvar.OrdType_MARKET_IF_TOUCHED
OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT = cvar.OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT
OrdType_PREVIOUS_FUND_VALUATION_POINT = cvar.OrdType_PREVIOUS_FUND_VALUATION_POINT
OrdType_NEXT_FUND_VALUATION_POINT = cvar.OrdType_NEXT_FUND_VALUATION_POINT
OrdType_FOREX_MARKET = cvar.OrdType_FOREX_MARKET
OrdType_FOREX_LIMIT = cvar.OrdType_FOREX_LIMIT
OrdType_FOREX_SWAP = cvar.OrdType_FOREX_SWAP
OrdType_FOREX_PREVIOUSLY_QUOTED = cvar.OrdType_FOREX_PREVIOUSLY_QUOTED
OrdType_MARKET_WITH_LEFT_OVER_AS_LIMIT = cvar.OrdType_MARKET_WITH_LEFT_OVER_AS_LIMIT
OrdType_COUNTER_ORDER_SELECTION = cvar.OrdType_COUNTER_ORDER_SELECTION
Rule80A_AGENCY_SINGLE_ORDER = cvar.Rule80A_AGENCY_SINGLE_ORDER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM_ORG = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM_ORG
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_ORG = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_ORG
Rule80A_INDIVIDUAL_INVESTOR_SINGLE_ORDER = cvar.Rule80A_INDIVIDUAL_INVESTOR_SINGLE_ORDER
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY
Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER = cvar.Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY
Rule80A_SHORT_EXEMPT_TRANSACTION_B = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_B
Rule80A_REGISTERED_EQUITY_MARKET_MAKER_TRADES = cvar.Rule80A_REGISTERED_EQUITY_MARKET_MAKER_TRADES
Rule80A_SHORT_EXEMPT_TRANSACTION_F = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_F
Rule80A_SHORT_EXEMPT_TRANSACTION_H = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_H
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE
Rule80A_COMPETING_DEALER_TRADES_O = cvar.Rule80A_COMPETING_DEALER_TRADES_O
Rule80A_PRINCIPAL = cvar.Rule80A_PRINCIPAL
Rule80A_COMPETING_DEALER_TRADES_R = cvar.Rule80A_COMPETING_DEALER_TRADES_R
Rule80A_SPECIALIST_TRADES = cvar.Rule80A_SPECIALIST_TRADES
Rule80A_COMPETING_DEALER_TRADES_T = cvar.Rule80A_COMPETING_DEALER_TRADES_T
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_NOT_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_NOT_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_NON_MEMBER_COMPETING_MARKET_MAKER = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_NON_MEMBER_COMPETING_MARKET_MAKER
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL
Rule80A_PROPRIETARY_TRANSACTIONS_FOR_COMPETING_MARKET_MAKER_THAT_IS_AFFILIATED_WITH_THE_CLEARING_MEMBER = cvar.Rule80A_PROPRIETARY_TRANSACTIONS_FOR_COMPETING_MARKET_MAKER_THAT_IS_AFFILIATED_WITH_THE_CLEARING_MEMBER
Rule80A_TRANSACTIONS_FOR_THE_ACCOUNT_OF_A_NON_MEMBER_COMPETING_MARKET_MAKER = cvar.Rule80A_TRANSACTIONS_FOR_THE_ACCOUNT_OF_A_NON_MEMBER_COMPETING_MARKET_MAKER
Rule80A_TRANSACTIONS_FOR_THE_ACCOUNT_OF_AN_UNAFFILIATED_MEMBERS_COMPETING_MARKET_MAKER = cvar.Rule80A_TRANSACTIONS_FOR_THE_ACCOUNT_OF_AN_UNAFFILIATED_MEMBERS_COMPETING_MARKET_MAKER
Side_BUY = cvar.Side_BUY
Side_SELL = cvar.Side_SELL
Side_BUY_MINUS = cvar.Side_BUY_MINUS
Side_SELL_PLUS = cvar.Side_SELL_PLUS
Side_SELL_SHORT = cvar.Side_SELL_SHORT
Side_SELL_SHORT_EXEMPT = cvar.Side_SELL_SHORT_EXEMPT
Side_UNDISCLOSED = cvar.Side_UNDISCLOSED
Side_CROSS = cvar.Side_CROSS
Side_CROSS_SHORT = cvar.Side_CROSS_SHORT
Side_AS_DEFINED = cvar.Side_AS_DEFINED
Side_OPPOSITE = cvar.Side_OPPOSITE
Side_CROSS_SHORT_EXEMPT = cvar.Side_CROSS_SHORT_EXEMPT
Side_SUBSCRIBE = cvar.Side_SUBSCRIBE
Side_REDEEM = cvar.Side_REDEEM
Side_LEND = cvar.Side_LEND
Side_BORROW = cvar.Side_BORROW
Side_CROSS_SHORT_EXXMPT = cvar.Side_CROSS_SHORT_EXXMPT
TimeInForce_DAY = cvar.TimeInForce_DAY
TimeInForce_GOOD_TILL_CANCEL = cvar.TimeInForce_GOOD_TILL_CANCEL
TimeInForce_AT_THE_OPENING = cvar.TimeInForce_AT_THE_OPENING
TimeInForce_IMMEDIATE_OR_CANCEL = cvar.TimeInForce_IMMEDIATE_OR_CANCEL
TimeInForce_FILL_OR_KILL = cvar.TimeInForce_FILL_OR_KILL
TimeInForce_GOOD_TILL_CROSSING = cvar.TimeInForce_GOOD_TILL_CROSSING
TimeInForce_GOOD_TILL_DATE = cvar.TimeInForce_GOOD_TILL_DATE
TimeInForce_AT_THE_CLOSE = cvar.TimeInForce_AT_THE_CLOSE
TimeInForce_GOOD_THROUGH_CROSSING = cvar.TimeInForce_GOOD_THROUGH_CROSSING
TimeInForce_AT_CROSSING = cvar.TimeInForce_AT_CROSSING
Urgency_NORMAL = cvar.Urgency_NORMAL
Urgency_FLASH = cvar.Urgency_FLASH
Urgency_BACKGROUND = cvar.Urgency_BACKGROUND
SettlmntTyp_REGULAR = cvar.SettlmntTyp_REGULAR
SettlmntTyp_CASH = cvar.SettlmntTyp_CASH
SettlmntTyp_NEXT_DAY = cvar.SettlmntTyp_NEXT_DAY
SettlmntTyp_T_PLUS_2 = cvar.SettlmntTyp_T_PLUS_2
SettlmntTyp_T_PLUS_3 = cvar.SettlmntTyp_T_PLUS_3
SettlmntTyp_T_PLUS_4 = cvar.SettlmntTyp_T_PLUS_4
SettlmntTyp_FUTURE = cvar.SettlmntTyp_FUTURE
SettlmntTyp_WHEN_ISSUED = cvar.SettlmntTyp_WHEN_ISSUED
SettlmntTyp_SELLERS_OPTION = cvar.SettlmntTyp_SELLERS_OPTION
SettlmntTyp_T_PLUS_5 = cvar.SettlmntTyp_T_PLUS_5
SettlmntTyp_T_PLUS_1 = cvar.SettlmntTyp_T_PLUS_1
SettlmntTyp_WHEN_AND_IF_ISSUED = cvar.SettlmntTyp_WHEN_AND_IF_ISSUED
SymbolSfx_EUCP_WITH_LUMP_SUM_INTEREST_RATHER_THAN_DISCOUNT_PRICE = cvar.SymbolSfx_EUCP_WITH_LUMP_SUM_INTEREST_RATHER_THAN_DISCOUNT_PRICE
SymbolSfx_WHEN_ISSUED_FOR_A_SECURITY_TO_BE_REISSUED_UNDER_AN_OLD_CUSIP_OR_ISIN = cvar.SymbolSfx_WHEN_ISSUED_FOR_A_SECURITY_TO_BE_REISSUED_UNDER_AN_OLD_CUSIP_OR_ISIN
AllocTransType_NEW = cvar.AllocTransType_NEW
AllocTransType_REPLACE = cvar.AllocTransType_REPLACE
AllocTransType_CANCEL = cvar.AllocTransType_CANCEL
AllocTransType_PRELIMINARY = cvar.AllocTransType_PRELIMINARY
AllocTransType_CALCULATED = cvar.AllocTransType_CALCULATED
AllocTransType_CALCULATED_WITHOUT_PRELIMINARY = cvar.AllocTransType_CALCULATED_WITHOUT_PRELIMINARY
AllocTransType_REVERSAL = cvar.AllocTransType_REVERSAL
OpenClose_CLOSE = cvar.OpenClose_CLOSE
OpenClose_OPEN = cvar.OpenClose_OPEN
ProcessCode_REGULAR = cvar.ProcessCode_REGULAR
ProcessCode_SOFT_DOLLAR = cvar.ProcessCode_SOFT_DOLLAR
ProcessCode_STEP_IN = cvar.ProcessCode_STEP_IN
ProcessCode_STEP_OUT = cvar.ProcessCode_STEP_OUT
ProcessCode_SOFT_DOLLAR_STEP_IN = cvar.ProcessCode_SOFT_DOLLAR_STEP_IN
ProcessCode_SOFT_DOLLAR_STEP_OUT = cvar.ProcessCode_SOFT_DOLLAR_STEP_OUT
ProcessCode_PLAN_SPONSOR = cvar.ProcessCode_PLAN_SPONSOR
AllocStatus_ACCEPTED = cvar.AllocStatus_ACCEPTED
AllocStatus_REJECTED = cvar.AllocStatus_REJECTED
AllocStatus_PARTIAL_ACCEPT = cvar.AllocStatus_PARTIAL_ACCEPT
AllocStatus_RECEIVED = cvar.AllocStatus_RECEIVED
AllocStatus_BLOCK_LEVEL_REJECT = cvar.AllocStatus_BLOCK_LEVEL_REJECT
AllocStatus_ACCOUNT_LEVEL_REJECT = cvar.AllocStatus_ACCOUNT_LEVEL_REJECT
AllocStatus_INCOMPLETE = cvar.AllocStatus_INCOMPLETE
AllocStatus_REJECTED_BY_INTERMEDIARY = cvar.AllocStatus_REJECTED_BY_INTERMEDIARY
AllocStatus_ALLOCATION_PENDING = cvar.AllocStatus_ALLOCATION_PENDING
AllocStatus_REVERSED = cvar.AllocStatus_REVERSED
AllocRejCode_UNKNOWN_ACCOUNT = cvar.AllocRejCode_UNKNOWN_ACCOUNT
AllocRejCode_INCORRECT_QUANTITY = cvar.AllocRejCode_INCORRECT_QUANTITY
AllocRejCode_INCORRECT_AVERAGE_PRICE = cvar.AllocRejCode_INCORRECT_AVERAGE_PRICE
AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC = cvar.AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC
AllocRejCode_COMMISSION_DIFFERENCE = cvar.AllocRejCode_COMMISSION_DIFFERENCE
AllocRejCode_UNKNOWN_ORDERID = cvar.AllocRejCode_UNKNOWN_ORDERID
AllocRejCode_UNKNOWN_LISTID = cvar.AllocRejCode_UNKNOWN_LISTID
AllocRejCode_OTHER = cvar.AllocRejCode_OTHER
AllocRejCode_INCORRECT_ALLOCATED_QUANTITY = cvar.AllocRejCode_INCORRECT_ALLOCATED_QUANTITY
AllocRejCode_CALCULATION_DIFFERENCE = cvar.AllocRejCode_CALCULATION_DIFFERENCE
AllocRejCode_UNKNOWN_OR_STALE_EXECID = cvar.AllocRejCode_UNKNOWN_OR_STALE_EXECID
AllocRejCode_MISMATCHED_DATA_VALUE = cvar.AllocRejCode_MISMATCHED_DATA_VALUE
AllocRejCode_UNKNOWN_CLORDID = cvar.AllocRejCode_UNKNOWN_CLORDID
AllocRejCode_WAREHOUSE_REQUEST_REJECTED = cvar.AllocRejCode_WAREHOUSE_REQUEST_REJECTED
AllocRejCode_INCORRECT_AVERAGEG_PRICE = cvar.AllocRejCode_INCORRECT_AVERAGEG_PRICE
AllocRejCode_MISMATCHED_DATA = cvar.AllocRejCode_MISMATCHED_DATA
AllocRejCode_OTHER_7 = cvar.AllocRejCode_OTHER_7
AllocRejCode_OTHER_99 = cvar.AllocRejCode_OTHER_99
EmailType_NEW = cvar.EmailType_NEW
EmailType_REPLY = cvar.EmailType_REPLY
EmailType_ADMIN_REPLY = cvar.EmailType_ADMIN_REPLY
ExDestination_NONE = cvar.ExDestination_NONE
ExDestination_POSIT = cvar.ExDestination_POSIT
CxlRejReason_TOO_LATE_TO_CANCEL = cvar.CxlRejReason_TOO_LATE_TO_CANCEL
CxlRejReason_UNKNOWN_ORDER = cvar.CxlRejReason_UNKNOWN_ORDER
CxlRejReason_BROKER_OPTION = cvar.CxlRejReason_BROKER_OPTION
CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS = cvar.CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS
CxlRejReason_DUPLICATE_CLORDID_RECEIVED = cvar.CxlRejReason_DUPLICATE_CLORDID_RECEIVED
CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER = cvar.CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER
CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST = cvar.CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST
CxlRejReason_BROKER = cvar.CxlRejReason_BROKER
CxlRejReason_ORIGORDMODTIME = cvar.CxlRejReason_ORIGORDMODTIME
CxlRejReason_DUPLICATE_CLORDID = cvar.CxlRejReason_DUPLICATE_CLORDID
CxlRejReason_OTHER = cvar.CxlRejReason_OTHER
CxlRejReason_INVALID_PRICE_INCREMENT = cvar.CxlRejReason_INVALID_PRICE_INCREMENT
CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE = cvar.CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE
CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND = cvar.CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND
OrdRejReason_BROKER_OPTION = cvar.OrdRejReason_BROKER_OPTION
OrdRejReason_UNKNOWN_SYMBOL = cvar.OrdRejReason_UNKNOWN_SYMBOL
OrdRejReason_EXCHANGE_CLOSED = cvar.OrdRejReason_EXCHANGE_CLOSED
OrdRejReason_ORDER_EXCEEDS_LIMIT = cvar.OrdRejReason_ORDER_EXCEEDS_LIMIT
OrdRejReason_TOO_LATE_TO_ENTER = cvar.OrdRejReason_TOO_LATE_TO_ENTER
OrdRejReason_UNKNOWN_ORDER = cvar.OrdRejReason_UNKNOWN_ORDER
OrdRejReason_DUPLICATE_ORDER = cvar.OrdRejReason_DUPLICATE_ORDER
OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER = cvar.OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER
OrdRejReason_STALE_ORDER = cvar.OrdRejReason_STALE_ORDER
OrdRejReason_TRADE_ALONG_REQUIRED = cvar.OrdRejReason_TRADE_ALONG_REQUIRED
OrdRejReason_INVALID_INVESTOR_ID = cvar.OrdRejReason_INVALID_INVESTOR_ID
OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC = cvar.OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC
OrdRejReason_SURVEILLENCE_OPTION = cvar.OrdRejReason_SURVEILLENCE_OPTION
OrdRejReason_BROKER = cvar.OrdRejReason_BROKER
OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC12_SURVEILLENCE_OPTION = cvar.OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC12_SURVEILLENCE_OPTION
OrdRejReason_INCORRECT_QUANTITY = cvar.OrdRejReason_INCORRECT_QUANTITY
OrdRejReason_INCORRECT_ALLOCATED_QUANTITY = cvar.OrdRejReason_INCORRECT_ALLOCATED_QUANTITY
OrdRejReason_UNKNOWN_ACCOUNT = cvar.OrdRejReason_UNKNOWN_ACCOUNT
OrdRejReason_OTHER = cvar.OrdRejReason_OTHER
OrdRejReason_INVALID_PRICE_INCREMENT = cvar.OrdRejReason_INVALID_PRICE_INCREMENT
OrdRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND = cvar.OrdRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND
IOIQualifier_ALL_OR_NONE = cvar.IOIQualifier_ALL_OR_NONE
IOIQualifier_AT_THE_CLOSE = cvar.IOIQualifier_AT_THE_CLOSE
IOIQualifier_IN_TOUCH_WITH = cvar.IOIQualifier_IN_TOUCH_WITH
IOIQualifier_LIMIT = cvar.IOIQualifier_LIMIT
IOIQualifier_MORE_BEHIND = cvar.IOIQualifier_MORE_BEHIND
IOIQualifier_AT_THE_OPEN = cvar.IOIQualifier_AT_THE_OPEN
IOIQualifier_TAKING_A_POSITION = cvar.IOIQualifier_TAKING_A_POSITION
IOIQualifier_CURRENT_QUOTE = cvar.IOIQualifier_CURRENT_QUOTE
IOIQualifier_PORTFOLIO_SHOW_N = cvar.IOIQualifier_PORTFOLIO_SHOW_N
IOIQualifier_THROUGH_THE_DAY = cvar.IOIQualifier_THROUGH_THE_DAY
IOIQualifier_VERSUS = cvar.IOIQualifier_VERSUS
IOIQualifier_INDICATION = cvar.IOIQualifier_INDICATION
IOIQualifier_CROSSING_OPPORTUNITY = cvar.IOIQualifier_CROSSING_OPPORTUNITY
IOIQualifier_AT_THE_MARKET = cvar.IOIQualifier_AT_THE_MARKET
IOIQualifier_AT_THE_MIDPOINT = cvar.IOIQualifier_AT_THE_MIDPOINT
IOIQualifier_PRE_OPEN = cvar.IOIQualifier_PRE_OPEN
IOIQualifier_READY_TO_TRADE = cvar.IOIQualifier_READY_TO_TRADE
IOIQualifier_PORTFOLIO_SHOWN = cvar.IOIQualifier_PORTFOLIO_SHOWN
IOIQualifier_VWAP = cvar.IOIQualifier_VWAP
IOIQualifier_MARKET_ON_CLOSE = cvar.IOIQualifier_MARKET_ON_CLOSE
IOIQualifier_INDIDCATION = cvar.IOIQualifier_INDIDCATION
ReportToExch_NO = cvar.ReportToExch_NO
ReportToExch_YES = cvar.ReportToExch_YES
LocateReqd_NO = cvar.LocateReqd_NO
LocateReqd_YES = cvar.LocateReqd_YES
ForexReq_NO = cvar.ForexReq_NO
ForexReq_YES = cvar.ForexReq_YES
CxlType_FULL_REMAINING_QUANTITY = cvar.CxlType_FULL_REMAINING_QUANTITY
CxlType_PARTIAL_CANCEL = cvar.CxlType_PARTIAL_CANCEL
DKReason_UNKNOWN_SYMBOL = cvar.DKReason_UNKNOWN_SYMBOL
DKReason_WRONG_SIDE = cvar.DKReason_WRONG_SIDE
DKReason_QUANTITY_EXCEEDS_ORDER = cvar.DKReason_QUANTITY_EXCEEDS_ORDER
DKReason_NO_MATCHING_ORDER = cvar.DKReason_NO_MATCHING_ORDER
DKReason_PRICE_EXCEEDS_LIMIT = cvar.DKReason_PRICE_EXCEEDS_LIMIT
DKReason_OTHER = cvar.DKReason_OTHER
DKReason_CALCULATION_DIFFERENCE = cvar.DKReason_CALCULATION_DIFFERENCE
IOINaturalFlag_NO = cvar.IOINaturalFlag_NO
IOINaturalFlag_YES = cvar.IOINaturalFlag_YES
MiscFeeType_REGULATORY = cvar.MiscFeeType_REGULATORY
MiscFeeType_TAX = cvar.MiscFeeType_TAX
MiscFeeType_LOCAL_COMMISSION = cvar.MiscFeeType_LOCAL_COMMISSION
MiscFeeType_EXCHANGE_FEES = cvar.MiscFeeType_EXCHANGE_FEES
MiscFeeType_STAMP = cvar.MiscFeeType_STAMP
MiscFeeType_LEVY = cvar.MiscFeeType_LEVY
MiscFeeType_OTHER = cvar.MiscFeeType_OTHER
MiscFeeType_MARKUP = cvar.MiscFeeType_MARKUP
MiscFeeType_CONSUMPTION_TAX = cvar.MiscFeeType_CONSUMPTION_TAX
MiscFeeType_PER_TRANSACTION = cvar.MiscFeeType_PER_TRANSACTION
MiscFeeType_CONVERSION = cvar.MiscFeeType_CONVERSION
MiscFeeType_AGENT = cvar.MiscFeeType_AGENT
MiscFeeType_TRANSFER_FEE = cvar.MiscFeeType_TRANSFER_FEE
MiscFeeType_SECURITY_LENDING = cvar.MiscFeeType_SECURITY_LENDING
ExecType_NEW = cvar.ExecType_NEW
ExecType_PARTIAL_FILL = cvar.ExecType_PARTIAL_FILL
ExecType_FILL = cvar.ExecType_FILL
ExecType_DONE_FOR_DAY = cvar.ExecType_DONE_FOR_DAY
ExecType_CANCELLED = cvar.ExecType_CANCELLED
ExecType_REPLACE = cvar.ExecType_REPLACE
ExecType_PENDING_CANCEL_REPLACE = cvar.ExecType_PENDING_CANCEL_REPLACE
ExecType_STOPPED = cvar.ExecType_STOPPED
ExecType_REJECTED = cvar.ExecType_REJECTED
ExecType_SUSPENDED = cvar.ExecType_SUSPENDED
ExecType_PENDING_NEW = cvar.ExecType_PENDING_NEW
ExecType_CALCULATED = cvar.ExecType_CALCULATED
ExecType_EXPIRED = cvar.ExecType_EXPIRED
ExecType_CANCELED = cvar.ExecType_CANCELED
ExecType_PENDING_CANCEL = cvar.ExecType_PENDING_CANCEL
ExecType_RESTATED = cvar.ExecType_RESTATED
ExecType_PENDING_REPLACE = cvar.ExecType_PENDING_REPLACE
ExecType_TRADE = cvar.ExecType_TRADE
ExecType_TRADE_CORRECT = cvar.ExecType_TRADE_CORRECT
ExecType_TRADE_CANCEL = cvar.ExecType_TRADE_CANCEL
ExecType_ORDER_STATUS = cvar.ExecType_ORDER_STATUS
ExecType_REPLACED = cvar.ExecType_REPLACED
ExecType_TRADE_IN_A_CLEARING_HOLD = cvar.ExecType_TRADE_IN_A_CLEARING_HOLD
ExecType_TRADE_HAS_BEEN_RELEASED_TO_CLEARING = cvar.ExecType_TRADE_HAS_BEEN_RELEASED_TO_CLEARING
ExecType_TRIGGERED_OR_ACTIVATED_BY_SYSTEM = cvar.ExecType_TRIGGERED_OR_ACTIVATED_BY_SYSTEM
SettlCurrFxRateCalc_MULTIPLY = cvar.SettlCurrFxRateCalc_MULTIPLY
SettlCurrFxRateCalc_DIVIDE = cvar.SettlCurrFxRateCalc_DIVIDE
SettlInstMode_DEFAULT = cvar.SettlInstMode_DEFAULT
SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED = cvar.SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED
SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING = cvar.SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING
SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_STANDING = cvar.SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_STANDING
SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT = cvar.SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT
SettlInstMode_REQUEST_REJECT = cvar.SettlInstMode_REQUEST_REJECT
SettlInstTransType_CANCEL = cvar.SettlInstTransType_CANCEL
SettlInstTransType_NEW = cvar.SettlInstTransType_NEW
SettlInstTransType_REPLACE = cvar.SettlInstTransType_REPLACE
SettlInstTransType_RESTATE = cvar.SettlInstTransType_RESTATE
SettlInstSource_BROKERS_INSTRUCTIONS = cvar.SettlInstSource_BROKERS_INSTRUCTIONS
SettlInstSource_INSTITUTIONS_INSTRUCTIONS = cvar.SettlInstSource_INSTITUTIONS_INSTRUCTIONS
SettlInstSource_INVESTOR = cvar.SettlInstSource_INVESTOR
SettlLocation_CEDEL = cvar.SettlLocation_CEDEL
SettlLocation_DEPOSITORY_TRUST_COMPANY = cvar.SettlLocation_DEPOSITORY_TRUST_COMPANY
SettlLocation_EUROCLEAR = cvar.SettlLocation_EUROCLEAR
SettlLocation_FEDERAL_BOOK_ENTRY = cvar.SettlLocation_FEDERAL_BOOK_ENTRY
SettlLocation_LOCAL_MARKET_SETTLE_LOCATION = cvar.SettlLocation_LOCAL_MARKET_SETTLE_LOCATION
SettlLocation_PHYSICAL = cvar.SettlLocation_PHYSICAL
SettlLocation_PARTICIPANT_TRUST_COMPANY = cvar.SettlLocation_PARTICIPANT_TRUST_COMPANY
SecurityType_BANKERS_ACCEPTANCE = cvar.SecurityType_BANKERS_ACCEPTANCE
SecurityType_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_CERTIFICATE_OF_DEPOSIT
SecurityType_COLLATERALIZE_MORTGAGE_OBLIGATION = cvar.SecurityType_COLLATERALIZE_MORTGAGE_OBLIGATION
SecurityType_CORPORATE_BOND = cvar.SecurityType_CORPORATE_BOND
SecurityType_COMMERCIAL_PAPER = cvar.SecurityType_COMMERCIAL_PAPER
SecurityType_CORPORATE_PRIVATE_PLACEMENT = cvar.SecurityType_CORPORATE_PRIVATE_PLACEMENT
SecurityType_COMMON_STOCK = cvar.SecurityType_COMMON_STOCK
SecurityType_FEDERAL_HOUSING_AUTHORITY = cvar.SecurityType_FEDERAL_HOUSING_AUTHORITY
SecurityType_FEDERAL_HOME_LOAN = cvar.SecurityType_FEDERAL_HOME_LOAN
SecurityType_FEDERAL_NATIONAL_MORTGAGE_ASSOCIATION = cvar.SecurityType_FEDERAL_NATIONAL_MORTGAGE_ASSOCIATION
SecurityType_FOREIGN_EXCHANGE_CONTRACT = cvar.SecurityType_FOREIGN_EXCHANGE_CONTRACT
SecurityType_FUTURE = cvar.SecurityType_FUTURE
SecurityType_GOVERNMENT_NATIONAL_MORTGAGE_ASSOCIATION = cvar.SecurityType_GOVERNMENT_NATIONAL_MORTGAGE_ASSOCIATION
SecurityType_TREASURIES_PLUS_AGENCY_DEBENTURE = cvar.SecurityType_TREASURIES_PLUS_AGENCY_DEBENTURE
SecurityType_MUTUAL_FUND = cvar.SecurityType_MUTUAL_FUND
SecurityType_MORTGAGE_INTEREST_ONLY = cvar.SecurityType_MORTGAGE_INTEREST_ONLY
SecurityType_MORTGAGE_PRINCIPLE_ONLY = cvar.SecurityType_MORTGAGE_PRINCIPLE_ONLY
SecurityType_MORTGAGE_PRIVATE_PLACEMENT = cvar.SecurityType_MORTGAGE_PRIVATE_PLACEMENT
SecurityType_MISCELLANEOUS_PASS_THRU = cvar.SecurityType_MISCELLANEOUS_PASS_THRU
SecurityType_MUNICIPAL_BOND = cvar.SecurityType_MUNICIPAL_BOND
SecurityType_NO_ISITC_SECURITY_TYPE = cvar.SecurityType_NO_ISITC_SECURITY_TYPE
SecurityType_OPTION = cvar.SecurityType_OPTION
SecurityType_PREFERRED_STOCK = cvar.SecurityType_PREFERRED_STOCK
SecurityType_REPURCHASE_AGREEMENT = cvar.SecurityType_REPURCHASE_AGREEMENT
SecurityType_REVERSE_REPURCHASE_AGREEMENT = cvar.SecurityType_REVERSE_REPURCHASE_AGREEMENT
SecurityType_STUDENT_LOAN_MARKETING_ASSOCIATION = cvar.SecurityType_STUDENT_LOAN_MARKETING_ASSOCIATION
SecurityType_TIME_DEPOSIT = cvar.SecurityType_TIME_DEPOSIT
SecurityType_US_TREASURY_BILL = cvar.SecurityType_US_TREASURY_BILL
SecurityType_WARRANT = cvar.SecurityType_WARRANT
SecurityType_CATS_TIGERS_LIONS = cvar.SecurityType_CATS_TIGERS_LIONS
SecurityType_WILDCARD_ENTRY = cvar.SecurityType_WILDCARD_ENTRY
SecurityType_CONVERTIBLE_BOND = cvar.SecurityType_CONVERTIBLE_BOND
SecurityType_MORTGAGE_IOETTE = cvar.SecurityType_MORTGAGE_IOETTE
SecurityType_MORTGAGE_PRINCIPAL_ONLY = cvar.SecurityType_MORTGAGE_PRINCIPAL_ONLY
SecurityType_VARIABLE_RATE_DEMAND_NOTE = cvar.SecurityType_VARIABLE_RATE_DEMAND_NOTE
SecurityType_PLAZOS_FIJOS = cvar.SecurityType_PLAZOS_FIJOS
SecurityType_PROMISSORY_NOTE = cvar.SecurityType_PROMISSORY_NOTE
SecurityType_OVERNIGHT = cvar.SecurityType_OVERNIGHT
SecurityType_MEDIUM_TERM_NOTES = cvar.SecurityType_MEDIUM_TERM_NOTES
SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER = cvar.SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER
SecurityType_AMENDED_RESTATED = cvar.SecurityType_AMENDED_RESTATED
SecurityType_BRIDGE_LOAN = cvar.SecurityType_BRIDGE_LOAN
SecurityType_LETTER_OF_CREDIT = cvar.SecurityType_LETTER_OF_CREDIT
SecurityType_SWING_LINE_FACILITY = cvar.SecurityType_SWING_LINE_FACILITY
SecurityType_DEBTOR_IN_POSSESSION = cvar.SecurityType_DEBTOR_IN_POSSESSION
SecurityType_DEFAULTED = cvar.SecurityType_DEFAULTED
SecurityType_WITHDRAWN = cvar.SecurityType_WITHDRAWN
SecurityType_LIQUIDITY_NOTE = cvar.SecurityType_LIQUIDITY_NOTE
SecurityType_MATURED = cvar.SecurityType_MATURED
SecurityType_DEPOSIT_NOTES = cvar.SecurityType_DEPOSIT_NOTES
SecurityType_RETIRED = cvar.SecurityType_RETIRED
SecurityType_BANK_NOTES = cvar.SecurityType_BANK_NOTES
SecurityType_BILL_OF_EXCHANGES = cvar.SecurityType_BILL_OF_EXCHANGES
SecurityType_CALL_LOANS = cvar.SecurityType_CALL_LOANS
SecurityType_REPLACED = cvar.SecurityType_REPLACED
SecurityType_MANDATORY_TENDER = cvar.SecurityType_MANDATORY_TENDER
SecurityType_REVOLVER_TERM_LOAN = cvar.SecurityType_REVOLVER_TERM_LOAN
SecurityType_SHORT_TERM_LOAN_NOTE = cvar.SecurityType_SHORT_TERM_LOAN_NOTE
SecurityType_MISCELLANEOUS_PASS_THROUGH = cvar.SecurityType_MISCELLANEOUS_PASS_THROUGH
SecurityType_TO_BE_ANNOUNCED = cvar.SecurityType_TO_BE_ANNOUNCED
SecurityType_OTHER_ANTICIPATION_NOTES_BAN_GAN_ETC = cvar.SecurityType_OTHER_ANTICIPATION_NOTES_BAN_GAN_ETC
SecurityType_CERTIFICATE_OF_PARTICIPATION = cvar.SecurityType_CERTIFICATE_OF_PARTICIPATION
SecurityType_MORTGAGE_BACKED_SECURITIES = cvar.SecurityType_MORTGAGE_BACKED_SECURITIES
SecurityType_REVENUE_BONDS = cvar.SecurityType_REVENUE_BONDS
SecurityType_SPECIAL_ASSESSMENT = cvar.SecurityType_SPECIAL_ASSESSMENT
SecurityType_SPECIAL_OBLIGATION = cvar.SecurityType_SPECIAL_OBLIGATION
SecurityType_SPECIAL_TAX = cvar.SecurityType_SPECIAL_TAX
SecurityType_TAX_ANTICIPATION_NOTE = cvar.SecurityType_TAX_ANTICIPATION_NOTE
SecurityType_TAX_ALLOCATION = cvar.SecurityType_TAX_ALLOCATION
SecurityType_CERTIFICATE_OF_OBLIGATION = cvar.SecurityType_CERTIFICATE_OF_OBLIGATION
SecurityType_GENERAL_OBLIGATION_BONDS = cvar.SecurityType_GENERAL_OBLIGATION_BONDS
SecurityType_MULTI_LEG_INSTRUMENT = cvar.SecurityType_MULTI_LEG_INSTRUMENT
SecurityType_TAX_REVENUE_ANTICIPATION_NOTE = cvar.SecurityType_TAX_REVENUE_ANTICIPATION_NOTE
SecurityType_NO_SECURITY_TYPE = cvar.SecurityType_NO_SECURITY_TYPE
SecurityType_EXTENDED_COMM_NOTE = cvar.SecurityType_EXTENDED_COMM_NOTE
SecurityType_AGENCY_POOLS = cvar.SecurityType_AGENCY_POOLS
SecurityType_ASSET_BACKED_SECURITIES = cvar.SecurityType_ASSET_BACKED_SECURITIES
SecurityType_CORP_MORTGAGE_BACKED_SECURITIES = cvar.SecurityType_CORP_MORTGAGE_BACKED_SECURITIES
SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION = cvar.SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION
SecurityType_IOETTE_MORTGAGE = cvar.SecurityType_IOETTE_MORTGAGE
SecurityType_REVENUE_ANTICIPATION_NOTE = cvar.SecurityType_REVENUE_ANTICIPATION_NOTE
SecurityType_REVOLVER_LOAN = cvar.SecurityType_REVOLVER_LOAN
SecurityType_FEDERAL_AGENCY_COUPON = cvar.SecurityType_FEDERAL_AGENCY_COUPON
SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE = cvar.SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE
SecurityType_PRIVATE_EXPORT_FUNDING = cvar.SecurityType_PRIVATE_EXPORT_FUNDING
SecurityType_DUAL_CURRENCY = cvar.SecurityType_DUAL_CURRENCY
SecurityType_INDEXED_LINKED = cvar.SecurityType_INDEXED_LINKED
SecurityType_YANKEE_CORPORATE_BOND = cvar.SecurityType_YANKEE_CORPORATE_BOND
SecurityType_BRADY_BOND = cvar.SecurityType_BRADY_BOND
SecurityType_US_TREASURY_BOND = cvar.SecurityType_US_TREASURY_BOND
SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE = cvar.SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE
SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES = cvar.SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES
SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE = cvar.SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE
SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE = cvar.SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE
SecurityType_US_TREASURY_NOTE_BOND = cvar.SecurityType_US_TREASURY_NOTE_BOND
SecurityType_TERM_LOAN = cvar.SecurityType_TERM_LOAN
SecurityType_STRUCTURED_NOTES = cvar.SecurityType_STRUCTURED_NOTES
SecurityType_EURO_SUPRANATIONAL_COUPONS = cvar.SecurityType_EURO_SUPRANATIONAL_COUPONS
SecurityType_USD_SUPRANATIONAL_COUPONS = cvar.SecurityType_USD_SUPRANATIONAL_COUPONS
SecurityType_EURO_CORPORATE_BOND = cvar.SecurityType_EURO_CORPORATE_BOND
SecurityType_EURO_SOVEREIGNS = cvar.SecurityType_EURO_SOVEREIGNS
SecurityType_US_TREASURY_NOTE_UST = cvar.SecurityType_US_TREASURY_NOTE_UST
SecurityType_US_TREASURY_BILL_USTB = cvar.SecurityType_US_TREASURY_BILL_USTB
SecurityType_US_TREASURY_NOTE_TNOTE = cvar.SecurityType_US_TREASURY_NOTE_TNOTE
SecurityType_US_TREASURY_BILL_TBILL = cvar.SecurityType_US_TREASURY_BILL_TBILL
SecurityType_REPURCHASE = cvar.SecurityType_REPURCHASE
SecurityType_FORWARD = cvar.SecurityType_FORWARD
SecurityType_BUY_SELLBACK = cvar.SecurityType_BUY_SELLBACK
SecurityType_SECURITIES_LOAN = cvar.SecurityType_SECURITIES_LOAN
SecurityType_SECURITIES_PLEDGE = cvar.SecurityType_SECURITIES_PLEDGE
SecurityType_EURO_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_EURO_CERTIFICATE_OF_DEPOSIT
SecurityType_EURO_COMMERCIAL_PAPER = cvar.SecurityType_EURO_COMMERCIAL_PAPER
SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT
SecurityType_PFANDBRIEFE = cvar.SecurityType_PFANDBRIEFE
SecurityType_OTHER_ANTICIPATION_NOTES = cvar.SecurityType_OTHER_ANTICIPATION_NOTES
SecurityType_MULTILEG_INSTRUMENT = cvar.SecurityType_MULTILEG_INSTRUMENT
SecurityType_OPTIONS_ON_FUTURES = cvar.SecurityType_OPTIONS_ON_FUTURES
SecurityType_OPTIONS_ON_PHYSICAL = cvar.SecurityType_OPTIONS_ON_PHYSICAL
SecurityType_CASH = cvar.SecurityType_CASH
SecurityType_EURO_CORPORATE_FLOATING_RATE_NOTES = cvar.SecurityType_EURO_CORPORATE_FLOATING_RATE_NOTES
SecurityType_US_CORPORATE_FLOATING_RATE_NOTES = cvar.SecurityType_US_CORPORATE_FLOATING_RATE_NOTES
SecurityType_CREDIT_DEFAULT_SWAP = cvar.SecurityType_CREDIT_DEFAULT_SWAP
SecurityType_INTEREST_RATE_SWAP = cvar.SecurityType_INTEREST_RATE_SWAP
SecurityType_OPTIONS_ON_COMBO = cvar.SecurityType_OPTIONS_ON_COMBO
SecurityType_CANADIAN_TREASURY_NOTES = cvar.SecurityType_CANADIAN_TREASURY_NOTES
SecurityType_CANADIAN_TREASURY_BILLS = cvar.SecurityType_CANADIAN_TREASURY_BILLS
SecurityType_CANADIAN_PROVINCIAL_BONDS = cvar.SecurityType_CANADIAN_PROVINCIAL_BONDS
SecurityType_TREASURY_BILL = cvar.SecurityType_TREASURY_BILL
SecurityType_BANK_DEPOSITORY_NOTE = cvar.SecurityType_BANK_DEPOSITORY_NOTE
SecurityType_CANADIAN_MONEY_MARKETS = cvar.SecurityType_CANADIAN_MONEY_MARKETS
SecurityType_SECURED_LIQUIDITY_NOTE = cvar.SecurityType_SECURED_LIQUIDITY_NOTE
SecurityType_TERM_LIQUIDITY_NOTE = cvar.SecurityType_TERM_LIQUIDITY_NOTE
SecurityType_CANADIAN_MORTGAGE_BONDS = cvar.SecurityType_CANADIAN_MORTGAGE_BONDS
SecurityType_TAXABLE_MUNICIPAL_CP = cvar.SecurityType_TAXABLE_MUNICIPAL_CP
SecurityType_WILDCARD_ENTRY_FOR_USE_ON_SECURITY_DEFINITION_REQUEST = cvar.SecurityType_WILDCARD_ENTRY_FOR_USE_ON_SECURITY_DEFINITION_REQUEST
SecurityType_NON_DELIVERABLE_FORWARD = cvar.SecurityType_NON_DELIVERABLE_FORWARD
SecurityType_FX_SPOT = cvar.SecurityType_FX_SPOT
SecurityType_FX_FORWARD = cvar.SecurityType_FX_FORWARD
SecurityType_FX_SWAP = cvar.SecurityType_FX_SWAP
StandInstDbType_OTHER = cvar.StandInstDbType_OTHER
StandInstDbType_DTC_SID = cvar.StandInstDbType_DTC_SID
StandInstDbType_THOMSON_ALERT = cvar.StandInstDbType_THOMSON_ALERT
StandInstDbType_A_GLOBAL_CUSTODIAN = cvar.StandInstDbType_A_GLOBAL_CUSTODIAN
StandInstDbType_ACCOUNTNET = cvar.StandInstDbType_ACCOUNTNET
SettlDeliveryType_FREE = cvar.SettlDeliveryType_FREE
SettlDeliveryType_VERSUS_PAYMENT = cvar.SettlDeliveryType_VERSUS_PAYMENT
SettlDeliveryType_VERSUS_PAYMENT_DELIVER = cvar.SettlDeliveryType_VERSUS_PAYMENT_DELIVER
SettlDeliveryType_FREE_DELIVER = cvar.SettlDeliveryType_FREE_DELIVER
SettlDeliveryType_TRI_PARTY = cvar.SettlDeliveryType_TRI_PARTY
SettlDeliveryType_HOLD_IN_CUSTODY = cvar.SettlDeliveryType_HOLD_IN_CUSTODY
AllocLinkType_F_X_NETTING = cvar.AllocLinkType_F_X_NETTING
AllocLinkType_F_X_SWAP = cvar.AllocLinkType_F_X_SWAP
AllocLinkType_FX_NETTING = cvar.AllocLinkType_FX_NETTING
AllocLinkType_FX_SWAP = cvar.AllocLinkType_FX_SWAP
PutOrCall_PUT = cvar.PutOrCall_PUT
PutOrCall_CALL = cvar.PutOrCall_CALL
CoveredOrUncovered_COVERED = cvar.CoveredOrUncovered_COVERED
CoveredOrUncovered_UNCOVERED = cvar.CoveredOrUncovered_UNCOVERED
CustomerOrFirm_CUSTOMER = cvar.CustomerOrFirm_CUSTOMER
CustomerOrFirm_FIRM = cvar.CustomerOrFirm_FIRM
NotifyBrokerOfCredit_NO = cvar.NotifyBrokerOfCredit_NO
NotifyBrokerOfCredit_YES = cvar.NotifyBrokerOfCredit_YES
AllocHandlInst_MATCH = cvar.AllocHandlInst_MATCH
AllocHandlInst_FORWARD = cvar.AllocHandlInst_FORWARD
AllocHandlInst_FORWARD_AND_MATCH = cvar.AllocHandlInst_FORWARD_AND_MATCH
RoutingType_TARGET_FIRM = cvar.RoutingType_TARGET_FIRM
RoutingType_TARGET_LIST = cvar.RoutingType_TARGET_LIST
RoutingType_BLOCK_FIRM = cvar.RoutingType_BLOCK_FIRM
RoutingType_BLOCK_LIST = cvar.RoutingType_BLOCK_LIST
Benchmark_CURVE = cvar.Benchmark_CURVE
Benchmark_5_YR = cvar.Benchmark_5_YR
Benchmark_OLD_5 = cvar.Benchmark_OLD_5
Benchmark_10_YR = cvar.Benchmark_10_YR
Benchmark_OLD_10 = cvar.Benchmark_OLD_10
Benchmark_30_YR = cvar.Benchmark_30_YR
Benchmark_OLD_30 = cvar.Benchmark_OLD_30
Benchmark_3_MO_LIBOR = cvar.Benchmark_3_MO_LIBOR
Benchmark_6_MO_LIBOR = cvar.Benchmark_6_MO_LIBOR
SubscriptionRequestType_SNAPSHOT = cvar.SubscriptionRequestType_SNAPSHOT
SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES = cvar.SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES
SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST = cvar.SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST
MDUpdateType_FULL_REFRESH = cvar.MDUpdateType_FULL_REFRESH
MDUpdateType_INCREMENTAL_REFRESH = cvar.MDUpdateType_INCREMENTAL_REFRESH
AggregatedBook_NO = cvar.AggregatedBook_NO
AggregatedBook_YES = cvar.AggregatedBook_YES
MDEntryType_BID = cvar.MDEntryType_BID
MDEntryType_OFFER = cvar.MDEntryType_OFFER
MDEntryType_TRADE = cvar.MDEntryType_TRADE
MDEntryType_INDEX_VALUE = cvar.MDEntryType_INDEX_VALUE
MDEntryType_OPENING_PRICE = cvar.MDEntryType_OPENING_PRICE
MDEntryType_CLOSING_PRICE = cvar.MDEntryType_CLOSING_PRICE
MDEntryType_SETTLEMENT_PRICE = cvar.MDEntryType_SETTLEMENT_PRICE
MDEntryType_TRADING_SESSION_HIGH_PRICE = cvar.MDEntryType_TRADING_SESSION_HIGH_PRICE
MDEntryType_TRADING_SESSION_LOW_PRICE = cvar.MDEntryType_TRADING_SESSION_LOW_PRICE
MDEntryType_TRADING_SESSION_VWAP_PRICE = cvar.MDEntryType_TRADING_SESSION_VWAP_PRICE
MDEntryType_IMBALANCE = cvar.MDEntryType_IMBALANCE
MDEntryType_TRADE_VOLUME = cvar.MDEntryType_TRADE_VOLUME
MDEntryType_OPEN_INTEREST = cvar.MDEntryType_OPEN_INTEREST
MDEntryType_COMPOSITE_UNDERLYING_PRICE = cvar.MDEntryType_COMPOSITE_UNDERLYING_PRICE
MDEntryType_SIMULATED_SELL_PRICE = cvar.MDEntryType_SIMULATED_SELL_PRICE
MDEntryType_SIMULATED_BUY_PRICE = cvar.MDEntryType_SIMULATED_BUY_PRICE
MDEntryType_MARGIN_RATE = cvar.MDEntryType_MARGIN_RATE
MDEntryType_MID_PRICE = cvar.MDEntryType_MID_PRICE
MDEntryType_EMPTY_BOOK = cvar.MDEntryType_EMPTY_BOOK
MDEntryType_SETTLE_HIGH_PRICE = cvar.MDEntryType_SETTLE_HIGH_PRICE
MDEntryType_SETTLE_LOW_PRICE = cvar.MDEntryType_SETTLE_LOW_PRICE
MDEntryType_PRIOR_SETTLE_PRICE = cvar.MDEntryType_PRIOR_SETTLE_PRICE
MDEntryType_SESSION_HIGH_BID = cvar.MDEntryType_SESSION_HIGH_BID
MDEntryType_SESSION_LOW_OFFER = cvar.MDEntryType_SESSION_LOW_OFFER
MDEntryType_EARLY_PRICES = cvar.MDEntryType_EARLY_PRICES
MDEntryType_AUCTION_CLEARING_PRICE = cvar.MDEntryType_AUCTION_CLEARING_PRICE
MDEntryType_SWAP_VALUE_FACTOR = cvar.MDEntryType_SWAP_VALUE_FACTOR
MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS = cvar.MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS
MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS = cvar.MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS
MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS = cvar.MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS
MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS = cvar.MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS
MDEntryType_RECOVERY_RATE = cvar.MDEntryType_RECOVERY_RATE
MDEntryType_RECOVERY_RATE_FOR_LONG = cvar.MDEntryType_RECOVERY_RATE_FOR_LONG
MDEntryType_RECOVERY_RATE_FOR_SHORT = cvar.MDEntryType_RECOVERY_RATE_FOR_SHORT
MDEntryType_FIXING_PRICE = cvar.MDEntryType_FIXING_PRICE
MDEntryType_CASH_RATE = cvar.MDEntryType_CASH_RATE
TickDirection_PLUS_TICK = cvar.TickDirection_PLUS_TICK
TickDirection_ZERO_PLUS_TICK = cvar.TickDirection_ZERO_PLUS_TICK
TickDirection_MINUS_TICK = cvar.TickDirection_MINUS_TICK
TickDirection_ZERO_MINUS_TICK = cvar.TickDirection_ZERO_MINUS_TICK
QuoteCondition_OPEN = cvar.QuoteCondition_OPEN
QuoteCondition_CLOSED = cvar.QuoteCondition_CLOSED
QuoteCondition_EXCHANGE_BEST = cvar.QuoteCondition_EXCHANGE_BEST
QuoteCondition_CONSOLIDATED_BEST = cvar.QuoteCondition_CONSOLIDATED_BEST
QuoteCondition_LOCKED = cvar.QuoteCondition_LOCKED
QuoteCondition_CROSSED = cvar.QuoteCondition_CROSSED
QuoteCondition_DEPTH = cvar.QuoteCondition_DEPTH
QuoteCondition_FAST_TRADING = cvar.QuoteCondition_FAST_TRADING
QuoteCondition_NON_FIRM = cvar.QuoteCondition_NON_FIRM
QuoteCondition_OPEN_ACTIVE = cvar.QuoteCondition_OPEN_ACTIVE
QuoteCondition_CLOSED_INACTIVE = cvar.QuoteCondition_CLOSED_INACTIVE
QuoteCondition_MANUAL_SLOW_QUOTE = cvar.QuoteCondition_MANUAL_SLOW_QUOTE
QuoteCondition_OUTRIGHT_PRICE = cvar.QuoteCondition_OUTRIGHT_PRICE
QuoteCondition_IMPLIED_PRICE = cvar.QuoteCondition_IMPLIED_PRICE
QuoteCondition_DEPTH_ON_OFFER = cvar.QuoteCondition_DEPTH_ON_OFFER
QuoteCondition_DEPTH_ON_BID = cvar.QuoteCondition_DEPTH_ON_BID
QuoteCondition_CLOSING = cvar.QuoteCondition_CLOSING
QuoteCondition_NEWS_DISSEMINATION = cvar.QuoteCondition_NEWS_DISSEMINATION
QuoteCondition_TRADING_RANGE = cvar.QuoteCondition_TRADING_RANGE
QuoteCondition_ORDER_INFLUX = cvar.QuoteCondition_ORDER_INFLUX
QuoteCondition_DUE_TO_RELATED = cvar.QuoteCondition_DUE_TO_RELATED
QuoteCondition_NEWS_PENDING = cvar.QuoteCondition_NEWS_PENDING
QuoteCondition_ADDITIONAL_INFO = cvar.QuoteCondition_ADDITIONAL_INFO
QuoteCondition_ADDITIONAL_INFO_DUE_TO_RELATED = cvar.QuoteCondition_ADDITIONAL_INFO_DUE_TO_RELATED
QuoteCondition_RESUME = cvar.QuoteCondition_RESUME
QuoteCondition_VIEW_OF_COMMON = cvar.QuoteCondition_VIEW_OF_COMMON
QuoteCondition_VOLUME_ALERT = cvar.QuoteCondition_VOLUME_ALERT
QuoteCondition_ORDER_IMBALANCE = cvar.QuoteCondition_ORDER_IMBALANCE
QuoteCondition_EQUIPMENT_CHANGEOVER = cvar.QuoteCondition_EQUIPMENT_CHANGEOVER
QuoteCondition_NO_OPEN = cvar.QuoteCondition_NO_OPEN
QuoteCondition_REGULAR_ETH = cvar.QuoteCondition_REGULAR_ETH
QuoteCondition_AUTOMATIC_EXECUTION = cvar.QuoteCondition_AUTOMATIC_EXECUTION
QuoteCondition_AUTOMATIC_EXECUTION_ETH = cvar.QuoteCondition_AUTOMATIC_EXECUTION_ETH
QuoteCondition_FAST_MARKET_ETH = cvar.QuoteCondition_FAST_MARKET_ETH
QuoteCondition_INACTIVE_ETH = cvar.QuoteCondition_INACTIVE_ETH
QuoteCondition_ROTATION = cvar.QuoteCondition_ROTATION
QuoteCondition_ROTATION_ETH = cvar.QuoteCondition_ROTATION_ETH
QuoteCondition_HALT = cvar.QuoteCondition_HALT
QuoteCondition_HALT_ETH = cvar.QuoteCondition_HALT_ETH
QuoteCondition_DUE_TO_NEWS_DISSEMINATION = cvar.QuoteCondition_DUE_TO_NEWS_DISSEMINATION
QuoteCondition_DUE_TO_NEWS_PENDING = cvar.QuoteCondition_DUE_TO_NEWS_PENDING
QuoteCondition_TRADING_RESUME = cvar.QuoteCondition_TRADING_RESUME
QuoteCondition_OUT_OF_SEQUENCE = cvar.QuoteCondition_OUT_OF_SEQUENCE
QuoteCondition_BID_SPECIALIST = cvar.QuoteCondition_BID_SPECIALIST
QuoteCondition_OFFER_SPECIALIST = cvar.QuoteCondition_OFFER_SPECIALIST
QuoteCondition_BID_OFFER_SPECIALIST = cvar.QuoteCondition_BID_OFFER_SPECIALIST
QuoteCondition_END_OF_DAY_SAM = cvar.QuoteCondition_END_OF_DAY_SAM
QuoteCondition_FORBIDDEN_SAM = cvar.QuoteCondition_FORBIDDEN_SAM
QuoteCondition_FROZEN_SAM = cvar.QuoteCondition_FROZEN_SAM
QuoteCondition_PREOPENING_SAM = cvar.QuoteCondition_PREOPENING_SAM
QuoteCondition_OPENING_SAM = cvar.QuoteCondition_OPENING_SAM
QuoteCondition_OPEN_SAM = cvar.QuoteCondition_OPEN_SAM
QuoteCondition_SURVEILLANCE_SAM = cvar.QuoteCondition_SURVEILLANCE_SAM
QuoteCondition_SUSPENDED_SAM = cvar.QuoteCondition_SUSPENDED_SAM
QuoteCondition_RESERVED_SAM = cvar.QuoteCondition_RESERVED_SAM
QuoteCondition_NO_ACTIVE_SAM = cvar.QuoteCondition_NO_ACTIVE_SAM
QuoteCondition_RESTRICTED = cvar.QuoteCondition_RESTRICTED
QuoteCondition_REST_OF_BOOK_VWAP = cvar.QuoteCondition_REST_OF_BOOK_VWAP
QuoteCondition_BETTER_PRICES_IN_CONDITIONAL_ORDERS = cvar.QuoteCondition_BETTER_PRICES_IN_CONDITIONAL_ORDERS
QuoteCondition_MEDIAN_PRICE = cvar.QuoteCondition_MEDIAN_PRICE
QuoteCondition_FULL_CURVE = cvar.QuoteCondition_FULL_CURVE
QuoteCondition_FLAT_CURVE = cvar.QuoteCondition_FLAT_CURVE
TradeCondition_CASH = cvar.TradeCondition_CASH
TradeCondition_AVERAGE_PRICE_TRADE = cvar.TradeCondition_AVERAGE_PRICE_TRADE
TradeCondition_CASH_TRADE = cvar.TradeCondition_CASH_TRADE
TradeCondition_NEXT_DAY = cvar.TradeCondition_NEXT_DAY
TradeCondition_OPENING = cvar.TradeCondition_OPENING
TradeCondition_INTRADAY_TRADE_DETAIL = cvar.TradeCondition_INTRADAY_TRADE_DETAIL
TradeCondition_RULE_127_TRADE = cvar.TradeCondition_RULE_127_TRADE
TradeCondition_RULE_155_TRADE = cvar.TradeCondition_RULE_155_TRADE
TradeCondition_SOLD_LAST = cvar.TradeCondition_SOLD_LAST
TradeCondition_NEXT_DAY_TRADE = cvar.TradeCondition_NEXT_DAY_TRADE
TradeCondition_OPENED = cvar.TradeCondition_OPENED
TradeCondition_SELLER = cvar.TradeCondition_SELLER
TradeCondition_SOLD = cvar.TradeCondition_SOLD
TradeCondition_STOPPED_STOCK = cvar.TradeCondition_STOPPED_STOCK
TradeCondition_IMBALANCE_MORE_BUYERS = cvar.TradeCondition_IMBALANCE_MORE_BUYERS
TradeCondition_IMBALANCE_MORE_SELLERS = cvar.TradeCondition_IMBALANCE_MORE_SELLERS
TradeCondition_OPENING_PRICE = cvar.TradeCondition_OPENING_PRICE
TradeCondition_OPENING_REOPENING_TRADE_DETAIL = cvar.TradeCondition_OPENING_REOPENING_TRADE_DETAIL
TradeCondition_BARGAIN_CONDITION = cvar.TradeCondition_BARGAIN_CONDITION
TradeCondition_CONVERTED_PRICE_INDICATOR = cvar.TradeCondition_CONVERTED_PRICE_INDICATOR
TradeCondition_EXCHANGE_LAST = cvar.TradeCondition_EXCHANGE_LAST
TradeCondition_FINAL_PRICE_OF_SESSION = cvar.TradeCondition_FINAL_PRICE_OF_SESSION
TradeCondition_EX_PIT = cvar.TradeCondition_EX_PIT
TradeCondition_CROSSED_X = cvar.TradeCondition_CROSSED_X
TradeCondition_TRADES_RESULTING_FROM_MANUAL_SLOW_QUOTE = cvar.TradeCondition_TRADES_RESULTING_FROM_MANUAL_SLOW_QUOTE
TradeCondition_TRADES_RESULTING_FROM_INTERMARKET_SWEEP = cvar.TradeCondition_TRADES_RESULTING_FROM_INTERMARKET_SWEEP
TradeCondition_VOLUME_ONLY = cvar.TradeCondition_VOLUME_ONLY
TradeCondition_DIRECT_PLUS = cvar.TradeCondition_DIRECT_PLUS
TradeCondition_ACQUISITION = cvar.TradeCondition_ACQUISITION
TradeCondition_BUNCHED = cvar.TradeCondition_BUNCHED
TradeCondition_DISTRIBUTION = cvar.TradeCondition_DISTRIBUTION
TradeCondition_BUNCHED_SALE = cvar.TradeCondition_BUNCHED_SALE
TradeCondition_SPLIT_TRADE = cvar.TradeCondition_SPLIT_TRADE
TradeCondition_CANCEL_STOPPED = cvar.TradeCondition_CANCEL_STOPPED
TradeCondition_CANCEL_ETH = cvar.TradeCondition_CANCEL_ETH
TradeCondition_CANCEL_STOPPED_ETH = cvar.TradeCondition_CANCEL_STOPPED_ETH
TradeCondition_OUT_OF_SEQUENCE_ETH = cvar.TradeCondition_OUT_OF_SEQUENCE_ETH
TradeCondition_CANCEL_LAST_ETH = cvar.TradeCondition_CANCEL_LAST_ETH
TradeCondition_SOLD_LAST_SALE_ETH = cvar.TradeCondition_SOLD_LAST_SALE_ETH
TradeCondition_CANCEL_LAST = cvar.TradeCondition_CANCEL_LAST
TradeCondition_SOLD_LAST_SALE = cvar.TradeCondition_SOLD_LAST_SALE
TradeCondition_CANCEL_OPEN = cvar.TradeCondition_CANCEL_OPEN
TradeCondition_CANCEL_OPEN_ETH = cvar.TradeCondition_CANCEL_OPEN_ETH
TradeCondition_OPENED_SALE_ETH = cvar.TradeCondition_OPENED_SALE_ETH
TradeCondition_CANCEL_ONLY = cvar.TradeCondition_CANCEL_ONLY
TradeCondition_CANCEL_ONLY_ETH = cvar.TradeCondition_CANCEL_ONLY_ETH
TradeCondition_LATE_OPEN_ETH = cvar.TradeCondition_LATE_OPEN_ETH
TradeCondition_AUTO_EXECUTION_ETH = cvar.TradeCondition_AUTO_EXECUTION_ETH
TradeCondition_REOPEN = cvar.TradeCondition_REOPEN
TradeCondition_REOPEN_ETH = cvar.TradeCondition_REOPEN_ETH
TradeCondition_ADJUSTED = cvar.TradeCondition_ADJUSTED
TradeCondition_ADJUSTED_ETH = cvar.TradeCondition_ADJUSTED_ETH
TradeCondition_SPREAD = cvar.TradeCondition_SPREAD
TradeCondition_SPREAD_ETH = cvar.TradeCondition_SPREAD_ETH
TradeCondition_STRADDLE = cvar.TradeCondition_STRADDLE
TradeCondition_STRADDLE_ETH = cvar.TradeCondition_STRADDLE_ETH
TradeCondition_STOPPED = cvar.TradeCondition_STOPPED
TradeCondition_STOPPED_ETH = cvar.TradeCondition_STOPPED_ETH
TradeCondition_REGULAR_ETH = cvar.TradeCondition_REGULAR_ETH
TradeCondition_COMBO = cvar.TradeCondition_COMBO
TradeCondition_COMBO_ETH = cvar.TradeCondition_COMBO_ETH
TradeCondition_OFFICIAL_CLOSING_PRICE = cvar.TradeCondition_OFFICIAL_CLOSING_PRICE
TradeCondition_PRIOR_REFERENCE_PRICE = cvar.TradeCondition_PRIOR_REFERENCE_PRICE
TradeCondition_CANCEL = cvar.TradeCondition_CANCEL
TradeCondition_STOPPED_SOLD_LAST = cvar.TradeCondition_STOPPED_SOLD_LAST
TradeCondition_STOPPED_OUT_OF_SEQUENCE = cvar.TradeCondition_STOPPED_OUT_OF_SEQUENCE
TradeCondition_OFFICAL_CLOSING_PRICE = cvar.TradeCondition_OFFICAL_CLOSING_PRICE
TradeCondition_CROSSED_AO = cvar.TradeCondition_CROSSED_AO
TradeCondition_FAST_MARKET = cvar.TradeCondition_FAST_MARKET
TradeCondition_AUTOMATIC_EXECUTION = cvar.TradeCondition_AUTOMATIC_EXECUTION
TradeCondition_FORM_T = cvar.TradeCondition_FORM_T
TradeCondition_BASKET_INDEX = cvar.TradeCondition_BASKET_INDEX
TradeCondition_BURST_BASKET = cvar.TradeCondition_BURST_BASKET
TradeCondition_OUTSIDE_SPREAD = cvar.TradeCondition_OUTSIDE_SPREAD
TradeCondition_IMPLIED_TRADE = cvar.TradeCondition_IMPLIED_TRADE
TradeCondition_MARKETPLACE_ENTERED_TRADE = cvar.TradeCondition_MARKETPLACE_ENTERED_TRADE
TradeCondition_MULT_ASSET_CLASS_MULTILEG_TRADE = cvar.TradeCondition_MULT_ASSET_CLASS_MULTILEG_TRADE
TradeCondition_MULTILEG_TO_MULTILEG_TRADE = cvar.TradeCondition_MULTILEG_TO_MULTILEG_TRADE
MDUpdateAction_NEW = cvar.MDUpdateAction_NEW
MDUpdateAction_CHANGE = cvar.MDUpdateAction_CHANGE
MDUpdateAction_DELETE = cvar.MDUpdateAction_DELETE
MDUpdateAction_DELETE_THRU = cvar.MDUpdateAction_DELETE_THRU
MDUpdateAction_DELETE_FROM = cvar.MDUpdateAction_DELETE_FROM
MDUpdateAction_OVERLAY = cvar.MDUpdateAction_OVERLAY
MDReqRejReason_UNKNOWN_SYMBOL = cvar.MDReqRejReason_UNKNOWN_SYMBOL
MDReqRejReason_DUPLICATE_MDREQID = cvar.MDReqRejReason_DUPLICATE_MDREQID
MDReqRejReason_INSUFFICIENT_BANDWIDTH = cvar.MDReqRejReason_INSUFFICIENT_BANDWIDTH
MDReqRejReason_INSUFFICIENT_PERMISSIONS = cvar.MDReqRejReason_INSUFFICIENT_PERMISSIONS
MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE = cvar.MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE
MDReqRejReason_UNSUPPORTED_MARKETDEPTH = cvar.MDReqRejReason_UNSUPPORTED_MARKETDEPTH
MDReqRejReason_UNSUPPORTED_MDUPDATETYPE = cvar.MDReqRejReason_UNSUPPORTED_MDUPDATETYPE
MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK = cvar.MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK
MDReqRejReason_UNSUPPORTED_MDENTRYTYPE = cvar.MDReqRejReason_UNSUPPORTED_MDENTRYTYPE
MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE = cvar.MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE
MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG = cvar.MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG
MDReqRejReason_UNSUPPORTED_SCOPE = cvar.MDReqRejReason_UNSUPPORTED_SCOPE
MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID = cvar.MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID
MDReqRejReason_INSUFFICIENT_CREDIT = cvar.MDReqRejReason_INSUFFICIENT_CREDIT
DeleteReason_CANCELATION = cvar.DeleteReason_CANCELATION
DeleteReason_ERROR = cvar.DeleteReason_ERROR
DeleteReason_CANCELLATION = cvar.DeleteReason_CANCELLATION
OpenCloseSettleFlag_DAILY_OPEN = cvar.OpenCloseSettleFlag_DAILY_OPEN
OpenCloseSettleFlag_SESSION_OPEN = cvar.OpenCloseSettleFlag_SESSION_OPEN
OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE = cvar.OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE
OpenCloseSettleFlag_EXPECTED_PRICE = cvar.OpenCloseSettleFlag_EXPECTED_PRICE
OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY = cvar.OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY
FinancialStatus_BANKRUPT = cvar.FinancialStatus_BANKRUPT
FinancialStatus_PENDING_DELISTING = cvar.FinancialStatus_PENDING_DELISTING
FinancialStatus_RESTRICTED = cvar.FinancialStatus_RESTRICTED
CorporateAction_EX_DIVIDEND = cvar.CorporateAction_EX_DIVIDEND
CorporateAction_EX_DISTRIBUTION = cvar.CorporateAction_EX_DISTRIBUTION
CorporateAction_EX_RIGHTS = cvar.CorporateAction_EX_RIGHTS
CorporateAction_NEW = cvar.CorporateAction_NEW
CorporateAction_EX_INTEREST = cvar.CorporateAction_EX_INTEREST
CorporateAction_CASH_DIVIDEND = cvar.CorporateAction_CASH_DIVIDEND
CorporateAction_STOCK_DIVIDEND = cvar.CorporateAction_STOCK_DIVIDEND
CorporateAction_NON_INTEGER_STOCK_SPLIT = cvar.CorporateAction_NON_INTEGER_STOCK_SPLIT
CorporateAction_REVERSE_STOCK_SPLIT = cvar.CorporateAction_REVERSE_STOCK_SPLIT
CorporateAction_STANDARD_INTEGER_STOCK_SPLIT = cvar.CorporateAction_STANDARD_INTEGER_STOCK_SPLIT
CorporateAction_POSITION_CONSOLIDATION = cvar.CorporateAction_POSITION_CONSOLIDATION
CorporateAction_LIQUIDATION_REORGANIZATION = cvar.CorporateAction_LIQUIDATION_REORGANIZATION
CorporateAction_MERGER_REORGANIZATION = cvar.CorporateAction_MERGER_REORGANIZATION
CorporateAction_RIGHTS_OFFERING = cvar.CorporateAction_RIGHTS_OFFERING
CorporateAction_SHAREHOLDER_MEETING = cvar.CorporateAction_SHAREHOLDER_MEETING
CorporateAction_SPINOFF = cvar.CorporateAction_SPINOFF
CorporateAction_TENDER_OFFER = cvar.CorporateAction_TENDER_OFFER
CorporateAction_WARRANT = cvar.CorporateAction_WARRANT
CorporateAction_SPECIAL_ACTION = cvar.CorporateAction_SPECIAL_ACTION
CorporateAction_SYMBOL_CONVERSION = cvar.CorporateAction_SYMBOL_CONVERSION
CorporateAction_CUSIP = cvar.CorporateAction_CUSIP
CorporateAction_LEAP_ROLLOVER = cvar.CorporateAction_LEAP_ROLLOVER
CorporateAction_SUCCESSION_EVENT = cvar.CorporateAction_SUCCESSION_EVENT
QuoteAckStatus_ACCEPTED = cvar.QuoteAckStatus_ACCEPTED
QuoteAckStatus_CANCELED_FOR_SYMBOL = cvar.QuoteAckStatus_CANCELED_FOR_SYMBOL
QuoteAckStatus_CANCELED_FOR_SECURITY_TYPE = cvar.QuoteAckStatus_CANCELED_FOR_SECURITY_TYPE
QuoteAckStatus_CANCELED_FOR_UNDERLYING = cvar.QuoteAckStatus_CANCELED_FOR_UNDERLYING
QuoteAckStatus_CANCELED_ALL = cvar.QuoteAckStatus_CANCELED_ALL
QuoteAckStatus_REJECTED = cvar.QuoteAckStatus_REJECTED
QuoteCancelType_CANCEL_FOR_SYMBOL = cvar.QuoteCancelType_CANCEL_FOR_SYMBOL
QuoteCancelType_CANCEL_FOR_SECURITY_TYPE = cvar.QuoteCancelType_CANCEL_FOR_SECURITY_TYPE
QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL = cvar.QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL
QuoteCancelType_CANCEL_FOR_ALL_QUOTES = cvar.QuoteCancelType_CANCEL_FOR_ALL_QUOTES
QuoteCancelType_CANCEL_ALL_QUOTES = cvar.QuoteCancelType_CANCEL_ALL_QUOTES
QuoteCancelType_CANCEL_QUOTE_SPECIFIED_IN_QUOTEID = cvar.QuoteCancelType_CANCEL_QUOTE_SPECIFIED_IN_QUOTEID
QuoteCancelType_CANCEL_FOR_ONE_OR_MORE_SECURITIES = cvar.QuoteCancelType_CANCEL_FOR_ONE_OR_MORE_SECURITIES
QuoteCancelType_CANCEL_FOR_UNDERLYING_SECURITY = cvar.QuoteCancelType_CANCEL_FOR_UNDERLYING_SECURITY
QuoteCancelType_CANCEL_BY_QUOTETYPE = cvar.QuoteCancelType_CANCEL_BY_QUOTETYPE
QuoteCancelType_CANCEL_FOR_SECURITY_ISSUER = cvar.QuoteCancelType_CANCEL_FOR_SECURITY_ISSUER
QuoteCancelType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.QuoteCancelType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY
QuoteRejectReason_UNKNOWN_SYMBOL = cvar.QuoteRejectReason_UNKNOWN_SYMBOL
QuoteRejectReason_EXCHANGE = cvar.QuoteRejectReason_EXCHANGE
QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT = cvar.QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
QuoteRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteRejectReason_TOO_LATE_TO_ENTER
QuoteRejectReason_UNKNOWN_QUOTE = cvar.QuoteRejectReason_UNKNOWN_QUOTE
QuoteRejectReason_DUPLICATE_QUOTE = cvar.QuoteRejectReason_DUPLICATE_QUOTE
QuoteRejectReason_INVALID_BID_ASK_SPREAD = cvar.QuoteRejectReason_INVALID_BID_ASK_SPREAD
QuoteRejectReason_INVALID_PRICE = cvar.QuoteRejectReason_INVALID_PRICE
QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY = cvar.QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY
QuoteRejectReason_OTHER = cvar.QuoteRejectReason_OTHER
QuoteRejectReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND = cvar.QuoteRejectReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND
QuoteRejectReason_QUOTE_LOCKED = cvar.QuoteRejectReason_QUOTE_LOCKED
QuoteRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER = cvar.QuoteRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER
QuoteRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = cvar.QuoteRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY
QuoteResponseLevel_NO_ACKNOWLEDGEMENT = cvar.QuoteResponseLevel_NO_ACKNOWLEDGEMENT
QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES = cvar.QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES
QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES = cvar.QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES
QuoteResponseLevel_SUMMARY_ACKNOWLEDGEMENT = cvar.QuoteResponseLevel_SUMMARY_ACKNOWLEDGEMENT
QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGE = cvar.QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGE
QuoteRequestType_MANUAL = cvar.QuoteRequestType_MANUAL
QuoteRequestType_AUTOMATIC = cvar.QuoteRequestType_AUTOMATIC
SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS = cvar.SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS
SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED = cvar.SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED
SecurityRequestType_REQUEST_LIST_SECURITY_TYPES = cvar.SecurityRequestType_REQUEST_LIST_SECURITY_TYPES
SecurityRequestType_REQUEST_LIST_SECURITIES = cvar.SecurityRequestType_REQUEST_LIST_SECURITIES
SecurityRequestType_SYMBOL = cvar.SecurityRequestType_SYMBOL
SecurityRequestType_SECURITYTYPE_AND_OR_CFICODE = cvar.SecurityRequestType_SECURITYTYPE_AND_OR_CFICODE
SecurityRequestType_PRODUCT = cvar.SecurityRequestType_PRODUCT
SecurityRequestType_TRADINGSESSIONID = cvar.SecurityRequestType_TRADINGSESSIONID
SecurityRequestType_ALL_SECURITIES = cvar.SecurityRequestType_ALL_SECURITIES
SecurityRequestType_MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID = cvar.SecurityRequestType_MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID
SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS = cvar.SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS
SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE = cvar.SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE
SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST = cvar.SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST
SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST = cvar.SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST
SecurityResponseType_REJECT_SECURITY_PROPOSAL = cvar.SecurityResponseType_REJECT_SECURITY_PROPOSAL
SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA = cvar.SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA
SecurityResponseType_CANNOT_MATCH_SELECTION_CRITERIA = cvar.SecurityResponseType_CANNOT_MATCH_SELECTION_CRITERIA
UnsolicitedIndicator_NO = cvar.UnsolicitedIndicator_NO
UnsolicitedIndicator_YES = cvar.UnsolicitedIndicator_YES
SecurityTradingStatus_OPENING_DELAY = cvar.SecurityTradingStatus_OPENING_DELAY
SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL = cvar.SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL
SecurityTradingStatus_NO_MARKET_IMBALANCE = cvar.SecurityTradingStatus_NO_MARKET_IMBALANCE
SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE = cvar.SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE
SecurityTradingStatus_ITS_PRE_OPENING = cvar.SecurityTradingStatus_ITS_PRE_OPENING
SecurityTradingStatus_NEW_PRICE_INDICATION = cvar.SecurityTradingStatus_NEW_PRICE_INDICATION
SecurityTradingStatus_TRADE_DISSEMINATION_TIME = cvar.SecurityTradingStatus_TRADE_DISSEMINATION_TIME
SecurityTradingStatus_READY_TO_TRADE = cvar.SecurityTradingStatus_READY_TO_TRADE
SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING = cvar.SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING
SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET = cvar.SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET
SecurityTradingStatus_TRADING_HALT = cvar.SecurityTradingStatus_TRADING_HALT
SecurityTradingStatus_UNKNOWN_OR_INVALID = cvar.SecurityTradingStatus_UNKNOWN_OR_INVALID
SecurityTradingStatus_RESUME = cvar.SecurityTradingStatus_RESUME
SecurityTradingStatus_NO_OPEN_NO_RESUME = cvar.SecurityTradingStatus_NO_OPEN_NO_RESUME
SecurityTradingStatus_PRICE_INDICATION = cvar.SecurityTradingStatus_PRICE_INDICATION
SecurityTradingStatus_TRADING_RANGE_INDICATION = cvar.SecurityTradingStatus_TRADING_RANGE_INDICATION
SecurityTradingStatus_MARKET_IMBALANCE_BUY = cvar.SecurityTradingStatus_MARKET_IMBALANCE_BUY
SecurityTradingStatus_MARKET_IMBALANCE_SELL = cvar.SecurityTradingStatus_MARKET_IMBALANCE_SELL
SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY = cvar.SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY
SecurityTradingStatus_OPENING_ROTATION = cvar.SecurityTradingStatus_OPENING_ROTATION
SecurityTradingStatus_PRE_OPEN = cvar.SecurityTradingStatus_PRE_OPEN
SecurityTradingStatus_FAST_MARKET = cvar.SecurityTradingStatus_FAST_MARKET
SecurityTradingStatus_NO_OPEN = cvar.SecurityTradingStatus_NO_OPEN
SecurityTradingStatus_PRE_CROSS = cvar.SecurityTradingStatus_PRE_CROSS
SecurityTradingStatus_CROSS = cvar.SecurityTradingStatus_CROSS
SecurityTradingStatus_POST_CLOSE = cvar.SecurityTradingStatus_POST_CLOSE
HaltReasonChar_NEWS_DISSEMINATION = cvar.HaltReasonChar_NEWS_DISSEMINATION
HaltReasonChar_ORDER_INFLUX = cvar.HaltReasonChar_ORDER_INFLUX
HaltReasonChar_ORDER_IMBALANCE = cvar.HaltReasonChar_ORDER_IMBALANCE
HaltReasonChar_ADDITIONAL_INFORMATION = cvar.HaltReasonChar_ADDITIONAL_INFORMATION
HaltReasonChar_NEWS_PENDING = cvar.HaltReasonChar_NEWS_PENDING
HaltReasonChar_EQUIPMENT_CHANGEOVER = cvar.HaltReasonChar_EQUIPMENT_CHANGEOVER
HaltReasonChar_NEW_PENDING = cvar.HaltReasonChar_NEW_PENDING
InViewOfCommon_NO = cvar.InViewOfCommon_NO
InViewOfCommon_YES = cvar.InViewOfCommon_YES
DueToRelated_NO = cvar.DueToRelated_NO
DueToRelated_YES = cvar.DueToRelated_YES
Adjustment_CANCEL = cvar.Adjustment_CANCEL
Adjustment_ERROR = cvar.Adjustment_ERROR
Adjustment_CORRECTION = cvar.Adjustment_CORRECTION
TradingSessionID_DAY = cvar.TradingSessionID_DAY
TradingSessionID_HALFDAY = cvar.TradingSessionID_HALFDAY
TradingSessionID_MORNING = cvar.TradingSessionID_MORNING
TradingSessionID_AFTERNOON = cvar.TradingSessionID_AFTERNOON
TradingSessionID_EVENING = cvar.TradingSessionID_EVENING
TradingSessionID_AFTER_HOURS = cvar.TradingSessionID_AFTER_HOURS
TradSesMethod_ELECTRONIC = cvar.TradSesMethod_ELECTRONIC
TradSesMethod_OPEN_OUTCRY = cvar.TradSesMethod_OPEN_OUTCRY
TradSesMethod_TWO_PARTY = cvar.TradSesMethod_TWO_PARTY
TradSesMode_TESTING = cvar.TradSesMode_TESTING
TradSesMode_SIMULATED = cvar.TradSesMode_SIMULATED
TradSesMode_PRODUCTION = cvar.TradSesMode_PRODUCTION
TradSesStatus_HALTED = cvar.TradSesStatus_HALTED
TradSesStatus_OPEN = cvar.TradSesStatus_OPEN
TradSesStatus_CLOSED = cvar.TradSesStatus_CLOSED
TradSesStatus_PRE_OPEN = cvar.TradSesStatus_PRE_OPEN
TradSesStatus_PRE_CLOSE = cvar.TradSesStatus_PRE_CLOSE
TradSesStatus_REQUEST_REJECTED = cvar.TradSesStatus_REQUEST_REJECTED
TradSesStatus_UNKNOWN = cvar.TradSesStatus_UNKNOWN
QuoteEntryRejectReason_UNKNOWN_SYMBOL = cvar.QuoteEntryRejectReason_UNKNOWN_SYMBOL
QuoteEntryRejectReason_EXCHANGE = cvar.QuoteEntryRejectReason_EXCHANGE
QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT = cvar.QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT
QuoteEntryRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteEntryRejectReason_TOO_LATE_TO_ENTER
QuoteEntryRejectReason_UNKNOWN_QUOTE = cvar.QuoteEntryRejectReason_UNKNOWN_QUOTE
QuoteEntryRejectReason_DUPLICATE_QUOTE = cvar.QuoteEntryRejectReason_DUPLICATE_QUOTE
QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD = cvar.QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD
QuoteEntryRejectReason_INVALID_PRICE = cvar.QuoteEntryRejectReason_INVALID_PRICE
QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY = cvar.QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY
BidRequestTransType_CANCEL = cvar.BidRequestTransType_CANCEL
BidRequestTransType_NO = cvar.BidRequestTransType_NO
BidRequestTransType_NEW = cvar.BidRequestTransType_NEW
SolicitedFlag_NO = cvar.SolicitedFlag_NO
SolicitedFlag_YES = cvar.SolicitedFlag_YES
ExecRestatementReason_GT_CORPORATE_ACTION = cvar.ExecRestatementReason_GT_CORPORATE_ACTION
ExecRestatementReason_GT_RENEWAL = cvar.ExecRestatementReason_GT_RENEWAL
ExecRestatementReason_VERBAL_CHANGE = cvar.ExecRestatementReason_VERBAL_CHANGE
ExecRestatementReason_REPRICING_OF_ORDER = cvar.ExecRestatementReason_REPRICING_OF_ORDER
ExecRestatementReason_BROKER_OPTION = cvar.ExecRestatementReason_BROKER_OPTION
ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY = cvar.ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY
ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE = cvar.ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE
ExecRestatementReason_MARKET = cvar.ExecRestatementReason_MARKET
ExecRestatementReason_CANCEL_ON_TRADING_HALT = cvar.ExecRestatementReason_CANCEL_ON_TRADING_HALT
ExecRestatementReason_CANCELED_NOT_BEST = cvar.ExecRestatementReason_CANCELED_NOT_BEST
ExecRestatementReason_WAREHOUSE_RECAP = cvar.ExecRestatementReason_WAREHOUSE_RECAP
ExecRestatementReason_OTHER = cvar.ExecRestatementReason_OTHER
ExecRestatementReason_PEG_REFRESH = cvar.ExecRestatementReason_PEG_REFRESH
BusinessRejectReason_OTHER = cvar.BusinessRejectReason_OTHER
BusinessRejectReason_UNKOWN_ID = cvar.BusinessRejectReason_UNKOWN_ID
BusinessRejectReason_UNKNOWN_SECURITY = cvar.BusinessRejectReason_UNKNOWN_SECURITY
BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE = cvar.BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE
BusinessRejectReason_APPLICATION_NOT_AVAILABLE = cvar.BusinessRejectReason_APPLICATION_NOT_AVAILABLE
BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING = cvar.BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING
BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME = cvar.BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME
BusinessRejectReason_NOT_AUTHORIZED = cvar.BusinessRejectReason_NOT_AUTHORIZED
BusinessRejectReason_UNKNOWN_ID = cvar.BusinessRejectReason_UNKNOWN_ID
BusinessRejectReason_UNKNOWN_MESSAGE_TYPE = cvar.BusinessRejectReason_UNKNOWN_MESSAGE_TYPE
BusinessRejectReason_INVALID_PRICE_INCREMENT = cvar.BusinessRejectReason_INVALID_PRICE_INCREMENT
DiscretionInst_RELATED_TO_DISPLAYED_PRICE = cvar.DiscretionInst_RELATED_TO_DISPLAYED_PRICE
DiscretionInst_RELATED_TO_MARKET_PRICE = cvar.DiscretionInst_RELATED_TO_MARKET_PRICE
DiscretionInst_RELATED_TO_PRIMARY_PRICE = cvar.DiscretionInst_RELATED_TO_PRIMARY_PRICE
DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE = cvar.DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE
DiscretionInst_RELATED_TO_MIDPOINT_PRICE = cvar.DiscretionInst_RELATED_TO_MIDPOINT_PRICE
DiscretionInst_RELATED_TO_LAST_TRADE_PRICE = cvar.DiscretionInst_RELATED_TO_LAST_TRADE_PRICE
DiscretionInst_RELATED_TO_VWAP = cvar.DiscretionInst_RELATED_TO_VWAP
DiscretionInst_AVERAGE_PRICE_GUARANTEE = cvar.DiscretionInst_AVERAGE_PRICE_GUARANTEE
BidType_NON_DISCLOSED_STYLE = cvar.BidType_NON_DISCLOSED_STYLE
BidType_DISCLOSED_STYLE = cvar.BidType_DISCLOSED_STYLE
BidType_NO_BIDDING_PROCESS = cvar.BidType_NO_BIDDING_PROCESS
BidType_DISCLOSED_SYTLE = cvar.BidType_DISCLOSED_SYTLE
BidDescriptorType_INDEX = cvar.BidDescriptorType_INDEX
BidDescriptorType_COUNTRY = cvar.BidDescriptorType_COUNTRY
BidDescriptorType_SECTOR = cvar.BidDescriptorType_SECTOR
SideValueInd_SIDEVALUE1 = cvar.SideValueInd_SIDEVALUE1
SideValueInd_SIDEVALUE_2 = cvar.SideValueInd_SIDEVALUE_2
SideValueInd_SIDE_VALUE_1 = cvar.SideValueInd_SIDE_VALUE_1
SideValueInd_SIDE_VALUE_2 = cvar.SideValueInd_SIDE_VALUE_2
LiquidityIndType_5_DAY_MOVING_AVERAGE = cvar.LiquidityIndType_5_DAY_MOVING_AVERAGE
LiquidityIndType_20_DAY_MOVING_AVERAGE = cvar.LiquidityIndType_20_DAY_MOVING_AVERAGE
LiquidityIndType_NORMAL_MARKET_SIZE = cvar.LiquidityIndType_NORMAL_MARKET_SIZE
LiquidityIndType_OTHER = cvar.LiquidityIndType_OTHER
LiquidityIndType_5DAY_MOVING_AVERAGE = cvar.LiquidityIndType_5DAY_MOVING_AVERAGE
ExchangeForPhysical_NO = cvar.ExchangeForPhysical_NO
ExchangeForPhysical_YES = cvar.ExchangeForPhysical_YES
ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST = cvar.ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST
ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD = cvar.ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD
ProgRptReqs_REAL_TIME_EXECUTION_REPORTS = cvar.ProgRptReqs_REAL_TIME_EXECUTION_REPORTS
ProgRptReqs_BUY_SIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUE_REQUEST = cvar.ProgRptReqs_BUY_SIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUE_REQUEST
ProgRptReqs_SELL_SIDE_PERIODICALLY_SENDS_STATUS_USING_LIST_STATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD = cvar.ProgRptReqs_SELL_SIDE_PERIODICALLY_SENDS_STATUS_USING_LIST_STATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD
IncTaxInd_NET = cvar.IncTaxInd_NET
IncTaxInd_GROSS = cvar.IncTaxInd_GROSS
TradeType_AGENCY = cvar.TradeType_AGENCY
TradeType_VWAP_GUARANTEE = cvar.TradeType_VWAP_GUARANTEE
TradeType_GUARANTEED_CLOSE = cvar.TradeType_GUARANTEED_CLOSE
TradeType_RISK_TRADE = cvar.TradeType_RISK_TRADE
BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION = cvar.BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION
BasisPxType_CLOSING_PRICE = cvar.BasisPxType_CLOSING_PRICE
BasisPxType_CURRENT_PRICE = cvar.BasisPxType_CURRENT_PRICE
BasisPxType_SQ = cvar.BasisPxType_SQ
BasisPxType_VWAP_THROUGH_A_DAY = cvar.BasisPxType_VWAP_THROUGH_A_DAY
BasisPxType_VWAP_THROUGH_A_MORNING_SESSION = cvar.BasisPxType_VWAP_THROUGH_A_MORNING_SESSION
BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION = cvar.BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION
BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI = cvar.BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI
BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI = cvar.BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI
BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI = cvar.BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI
BasisPxType_STRIKE = cvar.BasisPxType_STRIKE
BasisPxType_OPEN = cvar.BasisPxType_OPEN
BasisPxType_OTHERS = cvar.BasisPxType_OTHERS
PriceType_PERCENTAGE = cvar.PriceType_PERCENTAGE
PriceType_PER_SHARE = cvar.PriceType_PER_SHARE
PriceType_FIXED_AMOUNT = cvar.PriceType_FIXED_AMOUNT
PriceType_DISCOUNT = cvar.PriceType_DISCOUNT
PriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK = cvar.PriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK
PriceType_TED_PRICE = cvar.PriceType_TED_PRICE
PriceType_TED_YIELD = cvar.PriceType_TED_YIELD
PriceType_PREMIUM = cvar.PriceType_PREMIUM
PriceType_PER_UNIT = cvar.PriceType_PER_UNIT
PriceType_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR = cvar.PriceType_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR
PriceType_PREMIUM_PERCENTAGE_POINTS_OVER_PAR = cvar.PriceType_PREMIUM_PERCENTAGE_POINTS_OVER_PAR
PriceType_SPREAD = cvar.PriceType_SPREAD
PriceType_YIELD = cvar.PriceType_YIELD
PriceType_FIXED_CABINET_TRADE_PRICE = cvar.PriceType_FIXED_CABINET_TRADE_PRICE
PriceType_VARIABLE_CABINET_TRADE_PRICE = cvar.PriceType_VARIABLE_CABINET_TRADE_PRICE
PriceType_PRODUCT_TICKS_IN_HALFS = cvar.PriceType_PRODUCT_TICKS_IN_HALFS
PriceType_PRODUCT_TICKS_IN_FOURTHS = cvar.PriceType_PRODUCT_TICKS_IN_FOURTHS
PriceType_PRODUCT_TICKS_IN_EIGHTS = cvar.PriceType_PRODUCT_TICKS_IN_EIGHTS
PriceType_PRODUCT_TICKS_IN_SIXTEENTHS = cvar.PriceType_PRODUCT_TICKS_IN_SIXTEENTHS
PriceType_PRODUCT_TICKS_IN_THIRTY_SECONDS = cvar.PriceType_PRODUCT_TICKS_IN_THIRTY_SECONDS
PriceType_PRODUCT_TICKS_IN_SIXTY_FORTHS = cvar.PriceType_PRODUCT_TICKS_IN_SIXTY_FORTHS
PriceType_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS = cvar.PriceType_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS
GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION = cvar.GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION
GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES = cvar.GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES
GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE = cvar.GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE
GTBookingInst_ACCUMULATE_EXECTUIONS_UNTIL_FORDER_IS_FILLED_OR_EXPIRES = cvar.GTBookingInst_ACCUMULATE_EXECTUIONS_UNTIL_FORDER_IS_FILLED_OR_EXPIRES
GTBookingInst_ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE = cvar.GTBookingInst_ACCUMULATE_UNTIL_VERBALLLY_NOTIFIED_OTHERWISE
ListStatusType_ALERT = cvar.ListStatusType_ALERT
ListStatusType_EXECSTARTED = cvar.ListStatusType_EXECSTARTED
ListStatusType_TIMED = cvar.ListStatusType_TIMED
ListStatusType_RESPONSE = cvar.ListStatusType_RESPONSE
ListStatusType_ACK = cvar.ListStatusType_ACK
ListStatusType_ALLDONE = cvar.ListStatusType_ALLDONE
ListStatusType_EXEC_STARTED = cvar.ListStatusType_EXEC_STARTED
ListStatusType_ALL_DONE = cvar.ListStatusType_ALL_DONE
NetGrossInd_NET = cvar.NetGrossInd_NET
NetGrossInd_GROSS = cvar.NetGrossInd_GROSS
ListOrderStatus_CANCELING = cvar.ListOrderStatus_CANCELING
ListOrderStatus_EXECUTING = cvar.ListOrderStatus_EXECUTING
ListOrderStatus_REJECT = cvar.ListOrderStatus_REJECT
ListOrderStatus_ALL_DONE = cvar.ListOrderStatus_ALL_DONE
ListOrderStatus_ALERT = cvar.ListOrderStatus_ALERT
ListOrderStatus_RECEIVEDFOREXECUTION = cvar.ListOrderStatus_RECEIVEDFOREXECUTION
ListOrderStatus_INBIDDINGPROCESS = cvar.ListOrderStatus_INBIDDINGPROCESS
ListOrderStatus_IN_BIDDING_PROCESS = cvar.ListOrderStatus_IN_BIDDING_PROCESS
ListOrderStatus_RECEIVED_FOR_EXECUTION = cvar.ListOrderStatus_RECEIVED_FOR_EXECUTION
ListOrderStatus_CANCELLING = cvar.ListOrderStatus_CANCELLING
ListExecInstType_IMMEDIATE = cvar.ListExecInstType_IMMEDIATE
ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION = cvar.ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN
ListExecInstType_WAIT_FOR_EXECUT_INSTRUCTION = cvar.ListExecInstType_WAIT_FOR_EXECUT_INSTRUCTION
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_3 = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_3
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_4 = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_4
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_5 = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_5
CxlRejResponseTo_ORDER_CANCEL_REQUEST = cvar.CxlRejResponseTo_ORDER_CANCEL_REQUEST
CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST = cvar.CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST
MultiLegReportingType_SINGLE_SECURITY = cvar.MultiLegReportingType_SINGLE_SECURITY
MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = cvar.MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY
MultiLegReportingType_MULTI_LEG_SECURITY = cvar.MultiLegReportingType_MULTI_LEG_SECURITY
MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY = cvar.MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY
SecurityIDSource_SICOVAM = cvar.SecurityIDSource_SICOVAM
SecurityIDSource_SEDOL = cvar.SecurityIDSource_SEDOL
SecurityIDSource_CUSIP = cvar.SecurityIDSource_CUSIP
SecurityIDSource_QUIK = cvar.SecurityIDSource_QUIK
SecurityIDSource_BELGIAN = cvar.SecurityIDSource_BELGIAN
SecurityIDSource_VALOREN = cvar.SecurityIDSource_VALOREN
SecurityIDSource_DUTCH = cvar.SecurityIDSource_DUTCH
SecurityIDSource_WERTPAPIER = cvar.SecurityIDSource_WERTPAPIER
SecurityIDSource_BLOOMBERG_SYMBOL = cvar.SecurityIDSource_BLOOMBERG_SYMBOL
SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION = cvar.SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION
SecurityIDSource_EXCHANGE_SYMBOL = cvar.SecurityIDSource_EXCHANGE_SYMBOL
SecurityIDSource_ISO_COUNTRY_CODE = cvar.SecurityIDSource_ISO_COUNTRY_CODE
SecurityIDSource_ISO_CURRENCY_CODE = cvar.SecurityIDSource_ISO_CURRENCY_CODE
SecurityIDSource_RIC_CODE = cvar.SecurityIDSource_RIC_CODE
SecurityIDSource_ISIN_NUMBER = cvar.SecurityIDSource_ISIN_NUMBER
SecurityIDSource_COMMON = cvar.SecurityIDSource_COMMON
SecurityIDSource_CLEARING_HOUSE = cvar.SecurityIDSource_CLEARING_HOUSE
SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION = cvar.SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION
SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY = cvar.SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY
SecurityIDSource_OPTION_PRICE_REPORTING_AUTHORITY = cvar.SecurityIDSource_OPTION_PRICE_REPORTING_AUTHORITY
SecurityIDSource_ISDA_FPML_PRODUCT_URL = cvar.SecurityIDSource_ISDA_FPML_PRODUCT_URL
SecurityIDSource_LETTER_OF_CREDIT = cvar.SecurityIDSource_LETTER_OF_CREDIT
SecurityIDSource_MARKETPLACE_ASSIGNED_IDENTIFIER = cvar.SecurityIDSource_MARKETPLACE_ASSIGNED_IDENTIFIER
IOIQty_LARGE = cvar.IOIQty_LARGE
IOIQty_MEDIUM = cvar.IOIQty_MEDIUM
IOIQty_SMALL = cvar.IOIQty_SMALL
IOIQty_UNDISCLOSED_QUANTITY = cvar.IOIQty_UNDISCLOSED_QUANTITY
PositionEffect_FIFO = cvar.PositionEffect_FIFO
PositionEffect_ROLLED = cvar.PositionEffect_ROLLED
PositionEffect_CLOSE = cvar.PositionEffect_CLOSE
PositionEffect_OPEN = cvar.PositionEffect_OPEN
PositionEffect_CLOSE_BUT_NOTIFY_ON_OPEN = cvar.PositionEffect_CLOSE_BUT_NOTIFY_ON_OPEN
PositionEffect_DEFAULT = cvar.PositionEffect_DEFAULT
BenchmarkCurveName_SWAP = cvar.BenchmarkCurveName_SWAP
BenchmarkCurveName_LIBID = cvar.BenchmarkCurveName_LIBID
BenchmarkCurveName_OTHER = cvar.BenchmarkCurveName_OTHER
BenchmarkCurveName_TREASURY = cvar.BenchmarkCurveName_TREASURY
BenchmarkCurveName_EURIBOR = cvar.BenchmarkCurveName_EURIBOR
BenchmarkCurveName_PFANDBRIEFE = cvar.BenchmarkCurveName_PFANDBRIEFE
BenchmarkCurveName_FUTURESWAP = cvar.BenchmarkCurveName_FUTURESWAP
BenchmarkCurveName_MUNIAAA = cvar.BenchmarkCurveName_MUNIAAA
BenchmarkCurveName_LIBOR = cvar.BenchmarkCurveName_LIBOR
BenchmarkCurveName_EONIA = cvar.BenchmarkCurveName_EONIA
BenchmarkCurveName_EUREPO = cvar.BenchmarkCurveName_EUREPO
BenchmarkCurveName_SONIA = cvar.BenchmarkCurveName_SONIA
StipulationType_ABSOLUTE_PREPAYMENT_SPEED = cvar.StipulationType_ABSOLUTE_PREPAYMENT_SPEED
StipulationType_WEIGHTED_AVERAGE_LOAN_AGE = cvar.StipulationType_WEIGHTED_AVERAGE_LOAN_AGE
StipulationType_WEIGHTED_AVERAGE_MATURITY = cvar.StipulationType_WEIGHTED_AVERAGE_MATURITY
StipulationType_CONSTANT_PREPAYMENT_RATE = cvar.StipulationType_CONSTANT_PREPAYMENT_RATE
StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE = cvar.StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE
StipulationType_WEIGHTED_AVERAGE_LIFE = cvar.StipulationType_WEIGHTED_AVERAGE_LIFE
StipulationType_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE = cvar.StipulationType_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE
StipulationType_SINGLE_MONTHLY_MORTALITY = cvar.StipulationType_SINGLE_MONTHLY_MORTALITY
StipulationType_MONTHLY_PREPAYMENT_RATE = cvar.StipulationType_MONTHLY_PREPAYMENT_RATE
StipulationType_OF_BMA_PREPAYMENT_CURVE = cvar.StipulationType_OF_BMA_PREPAYMENT_CURVE
StipulationType_OF_PROSPECTUS_PREPAYMENT_CURVE = cvar.StipulationType_OF_PROSPECTUS_PREPAYMENT_CURVE
StipulationType_CONSTANT_PREPAYMENT_PENALTY = cvar.StipulationType_CONSTANT_PREPAYMENT_PENALTY
StipulationType_LOT_VARIANCE = cvar.StipulationType_LOT_VARIANCE
StipulationType_CONSTANT_PREPAYMENT_YIELD = cvar.StipulationType_CONSTANT_PREPAYMENT_YIELD
StipulationType_WEIGHTED_AVERAGE_COUPON = cvar.StipulationType_WEIGHTED_AVERAGE_COUPON
StipulationType_YEAR_OF_ISSUE = cvar.StipulationType_YEAR_OF_ISSUE
StipulationType_MATURITY_YEAR = cvar.StipulationType_MATURITY_YEAR
StipulationType_NUMBER_OF_PIECES = cvar.StipulationType_NUMBER_OF_PIECES
StipulationType_POOLS_MAXIMUM = cvar.StipulationType_POOLS_MAXIMUM
StipulationType_POOLS_PER_MILLION = cvar.StipulationType_POOLS_PER_MILLION
StipulationType_POOLS_PER_LOT = cvar.StipulationType_POOLS_PER_LOT
StipulationType_POOLS_PER_TRADE = cvar.StipulationType_POOLS_PER_TRADE
StipulationType_PRODUCTION_YEAR = cvar.StipulationType_PRODUCTION_YEAR
StipulationType_TRADE_VARIANCE = cvar.StipulationType_TRADE_VARIANCE
StipulationType_GEOGRAPHICS = cvar.StipulationType_GEOGRAPHICS
StipulationType_AMT = cvar.StipulationType_AMT
StipulationType_AUTO_REINVESTMENT_AT_RATE_OR_BETTER = cvar.StipulationType_AUTO_REINVESTMENT_AT_RATE_OR_BETTER
StipulationType_BANK_QUALIFIED = cvar.StipulationType_BANK_QUALIFIED
StipulationType_BARGAIN_CONDITIONS_SEE = cvar.StipulationType_BARGAIN_CONDITIONS_SEE
StipulationType_COUPON_RANGE = cvar.StipulationType_COUPON_RANGE
StipulationType_ISO_CURRENCY_CODE = cvar.StipulationType_ISO_CURRENCY_CODE
StipulationType_CUSTOM_START_END_DATE = cvar.StipulationType_CUSTOM_START_END_DATE
StipulationType_GEOGRAPHICS_AND_RANGE = cvar.StipulationType_GEOGRAPHICS_AND_RANGE
StipulationType_VALUATION_DISCOUNT = cvar.StipulationType_VALUATION_DISCOUNT
StipulationType_INSURED = cvar.StipulationType_INSURED
StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE = cvar.StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE
StipulationType_ISSUERS_TICKER = cvar.StipulationType_ISSUERS_TICKER
StipulationType_ISSUE_SIZE_RANGE = cvar.StipulationType_ISSUE_SIZE_RANGE
StipulationType_LOOKBACK_DAYS = cvar.StipulationType_LOOKBACK_DAYS
StipulationType_EXPLICIT_LOT_IDENTIFIER = cvar.StipulationType_EXPLICIT_LOT_IDENTIFIER
StipulationType_MATURITY_YEAR_AND_MONTH = cvar.StipulationType_MATURITY_YEAR_AND_MONTH
StipulationType_MATURITY_RANGE = cvar.StipulationType_MATURITY_RANGE
StipulationType_MAXIMUM_SUBSTITUTIONS = cvar.StipulationType_MAXIMUM_SUBSTITUTIONS
StipulationType_MINIMUM_QUANTITY = cvar.StipulationType_MINIMUM_QUANTITY
StipulationType_MINIMUM_INCREMENT = cvar.StipulationType_MINIMUM_INCREMENT
StipulationType_MINIMUM_DENOMINATION = cvar.StipulationType_MINIMUM_DENOMINATION
StipulationType_PAYMENT_FREQUENCY_CALENDAR = cvar.StipulationType_PAYMENT_FREQUENCY_CALENDAR
StipulationType_PRICE_RANGE = cvar.StipulationType_PRICE_RANGE
StipulationType_PRICING_FREQUENCY = cvar.StipulationType_PRICING_FREQUENCY
StipulationType_CALL_PROTECTION = cvar.StipulationType_CALL_PROTECTION
StipulationType_PURPOSE = cvar.StipulationType_PURPOSE
StipulationType_BENCHMARK_PRICE_SOURCE = cvar.StipulationType_BENCHMARK_PRICE_SOURCE
StipulationType_RATING_SOURCE_AND_RANGE = cvar.StipulationType_RATING_SOURCE_AND_RANGE
StipulationType_TYPE_OF_REDEMPTION_VALUES_ARE_NONCALLABLE_CALLABLE_PREFUNDED_ESCROWEDTOMATURITY_PUTABLE_CONVERTIBLE = cvar.StipulationType_TYPE_OF_REDEMPTION_VALUES_ARE_NONCALLABLE_CALLABLE_PREFUNDED_ESCROWEDTOMATURITY_PUTABLE_CONVERTIBLE
StipulationType_RESTRICTED = cvar.StipulationType_RESTRICTED
StipulationType_MARKET_SECTOR = cvar.StipulationType_MARKET_SECTOR
StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED = cvar.StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED
StipulationType_STRUCTURE = cvar.StipulationType_STRUCTURE
StipulationType_SUBSTITUTIONS_FREQUENCY = cvar.StipulationType_SUBSTITUTIONS_FREQUENCY
StipulationType_SUBSTITUTIONS_LEFT = cvar.StipulationType_SUBSTITUTIONS_LEFT
StipulationType_FREEFORM_TEXT = cvar.StipulationType_FREEFORM_TEXT
StipulationType_WEIGHTED_AVERAGE_COUPONVALUE_IN_PERCENT = cvar.StipulationType_WEIGHTED_AVERAGE_COUPONVALUE_IN_PERCENT
StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON_VALUE_IN_PERCENT = cvar.StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON_VALUE_IN_PERCENT
StipulationType_WEIGHTED_AVERAGE_LOAN_AGE_VALUE_IN_MONTHS = cvar.StipulationType_WEIGHTED_AVERAGE_LOAN_AGE_VALUE_IN_MONTHS
StipulationType_WEIGHTED_AVERAGE_MATURITY_VALUE_IN_MONTHS = cvar.StipulationType_WEIGHTED_AVERAGE_MATURITY_VALUE_IN_MONTHS
StipulationType_WHOLE_POOL = cvar.StipulationType_WHOLE_POOL
StipulationType_YIELD_RANGE = cvar.StipulationType_YIELD_RANGE
StipulationType_ALTERNATIVE_MINIMUM_TAX = cvar.StipulationType_ALTERNATIVE_MINIMUM_TAX
StipulationType_BARGAIN_CONDITIONS = cvar.StipulationType_BARGAIN_CONDITIONS
StipulationType_TYPE_OF_REDEMPTION = cvar.StipulationType_TYPE_OF_REDEMPTION
StipulationType_SECURITY_TYPE_INCLUDED_OR_EXCLUDED = cvar.StipulationType_SECURITY_TYPE_INCLUDED_OR_EXCLUDED
StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON = cvar.StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON
StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE
StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE
StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE
StipulationType_AVERAGE_FICO_SCORE = cvar.StipulationType_AVERAGE_FICO_SCORE
StipulationType_AVERAGE_LOAN_SIZE = cvar.StipulationType_AVERAGE_LOAN_SIZE
StipulationType_MAXIMUM_LOAN_BALANCE = cvar.StipulationType_MAXIMUM_LOAN_BALANCE
StipulationType_POOL_IDENTIFIER = cvar.StipulationType_POOL_IDENTIFIER
StipulationType_TYPE_OF_ROLL_TRADE = cvar.StipulationType_TYPE_OF_ROLL_TRADE
StipulationType_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE = cvar.StipulationType_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE
StipulationType_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE = cvar.StipulationType_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE
StipulationType_INTEREST_OF_ROLLING_OR_CLOSING_TRADE = cvar.StipulationType_INTEREST_OF_ROLLING_OR_CLOSING_TRADE
StipulationType_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET = cvar.StipulationType_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET
StipulationType_BROKERS_SALES_CREDIT = cvar.StipulationType_BROKERS_SALES_CREDIT
StipulationType_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS = cvar.StipulationType_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS
StipulationType_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS = cvar.StipulationType_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS
StipulationType_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY = cvar.StipulationType_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY
StipulationType_MAXIMUM_ORDER_SIZE = cvar.StipulationType_MAXIMUM_ORDER_SIZE
StipulationType_ORDER_QUANTITY_INCREMENT = cvar.StipulationType_ORDER_QUANTITY_INCREMENT
StipulationType_PRIMARY_OR_SECONDARY_MARKET_INDICATOR = cvar.StipulationType_PRIMARY_OR_SECONDARY_MARKET_INDICATOR
StipulationType_BROKER_SALES_CREDIT_OVERRIDE = cvar.StipulationType_BROKER_SALES_CREDIT_OVERRIDE
StipulationType_TRADERS_CREDIT = cvar.StipulationType_TRADERS_CREDIT
StipulationType_DISCOUNT_RATE = cvar.StipulationType_DISCOUNT_RATE
StipulationType_YIELD_TO_MATURITY = cvar.StipulationType_YIELD_TO_MATURITY
YieldType_TRUE_YIELD_THE_YIELD_CALCULATED_WITH_COUPON_DATES_MOVED_FROM_A_WEEKEND_OR_HOLIDAY_TO_THE_NEXT_VALID_SETTLEMENT_DATE = cvar.YieldType_TRUE_YIELD_THE_YIELD_CALCULATED_WITH_COUPON_DATES_MOVED_FROM_A_WEEKEND_OR_HOLIDAY_TO_THE_NEXT_VALID_SETTLEMENT_DATE
YieldType_PREVIOUS_CLOSE_YIELD_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_1_DAY_AGO = cvar.YieldType_PREVIOUS_CLOSE_YIELD_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_1_DAY_AGO
YieldType_YIELD_TO_LONGEST_AVERAGE = cvar.YieldType_YIELD_TO_LONGEST_AVERAGE
YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE_THE_YIELD_ASSUMING_ONLY_MANDATORY_SINKS_ARE_TAKEN_THIS_RESULTS_IN_A_LOWER_PAYDOWN_OF_DEBT_THE_YIELD_IS_THEN_CALCULATED_TO_THE_FINAL_PAYMENT_DATE = cvar.YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE_THE_YIELD_ASSUMING_ONLY_MANDATORY_SINKS_ARE_TAKEN_THIS_RESULTS_IN_A_LOWER_PAYDOWN_OF_DEBT_THE_YIELD_IS_THEN_CALCULATED_TO_THE_FINAL_PAYMENT_DATE
YieldType_YIELD_TO_MATURITY_THE_YIELD_OF_A_BOND_TO_ITS_MATURITY_DATE = cvar.YieldType_YIELD_TO_MATURITY_THE_YIELD_OF_A_BOND_TO_ITS_MATURITY_DATE
YieldType_MARK_TO_MARKET_YIELD_AN_ADJUSTMENT_IN_THE_VALUATION_OF_A_SECURITIES_PORTFOLIO_TO_REFLECT_THE_CURRENT_MARKET_VALUES_OF_THE_RESPECTIVE_SECURITIES_IN_THE_PORTFOLIO = cvar.YieldType_MARK_TO_MARKET_YIELD_AN_ADJUSTMENT_IN_THE_VALUATION_OF_A_SECURITIES_PORTFOLIO_TO_REFLECT_THE_CURRENT_MARKET_VALUES_OF_THE_RESPECTIVE_SECURITIES_IN_THE_PORTFOLIO
YieldType_OPEN_AVERAGE_YIELD_THE_AVERAGE_YIELD_OF_THE_RESPECTIVE_SECURITIES_IN_THE_PORTFOLIO = cvar.YieldType_OPEN_AVERAGE_YIELD_THE_AVERAGE_YIELD_OF_THE_RESPECTIVE_SECURITIES_IN_THE_PORTFOLIO
YieldType_YIELD_TO_NEXT_PUT_THE_YIELD_TO_THE_DATE_AT_WHICH_THE_BOND_HOLDER_CAN_NEXT_PUT_THE_BOND_TO_THE_ISSUER = cvar.YieldType_YIELD_TO_NEXT_PUT_THE_YIELD_TO_THE_DATE_AT_WHICH_THE_BOND_HOLDER_CAN_NEXT_PUT_THE_BOND_TO_THE_ISSUER
YieldType_PROCEEDS_YIELD_THE_CD_EQUIVALENT_YIELD_WHEN_THE_REMAINING_TIME_TO_MATURITY_IS_LESS_THAN_TWO_YEARS = cvar.YieldType_PROCEEDS_YIELD_THE_CD_EQUIVALENT_YIELD_WHEN_THE_REMAINING_TIME_TO_MATURITY_IS_LESS_THAN_TWO_YEARS
YieldType_SEMI_ANNUAL_YIELD_THE_YIELD_OF_A_BOND_WHOSE_COUPON_PAYMENTS_ARE_REINVESTED_SEMI_ANNUALLY = cvar.YieldType_SEMI_ANNUAL_YIELD_THE_YIELD_OF_A_BOND_WHOSE_COUPON_PAYMENTS_ARE_REINVESTED_SEMI_ANNUALLY
YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE_SAME_AS_AVGLIFE_ABOVE = cvar.YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE_SAME_AS_AVGLIFE_ABOVE
YieldType_YIELD_TO_SHORTEST_AVERAGE = cvar.YieldType_YIELD_TO_SHORTEST_AVERAGE
YieldType_SIMPLE_YIELD_THE_YIELD_OF_A_BOND_ASSUMING_NO_REINVESTMENT_OF_COUPON_PAYMENTS = cvar.YieldType_SIMPLE_YIELD_THE_YIELD_OF_A_BOND_ASSUMING_NO_REINVESTMENT_OF_COUPON_PAYMENTS
YieldType_YIELD_TO_TENDER_DATE_THE_YIELD_ON_A_MUNICIPAL_BOND_TO_ITS_MANDATORY_TENDER_DATE = cvar.YieldType_YIELD_TO_TENDER_DATE_THE_YIELD_ON_A_MUNICIPAL_BOND_TO_ITS_MANDATORY_TENDER_DATE
YieldType_YIELD_VALUE_OF_1_32_THE_AMOUNT_THAT_THE_YIELD_WILL_CHANGE_FOR_A_1_32ND_CHANGE_IN_PRICE = cvar.YieldType_YIELD_VALUE_OF_1_32_THE_AMOUNT_THAT_THE_YIELD_WILL_CHANGE_FOR_A_1_32ND_CHANGE_IN_PRICE
YieldType_YIELD_TO_WORST_CONVENTION_THE_LOWEST_YIELD_TO_ALL_POSSIBLE_REDEMPTION_DATE_SCENARIOS = cvar.YieldType_YIELD_TO_WORST_CONVENTION_THE_LOWEST_YIELD_TO_ALL_POSSIBLE_REDEMPTION_DATE_SCENARIOS
YieldType_TAX_EQUIVALENT_YIELD_THE_AFTER_TAX_YIELD_GROSSED_UP_BY_THE_MAXIMUM_FEDERAL_TAX_RATE_OF_396_FOR_COMPARISON_TO_TAXABLE_YIELDS = cvar.YieldType_TAX_EQUIVALENT_YIELD_THE_AFTER_TAX_YIELD_GROSSED_UP_BY_THE_MAXIMUM_FEDERAL_TAX_RATE_OF_396_FOR_COMPARISON_TO_TAXABLE_YIELDS
YieldType_ANNUAL_YIELD_THE_ANNUAL_INTEREST_OR_DIVIDEND_INCOME_AN_INVESTMENT_EARNS_EXPRESSED_AS_A_PERCENTAGE_OF_THE_INVESTMENTS_TOTAL_VALUE = cvar.YieldType_ANNUAL_YIELD_THE_ANNUAL_INTEREST_OR_DIVIDEND_INCOME_AN_INVESTMENT_EARNS_EXPRESSED_AS_A_PERCENTAGE_OF_THE_INVESTMENTS_TOTAL_VALUE
YieldType_CLOSING_YIELD_MOST_RECENT_YEAR_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_YEARS_END = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_YEAR_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_YEARS_END
YieldType_YIELD_TO_NEXT_REFUND = cvar.YieldType_YIELD_TO_NEXT_REFUND
YieldType_AFTER_TAX_YIELD = cvar.YieldType_AFTER_TAX_YIELD
YieldType_YIELD_AT_ISSUE = cvar.YieldType_YIELD_AT_ISSUE
YieldType_YIELD_TO_AVERAGE_LIFE_THE_YIELD_ASSUMING_THAT_ALL_SINKS = cvar.YieldType_YIELD_TO_AVERAGE_LIFE_THE_YIELD_ASSUMING_THAT_ALL_SINKS
YieldType_YIELD_TO_AVERAGE_MATURITY_THE_YIELD_ACHIEVED_BY_SUBSTITUTING_A_BONDS_AVERAGE_MATURITY_FOR_THE_ISSUES_FINAL_MATURITY_DATE = cvar.YieldType_YIELD_TO_AVERAGE_MATURITY_THE_YIELD_ACHIEVED_BY_SUBSTITUTING_A_BONDS_AVERAGE_MATURITY_FOR_THE_ISSUES_FINAL_MATURITY_DATE
YieldType_BOOK_YIELD_THE_YIELD_OF_A_SECURITY_CALCULATED_BY_USING_ITS_BOOK_VALUE_INSTEAD_OF_THE_CURRENT_MARKET_PRICE_THIS_TERM_IS_TYPICALLY_USED_IN_THE_US_DOMESTIC_MARKET = cvar.YieldType_BOOK_YIELD_THE_YIELD_OF_A_SECURITY_CALCULATED_BY_USING_ITS_BOOK_VALUE_INSTEAD_OF_THE_CURRENT_MARKET_PRICE_THIS_TERM_IS_TYPICALLY_USED_IN_THE_US_DOMESTIC_MARKET
YieldType_YIELD_TO_NEXT_CALL_THE_YIELD_OF_A_BOND_TO_THE_NEXT_POSSIBLE_CALL_DATE = cvar.YieldType_YIELD_TO_NEXT_CALL_THE_YIELD_OF_A_BOND_TO_THE_NEXT_POSSIBLE_CALL_DATE
YieldType_YIELD_CHANGE_SINCE_CLOSE_THE_CHANGE_IN_THE_YIELD_SINCE_THE_PREVIOUS_DAYS_CLOSING_YIELD = cvar.YieldType_YIELD_CHANGE_SINCE_CLOSE_THE_CHANGE_IN_THE_YIELD_SINCE_THE_PREVIOUS_DAYS_CLOSING_YIELD
YieldType_COMPOUND_YIELD_THE_YIELD_OF_CERTAIN_JAPANESE_BONDS_BASED_ON_ITS_PRICE_CERTAIN_JAPANESE_BONDS_HAVE_IRREGULAR_FIRST_OR_LAST_COUPONS_AND_THE_YIELD_IS_CALCULATED_COMPOUND_FOR_THESE_IRREGULAR_PERIODS = cvar.YieldType_COMPOUND_YIELD_THE_YIELD_OF_CERTAIN_JAPANESE_BONDS_BASED_ON_ITS_PRICE_CERTAIN_JAPANESE_BONDS_HAVE_IRREGULAR_FIRST_OR_LAST_COUPONS_AND_THE_YIELD_IS_CALCULATED_COMPOUND_FOR_THESE_IRREGULAR_PERIODS
YieldType_CURRENT_YIELD_ANNUAL_INTEREST_ON_A_BOND_DIVIDED_BY_THE_MARKET_VALUE_THE_ACTUAL_INCOME_RATE_OF_RETURN_AS_OPPOSED_TO_THE_COUPON_RATE_EXPRESSED_AS_A_PERCENTAGE = cvar.YieldType_CURRENT_YIELD_ANNUAL_INTEREST_ON_A_BOND_DIVIDED_BY_THE_MARKET_VALUE_THE_ACTUAL_INCOME_RATE_OF_RETURN_AS_OPPOSED_TO_THE_COUPON_RATE_EXPRESSED_AS_A_PERCENTAGE
YieldType_TRUE_GROSS_YIELD_YIELD_CALCULATED_USING_THE_PRICE_INCLUDING_ACCRUED_INTEREST_WHERE_COUPON_DATES_ARE_MOVED_FROM_HOLIDAYS_AND_WEEKENDS_TO_THE_NEXT_TRADING_DAY = cvar.YieldType_TRUE_GROSS_YIELD_YIELD_CALCULATED_USING_THE_PRICE_INCLUDING_ACCRUED_INTEREST_WHERE_COUPON_DATES_ARE_MOVED_FROM_HOLIDAYS_AND_WEEKENDS_TO_THE_NEXT_TRADING_DAY
YieldType_GOVERNMENT_EQUIVALENT_YIELD_ASK_YIELD_BASED_ON_SEMI_ANNUAL_COUPONS_COMPOUNDING_IN_ALL_PERIODS_AND_ACTUAL_ACTUAL_CALENDAR = cvar.YieldType_GOVERNMENT_EQUIVALENT_YIELD_ASK_YIELD_BASED_ON_SEMI_ANNUAL_COUPONS_COMPOUNDING_IN_ALL_PERIODS_AND_ACTUAL_ACTUAL_CALENDAR
YieldType_YIELD_WITH_INFLATION_ASSUMPTION_BASED_ON_PRICE_THE_RETURN_AN_INVESTOR_WOULD_REQUIRE_ON_A_NORMAL_BOND_THAT_WOULD_MAKE_THE_REAL_RETURN_EQUAL_TO_THAT_OF_THE_INFLATION_INDEXED_BOND_ASSUMING_A_CONSTANT_INFLATION_RATE = cvar.YieldType_YIELD_WITH_INFLATION_ASSUMPTION_BASED_ON_PRICE_THE_RETURN_AN_INVESTOR_WOULD_REQUIRE_ON_A_NORMAL_BOND_THAT_WOULD_MAKE_THE_REAL_RETURN_EQUAL_TO_THAT_OF_THE_INFLATION_INDEXED_BOND_ASSUMING_A_CONSTANT_INFLATION_RATE
YieldType_INVERSE_FLOATER_BOND_YIELD_INVERSE_FLOATER_SEMI_ANNUAL_BOND_EQUIVALENT_RATE = cvar.YieldType_INVERSE_FLOATER_BOND_YIELD_INVERSE_FLOATER_SEMI_ANNUAL_BOND_EQUIVALENT_RATE
YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_QUARTERS_END = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_QUARTERS_END
YieldType_MOST_RECENT_CLOSING_YIELD_THE_LAST_AVAILABLE_YIELD_STORED_IN_HISTORY_COMPUTED_USING_PRICE = cvar.YieldType_MOST_RECENT_CLOSING_YIELD_THE_LAST_AVAILABLE_YIELD_STORED_IN_HISTORY_COMPUTED_USING_PRICE
YieldType_CLOSING_YIELD_MOST_RECENT_MONTH_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_MONTHS_END = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_MONTH_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_MONTHS_END
YieldType_CLOSING_YIELD_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE = cvar.YieldType_CLOSING_YIELD_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE
YieldType_ANNUAL_YIELD = cvar.YieldType_ANNUAL_YIELD
YieldType_YIELD_TO_AVERAGE_MATURITY = cvar.YieldType_YIELD_TO_AVERAGE_MATURITY
YieldType_BOOK_YIELD = cvar.YieldType_BOOK_YIELD
YieldType_YIELD_TO_NEXT_CALL = cvar.YieldType_YIELD_TO_NEXT_CALL
YieldType_YIELD_CHANGE_SINCE_CLOSE = cvar.YieldType_YIELD_CHANGE_SINCE_CLOSE
YieldType_CLOSING_YIELD = cvar.YieldType_CLOSING_YIELD
YieldType_COMPOUND_YIELD = cvar.YieldType_COMPOUND_YIELD
YieldType_CURRENT_YIELD = cvar.YieldType_CURRENT_YIELD
YieldType_TRUE_GROSS_YIELD = cvar.YieldType_TRUE_GROSS_YIELD
YieldType_GOVERNMENT_EQUIVALENT_YIELD = cvar.YieldType_GOVERNMENT_EQUIVALENT_YIELD
YieldType_YIELD_WITH_INFLATION_ASSUMPTION = cvar.YieldType_YIELD_WITH_INFLATION_ASSUMPTION
YieldType_INVERSE_FLOATER_BOND_YIELD = cvar.YieldType_INVERSE_FLOATER_BOND_YIELD
YieldType_MOST_RECENT_CLOSING_YIELD = cvar.YieldType_MOST_RECENT_CLOSING_YIELD
YieldType_CLOSING_YIELD_MOST_RECENT_MONTH = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_MONTH
YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER
YieldType_CLOSING_YIELD_MOST_RECENT_YEAR = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_YEAR
YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE = cvar.YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE
YieldType_MARK_TO_MARKET_YIELD = cvar.YieldType_MARK_TO_MARKET_YIELD
YieldType_YIELD_TO_MATURITY = cvar.YieldType_YIELD_TO_MATURITY
YieldType_OPEN_AVERAGE_YIELD = cvar.YieldType_OPEN_AVERAGE_YIELD
YieldType_YIELD_TO_NEXT_PUT = cvar.YieldType_YIELD_TO_NEXT_PUT
YieldType_PREVIOUS_CLOSE_YIELD = cvar.YieldType_PREVIOUS_CLOSE_YIELD
YieldType_PROCEEDS_YIELD = cvar.YieldType_PROCEEDS_YIELD
YieldType_SEMI_ANNUAL_YIELD = cvar.YieldType_SEMI_ANNUAL_YIELD
YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE = cvar.YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE
YieldType_SIMPLE_YIELD = cvar.YieldType_SIMPLE_YIELD
YieldType_TAX_EQUIVALENT_YIELD = cvar.YieldType_TAX_EQUIVALENT_YIELD
YieldType_YIELD_TO_TENDER_DATE = cvar.YieldType_YIELD_TO_TENDER_DATE
YieldType_TRUE_YIELD = cvar.YieldType_TRUE_YIELD
YieldType_YIELD_VALUE_OF_1_32 = cvar.YieldType_YIELD_VALUE_OF_1_32
YieldType_YIELD_TO_WORST = cvar.YieldType_YIELD_TO_WORST
YieldType_YIELD_TO_AVG_MATURITY = cvar.YieldType_YIELD_TO_AVG_MATURITY
YieldType_GVNT_EQUIVALENT_YIELD = cvar.YieldType_GVNT_EQUIVALENT_YIELD
TradedFlatSwitch_NO = cvar.TradedFlatSwitch_NO
TradedFlatSwitch_YES = cvar.TradedFlatSwitch_YES
QuoteStatus_REMOVED_FROM_MARKET = cvar.QuoteStatus_REMOVED_FROM_MARKET
QuoteStatus_CANCELED_FOR_SYMBOL = cvar.QuoteStatus_CANCELED_FOR_SYMBOL
QuoteStatus_PENDING = cvar.QuoteStatus_PENDING
QuoteStatus_QUOTE_NOT_FOUND = cvar.QuoteStatus_QUOTE_NOT_FOUND
QuoteStatus_QUERY = cvar.QuoteStatus_QUERY
QuoteStatus_EXPIRED = cvar.QuoteStatus_EXPIRED
QuoteStatus_REJECTED = cvar.QuoteStatus_REJECTED
QuoteStatus_CANCELED_ALL = cvar.QuoteStatus_CANCELED_ALL
QuoteStatus_CANCELED_FOR_UNDERLYING = cvar.QuoteStatus_CANCELED_FOR_UNDERLYING
QuoteStatus_CANCELED_FOR_SECURITY_TYPE = cvar.QuoteStatus_CANCELED_FOR_SECURITY_TYPE
QuoteStatus_ACCEPTED = cvar.QuoteStatus_ACCEPTED
QuoteStatus_PASS = cvar.QuoteStatus_PASS
QuoteStatus_LOCKED_MARKET_WARNING = cvar.QuoteStatus_LOCKED_MARKET_WARNING
QuoteStatus_CROSS_MARKET_WARNING = cvar.QuoteStatus_CROSS_MARKET_WARNING
QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET = cvar.QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET
QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET = cvar.QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET
QuoteStatus_CANCEL_FOR_SYMBOL = cvar.QuoteStatus_CANCEL_FOR_SYMBOL
QuoteStatus_ACTIVE = cvar.QuoteStatus_ACTIVE
QuoteStatus_CANCELED = cvar.QuoteStatus_CANCELED
QuoteStatus_UNSOLICITED_QUOTE_REPLENISHMENT = cvar.QuoteStatus_UNSOLICITED_QUOTE_REPLENISHMENT
QuoteStatus_PENDING_END_TRADE = cvar.QuoteStatus_PENDING_END_TRADE
QuoteStatus_TOO_LATE_TO_END = cvar.QuoteStatus_TOO_LATE_TO_END
PartyIDSource_CHINESE_B_SHARE = cvar.PartyIDSource_CHINESE_B_SHARE
PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER = cvar.PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER
PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER = cvar.PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER
PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER = cvar.PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER
PartyIDSource_ISO_COUNTRY_CODE = cvar.PartyIDSource_ISO_COUNTRY_CODE
PartyIDSource_BIC = cvar.PartyIDSource_BIC
PartyIDSource_US_SOCIAL_SECURITY_NUMBER = cvar.PartyIDSource_US_SOCIAL_SECURITY_NUMBER
PartyIDSource_PROPRIETARY_CUSTOM_CODE = cvar.PartyIDSource_PROPRIETARY_CUSTOM_CODE
PartyIDSource_SETTLEMENT_ENTITY_LOCATION = cvar.PartyIDSource_SETTLEMENT_ENTITY_LOCATION
PartyIDSource_KOREAN_INVESTOR_ID = cvar.PartyIDSource_KOREAN_INVESTOR_ID
PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII = cvar.PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII
PartyIDSource_TAIWANESE_TRADING_ACCOUNT = cvar.PartyIDSource_TAIWANESE_TRADING_ACCOUNT
PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY = cvar.PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY
PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER = cvar.PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER
PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER = cvar.PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER
PartyIDSource_MIC = cvar.PartyIDSource_MIC
PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE = cvar.PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE
PartyIDSource_DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_BEST_PRACTICE_GUIDELINES_DOCUMENT = cvar.PartyIDSource_DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_BEST_PRACTICE_GUIDELINES_DOCUMENT
PartyIDSource_US_EMPLOYER_OR_TAX_ID_NUMBER = cvar.PartyIDSource_US_EMPLOYER_OR_TAX_ID_NUMBER
PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID = cvar.PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID
PartyIDSource_TAIWANESE_TRADING_ACCT = cvar.PartyIDSource_TAIWANESE_TRADING_ACCT
PartyIDSource_CHINESE_INVESTOR_ID = cvar.PartyIDSource_CHINESE_INVESTOR_ID
PartyIDSource_PROPRIETARY = cvar.PartyIDSource_PROPRIETARY
PartyRole_CORRESPONDANT_CLEARING_FIRM = cvar.PartyRole_CORRESPONDANT_CLEARING_FIRM
PartyRole_CLIENT_ID = cvar.PartyRole_CLIENT_ID
PartyRole_UNDERLYING_CONTRA_FIRM = cvar.PartyRole_UNDERLYING_CONTRA_FIRM
PartyRole_SPONSORING_FIRM = cvar.PartyRole_SPONSORING_FIRM
PartyRole_CONTRA_CLEARING_FIRM = cvar.PartyRole_CONTRA_CLEARING_FIRM
PartyRole_CONTRA_FIRM = cvar.PartyRole_CONTRA_FIRM
PartyRole_EXECUTING_SYSTEM = cvar.PartyRole_EXECUTING_SYSTEM
PartyRole_ENTERING_FIRM = cvar.PartyRole_ENTERING_FIRM
PartyRole_EXECUTING_FIRM = cvar.PartyRole_EXECUTING_FIRM
PartyRole_BROKER_OF_CREDIT = cvar.PartyRole_BROKER_OF_CREDIT
PartyRole_INVESTOR_ID = cvar.PartyRole_INVESTOR_ID
PartyRole_INTRODUCING_FIRM = cvar.PartyRole_INTRODUCING_FIRM
PartyRole_GIVEUP_CLEARING_FIRM = cvar.PartyRole_GIVEUP_CLEARING_FIRM
PartyRole_LOCATE_LENDING_FIRM = cvar.PartyRole_LOCATE_LENDING_FIRM
PartyRole_FUND_MANAGER_CLIENT_ID = cvar.PartyRole_FUND_MANAGER_CLIENT_ID
PartyRole_SETTLEMENT_LOCATION = cvar.PartyRole_SETTLEMENT_LOCATION
PartyRole_ORDER_ORIGINATION_TRADER = cvar.PartyRole_ORDER_ORIGINATION_TRADER
PartyRole_EXECUTING_TRADER = cvar.PartyRole_EXECUTING_TRADER
PartyRole_ORDER_ORIGINATION_FIRM = cvar.PartyRole_ORDER_ORIGINATION_FIRM
PartyRole_CLEARING_FIRM = cvar.PartyRole_CLEARING_FIRM
PartyRole_CLEARING_ORGANIZATION = cvar.PartyRole_CLEARING_ORGANIZATION
PartyRole_EXCHANGE = cvar.PartyRole_EXCHANGE
PartyRole_CUSTOMER_ACCOUNT = cvar.PartyRole_CUSTOMER_ACCOUNT
PartyRole_CORRESPONDENT_CLEARING_ORGANIZATION = cvar.PartyRole_CORRESPONDENT_CLEARING_ORGANIZATION
PartyRole_CORRESPONDENT_BROKER = cvar.PartyRole_CORRESPONDENT_BROKER
PartyRole_BUYER_SELLER = cvar.PartyRole_BUYER_SELLER
PartyRole_CUSTODIAN = cvar.PartyRole_CUSTODIAN
PartyRole_INTERMEDIARY = cvar.PartyRole_INTERMEDIARY
PartyRole_AGENT = cvar.PartyRole_AGENT
PartyRole_SUB_CUSTODIAN = cvar.PartyRole_SUB_CUSTODIAN
PartyRole_BENEFICIARY = cvar.PartyRole_BENEFICIARY
PartyRole_INTERESTED_PARTY = cvar.PartyRole_INTERESTED_PARTY
PartyRole_REGULATORY_BODY = cvar.PartyRole_REGULATORY_BODY
PartyRole_LIQUIDITY_PROVIDER = cvar.PartyRole_LIQUIDITY_PROVIDER
PartyRole_ENTERING_TRADER = cvar.PartyRole_ENTERING_TRADER
PartyRole_CONTRA_TRADER = cvar.PartyRole_CONTRA_TRADER
PartyRole_POSITION_ACCOUNT = cvar.PartyRole_POSITION_ACCOUNT
PartyRole_LOCATE = cvar.PartyRole_LOCATE
PartyRole_CONTRA_INVESTOR_ID = cvar.PartyRole_CONTRA_INVESTOR_ID
PartyRole_TRANSFER_TO_FIRM = cvar.PartyRole_TRANSFER_TO_FIRM
PartyRole_CONTRA_POSITION_ACCOUNT = cvar.PartyRole_CONTRA_POSITION_ACCOUNT
PartyRole_CONTRA_EXCHANGE = cvar.PartyRole_CONTRA_EXCHANGE
PartyRole_INTERNAL_CARRY_ACCOUNT = cvar.PartyRole_INTERNAL_CARRY_ACCOUNT
PartyRole_ORDER_ENTRY_OPERATOR_ID = cvar.PartyRole_ORDER_ENTRY_OPERATOR_ID
PartyRole_SECONDARY_ACCOUNT_NUMBER = cvar.PartyRole_SECONDARY_ACCOUNT_NUMBER
PartyRole_FORIEGN_FIRM = cvar.PartyRole_FORIEGN_FIRM
PartyRole_THIRD_PARTY_ALLOCATION_FIRM = cvar.PartyRole_THIRD_PARTY_ALLOCATION_FIRM
PartyRole_CLAIMING_ACCOUNT = cvar.PartyRole_CLAIMING_ACCOUNT
PartyRole_ASSET_MANAGER = cvar.PartyRole_ASSET_MANAGER
PartyRole_PLEDGOR_ACCOUNT = cvar.PartyRole_PLEDGOR_ACCOUNT
PartyRole_PLEDGEE_ACCOUNT = cvar.PartyRole_PLEDGEE_ACCOUNT
PartyRole_LARGE_TRADER_REPORTABLE_ACCOUNT = cvar.PartyRole_LARGE_TRADER_REPORTABLE_ACCOUNT
PartyRole_TRADER_MNEMONIC = cvar.PartyRole_TRADER_MNEMONIC
PartyRole_SENDER_LOCATION = cvar.PartyRole_SENDER_LOCATION
PartyRole_SESSION_ID = cvar.PartyRole_SESSION_ID
PartyRole_ACCEPTABLE_COUNTERPARTY = cvar.PartyRole_ACCEPTABLE_COUNTERPARTY
PartyRole_UNACCEPTABLE_COUNTERPARTY = cvar.PartyRole_UNACCEPTABLE_COUNTERPARTY
PartyRole_ENTERING_UNIT = cvar.PartyRole_ENTERING_UNIT
PartyRole_EXECUTING_UNIT = cvar.PartyRole_EXECUTING_UNIT
PartyRole_INTRODUCING_BROKER = cvar.PartyRole_INTRODUCING_BROKER
PartyRole_QUOTE_ORIGINATOR = cvar.PartyRole_QUOTE_ORIGINATOR
PartyRole_REPORT_ORIGINATOR = cvar.PartyRole_REPORT_ORIGINATOR
PartyRole_SYSTEMATIC_INTERNALISER = cvar.PartyRole_SYSTEMATIC_INTERNALISER
PartyRole_MULTILATERAL_TRADING_FACILITY = cvar.PartyRole_MULTILATERAL_TRADING_FACILITY
PartyRole_REGULATED_MARKET = cvar.PartyRole_REGULATED_MARKET
PartyRole_MARKET_MAKER = cvar.PartyRole_MARKET_MAKER
PartyRole_INVESTMENT_FIRM = cvar.PartyRole_INVESTMENT_FIRM
PartyRole_HOST_COMPETENT_AUTHORITY = cvar.PartyRole_HOST_COMPETENT_AUTHORITY
PartyRole_HOME_COMPETENT_AUTHORITY = cvar.PartyRole_HOME_COMPETENT_AUTHORITY
PartyRole_COMPETENT_AUTHORITY_OF_THE_MOST_RELEVANT_MARKET_IN_TERMS_OF_LIQUIDITY = cvar.PartyRole_COMPETENT_AUTHORITY_OF_THE_MOST_RELEVANT_MARKET_IN_TERMS_OF_LIQUIDITY
PartyRole_COMPETENT_AUTHORITY_OF_THE_TRANSACTION = cvar.PartyRole_COMPETENT_AUTHORITY_OF_THE_TRANSACTION
PartyRole_REPORTING_INTERMEDIARY = cvar.PartyRole_REPORTING_INTERMEDIARY
PartyRole_EXECUTION_VENUE = cvar.PartyRole_EXECUTION_VENUE
PartyRole_MARKET_DATA_ENTRY_ORIGINATOR = cvar.PartyRole_MARKET_DATA_ENTRY_ORIGINATOR
PartyRole_LOCATION_ID = cvar.PartyRole_LOCATION_ID
PartyRole_DESK_ID = cvar.PartyRole_DESK_ID
PartyRole_MARKET_DATA_MARKET = cvar.PartyRole_MARKET_DATA_MARKET
PartyRole_ALLOCATION_ENTITY = cvar.PartyRole_ALLOCATION_ENTITY
PartyRole_PRIME_BROKER_PROVIDING_GENERAL_TRADE_SERVICES = cvar.PartyRole_PRIME_BROKER_PROVIDING_GENERAL_TRADE_SERVICES
PartyRole_STEP_OUT_FIRM = cvar.PartyRole_STEP_OUT_FIRM
PartyRole_BROKERCLEARINGID = cvar.PartyRole_BROKERCLEARINGID
PartyRole_FOREIGN_FIRM = cvar.PartyRole_FOREIGN_FIRM
PartyRole_CENTRAL_REGISTRATION_DEPOSITORY = cvar.PartyRole_CENTRAL_REGISTRATION_DEPOSITORY
PartyRole_CLEARING_ACCOUNT = cvar.PartyRole_CLEARING_ACCOUNT
PartyRole_ACCEPTABLE_SETTLING_COUNTERPARTY = cvar.PartyRole_ACCEPTABLE_SETTLING_COUNTERPARTY
PartyRole_UNACCEPTABLE_SETTLING_COUNTERPARTY = cvar.PartyRole_UNACCEPTABLE_SETTLING_COUNTERPARTY
Product_LOAN = cvar.Product_LOAN
Product_OTHER = cvar.Product_OTHER
Product_MUNICIPAL = cvar.Product_MUNICIPAL
Product_AGENCY = cvar.Product_AGENCY
Product_CORPORATE = cvar.Product_CORPORATE
Product_CURRENCY = cvar.Product_CURRENCY
Product_COMMODITY = cvar.Product_COMMODITY
Product_GOVERNMENT = cvar.Product_GOVERNMENT
Product_MORTGAGE = cvar.Product_MORTGAGE
Product_INDEX = cvar.Product_INDEX
Product_MONEYMARKET = cvar.Product_MONEYMARKET
Product_EQUITY = cvar.Product_EQUITY
Product_FINANCING = cvar.Product_FINANCING
QuantityType_CONTRACTS = cvar.QuantityType_CONTRACTS
QuantityType_OTHER = cvar.QuantityType_OTHER
QuantityType_CURRENCY = cvar.QuantityType_CURRENCY
QuantityType_ORIGINALFACE = cvar.QuantityType_ORIGINALFACE
QuantityType_CURRENTFACE = cvar.QuantityType_CURRENTFACE
QuantityType_BONDS = cvar.QuantityType_BONDS
QuantityType_SHARES = cvar.QuantityType_SHARES
QuantityType_PAR = cvar.QuantityType_PAR
RoundingDirection_ROUND_TO_NEAREST = cvar.RoundingDirection_ROUND_TO_NEAREST
RoundingDirection_ROUND_DOWN = cvar.RoundingDirection_ROUND_DOWN
RoundingDirection_ROUND_UP = cvar.RoundingDirection_ROUND_UP
DistribPaymentMethod_CREST = cvar.DistribPaymentMethod_CREST
DistribPaymentMethod_NSCC = cvar.DistribPaymentMethod_NSCC
DistribPaymentMethod_EUROCLEAR = cvar.DistribPaymentMethod_EUROCLEAR
DistribPaymentMethod_CLEARSTREAM = cvar.DistribPaymentMethod_CLEARSTREAM
DistribPaymentMethod_CHEQUE = cvar.DistribPaymentMethod_CHEQUE
DistribPaymentMethod_TELEGRAPHIC_TRANSFER = cvar.DistribPaymentMethod_TELEGRAPHIC_TRANSFER
DistribPaymentMethod_FEDWIRE = cvar.DistribPaymentMethod_FEDWIRE
DistribPaymentMethod_DIRECT_CREDIT = cvar.DistribPaymentMethod_DIRECT_CREDIT
DistribPaymentMethod_ACH_CREDIT = cvar.DistribPaymentMethod_ACH_CREDIT
DistribPaymentMethod_BPAY = cvar.DistribPaymentMethod_BPAY
DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM = cvar.DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM
DistribPaymentMethod_REINVEST_IN_FUND = cvar.DistribPaymentMethod_REINVEST_IN_FUND
DistribPaymentMethod_FED_WIRE = cvar.DistribPaymentMethod_FED_WIRE
DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM_HVACS = cvar.DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM_HVACS
CancellationRights_NO_WAIVER_AGREEMENT = cvar.CancellationRights_NO_WAIVER_AGREEMENT
CancellationRights_NO_EXECUTION_ONLY = cvar.CancellationRights_NO_EXECUTION_ONLY
CancellationRights_YES = cvar.CancellationRights_YES
CancellationRights_NO_INSTITUTIONAL = cvar.CancellationRights_NO_INSTITUTIONAL
CancellationRights_NO_N = cvar.CancellationRights_NO_N
CancellationRights_NO_M = cvar.CancellationRights_NO_M
CancellationRights_NO_O = cvar.CancellationRights_NO_O
MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION = cvar.MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION
MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION = cvar.MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION
MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT = cvar.MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT
MoneyLaunderingStatus_PASSED = cvar.MoneyLaunderingStatus_PASSED
MoneyLaunderingStatus_NOT_CHECKED = cvar.MoneyLaunderingStatus_NOT_CHECKED
MoneyLaunderingStatus_EXEMPT_1 = cvar.MoneyLaunderingStatus_EXEMPT_1
MoneyLaunderingStatus_EXEMPT_2 = cvar.MoneyLaunderingStatus_EXEMPT_2
MoneyLaunderingStatus_EXEMPT_3 = cvar.MoneyLaunderingStatus_EXEMPT_3
ExecPriceType_SINGLE_PRICE = cvar.ExecPriceType_SINGLE_PRICE
ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT = cvar.ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT
ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT = cvar.ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT
ExecPriceType_OFFER_PRICE = cvar.ExecPriceType_OFFER_PRICE
ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT = cvar.ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT
ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT = cvar.ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT
ExecPriceType_CREATION_PRICE = cvar.ExecPriceType_CREATION_PRICE
ExecPriceType_BID_PRICE = cvar.ExecPriceType_BID_PRICE
ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT = cvar.ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT
ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT = cvar.ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT
TradeReportTransType_NEW = cvar.TradeReportTransType_NEW
TradeReportTransType_REPLACE = cvar.TradeReportTransType_REPLACE
TradeReportTransType_CANCEL = cvar.TradeReportTransType_CANCEL
TradeReportTransType_RELEASE = cvar.TradeReportTransType_RELEASE
TradeReportTransType_REVERSE = cvar.TradeReportTransType_REVERSE
TradeReportTransType_CANCEL_DUE_TO_BACK_OUT_OF_TRADE = cvar.TradeReportTransType_CANCEL_DUE_TO_BACK_OUT_OF_TRADE
PaymentMethod_BPAY = cvar.PaymentMethod_BPAY
PaymentMethod_ACH_CREDIT = cvar.PaymentMethod_ACH_CREDIT
PaymentMethod_ACH_DEBIT = cvar.PaymentMethod_ACH_DEBIT
PaymentMethod_CREDIT_CARD = cvar.PaymentMethod_CREDIT_CARD
PaymentMethod_DIRECT_CREDIT = cvar.PaymentMethod_DIRECT_CREDIT
PaymentMethod_DIRECT_DEBIT = cvar.PaymentMethod_DIRECT_DEBIT
PaymentMethod_DEBIT_CARD = cvar.PaymentMethod_DEBIT_CARD
PaymentMethod_FEDWIRE = cvar.PaymentMethod_FEDWIRE
PaymentMethod_HIGH_VALUE_CLEARING_SYSTEM = cvar.PaymentMethod_HIGH_VALUE_CLEARING_SYSTEM
PaymentMethod_EUROCLEAR = cvar.PaymentMethod_EUROCLEAR
PaymentMethod_TELEGRAPHIC_TRANSFER = cvar.PaymentMethod_TELEGRAPHIC_TRANSFER
PaymentMethod_CLEARSTREAM = cvar.PaymentMethod_CLEARSTREAM
PaymentMethod_CREST = cvar.PaymentMethod_CREST
PaymentMethod_NSCC = cvar.PaymentMethod_NSCC
PaymentMethod_CHEQUE = cvar.PaymentMethod_CHEQUE
PaymentMethod_FED_WIRE = cvar.PaymentMethod_FED_WIRE
TaxAdvantageType_PROFIT_SHARING_PLAN = cvar.TaxAdvantageType_PROFIT_SHARING_PLAN
TaxAdvantageType_EMPLOYER = cvar.TaxAdvantageType_EMPLOYER
TaxAdvantageType_EMPLOYER_CURRENT_YEAR = cvar.TaxAdvantageType_EMPLOYER_CURRENT_YEAR
TaxAdvantageType_NON_FUND_PROTOTYPE_IRA = cvar.TaxAdvantageType_NON_FUND_PROTOTYPE_IRA
TaxAdvantageType_NON_FUND_QUALIFIED_PLAN = cvar.TaxAdvantageType_NON_FUND_QUALIFIED_PLAN
TaxAdvantageType_DEFINED_CONTRIBUTION_PLAN = cvar.TaxAdvantageType_DEFINED_CONTRIBUTION_PLAN
TaxAdvantageType_EMPLOYEE_CURRENT_YEAR = cvar.TaxAdvantageType_EMPLOYEE_CURRENT_YEAR
TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_ROLLOVER = cvar.TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_ROLLOVER
TaxAdvantageType_MINI_INSURANCE_ISA = cvar.TaxAdvantageType_MINI_INSURANCE_ISA
TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT = cvar.TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT
TaxAdvantageType_EMPLOYEE = cvar.TaxAdvantageType_EMPLOYEE
TaxAdvantageType_ASSET_TRANSFER = cvar.TaxAdvantageType_ASSET_TRANSFER
TaxAdvantageType_SELF_DIRECTED_IRA = cvar.TaxAdvantageType_SELF_DIRECTED_IRA
TaxAdvantageType_CURRENT_YEAR_PAYMENT = cvar.TaxAdvantageType_CURRENT_YEAR_PAYMENT
TaxAdvantageType_401K = cvar.TaxAdvantageType_401K
TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA = cvar.TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA
TaxAdvantageType_MINI_CASH_ISA = cvar.TaxAdvantageType_MINI_CASH_ISA
TaxAdvantageType_TESSA = cvar.TaxAdvantageType_TESSA
TaxAdvantageType_MAXI_ISA = cvar.TaxAdvantageType_MAXI_ISA
TaxAdvantageType_NONE_NOT_APPLICABLE = cvar.TaxAdvantageType_NONE_NOT_APPLICABLE
TaxAdvantageType_PRIOR_YEAR_PAYMENT = cvar.TaxAdvantageType_PRIOR_YEAR_PAYMENT
TaxAdvantageType_457 = cvar.TaxAdvantageType_457
TaxAdvantageType_ROTH_IRA_24 = cvar.TaxAdvantageType_ROTH_IRA_24
TaxAdvantageType_ROTH_IRA_25 = cvar.TaxAdvantageType_ROTH_IRA_25
TaxAdvantageType_ROTH_CONVERSION_IRA_26 = cvar.TaxAdvantageType_ROTH_CONVERSION_IRA_26
TaxAdvantageType_ROTH_CONVERSION_IRA_27 = cvar.TaxAdvantageType_ROTH_CONVERSION_IRA_27
TaxAdvantageType_EDUCATION_IRA_28 = cvar.TaxAdvantageType_EDUCATION_IRA_28
TaxAdvantageType_EDUCATION_IRA_29 = cvar.TaxAdvantageType_EDUCATION_IRA_29
TaxAdvantageType_KEOGH = cvar.TaxAdvantageType_KEOGH
TaxAdvantageType_403 = cvar.TaxAdvantageType_403
TaxAdvantageType_EMPLOYEE_9 = cvar.TaxAdvantageType_EMPLOYEE_9
TaxAdvantageType_EMPLOYEE_10 = cvar.TaxAdvantageType_EMPLOYEE_10
TaxAdvantageType_EMPLOYER_11 = cvar.TaxAdvantageType_EMPLOYER_11
TaxAdvantageType_EMPLOYER_12 = cvar.TaxAdvantageType_EMPLOYER_12
TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_16 = cvar.TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_16
TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_17 = cvar.TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_17
TaxAdvantageType_401 = cvar.TaxAdvantageType_401
TaxAdvantageType_OTHER = cvar.TaxAdvantageType_OTHER
FundRenewWaiv_NO = cvar.FundRenewWaiv_NO
FundRenewWaiv_YES = cvar.FundRenewWaiv_YES
RegistStatus_ACCEPT = cvar.RegistStatus_ACCEPT
RegistStatus_REMINDER = cvar.RegistStatus_REMINDER
RegistStatus_REJECT = cvar.RegistStatus_REJECT
RegistStatus_HELD = cvar.RegistStatus_HELD
RegistStatus_ACCEPTED = cvar.RegistStatus_ACCEPTED
RegistStatus_REJECTED = cvar.RegistStatus_REJECTED
RegistStatus_REMINDER_IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING = cvar.RegistStatus_REMINDER_IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING
RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS
RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE
RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME
RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS
RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD
RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE
RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE
RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE
RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE
RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH
RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE
RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID
RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST
RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS
RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO
RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE
RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM
RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS
RegistRejReasonCode_OTHER = cvar.RegistRejReasonCode_OTHER
RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETAILS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETAILS
RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DETAILS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DETAILS
RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DETAILS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DETAILS
RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INSTRUCTIONS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INSTRUCTIONS
RegistRejReasonCode_INVALID_UNACEEPTABLE_INVESTOR_ID_SOURCE = cvar.RegistRejReasonCode_INVALID_UNACEEPTABLE_INVESTOR_ID_SOURCE
RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_DISTRIB_INSTNS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_DISTRIB_INSTNS
RegistTransType_CANCEL = cvar.RegistTransType_CANCEL
RegistTransType_NEW = cvar.RegistTransType_NEW
RegistTransType_REPLACE = cvar.RegistTransType_REPLACE
OwnershipType_JOINT_INVESTORS = cvar.OwnershipType_JOINT_INVESTORS
OwnershipType_TENANTS_IN_COMMON = cvar.OwnershipType_TENANTS_IN_COMMON
OwnershipType_JOINT_TRUSTEES = cvar.OwnershipType_JOINT_TRUSTEES
ContAmtType_NET_SETTLEMENT_AMOUNT = cvar.ContAmtType_NET_SETTLEMENT_AMOUNT
ContAmtType_COMMISSION_AMOUNT = cvar.ContAmtType_COMMISSION_AMOUNT
ContAmtType_COMMISSION = cvar.ContAmtType_COMMISSION
ContAmtType_INITIAL_CHARGE_AMOUNT = cvar.ContAmtType_INITIAL_CHARGE_AMOUNT
ContAmtType_INITIAL_CHARGE = cvar.ContAmtType_INITIAL_CHARGE
ContAmtType_DISCOUNT_AMOUNT = cvar.ContAmtType_DISCOUNT_AMOUNT
ContAmtType_DISCOUNT = cvar.ContAmtType_DISCOUNT
ContAmtType_DILUTION_LEVY_AMOUNT = cvar.ContAmtType_DILUTION_LEVY_AMOUNT
ContAmtType_DILUTION_LEVY = cvar.ContAmtType_DILUTION_LEVY
ContAmtType_EXIT_CHARGE_AMOUNT = cvar.ContAmtType_EXIT_CHARGE_AMOUNT
ContAmtType_EXIT_CHARGE = cvar.ContAmtType_EXIT_CHARGE
ContAmtType_FUND_BASED_RENEWAL_COMMISSION = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION
ContAmtType_PROJECTED_FUND_VALUE = cvar.ContAmtType_PROJECTED_FUND_VALUE
ContAmtType_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_14 = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_14
ContAmtType_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_13 = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_13
ContAmtType_COMMISSION_PERCENT = cvar.ContAmtType_COMMISSION_PERCENT
ContAmtType_INITIAL_CHARGE_PERCENT = cvar.ContAmtType_INITIAL_CHARGE_PERCENT
ContAmtType_DISCOUNT_PERCENT = cvar.ContAmtType_DISCOUNT_PERCENT
ContAmtType_DILUTION_LEVY_PERCENT = cvar.ContAmtType_DILUTION_LEVY_PERCENT
ContAmtType_EXIT_CHARGE_PERCENT = cvar.ContAmtType_EXIT_CHARGE_PERCENT
ContAmtType_FUND_BASED_RENEWAL_COMMISSION_PERCENT = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION_PERCENT
OwnerType_COMPANY_TRUSTEE = cvar.OwnerType_COMPANY_TRUSTEE
OwnerType_NOMINEE = cvar.OwnerType_NOMINEE
OwnerType_CORPORATE_BODY = cvar.OwnerType_CORPORATE_BODY
OwnerType_NON_PROFIT_ORGANIZATION = cvar.OwnerType_NON_PROFIT_ORGANIZATION
OwnerType_NETWORKING_SUB_ACCOUNT = cvar.OwnerType_NETWORKING_SUB_ACCOUNT
OwnerType_FIDUCIARIES = cvar.OwnerType_FIDUCIARIES
OwnerType_TRUSTS = cvar.OwnerType_TRUSTS
OwnerType_PENSION_PLAN = cvar.OwnerType_PENSION_PLAN
OwnerType_INDIVIDUAL_TRUSTEE = cvar.OwnerType_INDIVIDUAL_TRUSTEE
OwnerType_PUBLIC_COMPANY = cvar.OwnerType_PUBLIC_COMPANY
OwnerType_PRIVATE_COMPANY = cvar.OwnerType_PRIVATE_COMPANY
OwnerType_INDIVIDUAL_INVESTOR = cvar.OwnerType_INDIVIDUAL_INVESTOR
OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT = cvar.OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT
OrderCapacity_RISKLESS_PRINCIPAL = cvar.OrderCapacity_RISKLESS_PRINCIPAL
OrderCapacity_INDIVIDUAL = cvar.OrderCapacity_INDIVIDUAL
OrderCapacity_PRINCIPAL = cvar.OrderCapacity_PRINCIPAL
OrderCapacity_AGENT_FOR_OTHER_MEMBER = cvar.OrderCapacity_AGENT_FOR_OTHER_MEMBER
OrderCapacity_AGENCY = cvar.OrderCapacity_AGENCY
OrderCapacity_PROPRIETARY = cvar.OrderCapacity_PROPRIETARY
OrderRestrictions_FOREIGN_ENTITY = cvar.OrderRestrictions_FOREIGN_ENTITY
OrderRestrictions_RISKLESS_ARBITRAGE = cvar.OrderRestrictions_RISKLESS_ARBITRAGE
OrderRestrictions_PROGRAM_TRADE = cvar.OrderRestrictions_PROGRAM_TRADE
OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT = cvar.OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT
OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY = cvar.OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY
OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY = cvar.OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY
OrderRestrictions_NON_INDEX_ARBITRAGE = cvar.OrderRestrictions_NON_INDEX_ARBITRAGE
OrderRestrictions_INDEX_ARBITRAGE = cvar.OrderRestrictions_INDEX_ARBITRAGE
OrderRestrictions_COMPETING_MARKET_MAKER = cvar.OrderRestrictions_COMPETING_MARKET_MAKER
OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE = cvar.OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE
OrderRestrictions_ACTING_AS_MARKET_MAKER_OF_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SEUCIRTY = cvar.OrderRestrictions_ACTING_AS_MARKET_MAKER_OF_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SEUCIRTY
OrderRestrictions_EXTNERAL_INTER_CONNECTED_MARKET_LINKAGE = cvar.OrderRestrictions_EXTNERAL_INTER_CONNECTED_MARKET_LINKAGE
OrderRestrictions_ISSUER_HOLDING = cvar.OrderRestrictions_ISSUER_HOLDING
OrderRestrictions_ISSUE_PRICE_STABILIZATION = cvar.OrderRestrictions_ISSUE_PRICE_STABILIZATION
OrderRestrictions_NON_ALGORITHMIC = cvar.OrderRestrictions_NON_ALGORITHMIC
OrderRestrictions_ALGORITHMIC = cvar.OrderRestrictions_ALGORITHMIC
OrderRestrictions_CROSS = cvar.OrderRestrictions_CROSS
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY
MassCancelRequestType_CANCEL_ALL_ORDERS = cvar.MassCancelRequestType_CANCEL_ALL_ORDERS
MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE
MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE
MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT
MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET
MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_GROUP = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_GROUP
MassCancelRequestType_CANCEL_FOR_SECURITY_ISSUER = cvar.MassCancelRequestType_CANCEL_FOR_SECURITY_ISSUER
MassCancelRequestType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassCancelRequestType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION
MassCancelResponse_CANCEL_REQUEST_REJECTED = cvar.MassCancelResponse_CANCEL_REQUEST_REJECTED
MassCancelResponse_CANCEL_ALL_ORDERS = cvar.MassCancelResponse_CANCEL_ALL_ORDERS
MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE
MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET
MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_GROUP = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_GROUP
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITIES_ISSUER = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITIES_ISSUER
MassCancelResponse_CANCEL_ORDERS_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_ISSUER_OF_UNDERLYING_SECURITY
MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING
MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE
MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY
MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED = cvar.MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED
MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE
MassCancelRejectReason_OTHER = cvar.MassCancelRejectReason_OTHER
MassCancelRejectReason_INVALID_OR_UNKOWN_UNDERLYING_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKOWN_UNDERLYING_SECURITY
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITYTYPE = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITYTYPE
MassCancelRejectReason_INVALID_OR_UNKNOWN_MARKET = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_MARKET
MassCancelRejectReason_INVALID_OR_UNKOWN_MARKET_SEGMENT = cvar.MassCancelRejectReason_INVALID_OR_UNKOWN_MARKET_SEGMENT
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER
MassCancelRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY
QuoteType_INDICATIVE = cvar.QuoteType_INDICATIVE
QuoteType_TRADEABLE = cvar.QuoteType_TRADEABLE
QuoteType_RESTRICTED_TRADEABLE = cvar.QuoteType_RESTRICTED_TRADEABLE
QuoteType_COUNTER = cvar.QuoteType_COUNTER
CashMargin_MARGIN_OPEN = cvar.CashMargin_MARGIN_OPEN
CashMargin_MARGIN_CLOSE = cvar.CashMargin_MARGIN_CLOSE
CashMargin_CASH = cvar.CashMargin_CASH
Scope_LOCAL = cvar.Scope_LOCAL
Scope_NATIONAL = cvar.Scope_NATIONAL
Scope_GLOBAL = cvar.Scope_GLOBAL
Scope_LOCAL_MARKET = cvar.Scope_LOCAL_MARKET
MDImplicitDelete_YES = cvar.MDImplicitDelete_YES
MDImplicitDelete_NO = cvar.MDImplicitDelete_NO
CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_BOTH_SIDES_ARE_TREATED_IN_THE_SAME_MANNER_THIS_IS_EQUIVALENT_TO_AN_ALL_OR_NONE = cvar.CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_BOTH_SIDES_ARE_TREATED_IN_THE_SAME_MANNER_THIS_IS_EQUIVALENT_TO_AN_ALL_OR_NONE
CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE = cvar.CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE
CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_ONE_SIDE_OF_THE_CROSS_IS_FULLY_EXECUTED = cvar.CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_ONE_SIDE_OF_THE_CROSS_IS_FULLY_EXECUTED
CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE = cvar.CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE
CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE_NOTE_THE_CROSSPRIORITZATION = cvar.CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE_NOTE_THE_CROSSPRIORITZATION
CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_IN_THE_CASE_OTHER_ORDERS_EXIST_WITH_THE_SAME_PRICE_THE_QUANTITY_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_EXISTING_ORDERS_AND_QUOTES_THE_REMAINDER_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_OTHER_SIDE_OF_THE_CROSS_THE_TWO_SIDES_POTENTIALLY_HAVE_DIFFERENT_QUANTITIES = cvar.CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_IN_THE_CASE_OTHER_ORDERS_EXIST_WITH_THE_SAME_PRICE_THE_QUANTITY_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_EXISTING_ORDERS_AND_QUOTES_THE_REMAINDER_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_OTHER_SIDE_OF_THE_CROSS_THE_TWO_SIDES_POTENTIALLY_HAVE_DIFFERENT_QUANTITIES
CrossType_CROSS_AON = cvar.CrossType_CROSS_AON
CrossType_CROSS_IOC = cvar.CrossType_CROSS_IOC
CrossType_CROSS_ONE_SIDE = cvar.CrossType_CROSS_ONE_SIDE
CrossType_CROSS_SAME_PRICE = cvar.CrossType_CROSS_SAME_PRICE
CrossPrioritization_SELLSIDE_PRIORITIZED = cvar.CrossPrioritization_SELLSIDE_PRIORITIZED
CrossPrioritization_NONE = cvar.CrossPrioritization_NONE
CrossPrioritization_BUYSIDE_PRIORITIZED = cvar.CrossPrioritization_BUYSIDE_PRIORITIZED
CrossPrioritization_BUY_SIDE_IS_PRIORITIZED = cvar.CrossPrioritization_BUY_SIDE_IS_PRIORITIZED
CrossPrioritization_SELL_SIDE_IS_PRIORITIZED = cvar.CrossPrioritization_SELL_SIDE_IS_PRIORITIZED
NoSides_ONE_SIDE = cvar.NoSides_ONE_SIDE
NoSides_BOTH_SIDES = cvar.NoSides_BOTH_SIDES
SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE = cvar.SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE
SecurityListRequestType_PRODUCT = cvar.SecurityListRequestType_PRODUCT
SecurityListRequestType_TRADINGSESSIONID = cvar.SecurityListRequestType_TRADINGSESSIONID
SecurityListRequestType_ALL_SECURITIES = cvar.SecurityListRequestType_ALL_SECURITIES
SecurityListRequestType_SYMBOL = cvar.SecurityListRequestType_SYMBOL
SecurityListRequestType_MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID = cvar.SecurityListRequestType_MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID
SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE = cvar.SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE
SecurityRequestResult_VALID_REQUEST = cvar.SecurityRequestResult_VALID_REQUEST
SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST = cvar.SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST
SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED = cvar.SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED
SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA = cvar.SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA
SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA = cvar.SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA
MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY = cvar.MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY
MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY = cvar.MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY
MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY = cvar.MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY
TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID = cvar.TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID
TradSesStatusRejReason_OTHER = cvar.TradSesStatusRejReason_OTHER
TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA
TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA
TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA
TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST = cvar.TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST
TradeRequestType_ALL_TRADES = cvar.TradeRequestType_ALL_TRADES
PreviouslyReported_NO = cvar.PreviouslyReported_NO
PreviouslyReported_YES = cvar.PreviouslyReported_YES
MatchStatus_COMPARED_MATCHED_OR_AFFIRMED = cvar.MatchStatus_COMPARED_MATCHED_OR_AFFIRMED
MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED = cvar.MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED
MatchStatus_ADVISORY_OR_ALERT = cvar.MatchStatus_ADVISORY_OR_ALERT
MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRED = cvar.MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRED
MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S5 = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S5
MatchType_ACT_M1_MATCH = cvar.MatchType_ACT_M1_MATCH
MatchType_ACT_M6_MATCH = cvar.MatchType_ACT_M6_MATCH
MatchType_ACT_DEFAULT_AFTER_M2 = cvar.MatchType_ACT_DEFAULT_AFTER_M2
MatchType_ACT_ACCEPTED_TRADE = cvar.MatchType_ACT_ACCEPTED_TRADE
MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S2 = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S2
MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S3 = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S3
MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S4 = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S4
MatchType_ACT_M2_MATCH = cvar.MatchType_ACT_M2_MATCH
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND
MatchType_COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST = cvar.MatchType_COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST
MatchType_NON_ACT = cvar.MatchType_NON_ACT
MatchType_ACT_DEFAULT_TRADE = cvar.MatchType_ACT_DEFAULT_TRADE
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME
MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S1 = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S1
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES
MatchType_COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS_PAIR_OFFS = cvar.MatchType_COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS_PAIR_OFFS
MatchType_SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED
MatchType_SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = cvar.MatchType_SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED
MatchType_SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = cvar.MatchType_SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED
MatchType_SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = cvar.MatchType_SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED
MatchType_SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = cvar.MatchType_SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_TIMES_ACT_M1_MATCH = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_TIMES_ACT_M1_MATCH
MatchType_SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH = cvar.MatchType_SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH
MatchType_OCS_LOCKED_IN_NON_ACT = cvar.MatchType_OCS_LOCKED_IN_NON_ACT
MatchType_ONE_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT = cvar.MatchType_ONE_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT
MatchType_TWO_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT = cvar.MatchType_TWO_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT
MatchType_CONTINUOUS_AUTO_MATCH = cvar.MatchType_CONTINUOUS_AUTO_MATCH
MatchType_CROSS_AUCTION_63 = cvar.MatchType_CROSS_AUCTION_63
MatchType_COUNTER_ORDER_SELECTION_64 = cvar.MatchType_COUNTER_ORDER_SELECTION_64
MatchType_CALL_AUCTION_65 = cvar.MatchType_CALL_AUCTION_65
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADETYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADETYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME
MatchType_SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIED = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIED
MatchType_ONE_PARTY_TRADE_REPORT = cvar.MatchType_ONE_PARTY_TRADE_REPORT
MatchType_TWO_PARTY_TRADE_REPORT = cvar.MatchType_TWO_PARTY_TRADE_REPORT
MatchType_CONFIRMED_TRADE_REPORT = cvar.MatchType_CONFIRMED_TRADE_REPORT
MatchType_AUTO_MATCH = cvar.MatchType_AUTO_MATCH
MatchType_CROSS_AUCTION_5 = cvar.MatchType_CROSS_AUCTION_5
MatchType_COUNTER_ORDER_SELECTION_6 = cvar.MatchType_COUNTER_ORDER_SELECTION_6
MatchType_CALL_AUCTION_7 = cvar.MatchType_CALL_AUCTION_7
MatchType_CROSS_AUCTION = cvar.MatchType_CROSS_AUCTION
MatchType_COUNTER_ORDER_SELECTION = cvar.MatchType_COUNTER_ORDER_SELECTION
MatchType_CALL_AUCTION = cvar.MatchType_CALL_AUCTION
MatchType_ISSUING_BUY_BACK_AUCTION = cvar.MatchType_ISSUING_BUY_BACK_AUCTION
OddLot_YES = cvar.OddLot_YES
OddLot_NO = cvar.OddLot_NO
ClearingInstruction_MANUAL_MODE = cvar.ClearingInstruction_MANUAL_MODE
ClearingInstruction_MULTILATERAL_NETTING = cvar.ClearingInstruction_MULTILATERAL_NETTING
ClearingInstruction_AUTOMATIC_POSTING_MODE = cvar.ClearingInstruction_AUTOMATIC_POSTING_MODE
ClearingInstruction_BILATERAL_NETTING_ONLY = cvar.ClearingInstruction_BILATERAL_NETTING_ONLY
ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY = cvar.ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY
ClearingInstruction_AUTOMATIC_GIVE_UP_MODE = cvar.ClearingInstruction_AUTOMATIC_GIVE_UP_MODE
ClearingInstruction_SPECIAL_TRADE = cvar.ClearingInstruction_SPECIAL_TRADE
ClearingInstruction_EX_CLEARING = cvar.ClearingInstruction_EX_CLEARING
ClearingInstruction_PROCESS_NORMALLY = cvar.ClearingInstruction_PROCESS_NORMALLY
ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY = cvar.ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY
ClearingInstruction_EXCLUDE_FROM_ALL_NETTING = cvar.ClearingInstruction_EXCLUDE_FROM_ALL_NETTING
ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE = cvar.ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE
ClearingInstruction_CUSTOMER_TRADE = cvar.ClearingInstruction_CUSTOMER_TRADE
ClearingInstruction_SELF_CLEARING = cvar.ClearingInstruction_SELF_CLEARING
ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE_QSR = cvar.ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE_QSR
AccountType_HOUSE_TRADER = cvar.AccountType_HOUSE_TRADER
AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = cvar.AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED
AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED
AccountType_FLOOR_TRADER = cvar.AccountType_FLOOR_TRADER
AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS
AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS
AccountType_JOINT_BACKOFFICE_ACCOUNT = cvar.AccountType_JOINT_BACKOFFICE_ACCOUNT
AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_THE_BOOKS = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_THE_BOOKS
AccountType_JOINT_BACK_OFFICE_ACCOUNT = cvar.AccountType_JOINT_BACK_OFFICE_ACCOUNT
CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = cvar.CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT
CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = cvar.CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT
CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER = cvar.CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER
CustOrderCapacity_ALL_OTHER = cvar.CustOrderCapacity_ALL_OTHER
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY
MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID
MassStatusReqType_STATUS_FOR_ALL_ORDERS = cvar.MassStatusReqType_STATUS_FOR_ALL_ORDERS
MassStatusReqType_STATUS_FOR_SECURITY_ISSUER = cvar.MassStatusReqType_STATUS_FOR_SECURITY_ISSUER
MassStatusReqType_STATUS_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ISSUER_OF_UNDERLYING_SECURITY
DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR = cvar.DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR
DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING = cvar.DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING
DayBookingInst_ACCUMULATE = cvar.DayBookingInst_ACCUMULATE
BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER = cvar.BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER
BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE = cvar.BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE
BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT = cvar.BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT
PreallocMethod_PRO_RATA = cvar.PreallocMethod_PRO_RATA
PreallocMethod_DO_NOT_PRO_RATA_DISCUSS_FIRST = cvar.PreallocMethod_DO_NOT_PRO_RATA_DISCUSS_FIRST
PreallocMethod_DO_NOT_PRO_RATA = cvar.PreallocMethod_DO_NOT_PRO_RATA
TradingSessionSubID_PRE_TRADING = cvar.TradingSessionSubID_PRE_TRADING
TradingSessionSubID_OPENING_OR_OPENING_AUCTION = cvar.TradingSessionSubID_OPENING_OR_OPENING_AUCTION
TradingSessionSubID_3 = cvar.TradingSessionSubID_3
TradingSessionSubID_CLOSING_OR_CLOSING_AUCTION = cvar.TradingSessionSubID_CLOSING_OR_CLOSING_AUCTION
TradingSessionSubID_POST_TRADING = cvar.TradingSessionSubID_POST_TRADING
TradingSessionSubID_INTRADAY_AUCTION = cvar.TradingSessionSubID_INTRADAY_AUCTION
TradingSessionSubID_QUIESCENT = cvar.TradingSessionSubID_QUIESCENT
AllocType_BUYSIDE_READY_TO_BOOK_6 = cvar.AllocType_BUYSIDE_READY_TO_BOOK_6
AllocType_BUYSIDE_PRELIMINARY = cvar.AllocType_BUYSIDE_PRELIMINARY
AllocType_SELLSIDE_CALCULATED_USING_PRELIMINARY = cvar.AllocType_SELLSIDE_CALCULATED_USING_PRELIMINARY
AllocType_BUYSIDE_READY_TO_BOOK_5 = cvar.AllocType_BUYSIDE_READY_TO_BOOK_5
AllocType_BUYSIDE_CALCULATED = cvar.AllocType_BUYSIDE_CALCULATED
AllocType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY = cvar.AllocType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY
AllocType_CALCULATED = cvar.AllocType_CALCULATED
AllocType_PRELIMINARY = cvar.AllocType_PRELIMINARY
AllocType_READY_TO_BOOK = cvar.AllocType_READY_TO_BOOK
AllocType_WAREHOUSE_INSTRUCTION = cvar.AllocType_WAREHOUSE_INSTRUCTION
AllocType_REQUEST_TO_INTERMEDIARY = cvar.AllocType_REQUEST_TO_INTERMEDIARY
AllocType_BUYSIDE_READY_TO_BOOK = cvar.AllocType_BUYSIDE_READY_TO_BOOK
AllocType_ACCEPT = cvar.AllocType_ACCEPT
AllocType_REJECT = cvar.AllocType_REJECT
AllocType_ACCEPT_PENDING = cvar.AllocType_ACCEPT_PENDING
AllocType_INCOMPLETE_GROUP = cvar.AllocType_INCOMPLETE_GROUP
AllocType_COMPLETE_GROUP = cvar.AllocType_COMPLETE_GROUP
AllocType_REVERSAL_PENDING = cvar.AllocType_REVERSAL_PENDING
ClearingFeeIndicator_106H_AND_106J_FIRMS = cvar.ClearingFeeIndicator_106H_AND_106J_FIRMS
ClearingFeeIndicator_5TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_5TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_4TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_4TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_3RD_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_3RD_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_2ND_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_2ND_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_1ST_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_1ST_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES = cvar.ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES
ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS = cvar.ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS
ClearingFeeIndicator_6TH_YEAR_AND_BEYOND_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_6TH_YEAR_AND_BEYOND_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR = cvar.ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR
ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER = cvar.ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER
ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER = cvar.ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER
ClearingFeeIndicator_CBOE_MEMBER = cvar.ClearingFeeIndicator_CBOE_MEMBER
ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES = cvar.ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES
ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS = cvar.ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS
ClearingFeeIndicator_1ST_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_1ST_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_2ND_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_2ND_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_3RD_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_3RD_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_4TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_4TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_5TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_5TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_6TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_6TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_LESSEE_106F_EMPLOYEES = cvar.ClearingFeeIndicator_LESSEE_106F_EMPLOYEES
WorkingIndicator_NO = cvar.WorkingIndicator_NO
WorkingIndicator_YES = cvar.WorkingIndicator_YES
PriorityIndicator_PRIORITY_UNCHANGED = cvar.PriorityIndicator_PRIORITY_UNCHANGED
PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE = cvar.PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE
LegalConfirm_YES = cvar.LegalConfirm_YES
LegalConfirm_NO = cvar.LegalConfirm_NO
QuoteRequestRejectReason_UNKNOWN_SYMBOL = cvar.QuoteRequestRejectReason_UNKNOWN_SYMBOL
QuoteRequestRejectReason_EXCHANGE = cvar.QuoteRequestRejectReason_EXCHANGE
QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT = cvar.QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
QuoteRequestRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteRequestRejectReason_TOO_LATE_TO_ENTER
QuoteRequestRejectReason_INVALID_PRICE = cvar.QuoteRequestRejectReason_INVALID_PRICE
QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE = cvar.QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE
QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY = cvar.QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY
QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT = cvar.QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT
QuoteRequestRejectReason_NO_INVENTORY = cvar.QuoteRequestRejectReason_NO_INVENTORY
QuoteRequestRejectReason_PASS = cvar.QuoteRequestRejectReason_PASS
QuoteRequestRejectReason_OTHER = cvar.QuoteRequestRejectReason_OTHER
QuoteRequestRejectReason_INSUFFICIENT_CREDIT = cvar.QuoteRequestRejectReason_INSUFFICIENT_CREDIT
SettlType_REGULAR = cvar.SettlType_REGULAR
SettlType_CASH = cvar.SettlType_CASH
SettlType_NEXT_DAY = cvar.SettlType_NEXT_DAY
SettlType_T_PLUS_2 = cvar.SettlType_T_PLUS_2
SettlType_T_PLUS_3 = cvar.SettlType_T_PLUS_3
SettlType_T_PLUS_4 = cvar.SettlType_T_PLUS_4
SettlType_FUTURE = cvar.SettlType_FUTURE
SettlType_WHEN_AND_IF_ISSUED = cvar.SettlType_WHEN_AND_IF_ISSUED
SettlType_SELLERS_OPTION = cvar.SettlType_SELLERS_OPTION
SettlType_T_PLUS_5 = cvar.SettlType_T_PLUS_5
SettlType_BROKEN_DATE = cvar.SettlType_BROKEN_DATE
SettlType_FX_SPOT_NEXT_SETTLEMENT = cvar.SettlType_FX_SPOT_NEXT_SETTLEMENT
OpenCloseSettlFlag_DAILY_OPEN = cvar.OpenCloseSettlFlag_DAILY_OPEN
OpenCloseSettlFlag_SESSION_OPEN = cvar.OpenCloseSettlFlag_SESSION_OPEN
OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY = cvar.OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY
OpenCloseSettlFlag_EXPECTED_ENTRY = cvar.OpenCloseSettlFlag_EXPECTED_ENTRY
OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY = cvar.OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY
OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE = cvar.OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE
BidTradeType_RISK_TRADE = cvar.BidTradeType_RISK_TRADE
BidTradeType_VWAP_GUARANTEE = cvar.BidTradeType_VWAP_GUARANTEE
BidTradeType_AGENCY = cvar.BidTradeType_AGENCY
BidTradeType_GUARANTEED_CLOSE = cvar.BidTradeType_GUARANTEED_CLOSE
AcctIDSource_BIC = cvar.AcctIDSource_BIC
AcctIDSource_SID_CODE = cvar.AcctIDSource_SID_CODE
AcctIDSource_TFM = cvar.AcctIDSource_TFM
AcctIDSource_OMGEO = cvar.AcctIDSource_OMGEO
AcctIDSource_DTCC_CODE = cvar.AcctIDSource_DTCC_CODE
AcctIDSource_OTHER = cvar.AcctIDSource_OTHER
ConfirmStatus_RECEIVED = cvar.ConfirmStatus_RECEIVED
ConfirmStatus_MISMATCHED_ACCOUNT = cvar.ConfirmStatus_MISMATCHED_ACCOUNT
ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS = cvar.ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS
ConfirmStatus_CONFIRMED = cvar.ConfirmStatus_CONFIRMED
ConfirmStatus_REQUEST_REJECTED = cvar.ConfirmStatus_REQUEST_REJECTED
ConfirmTransType_NEW = cvar.ConfirmTransType_NEW
ConfirmTransType_REPLACE = cvar.ConfirmTransType_REPLACE
ConfirmTransType_CANCEL = cvar.ConfirmTransType_CANCEL
DeliveryForm_BOOKENTRY = cvar.DeliveryForm_BOOKENTRY
DeliveryForm_BEARER = cvar.DeliveryForm_BEARER
DeliveryForm_BOOK_ENTRY = cvar.DeliveryForm_BOOK_ENTRY
LegSwapType_PAR_FOR_PAR = cvar.LegSwapType_PAR_FOR_PAR
LegSwapType_MODIFIED_DURATION = cvar.LegSwapType_MODIFIED_DURATION
LegSwapType_RISK = cvar.LegSwapType_RISK
LegSwapType_PROCEEDS = cvar.LegSwapType_PROCEEDS
QuotePriceType_PERCENT = cvar.QuotePriceType_PERCENT
QuotePriceType_PER_SHARE = cvar.QuotePriceType_PER_SHARE
QuotePriceType_FIXED_AMOUNT = cvar.QuotePriceType_FIXED_AMOUNT
QuotePriceType_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR = cvar.QuotePriceType_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR
QuotePriceType_PREMIUM_PERCENTAGE_POINTS_OVER_PAR = cvar.QuotePriceType_PREMIUM_PERCENTAGE_POINTS_OVER_PAR
QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK = cvar.QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK
QuotePriceType_TED_PRICE = cvar.QuotePriceType_TED_PRICE
QuotePriceType_TED_YIELD = cvar.QuotePriceType_TED_YIELD
QuotePriceType_YIELD_SPREAD = cvar.QuotePriceType_YIELD_SPREAD
QuotePriceType_YIELD = cvar.QuotePriceType_YIELD
QuotePriceType_DISCOUNT = cvar.QuotePriceType_DISCOUNT
QuotePriceType_PREMIUM = cvar.QuotePriceType_PREMIUM
QuotePriceType_SPREAD = cvar.QuotePriceType_SPREAD
QuoteRespType_HIT_LIFT = cvar.QuoteRespType_HIT_LIFT
QuoteRespType_COUNTER = cvar.QuoteRespType_COUNTER
QuoteRespType_EXPIRED = cvar.QuoteRespType_EXPIRED
QuoteRespType_COVER = cvar.QuoteRespType_COVER
QuoteRespType_DONE_AWAY = cvar.QuoteRespType_DONE_AWAY
QuoteRespType_PASS = cvar.QuoteRespType_PASS
QuoteRespType_END_TRADE = cvar.QuoteRespType_END_TRADE
QuoteRespType_TIMED_OUT = cvar.QuoteRespType_TIMED_OUT
PosType_TRANSACTION_QUANTITY = cvar.PosType_TRANSACTION_QUANTITY
PosType_INTRA_SPREAD_QTY = cvar.PosType_INTRA_SPREAD_QTY
PosType_INTER_SPREAD_QTY = cvar.PosType_INTER_SPREAD_QTY
PosType_END_OF_DAY_QTY = cvar.PosType_END_OF_DAY_QTY
PosType_START_OF_DAY_QTY = cvar.PosType_START_OF_DAY_QTY
PosType_OPTION_EXERCISE_QTY = cvar.PosType_OPTION_EXERCISE_QTY
PosType_OPTION_ASSIGNMENT = cvar.PosType_OPTION_ASSIGNMENT
PosType_TRANSACTION_FROM_EXERCISE = cvar.PosType_TRANSACTION_FROM_EXERCISE
PosType_TRANSACTION_FROM_ASSIGNMENT = cvar.PosType_TRANSACTION_FROM_ASSIGNMENT
PosType_PIT_TRADE_QTY = cvar.PosType_PIT_TRADE_QTY
PosType_TRANSFER_TRADE_QTY = cvar.PosType_TRANSFER_TRADE_QTY
PosType_ELECTRONIC_TRADE_QTY = cvar.PosType_ELECTRONIC_TRADE_QTY
PosType_ALLOCATION_TRADE_QTY = cvar.PosType_ALLOCATION_TRADE_QTY
PosType_ADJUSTMENT_QTY = cvar.PosType_ADJUSTMENT_QTY
PosType_AS_OF_TRADE_QTY = cvar.PosType_AS_OF_TRADE_QTY
PosType_DELIVERY_QTY = cvar.PosType_DELIVERY_QTY
PosType_TOTAL_TRANSACTION_QTY = cvar.PosType_TOTAL_TRANSACTION_QTY
PosType_CROSS_MARGIN_QTY = cvar.PosType_CROSS_MARGIN_QTY
PosType_INTEGRAL_SPLIT = cvar.PosType_INTEGRAL_SPLIT
PosType_RECEIVE_QUANTITY = cvar.PosType_RECEIVE_QUANTITY
PosType_CORPORATE_ACTION_ADJUSTMENT = cvar.PosType_CORPORATE_ACTION_ADJUSTMENT
PosType_DELIVERY_NOTICE_QTY = cvar.PosType_DELIVERY_NOTICE_QTY
PosType_EXCHANGE_FOR_PHYSICAL_QTY = cvar.PosType_EXCHANGE_FOR_PHYSICAL_QTY
PosType_PRIVATELY_NEGOTIATED_TRADE_QTY = cvar.PosType_PRIVATELY_NEGOTIATED_TRADE_QTY
PosType_NET_DELTA_QTY = cvar.PosType_NET_DELTA_QTY
PosType_CREDIT_EVENT_ADJUSTMENT = cvar.PosType_CREDIT_EVENT_ADJUSTMENT
PosType_SUCCESSION_EVENT_ADJUSTMENT = cvar.PosType_SUCCESSION_EVENT_ADJUSTMENT
PosQtyStatus_SUBMITTED = cvar.PosQtyStatus_SUBMITTED
PosQtyStatus_ACCEPTED = cvar.PosQtyStatus_ACCEPTED
PosQtyStatus_REJECTED = cvar.PosQtyStatus_REJECTED
PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT
PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT
PosAmtType_TRADE_VARIATION_AMOUNT = cvar.PosAmtType_TRADE_VARIATION_AMOUNT
PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT
PosAmtType_PREMIUM_AMOUNT = cvar.PosAmtType_PREMIUM_AMOUNT
PosAmtType_CASH_RESIDUAL_AMOUNT = cvar.PosAmtType_CASH_RESIDUAL_AMOUNT
PosAmtType_CASH_AMOUNT = cvar.PosAmtType_CASH_AMOUNT
PosAmtType_VALUE_ADJUSTED_AMOUNT = cvar.PosAmtType_VALUE_ADJUSTED_AMOUNT
PosAmtType_SETTLEMENT_VALUE = cvar.PosAmtType_SETTLEMENT_VALUE
PosAmtType_INITIAL_TRADE_COUPON_AMOUNT = cvar.PosAmtType_INITIAL_TRADE_COUPON_AMOUNT
PosAmtType_ACCRUED_COUPON_AMOUNT = cvar.PosAmtType_ACCRUED_COUPON_AMOUNT
PosAmtType_COUPON_AMOUNT = cvar.PosAmtType_COUPON_AMOUNT
PosAmtType_INCREMENTAL_ACCRUED_COUPON = cvar.PosAmtType_INCREMENTAL_ACCRUED_COUPON
PosAmtType_COLLATERALIZED_MARK_TO_MARKET = cvar.PosAmtType_COLLATERALIZED_MARK_TO_MARKET
PosAmtType_INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET = cvar.PosAmtType_INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET
PosAmtType_COMPENSATION_AMOUNT = cvar.PosAmtType_COMPENSATION_AMOUNT
PosAmtType_TOTAL_BANKED_AMOUNT = cvar.PosAmtType_TOTAL_BANKED_AMOUNT
PosAmtType_TOTAL_COLLATERALIZED_AMOUNT = cvar.PosAmtType_TOTAL_COLLATERALIZED_AMOUNT
PosTransType_EXERCISE = cvar.PosTransType_EXERCISE
PosTransType_DO_NOT_EXERCISE = cvar.PosTransType_DO_NOT_EXERCISE
PosTransType_POSITION_ADJUSTMENT = cvar.PosTransType_POSITION_ADJUSTMENT
PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION = cvar.PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION
PosTransType_PLEDGE = cvar.PosTransType_PLEDGE
PosTransType_LARGE_TRADER_SUBMISSION = cvar.PosTransType_LARGE_TRADER_SUBMISSION
PosMaintAction_NEW_USED_TO_INCREMENT_THE_OVERALL_TRANSACTION_QUANTITY = cvar.PosMaintAction_NEW_USED_TO_INCREMENT_THE_OVERALL_TRANSACTION_QUANTITY
PosMaintAction_REPLACE_USED_TO_OVERRIDE_THE_OVERALL_TRANSACTION_QUANTITY_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_THE_REFERENCE_ID = cvar.PosMaintAction_REPLACE_USED_TO_OVERRIDE_THE_OVERALL_TRANSACTION_QUANTITY_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_THE_REFERENCE_ID
PosMaintAction_CANCEL_USED_TO_REMOVE_THE_OVERALL_TRANSACTION_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_REFERENCE_ID = cvar.PosMaintAction_CANCEL_USED_TO_REMOVE_THE_OVERALL_TRANSACTION_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_REFERENCE_ID
PosMaintAction_NEW = cvar.PosMaintAction_NEW
PosMaintAction_REPLACE = cvar.PosMaintAction_REPLACE
PosMaintAction_CANCEL = cvar.PosMaintAction_CANCEL
PosMaintAction_REVERSE = cvar.PosMaintAction_REVERSE
SettlSessID_INTRADAY = cvar.SettlSessID_INTRADAY
SettlSessID_REGULAR_TRADING_HOURS = cvar.SettlSessID_REGULAR_TRADING_HOURS
SettlSessID_ELECTRONIC_TRADING_HOURS = cvar.SettlSessID_ELECTRONIC_TRADING_HOURS
SettlSessID_END_OF_DAY = cvar.SettlSessID_END_OF_DAY
AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION = cvar.AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION
AdjustmentType_DELTA_PLUS = cvar.AdjustmentType_DELTA_PLUS
AdjustmentType_DELTA_MINUS = cvar.AdjustmentType_DELTA_MINUS
AdjustmentType_FINAL = cvar.AdjustmentType_FINAL
PosMaintStatus_ACCEPTED = cvar.PosMaintStatus_ACCEPTED
PosMaintStatus_ACCEPTED_WITH_WARNINGS = cvar.PosMaintStatus_ACCEPTED_WITH_WARNINGS
PosMaintStatus_REJECTED = cvar.PosMaintStatus_REJECTED
PosMaintStatus_COMPLETED = cvar.PosMaintStatus_COMPLETED
PosMaintStatus_COMPLETED_WITH_WARNINGS = cvar.PosMaintStatus_COMPLETED_WITH_WARNINGS
PosMaintResult_SUCCESSFUL_COMPLETION = cvar.PosMaintResult_SUCCESSFUL_COMPLETION
PosMaintResult_REJECTED = cvar.PosMaintResult_REJECTED
PosMaintResult_OTHER = cvar.PosMaintResult_OTHER
PosReqType_POSITIONS = cvar.PosReqType_POSITIONS
PosReqType_TRADES = cvar.PosReqType_TRADES
PosReqType_EXERCISES = cvar.PosReqType_EXERCISES
PosReqType_ASSIGNMENTS = cvar.PosReqType_ASSIGNMENTS
PosReqType_SETTLEMENT_ACTIVITY = cvar.PosReqType_SETTLEMENT_ACTIVITY
PosReqType_BACKOUT_MESSAGE = cvar.PosReqType_BACKOUT_MESSAGE
PosReqType_DELTA_POSITIONS = cvar.PosReqType_DELTA_POSITIONS
ResponseTransportType_INBAND_TRANSPORT_THE_REQUEST_WAS_SENT_OVER = cvar.ResponseTransportType_INBAND_TRANSPORT_THE_REQUEST_WAS_SENT_OVER
ResponseTransportType_OUT_OF_BAND_PRE_ARRANGED_OUT_OF_BAND_DELIVERY_MECHANISM = cvar.ResponseTransportType_OUT_OF_BAND_PRE_ARRANGED_OUT_OF_BAND_DELIVERY_MECHANISM
ResponseTransportType_INBAND = cvar.ResponseTransportType_INBAND
ResponseTransportType_OUT_OF_BAND = cvar.ResponseTransportType_OUT_OF_BAND
PosReqResult_VALID_REQUEST = cvar.PosReqResult_VALID_REQUEST
PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST = cvar.PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST
PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA = cvar.PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA
PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS = cvar.PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS
PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED = cvar.PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED
PosReqResult_OTHER = cvar.PosReqResult_OTHER
PosReqStatus_COMPLETED = cvar.PosReqStatus_COMPLETED
PosReqStatus_COMPLETED_WITH_WARNINGS = cvar.PosReqStatus_COMPLETED_WITH_WARNINGS
PosReqStatus_REJECTED = cvar.PosReqStatus_REJECTED
SettlPriceType_FINAL = cvar.SettlPriceType_FINAL
SettlPriceType_THEORETICAL = cvar.SettlPriceType_THEORETICAL
AssignmentMethod_RANDOM = cvar.AssignmentMethod_RANDOM
AssignmentMethod_PRORATA = cvar.AssignmentMethod_PRORATA
AssignmentMethod_PRO_RATA = cvar.AssignmentMethod_PRO_RATA
ExerciseMethod_AUTOMATIC = cvar.ExerciseMethod_AUTOMATIC
ExerciseMethod_MANUAL = cvar.ExerciseMethod_MANUAL
TradeRequestResult_SUCCESSFUL = cvar.TradeRequestResult_SUCCESSFUL
TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT = cvar.TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT
TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED = cvar.TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED
TradeRequestResult_INVALID_PARTIES = cvar.TradeRequestResult_INVALID_PARTIES
TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED = cvar.TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED
TradeRequestResult_INVALID_DESTINATION_REQUESTED = cvar.TradeRequestResult_INVALID_DESTINATION_REQUESTED
TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED = cvar.TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED
TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST = cvar.TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST
TradeRequestResult_OTHER = cvar.TradeRequestResult_OTHER
TradeRequestResult_UNAUTHORIZED_ROR_TRADE_CAPTURE_REPORT_REQUEST = cvar.TradeRequestResult_UNAUTHORIZED_ROR_TRADE_CAPTURE_REPORT_REQUEST
TradeRequestResult_NOT_AUTHORIZED = cvar.TradeRequestResult_NOT_AUTHORIZED
TradeRequestStatus_ACCEPTED = cvar.TradeRequestStatus_ACCEPTED
TradeRequestStatus_COMPLETED = cvar.TradeRequestStatus_COMPLETED
TradeRequestStatus_REJECTED = cvar.TradeRequestStatus_REJECTED
TradeReportRejectReason_SUCCESSFUL = cvar.TradeReportRejectReason_SUCCESSFUL
TradeReportRejectReason_INVALID_PARTY_INFORMATION = cvar.TradeReportRejectReason_INVALID_PARTY_INFORMATION
TradeReportRejectReason_UNKNOWN_INSTRUMENT = cvar.TradeReportRejectReason_UNKNOWN_INSTRUMENT
TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES = cvar.TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES
TradeReportRejectReason_INVALID_TRADE_TYPE = cvar.TradeReportRejectReason_INVALID_TRADE_TYPE
TradeReportRejectReason_OTHER = cvar.TradeReportRejectReason_OTHER
TradeReportRejectReason_INVALID_PARTY_ONFORMATION = cvar.TradeReportRejectReason_INVALID_PARTY_ONFORMATION
SideMultiLegReportingType_SINGLE_SECURITY = cvar.SideMultiLegReportingType_SINGLE_SECURITY
SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = cvar.SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY
SideMultiLegReportingType_MULTI_LEG_SECURITY = cvar.SideMultiLegReportingType_MULTI_LEG_SECURITY
SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY = cvar.SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY
SideMultiLegReportingType_MULTILEG_SECURITY = cvar.SideMultiLegReportingType_MULTILEG_SECURITY
TrdRegTimestampType_EXECUTION_TIME = cvar.TrdRegTimestampType_EXECUTION_TIME
TrdRegTimestampType_TIME_IN = cvar.TrdRegTimestampType_TIME_IN
TrdRegTimestampType_TIME_OUT = cvar.TrdRegTimestampType_TIME_OUT
TrdRegTimestampType_BROKER_RECEIPT = cvar.TrdRegTimestampType_BROKER_RECEIPT
TrdRegTimestampType_BROKER_EXECUTION = cvar.TrdRegTimestampType_BROKER_EXECUTION
TrdRegTimestampType_DESK_RECEIPT = cvar.TrdRegTimestampType_DESK_RECEIPT
TrdRegTimestampType_SUBMISSION_TO_CLEARING = cvar.TrdRegTimestampType_SUBMISSION_TO_CLEARING
ConfirmType_STATUS = cvar.ConfirmType_STATUS
ConfirmType_CONFIRMATION = cvar.ConfirmType_CONFIRMATION
ConfirmType_CONFIRMATION_REQUEST_REJECTED = cvar.ConfirmType_CONFIRMATION_REQUEST_REJECTED
ConfirmRejReason_MISMATCHED_ACCOUNT = cvar.ConfirmRejReason_MISMATCHED_ACCOUNT
ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS = cvar.ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS
ConfirmRejReason_OTHER = cvar.ConfirmRejReason_OTHER
BookingType_REGULAR_BOOKING = cvar.BookingType_REGULAR_BOOKING
BookingType_CFD = cvar.BookingType_CFD
BookingType_TOTAL_RETURN_SWAP = cvar.BookingType_TOTAL_RETURN_SWAP
AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS = cvar.AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS
AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED = cvar.AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED
AllocSettlInstType_FULL_DETAILS_PROVIDED = cvar.AllocSettlInstType_FULL_DETAILS_PROVIDED
AllocSettlInstType_SSI_DB_IDS_PROVIDED = cvar.AllocSettlInstType_SSI_DB_IDS_PROVIDED
AllocSettlInstType_PHONE_FOR_INSTRUCTIONS = cvar.AllocSettlInstType_PHONE_FOR_INSTRUCTIONS
DlvyInstType_SECURITIES = cvar.DlvyInstType_SECURITIES
DlvyInstType_CASH = cvar.DlvyInstType_CASH
TerminationType_OVERNIGHT = cvar.TerminationType_OVERNIGHT
TerminationType_TERM = cvar.TerminationType_TERM
TerminationType_FLEXIBLE = cvar.TerminationType_FLEXIBLE
TerminationType_OPEN = cvar.TerminationType_OPEN
SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST = cvar.SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST
SettlInstReqRejCode_UNKNOWN_ACCOUNT = cvar.SettlInstReqRejCode_UNKNOWN_ACCOUNT
SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND = cvar.SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND
SettlInstReqRejCode_OTHER = cvar.SettlInstReqRejCode_OTHER
AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY = cvar.AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY
AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY = cvar.AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY
AllocReportType_WAREHOUSE_RECAP = cvar.AllocReportType_WAREHOUSE_RECAP
AllocReportType_REQUEST_TO_INTERMEDIARY = cvar.AllocReportType_REQUEST_TO_INTERMEDIARY
AllocReportType_PRELIMINARY_REQUEST_TO_INTERMEDIARY = cvar.AllocReportType_PRELIMINARY_REQUEST_TO_INTERMEDIARY
AllocReportType_ACCEPT = cvar.AllocReportType_ACCEPT
AllocReportType_REJECT = cvar.AllocReportType_REJECT
AllocReportType_ACCEPT_PENDING = cvar.AllocReportType_ACCEPT_PENDING
AllocReportType_COMPLETE = cvar.AllocReportType_COMPLETE
AllocReportType_REVERSE_PENDING = cvar.AllocReportType_REVERSE_PENDING
AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT = cvar.AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT
AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS = cvar.AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS
AllocCancReplaceReason_OTHER = cvar.AllocCancReplaceReason_OTHER
AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS
AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS
AllocAccountType_HOUSE_TRADER = cvar.AllocAccountType_HOUSE_TRADER
AllocAccountType_FLOOR_TRADER = cvar.AllocAccountType_FLOOR_TRADER
AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED
AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = cvar.AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED
AllocAccountType_JOINT_BACKOFFICE_ACCOUNT = cvar.AllocAccountType_JOINT_BACKOFFICE_ACCOUNT
AllocAccountType_ACCOUNT_IS_CARRIED_PN_CUSTOMER_SIDE_OF_BOOKS = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_PN_CUSTOMER_SIDE_OF_BOOKS
AllocAccountType_JOINT_BACK_OFFICE_ACCOUNT = cvar.AllocAccountType_JOINT_BACK_OFFICE_ACCOUNT
PartySubIDType_FIRM = cvar.PartySubIDType_FIRM
PartySubIDType_PERSON = cvar.PartySubIDType_PERSON
PartySubIDType_SYSTEM = cvar.PartySubIDType_SYSTEM
PartySubIDType_APPLICATION = cvar.PartySubIDType_APPLICATION
PartySubIDType_FULL_LEGAL_NAME_OF_FIRM = cvar.PartySubIDType_FULL_LEGAL_NAME_OF_FIRM
PartySubIDType_POSTAL_ADDRESS = cvar.PartySubIDType_POSTAL_ADDRESS
PartySubIDType_PHONE_NUMBER = cvar.PartySubIDType_PHONE_NUMBER
PartySubIDType_EMAIL_ADDRESS = cvar.PartySubIDType_EMAIL_ADDRESS
PartySubIDType_CONTACT_NAME = cvar.PartySubIDType_CONTACT_NAME
PartySubIDType_SECURITIES_ACCOUNT_NUMBER = cvar.PartySubIDType_SECURITIES_ACCOUNT_NUMBER
PartySubIDType_REGISTRATION_NUMBER = cvar.PartySubIDType_REGISTRATION_NUMBER
PartySubIDType_REGISTERED_ADDRESS_12 = cvar.PartySubIDType_REGISTERED_ADDRESS_12
PartySubIDType_REGULATORY_STATUS = cvar.PartySubIDType_REGULATORY_STATUS
PartySubIDType_REGISTRATION_NAME = cvar.PartySubIDType_REGISTRATION_NAME
PartySubIDType_CASH_ACCOUNT_NUMBER = cvar.PartySubIDType_CASH_ACCOUNT_NUMBER
PartySubIDType_BIC = cvar.PartySubIDType_BIC
PartySubIDType_CSD_PARTICIPANT_MEMBER_CODE = cvar.PartySubIDType_CSD_PARTICIPANT_MEMBER_CODE
PartySubIDType_REGISTERED_ADDRESS_18 = cvar.PartySubIDType_REGISTERED_ADDRESS_18
PartySubIDType_FUND_ACCOUNT_NAME = cvar.PartySubIDType_FUND_ACCOUNT_NAME
PartySubIDType_TELEX_NUMBER = cvar.PartySubIDType_TELEX_NUMBER
PartySubIDType_FAX_NUMBER = cvar.PartySubIDType_FAX_NUMBER
PartySubIDType_SECURITIES_ACCOUNT_NAME = cvar.PartySubIDType_SECURITIES_ACCOUNT_NAME
PartySubIDType_CASH_ACCOUNT_NAME = cvar.PartySubIDType_CASH_ACCOUNT_NAME
PartySubIDType_DEPARTMENT = cvar.PartySubIDType_DEPARTMENT
PartySubIDType_LOCATION = cvar.PartySubIDType_LOCATION
PartySubIDType_POSITION_ACCOUNT_TYPE = cvar.PartySubIDType_POSITION_ACCOUNT_TYPE
PartySubIDType_LOCATION_DESK = cvar.PartySubIDType_LOCATION_DESK
PartySubIDType_SECURITY_LOCATE_ID = cvar.PartySubIDType_SECURITY_LOCATE_ID
PartySubIDType_MARKET_MAKER = cvar.PartySubIDType_MARKET_MAKER
PartySubIDType_ELIGIBLE_COUNTERPARTY = cvar.PartySubIDType_ELIGIBLE_COUNTERPARTY
PartySubIDType_PROFESSIONAL_CLIENT = cvar.PartySubIDType_PROFESSIONAL_CLIENT
PartySubIDType_EXECUTION_VENUE = cvar.PartySubIDType_EXECUTION_VENUE
PartySubIDType_CURRENCY_DELIVERY_IDENTIFIER = cvar.PartySubIDType_CURRENCY_DELIVERY_IDENTIFIER
AllocIntermedReqType_PENDING_ACCEPT = cvar.AllocIntermedReqType_PENDING_ACCEPT
AllocIntermedReqType_PENDING_RELEASE = cvar.AllocIntermedReqType_PENDING_RELEASE
AllocIntermedReqType_PENDING_REVERSAL = cvar.AllocIntermedReqType_PENDING_REVERSAL
AllocIntermedReqType_ACCEPT = cvar.AllocIntermedReqType_ACCEPT
AllocIntermedReqType_BLOCK_LEVEL_REJECT = cvar.AllocIntermedReqType_BLOCK_LEVEL_REJECT
AllocIntermedReqType_ACCOUNT_LEVEL_REJECT = cvar.AllocIntermedReqType_ACCOUNT_LEVEL_REJECT
ApplQueueResolution_NO_ACTION_TAKEN = cvar.ApplQueueResolution_NO_ACTION_TAKEN
ApplQueueResolution_QUEUE_FLUSHED = cvar.ApplQueueResolution_QUEUE_FLUSHED
ApplQueueResolution_OVERLAY_LAST = cvar.ApplQueueResolution_OVERLAY_LAST
ApplQueueResolution_END_SESSION = cvar.ApplQueueResolution_END_SESSION
ApplQueueAction_NO_ACTION_TAKEN = cvar.ApplQueueAction_NO_ACTION_TAKEN
ApplQueueAction_QUEUE_FLUSHED = cvar.ApplQueueAction_QUEUE_FLUSHED
ApplQueueAction_OVERLAY_LAST = cvar.ApplQueueAction_OVERLAY_LAST
ApplQueueAction_END_SESSION = cvar.ApplQueueAction_END_SESSION
AvgPxIndicator_NO_AVERAGE_PRICING = cvar.AvgPxIndicator_NO_AVERAGE_PRICING
AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = cvar.AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID
AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = cvar.AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID
AvgPxIndicator_LAST_TRADE_IS_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = cvar.AvgPxIndicator_LAST_TRADE_IS_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID
TradeAllocIndicator_ALLOCATION_NOT_REQUIRED = cvar.TradeAllocIndicator_ALLOCATION_NOT_REQUIRED
TradeAllocIndicator_ALLOCATION_REQUIRED = cvar.TradeAllocIndicator_ALLOCATION_REQUIRED
TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE = cvar.TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE
TradeAllocIndicator_ALLOCATION_GIVE_UP_EXECUTOR = cvar.TradeAllocIndicator_ALLOCATION_GIVE_UP_EXECUTOR
TradeAllocIndicator_ALLOCATION_FROM_EXECUTOR = cvar.TradeAllocIndicator_ALLOCATION_FROM_EXECUTOR
TradeAllocIndicator_ALLOCATION_TO_CLAIM_ACCOUNT = cvar.TradeAllocIndicator_ALLOCATION_TO_CLAIM_ACCOUNT
ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE = cvar.ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE
ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN = cvar.ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN
ExpirationCycle_TRADING_ELIGIBILITY_EXPIRATION_SPECIFIED_IN_THE_DATE_AND_TIME_FIELDS_EVENTDATE = cvar.ExpirationCycle_TRADING_ELIGIBILITY_EXPIRATION_SPECIFIED_IN_THE_DATE_AND_TIME_FIELDS_EVENTDATE
TrdType_REGULAR_TRADE = cvar.TrdType_REGULAR_TRADE
TrdType_BLOCK_TRADE = cvar.TrdType_BLOCK_TRADE
TrdType_EFP = cvar.TrdType_EFP
TrdType_TRANSFER = cvar.TrdType_TRANSFER
TrdType_LATE_TRADE = cvar.TrdType_LATE_TRADE
TrdType_T_TRADE = cvar.TrdType_T_TRADE
TrdType_WEIGHTED_AVERAGE_PRICE_TRADE = cvar.TrdType_WEIGHTED_AVERAGE_PRICE_TRADE
TrdType_BUNCHED_TRADE = cvar.TrdType_BUNCHED_TRADE
TrdType_LATE_BUNCHED_TRADE = cvar.TrdType_LATE_BUNCHED_TRADE
TrdType_PRIOR_REFERENCE_PRICE_TRADE = cvar.TrdType_PRIOR_REFERENCE_PRICE_TRADE
TrdType_AFTER_HOURS_TRADE = cvar.TrdType_AFTER_HOURS_TRADE
TrdType_BLOCK_TRADE_1 = cvar.TrdType_BLOCK_TRADE_1
TrdType_EXCHANGE_FOR_RISK = cvar.TrdType_EXCHANGE_FOR_RISK
TrdType_EXCHANGE_FOR_SWAP = cvar.TrdType_EXCHANGE_FOR_SWAP
TrdType_EXCHANGE_OF_FUTURES_FOR = cvar.TrdType_EXCHANGE_OF_FUTURES_FOR
TrdType_EXCHANGE_OF_OPTIONS_FOR_OPTIONS = cvar.TrdType_EXCHANGE_OF_OPTIONS_FOR_OPTIONS
TrdType_TRADING_AT_SETTLEMENT = cvar.TrdType_TRADING_AT_SETTLEMENT
TrdType_ALL_OR_NONE = cvar.TrdType_ALL_OR_NONE
TrdType_FUTURES_LARGE_ORDER_EXECUTION = cvar.TrdType_FUTURES_LARGE_ORDER_EXECUTION
TrdType_EXCHANGE_OF_FUTURES_FOR_FUTURES = cvar.TrdType_EXCHANGE_OF_FUTURES_FOR_FUTURES
TrdType_OPTION_INTERIM_TRADE = cvar.TrdType_OPTION_INTERIM_TRADE
TrdType_OPTION_CABINET_TRADE = cvar.TrdType_OPTION_CABINET_TRADE
TrdType_PRIVATELY_NEGOTIATED_TRADES = cvar.TrdType_PRIVATELY_NEGOTIATED_TRADES
TrdType_SUBSTITUTION_OF_FUTURES_FOR_FORWARDS = cvar.TrdType_SUBSTITUTION_OF_FUTURES_FOR_FORWARDS
TrdType_ERROR_TRADE = cvar.TrdType_ERROR_TRADE
TrdType_SPECIAL_CUM_DIVIDEND = cvar.TrdType_SPECIAL_CUM_DIVIDEND
TrdType_SPECIAL_EX_DIVIDEND = cvar.TrdType_SPECIAL_EX_DIVIDEND
TrdType_SPECIAL_CUM_COUPON = cvar.TrdType_SPECIAL_CUM_COUPON
TrdType_SPECIAL_EX_COUPON = cvar.TrdType_SPECIAL_EX_COUPON
TrdType_CASH_SETTLEMENT = cvar.TrdType_CASH_SETTLEMENT
TrdType_SPECIAL_PRICE = cvar.TrdType_SPECIAL_PRICE
TrdType_GUARANTEED_DELIVERY = cvar.TrdType_GUARANTEED_DELIVERY
TrdType_SPECIAL_CUM_RIGHTS = cvar.TrdType_SPECIAL_CUM_RIGHTS
TrdType_SPECIAL_EX_RIGHTS = cvar.TrdType_SPECIAL_EX_RIGHTS
TrdType_SPECIAL_CUM_CAPITAL_REPAYMENTS = cvar.TrdType_SPECIAL_CUM_CAPITAL_REPAYMENTS
TrdType_SPECIAL_EX_CAPITAL_REPAYMENTS = cvar.TrdType_SPECIAL_EX_CAPITAL_REPAYMENTS
TrdType_SPECIAL_CUM_BONUS = cvar.TrdType_SPECIAL_CUM_BONUS
TrdType_SPECIAL_EX_BONUS = cvar.TrdType_SPECIAL_EX_BONUS
TrdType_BLOCK_TRADE_38 = cvar.TrdType_BLOCK_TRADE_38
TrdType_WORKED_PRINCIPAL_TRADE = cvar.TrdType_WORKED_PRINCIPAL_TRADE
TrdType_BLOCK_TRADES = cvar.TrdType_BLOCK_TRADES
TrdType_NAME_CHANGE = cvar.TrdType_NAME_CHANGE
TrdType_PORTFOLIO_TRANSFER = cvar.TrdType_PORTFOLIO_TRANSFER
TrdType_PROROGATION_BUY = cvar.TrdType_PROROGATION_BUY
TrdType_PROROGATION_SELL = cvar.TrdType_PROROGATION_SELL
TrdType_OPTION_EXERCISE = cvar.TrdType_OPTION_EXERCISE
TrdType_DELTA_NEUTRAL_TRANSACTION = cvar.TrdType_DELTA_NEUTRAL_TRANSACTION
TrdType_FINANCING_TRANSACTION = cvar.TrdType_FINANCING_TRANSACTION
TrdType_NON_STANDARD_SETTLEMENT = cvar.TrdType_NON_STANDARD_SETTLEMENT
TrdType_DERIVATIVE_RELATED_TRANSACTION = cvar.TrdType_DERIVATIVE_RELATED_TRANSACTION
TrdType_PORTFOLIO_TRADE = cvar.TrdType_PORTFOLIO_TRADE
TrdType_VOLUME_WEIGHTED_AVERAGE_TRADE = cvar.TrdType_VOLUME_WEIGHTED_AVERAGE_TRADE
TrdType_EXCHANGE_GRANTED_TRADE = cvar.TrdType_EXCHANGE_GRANTED_TRADE
TrdType_REPURCHASE_AGREEMENT = cvar.TrdType_REPURCHASE_AGREEMENT
TrdType_OTC = cvar.TrdType_OTC
TrdType_EXCHANGE_BASIS_FACILITY = cvar.TrdType_EXCHANGE_BASIS_FACILITY
TrdSubType_CMTA = cvar.TrdSubType_CMTA
TrdSubType_INTERNAL_TRANSFER_OR_ADJUSTMENT = cvar.TrdSubType_INTERNAL_TRANSFER_OR_ADJUSTMENT
TrdSubType_EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT = cvar.TrdSubType_EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT
TrdSubType_REJECT_FOR_SUBMITTING_SIDE = cvar.TrdSubType_REJECT_FOR_SUBMITTING_SIDE
TrdSubType_ADVISORY_FOR_CONTRA_SIDE = cvar.TrdSubType_ADVISORY_FOR_CONTRA_SIDE
TrdSubType_OFFSET_DUE_TO_AN_ALLOCATION = cvar.TrdSubType_OFFSET_DUE_TO_AN_ALLOCATION
TrdSubType_ONSET_DUT_TO_AN_ALLOCATION = cvar.TrdSubType_ONSET_DUT_TO_AN_ALLOCATION
TrdSubType_DIFFERENTIAL_SPREAD = cvar.TrdSubType_DIFFERENTIAL_SPREAD
TrdSubType_IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT = cvar.TrdSubType_IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT
TrdSubType_TRANSACTION_FROM_EXERCISE = cvar.TrdSubType_TRANSACTION_FROM_EXERCISE
TrdSubType_TRANSACTION_FROM_ASSIGNMENT = cvar.TrdSubType_TRANSACTION_FROM_ASSIGNMENT
TrdSubType_ACATS = cvar.TrdSubType_ACATS
TrdSubType_AI = cvar.TrdSubType_AI
TrdSubType_B = cvar.TrdSubType_B
TrdSubType_K = cvar.TrdSubType_K
TrdSubType_LC = cvar.TrdSubType_LC
TrdSubType_M = cvar.TrdSubType_M
TrdSubType_N = cvar.TrdSubType_N
TrdSubType_NM = cvar.TrdSubType_NM
TrdSubType_NR = cvar.TrdSubType_NR
TrdSubType_P = cvar.TrdSubType_P
TrdSubType_PA = cvar.TrdSubType_PA
TrdSubType_PC = cvar.TrdSubType_PC
TrdSubType_PN = cvar.TrdSubType_PN
TrdSubType_R = cvar.TrdSubType_R
TrdSubType_RO = cvar.TrdSubType_RO
TrdSubType_RT = cvar.TrdSubType_RT
TrdSubType_SW = cvar.TrdSubType_SW
TrdSubType_T = cvar.TrdSubType_T
TrdSubType_WN = cvar.TrdSubType_WN
TrdSubType_WT = cvar.TrdSubType_WT
TrdSubType_OFF_HOURS_TRADE = cvar.TrdSubType_OFF_HOURS_TRADE
TrdSubType_ON_HOURS_TRADE = cvar.TrdSubType_ON_HOURS_TRADE
TrdSubType_OTC_QUOTE = cvar.TrdSubType_OTC_QUOTE
TrdSubType_CONVERTED_SWAP = cvar.TrdSubType_CONVERTED_SWAP
TrdSubType_CROSSED_TRADE = cvar.TrdSubType_CROSSED_TRADE
TrdSubType_INTERIM_PROTECTED_TRADE = cvar.TrdSubType_INTERIM_PROTECTED_TRADE
TrdSubType_LARGE_IN_SCALE = cvar.TrdSubType_LARGE_IN_SCALE
TrdSubType_ONSET_DUE_TO_AN_ALLOCATION = cvar.TrdSubType_ONSET_DUE_TO_AN_ALLOCATION
PegMoveType_FLOATING = cvar.PegMoveType_FLOATING
PegMoveType_FIXED = cvar.PegMoveType_FIXED
PegOffsetType_PRICE = cvar.PegOffsetType_PRICE
PegOffsetType_BASIS_POINTS = cvar.PegOffsetType_BASIS_POINTS
PegOffsetType_TICKS = cvar.PegOffsetType_TICKS
PegOffsetType_PRICE_TIER = cvar.PegOffsetType_PRICE_TIER
PegLimitType_OR_BETTER = cvar.PegLimitType_OR_BETTER
PegLimitType_STRICT_LIMIT_IS_A_STRICT_LIMIT = cvar.PegLimitType_STRICT_LIMIT_IS_A_STRICT_LIMIT
PegLimitType_OR_WORSE_FOR_A_BUY_THE_PEG_LIMIT_IS_A_MINIMUM_AND_FOR_A_SELL_THE_PEG_LIMIT_IS_A_MAXIMUM = cvar.PegLimitType_OR_WORSE_FOR_A_BUY_THE_PEG_LIMIT_IS_A_MINIMUM_AND_FOR_A_SELL_THE_PEG_LIMIT_IS_A_MAXIMUM
PegLimitType_STRICT = cvar.PegLimitType_STRICT
PegLimitType_OR_WORSE = cvar.PegLimitType_OR_WORSE
PegRoundDirection_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK = cvar.PegRoundDirection_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK
PegRoundDirection_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK = cvar.PegRoundDirection_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK
PegRoundDirection_MORE_AGGRESSIVE = cvar.PegRoundDirection_MORE_AGGRESSIVE
PegRoundDirection_MORE_PASSIVE = cvar.PegRoundDirection_MORE_PASSIVE
PegScope_LOCAL = cvar.PegScope_LOCAL
PegScope_NATIONAL = cvar.PegScope_NATIONAL
PegScope_GLOBAL = cvar.PegScope_GLOBAL
PegScope_NATIONAL_EXCLUDING_LOCAL = cvar.PegScope_NATIONAL_EXCLUDING_LOCAL
PegScope_NATIONAL_XXCLUDING_LOCAL = cvar.PegScope_NATIONAL_XXCLUDING_LOCAL
DiscretionMoveType_FLOATING = cvar.DiscretionMoveType_FLOATING
DiscretionMoveType_FIXED = cvar.DiscretionMoveType_FIXED
DiscretionOffsetType_PRICE = cvar.DiscretionOffsetType_PRICE
DiscretionOffsetType_BASIS_POINTS = cvar.DiscretionOffsetType_BASIS_POINTS
DiscretionOffsetType_TICKS = cvar.DiscretionOffsetType_TICKS
DiscretionOffsetType_PRICE_TIER = cvar.DiscretionOffsetType_PRICE_TIER
DiscretionLimitType_OR_BETTER = cvar.DiscretionLimitType_OR_BETTER
DiscretionLimitType_STRICT_LIMIT_IS_A_STRICT_LIMIT = cvar.DiscretionLimitType_STRICT_LIMIT_IS_A_STRICT_LIMIT
DiscretionLimitType_OR_WORSE_FOR_A_BUY_THE_DISCRETION_PRICE_IS_A_MINIMUM_AND_FOR_A_SELL_THE_DISCRETION_PRICE_IS_A_MAXIMUM = cvar.DiscretionLimitType_OR_WORSE_FOR_A_BUY_THE_DISCRETION_PRICE_IS_A_MINIMUM_AND_FOR_A_SELL_THE_DISCRETION_PRICE_IS_A_MAXIMUM
DiscretionLimitType_STRICT = cvar.DiscretionLimitType_STRICT
DiscretionLimitType_OR_WORSE = cvar.DiscretionLimitType_OR_WORSE
DiscretionRoundDirection_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK = cvar.DiscretionRoundDirection_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK
DiscretionRoundDirection_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK = cvar.DiscretionRoundDirection_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK
DiscretionRoundDirection_MORE_AGGRESSIVE = cvar.DiscretionRoundDirection_MORE_AGGRESSIVE
DiscretionRoundDirection_MORE_PASSIVE = cvar.DiscretionRoundDirection_MORE_PASSIVE
DiscretionScope_LOCAL = cvar.DiscretionScope_LOCAL
DiscretionScope_NATIONAL = cvar.DiscretionScope_NATIONAL
DiscretionScope_GLOBAL = cvar.DiscretionScope_GLOBAL
DiscretionScope_NATIONAL_EXCLUDING_LOCAL = cvar.DiscretionScope_NATIONAL_EXCLUDING_LOCAL
TargetStrategy_VWAP = cvar.TargetStrategy_VWAP
TargetStrategy_PARTICIPATE = cvar.TargetStrategy_PARTICIPATE
TargetStrategy_MININIZE_MARKET_IMPACT = cvar.TargetStrategy_MININIZE_MARKET_IMPACT
LastLiquidityInd_ADDED_LIQUIDITY = cvar.LastLiquidityInd_ADDED_LIQUIDITY
LastLiquidityInd_REMOVED_LIQUIDITY = cvar.LastLiquidityInd_REMOVED_LIQUIDITY
LastLiquidityInd_LIQUIDITY_ROUTED_OUT = cvar.LastLiquidityInd_LIQUIDITY_ROUTED_OUT
LastLiquidityInd_AUCTION = cvar.LastLiquidityInd_AUCTION
PublishTrdIndicator_YES = cvar.PublishTrdIndicator_YES
PublishTrdIndicator_NO = cvar.PublishTrdIndicator_NO
ShortSaleReason_DEALER_SOLD_SHORT = cvar.ShortSaleReason_DEALER_SOLD_SHORT
ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT
ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT = cvar.ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT
ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT
ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE = cvar.ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE
ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT
ShortSaleReason_QUALIFIED_SERVICE_REPRESENTATIVE = cvar.ShortSaleReason_QUALIFIED_SERVICE_REPRESENTATIVE
QtyType_UNITS = cvar.QtyType_UNITS
QtyType_CONTRACTS = cvar.QtyType_CONTRACTS
QtyType_UNITS_OF_MEASURE_PER_TIME_UNIT = cvar.QtyType_UNITS_OF_MEASURE_PER_TIME_UNIT
TradeReportType_SUBMIT = cvar.TradeReportType_SUBMIT
TradeReportType_ALLEGED = cvar.TradeReportType_ALLEGED
TradeReportType_ACCEPT = cvar.TradeReportType_ACCEPT
TradeReportType_DECLINE = cvar.TradeReportType_DECLINE
TradeReportType_ADDENDUM = cvar.TradeReportType_ADDENDUM
TradeReportType_NO_WAS = cvar.TradeReportType_NO_WAS
TradeReportType_TRADE_REPORT_CANCEL = cvar.TradeReportType_TRADE_REPORT_CANCEL
TradeReportType_LOCKED_IN_TRADE_BREAK = cvar.TradeReportType_LOCKED_IN_TRADE_BREAK
TradeReportType_ALLEGED_1 = cvar.TradeReportType_ALLEGED_1
TradeReportType_7 = cvar.TradeReportType_7
TradeReportType_DEFAULTED = cvar.TradeReportType_DEFAULTED
TradeReportType_INVALID_CMTA = cvar.TradeReportType_INVALID_CMTA
TradeReportType_PENDED = cvar.TradeReportType_PENDED
TradeReportType_ALLEGED_NEW = cvar.TradeReportType_ALLEGED_NEW
TradeReportType_ALLEGED_ADDENDUM = cvar.TradeReportType_ALLEGED_ADDENDUM
TradeReportType_ALLEGED_NO_WAS = cvar.TradeReportType_ALLEGED_NO_WAS
TradeReportType_ALLEGED_TRADE_REPORT_CANCEL = cvar.TradeReportType_ALLEGED_TRADE_REPORT_CANCEL
TradeReportType_ALLEGED_15 = cvar.TradeReportType_ALLEGED_15
AllocNoOrdersType_NOT_SPECIFIED = cvar.AllocNoOrdersType_NOT_SPECIFIED
AllocNoOrdersType_EXPLICIT_LIST_PROVIDED = cvar.AllocNoOrdersType_EXPLICIT_LIST_PROVIDED
EventType_PUT = cvar.EventType_PUT
EventType_CALL = cvar.EventType_CALL
EventType_TENDER = cvar.EventType_TENDER
EventType_SINKING_FUND_CALL = cvar.EventType_SINKING_FUND_CALL
EventType_OTHER = cvar.EventType_OTHER
EventType_ACTIVATION = cvar.EventType_ACTIVATION
EventType_INACTIVIATION = cvar.EventType_INACTIVIATION
EventType_LAST_ELIGIBLE_TRADE_DATE = cvar.EventType_LAST_ELIGIBLE_TRADE_DATE
EventType_SWAP_START_DATE = cvar.EventType_SWAP_START_DATE
EventType_SWAP_END_DATE = cvar.EventType_SWAP_END_DATE
EventType_SWAP_ROLL_DATE = cvar.EventType_SWAP_ROLL_DATE
EventType_SWAP_NEXT_START_DATE = cvar.EventType_SWAP_NEXT_START_DATE
EventType_SWAP_NEXT_ROLL_DATE = cvar.EventType_SWAP_NEXT_ROLL_DATE
EventType_FIRST_DELIVERY_DATE = cvar.EventType_FIRST_DELIVERY_DATE
EventType_LAST_DELIVERY_DATE = cvar.EventType_LAST_DELIVERY_DATE
EventType_INITIAL_INVENTORY_DUE_DATE = cvar.EventType_INITIAL_INVENTORY_DUE_DATE
EventType_FINAL_INVENTORY_DUE_DATE = cvar.EventType_FINAL_INVENTORY_DUE_DATE
EventType_FIRST_INTENT_DATE = cvar.EventType_FIRST_INTENT_DATE
EventType_LAST_INTENT_DATE = cvar.EventType_LAST_INTENT_DATE
EventType_POSITION_REMOVAL_DATE = cvar.EventType_POSITION_REMOVAL_DATE
InstrAttribType_FLAT = cvar.InstrAttribType_FLAT
InstrAttribType_ZERO_COUPON = cvar.InstrAttribType_ZERO_COUPON
InstrAttribType_INTEREST_BEARING = cvar.InstrAttribType_INTEREST_BEARING
InstrAttribType_NO_PERIODIC_PAYMENTS = cvar.InstrAttribType_NO_PERIODIC_PAYMENTS
InstrAttribType_VARIABLE_RATE = cvar.InstrAttribType_VARIABLE_RATE
InstrAttribType_LESS_FEE_FOR_PUT = cvar.InstrAttribType_LESS_FEE_FOR_PUT
InstrAttribType_STEPPED_COUPON = cvar.InstrAttribType_STEPPED_COUPON
InstrAttribType_COUPON_PERIOD = cvar.InstrAttribType_COUPON_PERIOD
InstrAttribType_WHEN_AND_IF_ISSUED = cvar.InstrAttribType_WHEN_AND_IF_ISSUED
InstrAttribType_ORIGINAL_ISSUE_DISCOUNT = cvar.InstrAttribType_ORIGINAL_ISSUE_DISCOUNT
InstrAttribType_CALLABLE_PUTTABLE = cvar.InstrAttribType_CALLABLE_PUTTABLE
InstrAttribType_ESCROWED_TO_MATURITY = cvar.InstrAttribType_ESCROWED_TO_MATURITY
InstrAttribType_ESCROWED_TO_REDEMPTION_DATE_CALLABLE_SUPPLY_REDEMPTION_DATE_IN_THE_INSTRATTRIBVALUE = cvar.InstrAttribType_ESCROWED_TO_REDEMPTION_DATE_CALLABLE_SUPPLY_REDEMPTION_DATE_IN_THE_INSTRATTRIBVALUE
InstrAttribType_PREREFUNDED = cvar.InstrAttribType_PREREFUNDED
InstrAttribType_IN_DEFAULT = cvar.InstrAttribType_IN_DEFAULT
InstrAttribType_UNRATED = cvar.InstrAttribType_UNRATED
InstrAttribType_TAXABLE = cvar.InstrAttribType_TAXABLE
InstrAttribType_INDEXED = cvar.InstrAttribType_INDEXED
InstrAttribType_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX = cvar.InstrAttribType_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX
InstrAttribType_ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVALUE = cvar.InstrAttribType_ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVALUE
InstrAttribType_CALLABLE_BELOW_MATURITY_VALUE = cvar.InstrAttribType_CALLABLE_BELOW_MATURITY_VALUE
InstrAttribType_CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED = cvar.InstrAttribType_CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED
InstrAttribType_TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTRATTRIBVALUE = cvar.InstrAttribType_TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTRATTRIBVALUE
InstrAttribType_ESCROWED_TO_REDEMPTION_DATE = cvar.InstrAttribType_ESCROWED_TO_REDEMPTION_DATE
InstrAttribType_PRE_REFUNDED = cvar.InstrAttribType_PRE_REFUNDED
InstrAttribType_PRICE_TICK_RULES_FOR_SECURITY = cvar.InstrAttribType_PRICE_TICK_RULES_FOR_SECURITY
InstrAttribType_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY = cvar.InstrAttribType_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY
InstrAttribType_INSTRUMENT_DENOMINATOR = cvar.InstrAttribType_INSTRUMENT_DENOMINATOR
InstrAttribType_INSTRUMENT_NUMERATOR = cvar.InstrAttribType_INSTRUMENT_NUMERATOR
InstrAttribType_INSTRUMENT_PRICE_PRECISION = cvar.InstrAttribType_INSTRUMENT_PRICE_PRECISION
InstrAttribType_INSTRUMENT_STRIKE_PRICE = cvar.InstrAttribType_INSTRUMENT_STRIKE_PRICE
InstrAttribType_TRADEABLE_INDICATOR = cvar.InstrAttribType_TRADEABLE_INDICATOR
CPProgram_3 = cvar.CPProgram_3
CPProgram_4 = cvar.CPProgram_4
CPProgram_OTHER = cvar.CPProgram_OTHER
MiscFeeBasis_ABSOLUTE = cvar.MiscFeeBasis_ABSOLUTE
MiscFeeBasis_PER_UNIT = cvar.MiscFeeBasis_PER_UNIT
MiscFeeBasis_PERCENTAGE = cvar.MiscFeeBasis_PERCENTAGE
LastFragment_YES = cvar.LastFragment_YES
LastFragment_NO = cvar.LastFragment_NO
CollAsgnReason_INITIAL = cvar.CollAsgnReason_INITIAL
CollAsgnReason_SCHEDULED = cvar.CollAsgnReason_SCHEDULED
CollAsgnReason_TIME_WARNING = cvar.CollAsgnReason_TIME_WARNING
CollAsgnReason_MARGIN_DEFICIENCY = cvar.CollAsgnReason_MARGIN_DEFICIENCY
CollAsgnReason_MARGIN_EXCESS = cvar.CollAsgnReason_MARGIN_EXCESS
CollAsgnReason_FORWARD_COLLATERAL_DEMAND = cvar.CollAsgnReason_FORWARD_COLLATERAL_DEMAND
CollAsgnReason_EVENT_OF_DEFAULT = cvar.CollAsgnReason_EVENT_OF_DEFAULT
CollAsgnReason_ADVERSE_TAX_EVENT = cvar.CollAsgnReason_ADVERSE_TAX_EVENT
CollInquiryQualifier_TRADEDATE = cvar.CollInquiryQualifier_TRADEDATE
CollInquiryQualifier_GC_INSTRUMENT = cvar.CollInquiryQualifier_GC_INSTRUMENT
CollInquiryQualifier_COLLATERALINSTRUMENT = cvar.CollInquiryQualifier_COLLATERALINSTRUMENT
CollInquiryQualifier_SUBSTITUTION_ELIGIBLE = cvar.CollInquiryQualifier_SUBSTITUTION_ELIGIBLE
CollInquiryQualifier_NOT_ASSIGNED = cvar.CollInquiryQualifier_NOT_ASSIGNED
CollInquiryQualifier_PARTIALLY_ASSIGNED = cvar.CollInquiryQualifier_PARTIALLY_ASSIGNED
CollInquiryQualifier_FULLY_ASSIGNED = cvar.CollInquiryQualifier_FULLY_ASSIGNED
CollInquiryQualifier_OUTSTANDING_TRADES = cvar.CollInquiryQualifier_OUTSTANDING_TRADES
CollInquiryQualifier_TRADE_DATE = cvar.CollInquiryQualifier_TRADE_DATE
CollInquiryQualifier_COLLATERAL_INSTRUMENT = cvar.CollInquiryQualifier_COLLATERAL_INSTRUMENT
CollAsgnTransType_NEW = cvar.CollAsgnTransType_NEW
CollAsgnTransType_REPLACE = cvar.CollAsgnTransType_REPLACE
CollAsgnTransType_CANCEL = cvar.CollAsgnTransType_CANCEL
CollAsgnTransType_RELEASE = cvar.CollAsgnTransType_RELEASE
CollAsgnTransType_REVERSE = cvar.CollAsgnTransType_REVERSE
CollAsgnRespType_RECEIVED = cvar.CollAsgnRespType_RECEIVED
CollAsgnRespType_ACCEPTED = cvar.CollAsgnRespType_ACCEPTED
CollAsgnRespType_DECLINED = cvar.CollAsgnRespType_DECLINED
CollAsgnRespType_REJECTED = cvar.CollAsgnRespType_REJECTED
CollAsgnRejectReason_UNKNOWN_DEAL = cvar.CollAsgnRejectReason_UNKNOWN_DEAL
CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT = cvar.CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT
CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION = cvar.CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION
CollAsgnRejectReason_INSUFFICIENT_COLLATERAL = cvar.CollAsgnRejectReason_INSUFFICIENT_COLLATERAL
CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL = cvar.CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL
CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION = cvar.CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION
CollAsgnRejectReason_OTHER = cvar.CollAsgnRejectReason_OTHER
CollStatus_UNASSIGNED = cvar.CollStatus_UNASSIGNED
CollStatus_PARTIALLY_ASSIGNED = cvar.CollStatus_PARTIALLY_ASSIGNED
CollStatus_ASSIGNMENT_PROPOSED = cvar.CollStatus_ASSIGNMENT_PROPOSED
CollStatus_ASSIGNED = cvar.CollStatus_ASSIGNED
CollStatus_CHALLENGED = cvar.CollStatus_CHALLENGED
LastRptRequested_NO = cvar.LastRptRequested_NO
LastRptRequested_YES = cvar.LastRptRequested_YES
DeliveryType_VERSUS_PAYMENT_DELIVER = cvar.DeliveryType_VERSUS_PAYMENT_DELIVER
DeliveryType_FREE_DELIVER = cvar.DeliveryType_FREE_DELIVER
DeliveryType_TRI_PARTY = cvar.DeliveryType_TRI_PARTY
DeliveryType_HOLD_IN_CUSTODY = cvar.DeliveryType_HOLD_IN_CUSTODY
UserRequestType_LOGONUSER = cvar.UserRequestType_LOGONUSER
UserRequestType_LOGOFFUSER = cvar.UserRequestType_LOGOFFUSER
UserRequestType_CHANGEPASSWORDFORUSER = cvar.UserRequestType_CHANGEPASSWORDFORUSER
UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS = cvar.UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS
UserRequestType_LOG_ON_USER = cvar.UserRequestType_LOG_ON_USER
UserRequestType_LOG_OFF_USER = cvar.UserRequestType_LOG_OFF_USER
UserRequestType_CHANGE_PASSWORD_FOR_USER = cvar.UserRequestType_CHANGE_PASSWORD_FOR_USER
UserStatus_LOGGED_IN = cvar.UserStatus_LOGGED_IN
UserStatus_NOT_LOGGED_IN = cvar.UserStatus_NOT_LOGGED_IN
UserStatus_USER_NOT_RECOGNISED = cvar.UserStatus_USER_NOT_RECOGNISED
UserStatus_PASSWORD_INCORRECT = cvar.UserStatus_PASSWORD_INCORRECT
UserStatus_PASSWORD_CHANGED = cvar.UserStatus_PASSWORD_CHANGED
UserStatus_OTHER = cvar.UserStatus_OTHER
UserStatus_FORCED_USER_LOGOUT_BY_EXCHANGE = cvar.UserStatus_FORCED_USER_LOGOUT_BY_EXCHANGE
UserStatus_SESSION_SHUTDOWN_WARNING = cvar.UserStatus_SESSION_SHUTDOWN_WARNING
StatusValue_CONNECTED = cvar.StatusValue_CONNECTED
StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP = cvar.StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP
StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN = cvar.StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN
StatusValue_IN_PROCESS = cvar.StatusValue_IN_PROCESS
StatusValue_NOT_CONNECTED_2 = cvar.StatusValue_NOT_CONNECTED_2
StatusValue_NOT_CONNECTED_3 = cvar.StatusValue_NOT_CONNECTED_3
NetworkRequestType_SNAPSHOT = cvar.NetworkRequestType_SNAPSHOT
NetworkRequestType_SUBSCRIBE = cvar.NetworkRequestType_SUBSCRIBE
NetworkRequestType_STOP_SUBSCRIBING = cvar.NetworkRequestType_STOP_SUBSCRIBING
NetworkRequestType_LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED = cvar.NetworkRequestType_LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED
NetworkStatusResponseType_FULL = cvar.NetworkStatusResponseType_FULL
NetworkStatusResponseType_INCREMENTAL_UPDATE = cvar.NetworkStatusResponseType_INCREMENTAL_UPDATE
TrdRptStatus_ACCEPTED = cvar.TrdRptStatus_ACCEPTED
TrdRptStatus_REJECTED = cvar.TrdRptStatus_REJECTED
TrdRptStatus_ACCEPTED_WITH_ERRORS = cvar.TrdRptStatus_ACCEPTED_WITH_ERRORS
AffirmStatus_RECEIVED = cvar.AffirmStatus_RECEIVED
AffirmStatus_CONFIRM_REJECTED_IE_NOT_AFFIRMED = cvar.AffirmStatus_CONFIRM_REJECTED_IE_NOT_AFFIRMED
AffirmStatus_AFFIRMED = cvar.AffirmStatus_AFFIRMED
CollAction_RETAIN = cvar.CollAction_RETAIN
CollAction_ADD = cvar.CollAction_ADD
CollAction_REMOVE = cvar.CollAction_REMOVE
CollInquiryStatus_ACCEPTED = cvar.CollInquiryStatus_ACCEPTED
CollInquiryStatus_ACCEPTED_WITH_WARNINGS = cvar.CollInquiryStatus_ACCEPTED_WITH_WARNINGS
CollInquiryStatus_COMPLETED = cvar.CollInquiryStatus_COMPLETED
CollInquiryStatus_COMPLETED_WITH_WARNINGS = cvar.CollInquiryStatus_COMPLETED_WITH_WARNINGS
CollInquiryStatus_REJECTED = cvar.CollInquiryStatus_REJECTED
CollInquiryResult_SUCCESSFUL = cvar.CollInquiryResult_SUCCESSFUL
CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT = cvar.CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT
CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE = cvar.CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE
CollInquiryResult_INVALID_PARTIES = cvar.CollInquiryResult_INVALID_PARTIES
CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED = cvar.CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED
CollInquiryResult_INVALID_DESTINATION_REQUESTED = cvar.CollInquiryResult_INVALID_DESTINATION_REQUESTED
CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED = cvar.CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED
CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED = cvar.CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED
CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED = cvar.CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED
CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY = cvar.CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY
CollInquiryResult_OTHER = cvar.CollInquiryResult_OTHER
StrategyParameterType_INT = cvar.StrategyParameterType_INT
StrategyParameterType_LENGTH = cvar.StrategyParameterType_LENGTH
StrategyParameterType_NUMINGROUP = cvar.StrategyParameterType_NUMINGROUP
StrategyParameterType_SEQNUM = cvar.StrategyParameterType_SEQNUM
StrategyParameterType_TAGNUM = cvar.StrategyParameterType_TAGNUM
StrategyParameterType_FLOAT = cvar.StrategyParameterType_FLOAT
StrategyParameterType_QTY = cvar.StrategyParameterType_QTY
StrategyParameterType_PRICE = cvar.StrategyParameterType_PRICE
StrategyParameterType_PRICEOFFSET = cvar.StrategyParameterType_PRICEOFFSET
StrategyParameterType_AMT = cvar.StrategyParameterType_AMT
StrategyParameterType_PERCENTAGE = cvar.StrategyParameterType_PERCENTAGE
StrategyParameterType_CHAR = cvar.StrategyParameterType_CHAR
StrategyParameterType_BOOLEAN = cvar.StrategyParameterType_BOOLEAN
StrategyParameterType_STRING = cvar.StrategyParameterType_STRING
StrategyParameterType_MULTIPLECHARVALUE = cvar.StrategyParameterType_MULTIPLECHARVALUE
StrategyParameterType_CURRENCY = cvar.StrategyParameterType_CURRENCY
StrategyParameterType_EXCHANGE = cvar.StrategyParameterType_EXCHANGE
StrategyParameterType_MONTHYEAR = cvar.StrategyParameterType_MONTHYEAR
StrategyParameterType_UTCTIMESTAMP = cvar.StrategyParameterType_UTCTIMESTAMP
StrategyParameterType_UTCTIMEONLY = cvar.StrategyParameterType_UTCTIMEONLY
StrategyParameterType_LOCALMKTTIME = cvar.StrategyParameterType_LOCALMKTTIME
StrategyParameterType_UTCDATE = cvar.StrategyParameterType_UTCDATE
StrategyParameterType_DATA = cvar.StrategyParameterType_DATA
StrategyParameterType_MULTIPLESTRINGVALUE = cvar.StrategyParameterType_MULTIPLESTRINGVALUE
StrategyParameterType_LOCALMKTDATE = cvar.StrategyParameterType_LOCALMKTDATE
StrategyParameterType_UTCDATEONLY = cvar.StrategyParameterType_UTCDATEONLY
StrategyParameterType_COUNTRY = cvar.StrategyParameterType_COUNTRY
StrategyParameterType_LANGUAGE = cvar.StrategyParameterType_LANGUAGE
StrategyParameterType_TZTIMEONLY = cvar.StrategyParameterType_TZTIMEONLY
StrategyParameterType_TZTIMESTAMP = cvar.StrategyParameterType_TZTIMESTAMP
StrategyParameterType_TENOR = cvar.StrategyParameterType_TENOR
SecurityStatus_ACTIVE = cvar.SecurityStatus_ACTIVE
SecurityStatus_INACTIVE = cvar.SecurityStatus_INACTIVE
UnderlyingCashType_FIXED = cvar.UnderlyingCashType_FIXED
UnderlyingCashType_DIFF = cvar.UnderlyingCashType_DIFF
UnderlyingSettlementType_T_PLUS_1 = cvar.UnderlyingSettlementType_T_PLUS_1
UnderlyingSettlementType_T_PLUS_3 = cvar.UnderlyingSettlementType_T_PLUS_3
UnderlyingSettlementType_T_PLUS_4 = cvar.UnderlyingSettlementType_T_PLUS_4
SecurityUpdateAction_ADD = cvar.SecurityUpdateAction_ADD
SecurityUpdateAction_DELETE = cvar.SecurityUpdateAction_DELETE
SecurityUpdateAction_MODIFY = cvar.SecurityUpdateAction_MODIFY
ExpType_AUTO_EXERCISE = cvar.ExpType_AUTO_EXERCISE
ExpType_NON_AUTO_EXERCISE = cvar.ExpType_NON_AUTO_EXERCISE
ExpType_FINAL_WILL_BE_EXERCISED = cvar.ExpType_FINAL_WILL_BE_EXERCISED
ExpType_CONTRARY_INTENTION = cvar.ExpType_CONTRARY_INTENTION
ExpType_DIFFERENCE = cvar.ExpType_DIFFERENCE
IndividualAllocType_SUB_ALLOCATE = cvar.IndividualAllocType_SUB_ALLOCATE
IndividualAllocType_THIRD_PARTY_ALLOCATION = cvar.IndividualAllocType_THIRD_PARTY_ALLOCATION
UnitOfMeasure_BARRELS = cvar.UnitOfMeasure_BARRELS
UnitOfMeasure_BILLION_CUBIC_FEET = cvar.UnitOfMeasure_BILLION_CUBIC_FEET
UnitOfMeasure_BUSHELS = cvar.UnitOfMeasure_BUSHELS
UnitOfMeasure_POUNDS = cvar.UnitOfMeasure_POUNDS
UnitOfMeasure_GALLONS = cvar.UnitOfMeasure_GALLONS
UnitOfMeasure_MILLION_BARRELS = cvar.UnitOfMeasure_MILLION_BARRELS
UnitOfMeasure_ONE_MILLION_BTU = cvar.UnitOfMeasure_ONE_MILLION_BTU
UnitOfMeasure_MEGAWATT_HOURS = cvar.UnitOfMeasure_MEGAWATT_HOURS
UnitOfMeasure_TROY_OUNCES = cvar.UnitOfMeasure_TROY_OUNCES
UnitOfMeasure_METRIC_TONS = cvar.UnitOfMeasure_METRIC_TONS
UnitOfMeasure_TONS = cvar.UnitOfMeasure_TONS
UnitOfMeasure_US_DOLLARS = cvar.UnitOfMeasure_US_DOLLARS
UnitOfMeasure_ALLOWANCES = cvar.UnitOfMeasure_ALLOWANCES
TimeUnit_HOUR = cvar.TimeUnit_HOUR
TimeUnit_MINUTE = cvar.TimeUnit_MINUTE
TimeUnit_SECOND = cvar.TimeUnit_SECOND
TimeUnit_DAY = cvar.TimeUnit_DAY
TimeUnit_WEEK = cvar.TimeUnit_WEEK
TimeUnit_MONTH = cvar.TimeUnit_MONTH
TimeUnit_YEAR = cvar.TimeUnit_YEAR
AllocMethod_AUTOMATIC = cvar.AllocMethod_AUTOMATIC
AllocMethod_GUARANTOR = cvar.AllocMethod_GUARANTOR
AllocMethod_MANUAL = cvar.AllocMethod_MANUAL
AsOfIndicator_FALSE = cvar.AsOfIndicator_FALSE
AsOfIndicator_TRUE = cvar.AsOfIndicator_TRUE
MDBookType_TOP_OF_BOOK = cvar.MDBookType_TOP_OF_BOOK
MDBookType_PRICE_DEPTH = cvar.MDBookType_PRICE_DEPTH
MDBookType_ORDER_DEPTH = cvar.MDBookType_ORDER_DEPTH
MDOriginType_BOOK = cvar.MDOriginType_BOOK
MDOriginType_OFF_BOOK = cvar.MDOriginType_OFF_BOOK
MDOriginType_CROSS = cvar.MDOriginType_CROSS
CustOrderHandlingInst_ADD_ON_ORDER = cvar.CustOrderHandlingInst_ADD_ON_ORDER
CustOrderHandlingInst_ALL_OR_NONE = cvar.CustOrderHandlingInst_ALL_OR_NONE
CustOrderHandlingInst_CASH_NOT_HELD = cvar.CustOrderHandlingInst_CASH_NOT_HELD
CustOrderHandlingInst_DIRECTED_ORDER = cvar.CustOrderHandlingInst_DIRECTED_ORDER
CustOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION = cvar.CustOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION
CustOrderHandlingInst_FILL_OR_KILL = cvar.CustOrderHandlingInst_FILL_OR_KILL
CustOrderHandlingInst_IMBALANCE_ONLY = cvar.CustOrderHandlingInst_IMBALANCE_ONLY
CustOrderHandlingInst_IMMEDIATE_OR_CANCEL = cvar.CustOrderHandlingInst_IMMEDIATE_OR_CANCEL
CustOrderHandlingInst_LIMIT_ON_OPEN = cvar.CustOrderHandlingInst_LIMIT_ON_OPEN
CustOrderHandlingInst_LIMIT_ON_CLOSE = cvar.CustOrderHandlingInst_LIMIT_ON_CLOSE
CustOrderHandlingInst_MARKET_AT_OPEN = cvar.CustOrderHandlingInst_MARKET_AT_OPEN
CustOrderHandlingInst_MARKET_AT_CLOSE = cvar.CustOrderHandlingInst_MARKET_AT_CLOSE
CustOrderHandlingInst_MARKET_ON_OPEN = cvar.CustOrderHandlingInst_MARKET_ON_OPEN
CustOrderHandlingInst_MARKET_ON_CLOSE = cvar.CustOrderHandlingInst_MARKET_ON_CLOSE
CustOrderHandlingInst_MINIMUM_QUANTITY = cvar.CustOrderHandlingInst_MINIMUM_QUANTITY
CustOrderHandlingInst_NOT_HELD = cvar.CustOrderHandlingInst_NOT_HELD
CustOrderHandlingInst_OVER_THE_DAY = cvar.CustOrderHandlingInst_OVER_THE_DAY
CustOrderHandlingInst_PEGGED = cvar.CustOrderHandlingInst_PEGGED
CustOrderHandlingInst_RESERVE_SIZE_ORDER = cvar.CustOrderHandlingInst_RESERVE_SIZE_ORDER
CustOrderHandlingInst_STOP_STOCK_TRANSACTION = cvar.CustOrderHandlingInst_STOP_STOCK_TRANSACTION
CustOrderHandlingInst_SCALE = cvar.CustOrderHandlingInst_SCALE
CustOrderHandlingInst_TIME_ORDER = cvar.CustOrderHandlingInst_TIME_ORDER
CustOrderHandlingInst_TRAILING_STOP = cvar.CustOrderHandlingInst_TRAILING_STOP
CustOrderHandlingInst_WORK = cvar.CustOrderHandlingInst_WORK
OrderHandlingInstSource_NASD_OATS = cvar.OrderHandlingInstSource_NASD_OATS
DeskType_AGENCY = cvar.DeskType_AGENCY
DeskType_ARBITRAGE = cvar.DeskType_ARBITRAGE
DeskType_DERIVATIVES = cvar.DeskType_DERIVATIVES
DeskType_INTERNATIONAL = cvar.DeskType_INTERNATIONAL
DeskType_INSTITUTIONAL = cvar.DeskType_INSTITUTIONAL
DeskType_OTHER = cvar.DeskType_OTHER
DeskType_PREFERRED_TRADING = cvar.DeskType_PREFERRED_TRADING
DeskType_PROPRIETARY = cvar.DeskType_PROPRIETARY
DeskType_PROGRAM_TRADING = cvar.DeskType_PROGRAM_TRADING
DeskType_SALES = cvar.DeskType_SALES
DeskType_TRADING = cvar.DeskType_TRADING
DeskTypeSource_NASD_OATS = cvar.DeskTypeSource_NASD_OATS
DeskOrderHandlingInst_ADD_ON_ORDER = cvar.DeskOrderHandlingInst_ADD_ON_ORDER
DeskOrderHandlingInst_ALL_OR_NONE = cvar.DeskOrderHandlingInst_ALL_OR_NONE
DeskOrderHandlingInst_CASH_NOT_HELD = cvar.DeskOrderHandlingInst_CASH_NOT_HELD
DeskOrderHandlingInst_DIRECTED_ORDER = cvar.DeskOrderHandlingInst_DIRECTED_ORDER
DeskOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION = cvar.DeskOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION
DeskOrderHandlingInst_FILL_OR_KILL = cvar.DeskOrderHandlingInst_FILL_OR_KILL
DeskOrderHandlingInst_IMBALANCE_ONLY = cvar.DeskOrderHandlingInst_IMBALANCE_ONLY
DeskOrderHandlingInst_IMMEDIATE_OR_CANCEL = cvar.DeskOrderHandlingInst_IMMEDIATE_OR_CANCEL
DeskOrderHandlingInst_LIMIT_ON_OPEN = cvar.DeskOrderHandlingInst_LIMIT_ON_OPEN
DeskOrderHandlingInst_LIMIT_ON_CLOSE = cvar.DeskOrderHandlingInst_LIMIT_ON_CLOSE
DeskOrderHandlingInst_MARKET_AT_OPEN = cvar.DeskOrderHandlingInst_MARKET_AT_OPEN
DeskOrderHandlingInst_MARKET_AT_CLOSE = cvar.DeskOrderHandlingInst_MARKET_AT_CLOSE
DeskOrderHandlingInst_MARKET_ON_OPEN = cvar.DeskOrderHandlingInst_MARKET_ON_OPEN
DeskOrderHandlingInst_MARKET_ON_CLOSE = cvar.DeskOrderHandlingInst_MARKET_ON_CLOSE
DeskOrderHandlingInst_MINIMUM_QUANTITY = cvar.DeskOrderHandlingInst_MINIMUM_QUANTITY
DeskOrderHandlingInst_NOT_HELD = cvar.DeskOrderHandlingInst_NOT_HELD
DeskOrderHandlingInst_OVER_THE_DAY = cvar.DeskOrderHandlingInst_OVER_THE_DAY
DeskOrderHandlingInst_PEGGED = cvar.DeskOrderHandlingInst_PEGGED
DeskOrderHandlingInst_RESERVE_SIZE_ORDER = cvar.DeskOrderHandlingInst_RESERVE_SIZE_ORDER
DeskOrderHandlingInst_STOP_STOCK_TRANSACTION = cvar.DeskOrderHandlingInst_STOP_STOCK_TRANSACTION
DeskOrderHandlingInst_SCALE = cvar.DeskOrderHandlingInst_SCALE
DeskOrderHandlingInst_TIME_ORDER = cvar.DeskOrderHandlingInst_TIME_ORDER
DeskOrderHandlingInst_TRAILING_STOP = cvar.DeskOrderHandlingInst_TRAILING_STOP
DeskOrderHandlingInst_WORK = cvar.DeskOrderHandlingInst_WORK
ExecAckStatus_RECEIVED_NOT_YET_PROCESSED = cvar.ExecAckStatus_RECEIVED_NOT_YET_PROCESSED
ExecAckStatus_ACCEPTED = cvar.ExecAckStatus_ACCEPTED
ExecAckStatus_DONT_KNOW = cvar.ExecAckStatus_DONT_KNOW
CollApplType_SPECIFIC_DEPOSIT = cvar.CollApplType_SPECIFIC_DEPOSIT
CollApplType_GENERAL = cvar.CollApplType_GENERAL
UnderlyingFXRateCalc_DIVIDE = cvar.UnderlyingFXRateCalc_DIVIDE
UnderlyingFXRateCalc_MULTIPLY = cvar.UnderlyingFXRateCalc_MULTIPLY
AllocPositionEffect_OPEN = cvar.AllocPositionEffect_OPEN
AllocPositionEffect_CLOSE = cvar.AllocPositionEffect_CLOSE
AllocPositionEffect_ROLLED = cvar.AllocPositionEffect_ROLLED
AllocPositionEffect_FIFO = cvar.AllocPositionEffect_FIFO
DealingCapacity_AGENT = cvar.DealingCapacity_AGENT
DealingCapacity_PRINCIPAL = cvar.DealingCapacity_PRINCIPAL
DealingCapacity_RISKLESS_PRINCIPAL = cvar.DealingCapacity_RISKLESS_PRINCIPAL
AggressorIndicator_YES = cvar.AggressorIndicator_YES
AggressorIndicator_NO = cvar.AggressorIndicator_NO
MDQuoteType_INDICATIVE = cvar.MDQuoteType_INDICATIVE
MDQuoteType_TRADEABLE = cvar.MDQuoteType_TRADEABLE
MDQuoteType_RESTRICTED_TRADEABLE = cvar.MDQuoteType_RESTRICTED_TRADEABLE
MDQuoteType_COUNTER = cvar.MDQuoteType_COUNTER
MDQuoteType_INDICATIVE_AND_TRADEABLE = cvar.MDQuoteType_INDICATIVE_AND_TRADEABLE
RefOrderIDSource_SECONDARYORDEID = cvar.RefOrderIDSource_SECONDARYORDEID
RefOrderIDSource_ORDEID = cvar.RefOrderIDSource_ORDEID
RefOrderIDSource_MENTRYID = cvar.RefOrderIDSource_MENTRYID
RefOrderIDSource_QUOTENTRYID = cvar.RefOrderIDSource_QUOTENTRYID
RefOrderIDSource_SECONDARYORDERID = cvar.RefOrderIDSource_SECONDARYORDERID
RefOrderIDSource_ORDERID = cvar.RefOrderIDSource_ORDERID
RefOrderIDSource_MDENTRYID = cvar.RefOrderIDSource_MDENTRYID
RefOrderIDSource_QUOTEENTRYID = cvar.RefOrderIDSource_QUOTEENTRYID
RefOrderIDSource_ORIGINAL_ORDER_ID = cvar.RefOrderIDSource_ORIGINAL_ORDER_ID
DisplayWhen_IMMEDIATE = cvar.DisplayWhen_IMMEDIATE
DisplayWhen_EXHAUST = cvar.DisplayWhen_EXHAUST
DisplayMethod_INITIAL = cvar.DisplayMethod_INITIAL
DisplayMethod_NEW = cvar.DisplayMethod_NEW
DisplayMethod_RANDOM = cvar.DisplayMethod_RANDOM
DisplayMethod_UNDISCLOSED = cvar.DisplayMethod_UNDISCLOSED
PriceProtectionScope_NONE = cvar.PriceProtectionScope_NONE
PriceProtectionScope_LOCAL = cvar.PriceProtectionScope_LOCAL
PriceProtectionScope_NATIONAL = cvar.PriceProtectionScope_NATIONAL
PriceProtectionScope_GLOBAL = cvar.PriceProtectionScope_GLOBAL
LotType_ODD_LOT = cvar.LotType_ODD_LOT
LotType_ROUND_LOT = cvar.LotType_ROUND_LOT
LotType_BLOCK_LOT = cvar.LotType_BLOCK_LOT
LotType_ROUND_LOT_BASED_UPON_UNITOFMEASURE = cvar.LotType_ROUND_LOT_BASED_UPON_UNITOFMEASURE
PegPriceType_LAST_PEG = cvar.PegPriceType_LAST_PEG
PegPriceType_MID_PRICE_PEG = cvar.PegPriceType_MID_PRICE_PEG
PegPriceType_OPENING_PEG = cvar.PegPriceType_OPENING_PEG
PegPriceType_MARKET_PEG = cvar.PegPriceType_MARKET_PEG
PegPriceType_PRIMARY_PEG = cvar.PegPriceType_PRIMARY_PEG
PegPriceType_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = cvar.PegPriceType_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER
PegPriceType_PEG_TO_VWAP = cvar.PegPriceType_PEG_TO_VWAP
PegPriceType_TRAILING_STOP_PEG = cvar.PegPriceType_TRAILING_STOP_PEG
PegPriceType_PEG_TO_LIMIT_PRICE = cvar.PegPriceType_PEG_TO_LIMIT_PRICE
TriggerType_PARTIAL_EXECUTION = cvar.TriggerType_PARTIAL_EXECUTION
TriggerType_SPECIFIED_TRADING_SESSION = cvar.TriggerType_SPECIFIED_TRADING_SESSION
TriggerType_NEXT_AUCTION = cvar.TriggerType_NEXT_AUCTION
TriggerType_PRICE_MOVEMENT = cvar.TriggerType_PRICE_MOVEMENT
TriggerAction_ACTIVATE = cvar.TriggerAction_ACTIVATE
TriggerAction_MODIFY = cvar.TriggerAction_MODIFY
TriggerAction_CANCEL = cvar.TriggerAction_CANCEL
TriggerPriceType_BEST_OFFER = cvar.TriggerPriceType_BEST_OFFER
TriggerPriceType_LAST_TRADE = cvar.TriggerPriceType_LAST_TRADE
TriggerPriceType_BEST_BID = cvar.TriggerPriceType_BEST_BID
TriggerPriceType_BEST_BID_OR_LAST_TRADE = cvar.TriggerPriceType_BEST_BID_OR_LAST_TRADE
TriggerPriceType_BEST_OFFER_OR_LAST_TRADE = cvar.TriggerPriceType_BEST_OFFER_OR_LAST_TRADE
TriggerPriceType_BEST_MID = cvar.TriggerPriceType_BEST_MID
TriggerPriceTypeScope_NONE = cvar.TriggerPriceTypeScope_NONE
TriggerPriceTypeScope_LOCAL = cvar.TriggerPriceTypeScope_LOCAL
TriggerPriceTypeScope_NATIONAL = cvar.TriggerPriceTypeScope_NATIONAL
TriggerPriceTypeScope_GLOBAL = cvar.TriggerPriceTypeScope_GLOBAL
TriggerPriceDirection_TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_UP_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE = cvar.TriggerPriceDirection_TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_UP_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE
TriggerPriceDirection_TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_DOWN_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE = cvar.TriggerPriceDirection_TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_DOWN_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE
TriggerOrderType_MARKET = cvar.TriggerOrderType_MARKET
TriggerOrderType_LIMIT = cvar.TriggerOrderType_LIMIT
OrderCategory_ORDER = cvar.OrderCategory_ORDER
OrderCategory_QUOTE = cvar.OrderCategory_QUOTE
OrderCategory_PRIVATELY_NEGOTIATED_TRADE = cvar.OrderCategory_PRIVATELY_NEGOTIATED_TRADE
OrderCategory_MULTILEG_ORDER = cvar.OrderCategory_MULTILEG_ORDER
OrderCategory_LINKED_ORDER = cvar.OrderCategory_LINKED_ORDER
OrderCategory_QUOTE_REQUEST = cvar.OrderCategory_QUOTE_REQUEST
OrderCategory_IMPLIED_ORDER = cvar.OrderCategory_IMPLIED_ORDER
OrderCategory_CROSS_ORDER = cvar.OrderCategory_CROSS_ORDER
OrderCategory_STREAMING_PRICE = cvar.OrderCategory_STREAMING_PRICE
TradeHandlingInstr_TRADE_CONFIRMATION = cvar.TradeHandlingInstr_TRADE_CONFIRMATION
TradeHandlingInstr_TWO_PARTY_REPORT = cvar.TradeHandlingInstr_TWO_PARTY_REPORT
TradeHandlingInstr_ONE_PARTY_REPORT_FOR_MATCHING = cvar.TradeHandlingInstr_ONE_PARTY_REPORT_FOR_MATCHING
TradeHandlingInstr_ONE_PARTY_REPORT_FOR_PASS_THROUGH = cvar.TradeHandlingInstr_ONE_PARTY_REPORT_FOR_PASS_THROUGH
TradeHandlingInstr_AUTOMATED_FLOOR_ORDER_ROUTING = cvar.TradeHandlingInstr_AUTOMATED_FLOOR_ORDER_ROUTING
TradeHandlingInstr_TWO_PARTY_REPORT_FOR_CLAIM = cvar.TradeHandlingInstr_TWO_PARTY_REPORT_FOR_CLAIM
ExDestinationIDSource_BIC = cvar.ExDestinationIDSource_BIC
ExDestinationIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER = cvar.ExDestinationIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER
ExDestinationIDSource_PROPRIETARY = cvar.ExDestinationIDSource_PROPRIETARY
ExDestinationIDSource_ISO_COUNTRY_CODE = cvar.ExDestinationIDSource_ISO_COUNTRY_CODE
ExDestinationIDSource_MIC = cvar.ExDestinationIDSource_MIC
ExpirationQtyType_AUTO_EXERCISE = cvar.ExpirationQtyType_AUTO_EXERCISE
ExpirationQtyType_NON_AUTO_EXERCISE = cvar.ExpirationQtyType_NON_AUTO_EXERCISE
ExpirationQtyType_FINAL_WILL_BE_EXERCISED = cvar.ExpirationQtyType_FINAL_WILL_BE_EXERCISED
ExpirationQtyType_CONTRARY_INTENTION = cvar.ExpirationQtyType_CONTRARY_INTENTION
ExpirationQtyType_DIFFERENCE = cvar.ExpirationQtyType_DIFFERENCE
ImpliedMarketIndicator_NOT_IMPLIED = cvar.ImpliedMarketIndicator_NOT_IMPLIED
ImpliedMarketIndicator_IMPLIED_IN = cvar.ImpliedMarketIndicator_IMPLIED_IN
ImpliedMarketIndicator_IMPLIED_OUT = cvar.ImpliedMarketIndicator_IMPLIED_OUT
ImpliedMarketIndicator_BOTH_IMPLIED_IN_AND_IMPLIED_OUT = cvar.ImpliedMarketIndicator_BOTH_IMPLIED_IN_AND_IMPLIED_OUT
SettlObligMode_PRELIMINARY = cvar.SettlObligMode_PRELIMINARY
SettlObligMode_FINAL = cvar.SettlObligMode_FINAL
SettlObligTransType_CANCEL = cvar.SettlObligTransType_CANCEL
SettlObligTransType_NEW = cvar.SettlObligTransType_NEW
SettlObligTransType_REPLACE = cvar.SettlObligTransType_REPLACE
SettlObligTransType_RESTATE = cvar.SettlObligTransType_RESTATE
SettlObligSource_INSTRUCTIONS_OF_BROKER = cvar.SettlObligSource_INSTRUCTIONS_OF_BROKER
SettlObligSource_INSTRUCTIONS_FOR_INSTITUTION = cvar.SettlObligSource_INSTRUCTIONS_FOR_INSTITUTION
SettlObligSource_INVESTOR = cvar.SettlObligSource_INVESTOR
QuoteEntryStatus_ACCEPTED = cvar.QuoteEntryStatus_ACCEPTED
QuoteEntryStatus_REJECTED = cvar.QuoteEntryStatus_REJECTED
QuoteEntryStatus_REMOVED_FROM_MARKET = cvar.QuoteEntryStatus_REMOVED_FROM_MARKET
QuoteEntryStatus_EXPIRED = cvar.QuoteEntryStatus_EXPIRED
QuoteEntryStatus_LOCKED_MARKET_WARNING = cvar.QuoteEntryStatus_LOCKED_MARKET_WARNING
QuoteEntryStatus_CROSS_MARKET_WARNING = cvar.QuoteEntryStatus_CROSS_MARKET_WARNING
QuoteEntryStatus_CANCELED_DUE_TO_LOCK_MARKET = cvar.QuoteEntryStatus_CANCELED_DUE_TO_LOCK_MARKET
QuoteEntryStatus_CANCELED_DUE_TO_CROSS_MARKET = cvar.QuoteEntryStatus_CANCELED_DUE_TO_CROSS_MARKET
QuoteEntryStatus_ACTIVE = cvar.QuoteEntryStatus_ACTIVE
RespondentType_ALL_MARKET_PARTICIPANTS = cvar.RespondentType_ALL_MARKET_PARTICIPANTS
RespondentType_SPECIFIED_MARKET_PARTICIPANTS = cvar.RespondentType_SPECIFIED_MARKET_PARTICIPANTS
RespondentType_ALL_MARKET_MAKERS = cvar.RespondentType_ALL_MARKET_MAKERS
RespondentType_PRIMARY_MARKET_MAKER = cvar.RespondentType_PRIMARY_MARKET_MAKER
SecurityTradingEvent_ORDER_IMBALANCE_AUCTION_IS_EXTENDED = cvar.SecurityTradingEvent_ORDER_IMBALANCE_AUCTION_IS_EXTENDED
SecurityTradingEvent_TRADING_RESUMES = cvar.SecurityTradingEvent_TRADING_RESUMES
SecurityTradingEvent_PRICE_VOLATILITY_INTERRUPTION = cvar.SecurityTradingEvent_PRICE_VOLATILITY_INTERRUPTION
SecurityTradingEvent_CHANGE_OF_TRADING_SESSION = cvar.SecurityTradingEvent_CHANGE_OF_TRADING_SESSION
SecurityTradingEvent_CHANGE_OF_TRADING_SUBSESSION = cvar.SecurityTradingEvent_CHANGE_OF_TRADING_SUBSESSION
SecurityTradingEvent_CHANGE_OF_SECURITY_STATUS = cvar.SecurityTradingEvent_CHANGE_OF_SECURITY_STATUS
SecurityTradingEvent_CHANGE_OF_BOOK_TYPE = cvar.SecurityTradingEvent_CHANGE_OF_BOOK_TYPE
SecurityTradingEvent_CHANGE_OF_MARKET_DEPTH = cvar.SecurityTradingEvent_CHANGE_OF_MARKET_DEPTH
SecurityTradingEvent_CHANGE_OF_SECURITY_TRADING_STATUS = cvar.SecurityTradingEvent_CHANGE_OF_SECURITY_TRADING_STATUS
StatsType_EXCHANGE_LAST = cvar.StatsType_EXCHANGE_LAST
StatsType_HIGH = cvar.StatsType_HIGH
StatsType_AVERAGE_PRICE = cvar.StatsType_AVERAGE_PRICE
StatsType_TURNOVER = cvar.StatsType_TURNOVER
MDSecSizeType_CUSTOMER = cvar.MDSecSizeType_CUSTOMER
SettlMethod_CASH_SETTLEMENT_REQUIRED = cvar.SettlMethod_CASH_SETTLEMENT_REQUIRED
SettlMethod_PHYSICAL_SETTLEMENT_REQUIRED = cvar.SettlMethod_PHYSICAL_SETTLEMENT_REQUIRED
ExerciseStyle_EUROPEAN = cvar.ExerciseStyle_EUROPEAN
ExerciseStyle_AMERICAN = cvar.ExerciseStyle_AMERICAN
ExerciseStyle_BERMUDA = cvar.ExerciseStyle_BERMUDA
PriceQuoteMethod_STANDARD_MONEY_PER_UNIT_OF_A_PHYSICAL = cvar.PriceQuoteMethod_STANDARD_MONEY_PER_UNIT_OF_A_PHYSICAL
PriceQuoteMethod_INDEX = cvar.PriceQuoteMethod_INDEX
PriceQuoteMethod_INTEREST_RATE_INDEX = cvar.PriceQuoteMethod_INTEREST_RATE_INDEX
PriceQuoteMethod_PERCENT_OF_PAR = cvar.PriceQuoteMethod_PERCENT_OF_PAR
FuturesValuationMethod_PREMIUM_STYLE = cvar.FuturesValuationMethod_PREMIUM_STYLE
FuturesValuationMethod_FUTURES_STYLE_MARK_TO_MARKET = cvar.FuturesValuationMethod_FUTURES_STYLE_MARK_TO_MARKET
FuturesValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT = cvar.FuturesValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT
ListMethod_PRE_LISTED_ONLY = cvar.ListMethod_PRE_LISTED_ONLY
ListMethod_USER_REQUESTED = cvar.ListMethod_USER_REQUESTED
TickRuleType_REGULAR = cvar.TickRuleType_REGULAR
TickRuleType_VARIABLE = cvar.TickRuleType_VARIABLE
TickRuleType_FIXED = cvar.TickRuleType_FIXED
TickRuleType_TRADED_AS_A_SPREAD_LEG = cvar.TickRuleType_TRADED_AS_A_SPREAD_LEG
TickRuleType_SETTLED_AS_A_SPREAD_LEG = cvar.TickRuleType_SETTLED_AS_A_SPREAD_LEG
MaturityMonthYearIncrementUnits_MONTHS = cvar.MaturityMonthYearIncrementUnits_MONTHS
MaturityMonthYearIncrementUnits_DAYS = cvar.MaturityMonthYearIncrementUnits_DAYS
MaturityMonthYearIncrementUnits_WEEKS = cvar.MaturityMonthYearIncrementUnits_WEEKS
MaturityMonthYearIncrementUnits_YEARS = cvar.MaturityMonthYearIncrementUnits_YEARS
MaturityMonthYearFormat_YEARMONTH_ONLY = cvar.MaturityMonthYearFormat_YEARMONTH_ONLY
MaturityMonthYearFormat_YEARMONTHDAY = cvar.MaturityMonthYearFormat_YEARMONTHDAY
MaturityMonthYearFormat_YEARMONTHWEEK = cvar.MaturityMonthYearFormat_YEARMONTHWEEK
PriceLimitType_PRICE = cvar.PriceLimitType_PRICE
PriceLimitType_TICKS = cvar.PriceLimitType_TICKS
PriceLimitType_PERCENTAGE = cvar.PriceLimitType_PERCENTAGE
ApplReqType_RETRANSMISSION_OF_APPLICATION_MESSAGES_FOR_THE_SPECIFIED_APPLICATIONS = cvar.ApplReqType_RETRANSMISSION_OF_APPLICATION_MESSAGES_FOR_THE_SPECIFIED_APPLICATIONS
ApplReqType_SUBSCRIPTION_TO_THE_SPECIFIED_APPLICATIONS = cvar.ApplReqType_SUBSCRIPTION_TO_THE_SPECIFIED_APPLICATIONS
ApplReqType_REQUEST_FOR_THE_LAST_APPLLASTSEQNUM_PUBLISHED_FOR_THE_SPECIFIED_APPLICATIONS = cvar.ApplReqType_REQUEST_FOR_THE_LAST_APPLLASTSEQNUM_PUBLISHED_FOR_THE_SPECIFIED_APPLICATIONS
ApplReqType_REQUEST_VALID_SET_OF_APPLICATIONS = cvar.ApplReqType_REQUEST_VALID_SET_OF_APPLICATIONS
ApplReqType_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS = cvar.ApplReqType_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS
ApplReqType_CANCEL_RETRANSMISSION = cvar.ApplReqType_CANCEL_RETRANSMISSION
ApplReqType_CANCEL_RETRANSMISSION_AND_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS = cvar.ApplReqType_CANCEL_RETRANSMISSION_AND_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS
ApplResponseType_REQUEST_SUCCESSFULLY_PROCESSED = cvar.ApplResponseType_REQUEST_SUCCESSFULLY_PROCESSED
ApplResponseType_APPLICATION_DOES_NOT_EXIST = cvar.ApplResponseType_APPLICATION_DOES_NOT_EXIST
ApplResponseType_MESSAGES_NOT_AVAILABLE = cvar.ApplResponseType_MESSAGES_NOT_AVAILABLE
ApplResponseError_APPLICATION_DOES_NOT_EXIST = cvar.ApplResponseError_APPLICATION_DOES_NOT_EXIST
ApplResponseError_MESSAGES_REQUESTED_ARE_NOT_AVAILABLE = cvar.ApplResponseError_MESSAGES_REQUESTED_ARE_NOT_AVAILABLE
ApplResponseError_USER_NOT_AUTHORIZED_FOR_APPLICATION = cvar.ApplResponseError_USER_NOT_AUTHORIZED_FOR_APPLICATION
TradSesEvent_TRADING_RESUMES = cvar.TradSesEvent_TRADING_RESUMES
TradSesEvent_CHANGE_OF_TRADING_SESSION = cvar.TradSesEvent_CHANGE_OF_TRADING_SESSION
TradSesEvent_CHANGE_OF_TRADING_SUBSESSION = cvar.TradSesEvent_CHANGE_OF_TRADING_SUBSESSION
TradSesEvent_CHANGE_OF_TRADING_STATUS = cvar.TradSesEvent_CHANGE_OF_TRADING_STATUS
MassActionType_SUSPEND_ORDERS = cvar.MassActionType_SUSPEND_ORDERS
MassActionType_RELEASE_ORDERS_FROM_SUSPENSION = cvar.MassActionType_RELEASE_ORDERS_FROM_SUSPENSION
MassActionType_CANCEL_ORDERS = cvar.MassActionType_CANCEL_ORDERS
MassActionScope_ALL_ORDERS_FOR_A_SECURITY = cvar.MassActionScope_ALL_ORDERS_FOR_A_SECURITY
MassActionScope_ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassActionScope_ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassActionScope_ALL_ORDERS_FOR_A_PRODUCT = cvar.MassActionScope_ALL_ORDERS_FOR_A_PRODUCT
MassActionScope_ALL_ORDERS_FOR_A_CFICODE = cvar.MassActionScope_ALL_ORDERS_FOR_A_CFICODE
MassActionScope_ALL_ORDERS_FOR_A_SECURITYTYPE = cvar.MassActionScope_ALL_ORDERS_FOR_A_SECURITYTYPE
MassActionScope_ALL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassActionScope_ALL_ORDERS_FOR_A_TRADING_SESSION
MassActionScope_ALL_ORDERS = cvar.MassActionScope_ALL_ORDERS
MassActionScope_ALL_ORDERS_FOR_A_MARKET = cvar.MassActionScope_ALL_ORDERS_FOR_A_MARKET
MassActionScope_ALL_ORDERS_FOR_A_MARKET_SEGMENT = cvar.MassActionScope_ALL_ORDERS_FOR_A_MARKET_SEGMENT
MassActionScope_ALL_ORDERS_FOR_A_SECURITY_GROUP = cvar.MassActionScope_ALL_ORDERS_FOR_A_SECURITY_GROUP
MassActionScope_CANCEL_FOR_SECURITY_ISSUER = cvar.MassActionScope_CANCEL_FOR_SECURITY_ISSUER
MassActionScope_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassActionScope_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY
MassActionResponse_REJECTED = cvar.MassActionResponse_REJECTED
MassActionResponse_ACCEPTED = cvar.MassActionResponse_ACCEPTED
MassActionRejectReason_MASS_ACTION_NOT_SUPPORTED = cvar.MassActionRejectReason_MASS_ACTION_NOT_SUPPORTED
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY
MassActionRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_SECURITY = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_SECURITY
MassActionRejectReason_INVALID_OR_UNKNOWN_PRODUCT = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_PRODUCT
MassActionRejectReason_INVALID_OR_UNKNOWN_CFICODE = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_CFICODE
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITYTYPE = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITYTYPE
MassActionRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION
MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET
MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET_SEGMENT = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET_SEGMENT
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP
MassActionRejectReason_OTHER = cvar.MassActionRejectReason_OTHER
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER
MassActionRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY
MultilegModel_PREDEFINED_MULTILEG_SECURITY = cvar.MultilegModel_PREDEFINED_MULTILEG_SECURITY
MultilegModel_USER_DEFINED_MULTLEG_SECURITY = cvar.MultilegModel_USER_DEFINED_MULTLEG_SECURITY
MultilegModel_USER_DEFINED_NON_SECURITIZED_MULTILEG = cvar.MultilegModel_USER_DEFINED_NON_SECURITIZED_MULTILEG
MultilegPriceMethod_NET_PRICE = cvar.MultilegPriceMethod_NET_PRICE
MultilegPriceMethod_REVERSED_NET_PRICE = cvar.MultilegPriceMethod_REVERSED_NET_PRICE
MultilegPriceMethod_YIELD_DIFFERENCE = cvar.MultilegPriceMethod_YIELD_DIFFERENCE
MultilegPriceMethod_INDIVIDUAL = cvar.MultilegPriceMethod_INDIVIDUAL
MultilegPriceMethod_CONTRACT_WEIGHTED_AVERAGE_PRICE = cvar.MultilegPriceMethod_CONTRACT_WEIGHTED_AVERAGE_PRICE
MultilegPriceMethod_MULTIPLIED_PRICE = cvar.MultilegPriceMethod_MULTIPLIED_PRICE
ContingencyType_ONE_CANCELS_THE_OTHER = cvar.ContingencyType_ONE_CANCELS_THE_OTHER
ContingencyType_ONE_TRIGGERS_THE_OTHER = cvar.ContingencyType_ONE_TRIGGERS_THE_OTHER
ContingencyType_ONE_UPDATES_THE_OTHER_3 = cvar.ContingencyType_ONE_UPDATES_THE_OTHER_3
ContingencyType_ONE_UPDATES_THE_OTHER_4 = cvar.ContingencyType_ONE_UPDATES_THE_OTHER_4
ListRejectReason_BROKER = cvar.ListRejectReason_BROKER
ListRejectReason_EXCHANGE_CLOSED = cvar.ListRejectReason_EXCHANGE_CLOSED
ListRejectReason_TOO_LATE_TO_ENTER = cvar.ListRejectReason_TOO_LATE_TO_ENTER
ListRejectReason_UNKNOWN_ORDER = cvar.ListRejectReason_UNKNOWN_ORDER
ListRejectReason_DUPLICATE_ORDER = cvar.ListRejectReason_DUPLICATE_ORDER
ListRejectReason_UNSUPPORTED_ORDER_CHARACTERISTIC = cvar.ListRejectReason_UNSUPPORTED_ORDER_CHARACTERISTIC
ListRejectReason_OTHER = cvar.ListRejectReason_OTHER
TradePublishIndicator_DO_NOT_PUBLISH_TRADE = cvar.TradePublishIndicator_DO_NOT_PUBLISH_TRADE
TradePublishIndicator_PUBLISH_TRADE = cvar.TradePublishIndicator_PUBLISH_TRADE
TradePublishIndicator_DEFERRED_PUBLICATION = cvar.TradePublishIndicator_DEFERRED_PUBLICATION
MarketUpdateAction_ADD = cvar.MarketUpdateAction_ADD
MarketUpdateAction_DELETE = cvar.MarketUpdateAction_DELETE
MarketUpdateAction_MODIFY = cvar.MarketUpdateAction_MODIFY
SessionStatus_SESSION_ACTIVE = cvar.SessionStatus_SESSION_ACTIVE
SessionStatus_SESSION_PASSWORD_CHANGED = cvar.SessionStatus_SESSION_PASSWORD_CHANGED
SessionStatus_SESSION_PASSWORD_DUE_TO_EXPIRE = cvar.SessionStatus_SESSION_PASSWORD_DUE_TO_EXPIRE
SessionStatus_NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY = cvar.SessionStatus_NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY
SessionStatus_SESSION_LOGOUT_COMPLETE = cvar.SessionStatus_SESSION_LOGOUT_COMPLETE
SessionStatus_INVALID_USERNAME_OR_PASSWORD = cvar.SessionStatus_INVALID_USERNAME_OR_PASSWORD
SessionStatus_ACCOUNT_LOCKED = cvar.SessionStatus_ACCOUNT_LOCKED
SessionStatus_LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME = cvar.SessionStatus_LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME
SessionStatus_PASSWORD_EXPIRED = cvar.SessionStatus_PASSWORD_EXPIRED
ApplReportType_RESET_APPLSEQNUM_TO_NEW_VALUE_SPECIFIED_IN_APPLNEWSEQNUM = cvar.ApplReportType_RESET_APPLSEQNUM_TO_NEW_VALUE_SPECIFIED_IN_APPLNEWSEQNUM
ApplReportType_REPORTS_THAT_THE_LAST_MESSAGE_HAS_BEEN_SENT_FOR_THE_APPLIDS_REFER_TO_REFAPPLLASTSEQNUM = cvar.ApplReportType_REPORTS_THAT_THE_LAST_MESSAGE_HAS_BEEN_SENT_FOR_THE_APPLIDS_REFER_TO_REFAPPLLASTSEQNUM
ApplReportType_HEARTBEAT_MESSAGE_INDICATING_THAT_APPLICATION_IDENTIFIED_BY_REFAPPLID = cvar.ApplReportType_HEARTBEAT_MESSAGE_INDICATING_THAT_APPLICATION_IDENTIFIED_BY_REFAPPLID
ApplReportType_APPLICATION_MESSAGE_RE_SEND_COMPLETED = cvar.ApplReportType_APPLICATION_MESSAGE_RE_SEND_COMPLETED
HaltReasonInt_NEWS_DISSEMINATION = cvar.HaltReasonInt_NEWS_DISSEMINATION
HaltReasonInt_ORDER_INFLUX = cvar.HaltReasonInt_ORDER_INFLUX
HaltReasonInt_ORDER_IMBALANCE = cvar.HaltReasonInt_ORDER_IMBALANCE
HaltReasonInt_ADDITIONAL_INFORMATION = cvar.HaltReasonInt_ADDITIONAL_INFORMATION
HaltReasonInt_NEWS_PENDING = cvar.HaltReasonInt_NEWS_PENDING
HaltReasonInt_EQUIPMENT_CHANGEOVER = cvar.HaltReasonInt_EQUIPMENT_CHANGEOVER
ValuationMethod_PREMIUM_STYLE = cvar.ValuationMethod_PREMIUM_STYLE
ValuationMethod_FUTURES_STYLE_MARK_TO_MARKET = cvar.ValuationMethod_FUTURES_STYLE_MARK_TO_MARKET
ValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT = cvar.ValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT
ValuationMethod_CDS_STYLE_COLLATERALIZATION_OF_MARKET_TO_MARKET_AND_COUPON = cvar.ValuationMethod_CDS_STYLE_COLLATERALIZATION_OF_MARKET_TO_MARKET_AND_COUPON
ValuationMethod_CDS_IN_DELIVERY = cvar.ValuationMethod_CDS_IN_DELIVERY
OrderDelayUnit_SECONDS = cvar.OrderDelayUnit_SECONDS
OrderDelayUnit_TENTHS_OF_A_SECOND = cvar.OrderDelayUnit_TENTHS_OF_A_SECOND
OrderDelayUnit_HUNDREDTHS_OF_A_SECOND = cvar.OrderDelayUnit_HUNDREDTHS_OF_A_SECOND
OrderDelayUnit_MILLISECONDS = cvar.OrderDelayUnit_MILLISECONDS
OrderDelayUnit_MICROSECONDS = cvar.OrderDelayUnit_MICROSECONDS
OrderDelayUnit_NANOSECONDS = cvar.OrderDelayUnit_NANOSECONDS
OrderDelayUnit_MINUTES = cvar.OrderDelayUnit_MINUTES
OrderDelayUnit_HOURS = cvar.OrderDelayUnit_HOURS
OrderDelayUnit_DAYS = cvar.OrderDelayUnit_DAYS
OrderDelayUnit_WEEKS = cvar.OrderDelayUnit_WEEKS
OrderDelayUnit_MONTHS = cvar.OrderDelayUnit_MONTHS
OrderDelayUnit_YEARS = cvar.OrderDelayUnit_YEARS
VenueType_ELECTRONIC = cvar.VenueType_ELECTRONIC
VenueType_PIT = cvar.VenueType_PIT
VenueType_EX_PIT = cvar.VenueType_EX_PIT
RefOrdIDReason_GTC_FROM_PREVIOUS_DAY = cvar.RefOrdIDReason_GTC_FROM_PREVIOUS_DAY
RefOrdIDReason_PARTIAL_FILL_REMAINING = cvar.RefOrdIDReason_PARTIAL_FILL_REMAINING
RefOrdIDReason_ORDER_CHANGED = cvar.RefOrdIDReason_ORDER_CHANGED
OrigCustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = cvar.OrigCustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT
OrigCustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = cvar.OrigCustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT
OrigCustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER = cvar.OrigCustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER
OrigCustOrderCapacity_ALL_OTHER = cvar.OrigCustOrderCapacity_ALL_OTHER
ModelType_UTILITY_PROVIDED_STANDARD_MODEL = cvar.ModelType_UTILITY_PROVIDED_STANDARD_MODEL
ModelType_PROPRIETARY = cvar.ModelType_PROPRIETARY
ContractMultiplierUnit_SHARES = cvar.ContractMultiplierUnit_SHARES
ContractMultiplierUnit_HOURS = cvar.ContractMultiplierUnit_HOURS
ContractMultiplierUnit_DAYS = cvar.ContractMultiplierUnit_DAYS
FlowScheduleType_NERC_EASTERN_OFF_PEAK = cvar.FlowScheduleType_NERC_EASTERN_OFF_PEAK
FlowScheduleType_NERC_WESTERN_OFF_PEAK = cvar.FlowScheduleType_NERC_WESTERN_OFF_PEAK
FlowScheduleType_NERC_CALENDAR_ALL_DAYS_IN_MONTH = cvar.FlowScheduleType_NERC_CALENDAR_ALL_DAYS_IN_MONTH
FlowScheduleType_NERC_EASTERN_PEAK = cvar.FlowScheduleType_NERC_EASTERN_PEAK
FlowScheduleType_NERC_WESTERN_PEAK = cvar.FlowScheduleType_NERC_WESTERN_PEAK
RateSource_BLOOMBERG = cvar.RateSource_BLOOMBERG
RateSource_REUTERS = cvar.RateSource_REUTERS
RateSource_TELERATE = cvar.RateSource_TELERATE
RateSource_OTHER = cvar.RateSource_OTHER
RateSourceType_PRIMARY = cvar.RateSourceType_PRIMARY
RateSourceType_SECONDARY = cvar.RateSourceType_SECONDARY
RestructuringType_FULL_RESTRUCTURING = cvar.RestructuringType_FULL_RESTRUCTURING
RestructuringType_MODIFIED_RESTRUCTURING = cvar.RestructuringType_MODIFIED_RESTRUCTURING
RestructuringType_MODIFIED_MOD_RESTRUCTURING = cvar.RestructuringType_MODIFIED_MOD_RESTRUCTURING
RestructuringType_NO_RESTRUCTURING_SPECIFIED = cvar.RestructuringType_NO_RESTRUCTURING_SPECIFIED
Seniority_SENIOR_SECURED = cvar.Seniority_SENIOR_SECURED
Seniority_SENIOR = cvar.Seniority_SENIOR
Seniority_SUBORDINATED = cvar.Seniority_SUBORDINATED
SecurityListType_INDUSTRY_CLASSIFICATION = cvar.SecurityListType_INDUSTRY_CLASSIFICATION
SecurityListType_TRADING_LIST = cvar.SecurityListType_TRADING_LIST
SecurityListType_MARKET = cvar.SecurityListType_MARKET
SecurityListType_NEWSPAPER_LIST = cvar.SecurityListType_NEWSPAPER_LIST
SecurityListTypeSource_ICB = cvar.SecurityListTypeSource_ICB
SecurityListTypeSource_NAICS = cvar.SecurityListTypeSource_NAICS
SecurityListTypeSource_GICS = cvar.SecurityListTypeSource_GICS
NewsCategory_COMPANY_NEWS = cvar.NewsCategory_COMPANY_NEWS
NewsCategory_MARKETPLACE_NEWS = cvar.NewsCategory_MARKETPLACE_NEWS
NewsCategory_FINANCIAL_MARKET_NEWS = cvar.NewsCategory_FINANCIAL_MARKET_NEWS
NewsCategory_TECHNICAL_NEWS = cvar.NewsCategory_TECHNICAL_NEWS
NewsCategory_OTHER_NEWS = cvar.NewsCategory_OTHER_NEWS
NewsRefType_REPLACEMENT = cvar.NewsRefType_REPLACEMENT
NewsRefType_OTHER_LANGUAGE = cvar.NewsRefType_OTHER_LANGUAGE
NewsRefType_COMPLIMENTARY = cvar.NewsRefType_COMPLIMENTARY
StrikePriceDeterminationMethod_FIXED_STRIKE = cvar.StrikePriceDeterminationMethod_FIXED_STRIKE
StrikePriceDeterminationMethod_STRIKE_SET_AT_EXPIRATION_TO_UNDERLYING_OR_OTHER_VALUE = cvar.StrikePriceDeterminationMethod_STRIKE_SET_AT_EXPIRATION_TO_UNDERLYING_OR_OTHER_VALUE
StrikePriceDeterminationMethod_STRIKE_SET_TO_AVERAGE_OF_UNDERLYING_SETTLEMENT_PRICE_ACROSS_THE_LIFE_OF_THE_OPTION = cvar.StrikePriceDeterminationMethod_STRIKE_SET_TO_AVERAGE_OF_UNDERLYING_SETTLEMENT_PRICE_ACROSS_THE_LIFE_OF_THE_OPTION
StrikePriceDeterminationMethod_STRIKE_SET_TO_OPTIMAL_VALUE = cvar.StrikePriceDeterminationMethod_STRIKE_SET_TO_OPTIMAL_VALUE
StrikePriceBoundaryMethod_LESS_THAN_UNDERLYING_PRICE_IS_IN_THE_MONEY = cvar.StrikePriceBoundaryMethod_LESS_THAN_UNDERLYING_PRICE_IS_IN_THE_MONEY
StrikePriceBoundaryMethod_LESS_THAN_OR_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY = cvar.StrikePriceBoundaryMethod_LESS_THAN_OR_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY
StrikePriceBoundaryMethod_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY = cvar.StrikePriceBoundaryMethod_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY
StrikePriceBoundaryMethod_GREATER_THAN_OR_EQUAL_TO_UNDERLYING_PRICE_IS_IN_THE_MONEY = cvar.StrikePriceBoundaryMethod_GREATER_THAN_OR_EQUAL_TO_UNDERLYING_PRICE_IS_IN_THE_MONEY
StrikePriceBoundaryMethod_GREATER_THAN_UNDERLYING_IS_IN_THE_MONEY = cvar.StrikePriceBoundaryMethod_GREATER_THAN_UNDERLYING_IS_IN_THE_MONEY
UnderlyingPriceDeterminationMethod_REGULAR = cvar.UnderlyingPriceDeterminationMethod_REGULAR
UnderlyingPriceDeterminationMethod_SPECIAL_REFERENCE = cvar.UnderlyingPriceDeterminationMethod_SPECIAL_REFERENCE
UnderlyingPriceDeterminationMethod_OPTIMAL_VALUE = cvar.UnderlyingPriceDeterminationMethod_OPTIMAL_VALUE
UnderlyingPriceDeterminationMethod_AVERAGE_VALUE = cvar.UnderlyingPriceDeterminationMethod_AVERAGE_VALUE
OptPayoutType_VANILLA = cvar.OptPayoutType_VANILLA
OptPayoutType_CAPPED = cvar.OptPayoutType_CAPPED
OptPayoutType_BINARY = cvar.OptPayoutType_BINARY
ComplexEventType_CAPPED = cvar.ComplexEventType_CAPPED
ComplexEventType_TRIGGER = cvar.ComplexEventType_TRIGGER
ComplexEventType_KNOCK_IN_UP = cvar.ComplexEventType_KNOCK_IN_UP
ComplexEventType_KOCK_IN_DOWN = cvar.ComplexEventType_KOCK_IN_DOWN
ComplexEventType_KNOCK_OUT_UP = cvar.ComplexEventType_KNOCK_OUT_UP
ComplexEventType_KNOCK_OUT_DOWN = cvar.ComplexEventType_KNOCK_OUT_DOWN
ComplexEventType_UNDERLYING = cvar.ComplexEventType_UNDERLYING
ComplexEventType_RESET_BARRIER = cvar.ComplexEventType_RESET_BARRIER
ComplexEventType_ROLLING_BARRIER = cvar.ComplexEventType_ROLLING_BARRIER
ComplexEventPriceBoundaryMethod_LESS_THAN_COMPLEXEVENTPRICE = cvar.ComplexEventPriceBoundaryMethod_LESS_THAN_COMPLEXEVENTPRICE
ComplexEventPriceBoundaryMethod_LESS_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE = cvar.ComplexEventPriceBoundaryMethod_LESS_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE
ComplexEventPriceBoundaryMethod_EQUAL_TO_COMPLEXEVENTPRICE = cvar.ComplexEventPriceBoundaryMethod_EQUAL_TO_COMPLEXEVENTPRICE
ComplexEventPriceBoundaryMethod_GREATER_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE = cvar.ComplexEventPriceBoundaryMethod_GREATER_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE
ComplexEventPriceBoundaryMethod_GREATER_THAN_COMPLEXEVENTPRICE = cvar.ComplexEventPriceBoundaryMethod_GREATER_THAN_COMPLEXEVENTPRICE
ComplexEventPriceTimeType_EXPIRATION = cvar.ComplexEventPriceTimeType_EXPIRATION
ComplexEventPriceTimeType_IMMEDIATE = cvar.ComplexEventPriceTimeType_IMMEDIATE
ComplexEventPriceTimeType_SPECIFIED_DATE_TIME = cvar.ComplexEventPriceTimeType_SPECIFIED_DATE_TIME
ComplexEventCondition_AND = cvar.ComplexEventCondition_AND
ComplexEventCondition_OR = cvar.ComplexEventCondition_OR
StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER = cvar.StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER
StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER = cvar.StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER
StreamAsgnRejReason_UNKNOWN_CLIENT = cvar.StreamAsgnRejReason_UNKNOWN_CLIENT
StreamAsgnRejReason_EXCEEDS_MAXIMUM_SIZE = cvar.StreamAsgnRejReason_EXCEEDS_MAXIMUM_SIZE
StreamAsgnRejReason_UNKNOWN_OR_INVALID_CURRENCY_PAIR = cvar.StreamAsgnRejReason_UNKNOWN_OR_INVALID_CURRENCY_PAIR
StreamAsgnRejReason_NO_AVAILABLE_STREAM = cvar.StreamAsgnRejReason_NO_AVAILABLE_STREAM
StreamAsgnRejReason_OTHER = cvar.StreamAsgnRejReason_OTHER
StreamAsgnAckType_ASSIGNMENT_ACCEPTED = cvar.StreamAsgnAckType_ASSIGNMENT_ACCEPTED
StreamAsgnAckType_ASSIGNMENT_REJECTED = cvar.StreamAsgnAckType_ASSIGNMENT_REJECTED
StreamAsgnType_ASSIGNMENT = cvar.StreamAsgnType_ASSIGNMENT
StreamAsgnType_REJECTED = cvar.StreamAsgnType_REJECTED
StreamAsgnType_TERMINATE_UNASSIGN = cvar.StreamAsgnType_TERMINATE_UNASSIGN


def __lt__(*args) -> "bool":
    """
    __lt__(StringField lhs, char const * rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: char const *

    __lt__(char const * lhs, StringField rhs) -> bool

    Parameters:
        lhs: char const *
        rhs: FIX::StringField const &

    __lt__(StringField lhs, std::string const & rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: std::string const &

    __lt__(std::string const & lhs, StringField rhs) -> bool

    Parameters:
        lhs: std::string const &
        rhs: FIX::StringField const &

    __lt__(SessionID lhs, SessionID rhs) -> bool

    Parameters:
        lhs: FIX::SessionID const &
        rhs: FIX::SessionID const &

    """
    return _quickfix.__lt__(*args)

def __eq__(*args) -> "bool":
    """
    __eq__(StringField lhs, char const * rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: char const *

    __eq__(char const * lhs, StringField rhs) -> bool

    Parameters:
        lhs: char const *
        rhs: FIX::StringField const &

    __eq__(StringField lhs, std::string const & rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: std::string const &

    __eq__(std::string const & lhs, StringField rhs) -> bool

    Parameters:
        lhs: std::string const &
        rhs: FIX::StringField const &

    __eq__(SessionID lhs, SessionID rhs) -> bool

    Parameters:
        lhs: FIX::SessionID const &
        rhs: FIX::SessionID const &

    """
    return _quickfix.__eq__(*args)

def __ne__(*args) -> "bool":
    """
    __ne__(StringField lhs, char const * rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: char const *

    __ne__(char const * lhs, StringField rhs) -> bool

    Parameters:
        lhs: char const *
        rhs: FIX::StringField const &

    __ne__(StringField lhs, std::string const & rhs) -> bool

    Parameters:
        lhs: FIX::StringField const &
        rhs: std::string const &

    __ne__(std::string const & lhs, StringField rhs) -> bool

    Parameters:
        lhs: std::string const &
        rhs: FIX::StringField const &

    __ne__(SessionID lhs, SessionID rhs) -> bool

    Parameters:
        lhs: FIX::SessionID const &
        rhs: FIX::SessionID const &

    """
    return _quickfix.__ne__(*args)
class Dictionary(_object):
    """Proxy of C++ FIX::Dictionary class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dictionary, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::Dictionary self, std::string const & name) -> Dictionary

        Parameters:
            name: std::string const &

        __init__(FIX::Dictionary self) -> Dictionary
        """
        this = _quickfix.new_Dictionary(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Dictionary
    __del__ = lambda self: None

    def getName(self) -> "std::string":
        """
        getName(Dictionary self) -> std::string

        Parameters:
            self: FIX::Dictionary const *

        """
        return _quickfix.Dictionary_getName(self)


    def size(self) -> "size_t":
        """
        size(Dictionary self) -> size_t

        Parameters:
            self: FIX::Dictionary const *

        """
        return _quickfix.Dictionary_size(self)


    def getString(self, arg2: 'std::string const &', capitalize: 'bool'=False) -> "std::string":
        """
        getString(Dictionary self, std::string const & arg2, bool capitalize=False) -> std::string

        Parameters:
            arg2: std::string const &
            capitalize: bool

        getString(Dictionary self, std::string const & arg2) -> std::string

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.Dictionary_getString(self, arg2, capitalize)


    def getInt(self, arg2: 'std::string const &') -> "int":
        """
        getInt(Dictionary self, std::string const & arg2) -> int

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.Dictionary_getInt(self, arg2)


    def getDouble(self, arg2: 'std::string const &') -> "double":
        """
        getDouble(Dictionary self, std::string const & arg2) -> double

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.Dictionary_getDouble(self, arg2)


    def getBool(self, arg2: 'std::string const &') -> "bool":
        """
        getBool(Dictionary self, std::string const & arg2) -> bool

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.Dictionary_getBool(self, arg2)


    def getDay(self, arg2: 'std::string const &') -> "int":
        """
        getDay(Dictionary self, std::string const & arg2) -> int

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.Dictionary_getDay(self, arg2)


    def setString(self, arg2: 'std::string const &', arg3: 'std::string const &') -> "void":
        """
        setString(Dictionary self, std::string const & arg2, std::string const & arg3)

        Parameters:
            arg2: std::string const &
            arg3: std::string const &

        """
        return _quickfix.Dictionary_setString(self, arg2, arg3)


    def setInt(self, arg2: 'std::string const &', arg3: 'int') -> "void":
        """
        setInt(Dictionary self, std::string const & arg2, int arg3)

        Parameters:
            arg2: std::string const &
            arg3: int

        """
        return _quickfix.Dictionary_setInt(self, arg2, arg3)


    def setDouble(self, arg2: 'std::string const &', arg3: 'double') -> "void":
        """
        setDouble(Dictionary self, std::string const & arg2, double arg3)

        Parameters:
            arg2: std::string const &
            arg3: double

        """
        return _quickfix.Dictionary_setDouble(self, arg2, arg3)


    def setBool(self, arg2: 'std::string const &', arg3: 'bool') -> "void":
        """
        setBool(Dictionary self, std::string const & arg2, bool arg3)

        Parameters:
            arg2: std::string const &
            arg3: bool

        """
        return _quickfix.Dictionary_setBool(self, arg2, arg3)


    def setDay(self, arg2: 'std::string const &', arg3: 'int') -> "void":
        """
        setDay(Dictionary self, std::string const & arg2, int arg3)

        Parameters:
            arg2: std::string const &
            arg3: int

        """
        return _quickfix.Dictionary_setDay(self, arg2, arg3)


    def has(self, arg2: 'std::string const &') -> "bool":
        """
        has(Dictionary self, std::string const & arg2) -> bool

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.Dictionary_has(self, arg2)


    def merge(self, arg2: 'Dictionary') -> "void":
        """
        merge(Dictionary self, Dictionary arg2)

        Parameters:
            arg2: FIX::Dictionary const &

        """
        return _quickfix.Dictionary_merge(self, arg2)


    def begin(self) -> "FIX::Dictionary::iterator":
        """
        begin(Dictionary self) -> FIX::Dictionary::iterator

        Parameters:
            self: FIX::Dictionary const *

        """
        return _quickfix.Dictionary_begin(self)


    def end(self) -> "FIX::Dictionary::iterator":
        """
        end(Dictionary self) -> FIX::Dictionary::iterator

        Parameters:
            self: FIX::Dictionary const *

        """
        return _quickfix.Dictionary_end(self)

Dictionary_swigregister = _quickfix.Dictionary_swigregister
Dictionary_swigregister(Dictionary)

class SessionSettings(_object):
    """Proxy of C++ FIX::SessionSettings class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SessionSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SessionSettings, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::SessionSettings self) -> SessionSettings
        __init__(FIX::SessionSettings self, std::istream & stream) -> SessionSettings

        Parameters:
            stream: std::istream &

        __init__(FIX::SessionSettings self, std::string const & file) -> SessionSettings

        Parameters:
            file: std::string const &

        """
        this = _quickfix.new_SessionSettings(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def has(self, arg2: 'SessionID') -> "bool const":
        """
        has(SessionSettings self, SessionID arg2) -> bool const

        Parameters:
            arg2: FIX::SessionID const &

        """
        return _quickfix.SessionSettings_has(self, arg2)


    def get(self, *args) -> "FIX::Dictionary const &":
        """
        get(SessionSettings self, SessionID arg2) -> Dictionary

        Parameters:
            arg2: FIX::SessionID const &

        get(SessionSettings self) -> Dictionary

        Parameters:
            self: FIX::SessionSettings const *

        """
        return _quickfix.SessionSettings_get(self, *args)


    def set(self, *args) -> "void":
        """
        set(SessionSettings self, SessionID arg2, Dictionary arg3)

        Parameters:
            arg2: FIX::SessionID const &
            arg3: FIX::Dictionary

        set(SessionSettings self, Dictionary defaults)

        Parameters:
            defaults: FIX::Dictionary const &

        """
        return _quickfix.SessionSettings_set(self, *args)


    def size(self) -> "size_t":
        """
        size(SessionSettings self) -> size_t

        Parameters:
            self: FIX::SessionSettings const *

        """
        return _quickfix.SessionSettings_size(self)


    def getSessions(self) -> "std::set< FIX::SessionID >":
        """
        getSessions(SessionSettings self) -> std::set< FIX::SessionID >

        Parameters:
            self: FIX::SessionSettings const *

        """
        return _quickfix.SessionSettings_getSessions(self)

    __swig_destroy__ = _quickfix.delete_SessionSettings
    __del__ = lambda self: None
SessionSettings_swigregister = _quickfix.SessionSettings_swigregister
SessionSettings_swigregister(SessionSettings)
BEGINSTRING = cvar.BEGINSTRING
SENDERCOMPID = cvar.SENDERCOMPID
TARGETCOMPID = cvar.TARGETCOMPID
SESSION_QUALIFIER = cvar.SESSION_QUALIFIER
DEFAULT_APPLVERID = cvar.DEFAULT_APPLVERID
CONNECTION_TYPE = cvar.CONNECTION_TYPE
USE_DATA_DICTIONARY = cvar.USE_DATA_DICTIONARY
SEND_RESETSEQNUMFLAG = cvar.SEND_RESETSEQNUMFLAG
SEND_REDUNDANT_RESENDREQUESTS = cvar.SEND_REDUNDANT_RESENDREQUESTS
DATA_DICTIONARY = cvar.DATA_DICTIONARY
TRANSPORT_DATA_DICTIONARY = cvar.TRANSPORT_DATA_DICTIONARY
APP_DATA_DICTIONARY = cvar.APP_DATA_DICTIONARY
USE_LOCAL_TIME = cvar.USE_LOCAL_TIME
START_TIME = cvar.START_TIME
END_TIME = cvar.END_TIME
START_DAY = cvar.START_DAY
END_DAY = cvar.END_DAY
LOGON_TIME = cvar.LOGON_TIME
LOGOUT_TIME = cvar.LOGOUT_TIME
LOGON_DAY = cvar.LOGON_DAY
LOGOUT_DAY = cvar.LOGOUT_DAY
CHECK_COMPID = cvar.CHECK_COMPID
CHECK_LATENCY = cvar.CHECK_LATENCY
MAX_LATENCY = cvar.MAX_LATENCY
HEARTBTINT = cvar.HEARTBTINT
SOCKET_ACCEPT_PORT = cvar.SOCKET_ACCEPT_PORT
SOCKET_REUSE_ADDRESS = cvar.SOCKET_REUSE_ADDRESS
SOCKET_CONNECT_HOST = cvar.SOCKET_CONNECT_HOST
SOCKET_CONNECT_PORT = cvar.SOCKET_CONNECT_PORT
SOCKET_NODELAY = cvar.SOCKET_NODELAY
SOCKET_SEND_BUFFER_SIZE = cvar.SOCKET_SEND_BUFFER_SIZE
SOCKET_RECEIVE_BUFFER_SIZE = cvar.SOCKET_RECEIVE_BUFFER_SIZE
RECONNECT_INTERVAL = cvar.RECONNECT_INTERVAL
VALIDATE_LENGTH_AND_CHECKSUM = cvar.VALIDATE_LENGTH_AND_CHECKSUM
VALIDATE_FIELDS_OUT_OF_ORDER = cvar.VALIDATE_FIELDS_OUT_OF_ORDER
VALIDATE_FIELDS_HAVE_VALUES = cvar.VALIDATE_FIELDS_HAVE_VALUES
VALIDATE_USER_DEFINED_FIELDS = cvar.VALIDATE_USER_DEFINED_FIELDS
PRESERVE_MESSAGE_FIELDS_ORDER = cvar.PRESERVE_MESSAGE_FIELDS_ORDER
LOGON_TIMEOUT = cvar.LOGON_TIMEOUT
LOGOUT_TIMEOUT = cvar.LOGOUT_TIMEOUT
FILE_STORE_PATH = cvar.FILE_STORE_PATH
MYSQL_STORE_USECONNECTIONPOOL = cvar.MYSQL_STORE_USECONNECTIONPOOL
MYSQL_STORE_DATABASE = cvar.MYSQL_STORE_DATABASE
MYSQL_STORE_USER = cvar.MYSQL_STORE_USER
MYSQL_STORE_PASSWORD = cvar.MYSQL_STORE_PASSWORD
MYSQL_STORE_HOST = cvar.MYSQL_STORE_HOST
MYSQL_STORE_PORT = cvar.MYSQL_STORE_PORT
POSTGRESQL_STORE_USECONNECTIONPOOL = cvar.POSTGRESQL_STORE_USECONNECTIONPOOL
POSTGRESQL_STORE_DATABASE = cvar.POSTGRESQL_STORE_DATABASE
POSTGRESQL_STORE_USER = cvar.POSTGRESQL_STORE_USER
POSTGRESQL_STORE_PASSWORD = cvar.POSTGRESQL_STORE_PASSWORD
POSTGRESQL_STORE_HOST = cvar.POSTGRESQL_STORE_HOST
POSTGRESQL_STORE_PORT = cvar.POSTGRESQL_STORE_PORT
ODBC_STORE_USER = cvar.ODBC_STORE_USER
ODBC_STORE_PASSWORD = cvar.ODBC_STORE_PASSWORD
ODBC_STORE_CONNECTION_STRING = cvar.ODBC_STORE_CONNECTION_STRING
FILE_LOG_PATH = cvar.FILE_LOG_PATH
FILE_LOG_BACKUP_PATH = cvar.FILE_LOG_BACKUP_PATH
SCREEN_LOG_SHOW_INCOMING = cvar.SCREEN_LOG_SHOW_INCOMING
SCREEN_LOG_SHOW_OUTGOING = cvar.SCREEN_LOG_SHOW_OUTGOING
SCREEN_LOG_SHOW_EVENTS = cvar.SCREEN_LOG_SHOW_EVENTS
MYSQL_LOG_USECONNECTIONPOOL = cvar.MYSQL_LOG_USECONNECTIONPOOL
MYSQL_LOG_DATABASE = cvar.MYSQL_LOG_DATABASE
MYSQL_LOG_USER = cvar.MYSQL_LOG_USER
MYSQL_LOG_PASSWORD = cvar.MYSQL_LOG_PASSWORD
MYSQL_LOG_HOST = cvar.MYSQL_LOG_HOST
MYSQL_LOG_PORT = cvar.MYSQL_LOG_PORT
MYSQL_LOG_INCOMING_TABLE = cvar.MYSQL_LOG_INCOMING_TABLE
MYSQL_LOG_OUTGOING_TABLE = cvar.MYSQL_LOG_OUTGOING_TABLE
MYSQL_LOG_EVENT_TABLE = cvar.MYSQL_LOG_EVENT_TABLE
POSTGRESQL_LOG_USECONNECTIONPOOL = cvar.POSTGRESQL_LOG_USECONNECTIONPOOL
POSTGRESQL_LOG_DATABASE = cvar.POSTGRESQL_LOG_DATABASE
POSTGRESQL_LOG_USER = cvar.POSTGRESQL_LOG_USER
POSTGRESQL_LOG_PASSWORD = cvar.POSTGRESQL_LOG_PASSWORD
POSTGRESQL_LOG_HOST = cvar.POSTGRESQL_LOG_HOST
POSTGRESQL_LOG_PORT = cvar.POSTGRESQL_LOG_PORT
POSTGRESQL_LOG_INCOMING_TABLE = cvar.POSTGRESQL_LOG_INCOMING_TABLE
POSTGRESQL_LOG_OUTGOING_TABLE = cvar.POSTGRESQL_LOG_OUTGOING_TABLE
POSTGRESQL_LOG_EVENT_TABLE = cvar.POSTGRESQL_LOG_EVENT_TABLE
ODBC_LOG_USER = cvar.ODBC_LOG_USER
ODBC_LOG_PASSWORD = cvar.ODBC_LOG_PASSWORD
ODBC_LOG_CONNECTION_STRING = cvar.ODBC_LOG_CONNECTION_STRING
ODBC_LOG_INCOMING_TABLE = cvar.ODBC_LOG_INCOMING_TABLE
ODBC_LOG_OUTGOING_TABLE = cvar.ODBC_LOG_OUTGOING_TABLE
ODBC_LOG_EVENT_TABLE = cvar.ODBC_LOG_EVENT_TABLE
RESET_ON_LOGON = cvar.RESET_ON_LOGON
RESET_ON_LOGOUT = cvar.RESET_ON_LOGOUT
RESET_ON_DISCONNECT = cvar.RESET_ON_DISCONNECT
REFRESH_ON_LOGON = cvar.REFRESH_ON_LOGON
MILLISECONDS_IN_TIMESTAMP = cvar.MILLISECONDS_IN_TIMESTAMP
HTTP_ACCEPT_PORT = cvar.HTTP_ACCEPT_PORT
PERSIST_MESSAGES = cvar.PERSIST_MESSAGES
SERVER_CERT_FILE = cvar.SERVER_CERT_FILE
SERVER_CERT_KEY_FILE = cvar.SERVER_CERT_KEY_FILE
CLIENT_CERT_FILE = cvar.CLIENT_CERT_FILE
CLIENT_CERT_KEY_FILE = cvar.CLIENT_CERT_KEY_FILE
CERT_AUTH_FILE = cvar.CERT_AUTH_FILE
CERT_AUTH_DIR = cvar.CERT_AUTH_DIR
CRL_FILE = cvar.CRL_FILE
CRL_DIR = cvar.CRL_DIR
VERIFY_LEVEL = cvar.VERIFY_LEVEL
SSL_PROTOCOL = cvar.SSL_PROTOCOL
SSL_CIPHER_SUITE = cvar.SSL_CIPHER_SUITE


def __rshift__(*args) -> "std::istream &":
    """
    __rshift__(std::istream & stream, SessionID sessionID) -> std::istream

    Parameters:
        stream: std::istream &
        sessionID: FIX::SessionID &

    __rshift__(std::istream & arg1, SessionSettings arg2) -> std::istream &

    Parameters:
        arg1: std::istream &
        arg2: FIX::SessionSettings &

    """
    return _quickfix.__rshift__(*args)

def __lshift__(*args) -> "std::ostream &":
    """
    __lshift__(std::ostream & stream, FieldBase field) -> std::ostream

    Parameters:
        stream: std::ostream &
        field: FIX::FieldBase const &

    __lshift__(std::ostream & stream, Message message) -> std::ostream

    Parameters:
        stream: std::ostream &
        message: FIX::Message const &

    __lshift__(std::ostream & stream, SessionID sessionID) -> std::ostream

    Parameters:
        stream: std::ostream &
        sessionID: FIX::SessionID const &

    __lshift__(std::ostream & arg1, SessionSettings arg2) -> std::ostream &

    Parameters:
        arg1: std::ostream &
        arg2: FIX::SessionSettings const &

    """
    return _quickfix.__lshift__(*args)
class Session(_object):
    """Proxy of C++ FIX::Session class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Session, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Session, name)
    __repr__ = _swig_repr

    def __init__(self, arg2: 'Application &', arg3: 'MessageStoreFactory &', arg4: 'SessionID', arg5: 'DataDictionaryProvider const &', arg6: 'TimeRange const &', heartBtInt: 'int', pLogFactory: 'LogFactory *'):
        """
        __init__(FIX::Session self, Application & arg2, MessageStoreFactory & arg3, SessionID arg4, DataDictionaryProvider const & arg5, TimeRange const & arg6, int heartBtInt, LogFactory * pLogFactory) -> Session

        Parameters:
            arg2: Application &
            arg3: MessageStoreFactory &
            arg4: FIX::SessionID const &
            arg5: DataDictionaryProvider const &
            arg6: TimeRange const &
            heartBtInt: int
            pLogFactory: LogFactory *

        """
        this = _quickfix.new_Session(arg2, arg3, arg4, arg5, arg6, heartBtInt, pLogFactory)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_Session
    __del__ = lambda self: None

    def logon(self) -> "void":
        """
        logon(Session self)

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_logon(self)


    def logout(self, *args) -> "void":
        """
        logout(Session self, std::string const & reason)

        Parameters:
            reason: std::string const &

        logout(Session self)

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_logout(self, *args)


    def isEnabled(self) -> "bool":
        """
        isEnabled(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_isEnabled(self)


    def sentLogon(self) -> "bool":
        """
        sentLogon(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_sentLogon(self)


    def sentLogout(self) -> "bool":
        """
        sentLogout(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_sentLogout(self)


    def receivedLogon(self) -> "bool":
        """
        receivedLogon(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_receivedLogon(self)


    def isLoggedOn(self) -> "bool":
        """
        isLoggedOn(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_isLoggedOn(self)


    def reset(self) -> "void":
        """
        reset(Session self)

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_reset(self)


    def refresh(self) -> "void":
        """
        refresh(Session self)

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_refresh(self)


    def setNextSenderMsgSeqNum(self, num: 'int') -> "void":
        """
        setNextSenderMsgSeqNum(Session self, int num)

        Parameters:
            num: int

        """
        return _quickfix.Session_setNextSenderMsgSeqNum(self, num)


    def setNextTargetMsgSeqNum(self, num: 'int') -> "void":
        """
        setNextTargetMsgSeqNum(Session self, int num)

        Parameters:
            num: int

        """
        return _quickfix.Session_setNextTargetMsgSeqNum(self, num)


    def getSessionID(self) -> "FIX::SessionID const &":
        """
        getSessionID(Session self) -> SessionID

        Parameters:
            self: FIX::Session const *

        """
        return _quickfix.Session_getSessionID(self)


    def setDataDictionaryProvider(self, dataDictionaryProvider: 'DataDictionaryProvider const &') -> "void":
        """
        setDataDictionaryProvider(Session self, DataDictionaryProvider const & dataDictionaryProvider)

        Parameters:
            dataDictionaryProvider: DataDictionaryProvider const &

        """
        return _quickfix.Session_setDataDictionaryProvider(self, dataDictionaryProvider)


    def getDataDictionaryProvider(self) -> "DataDictionaryProvider const &":
        """
        getDataDictionaryProvider(Session self) -> DataDictionaryProvider const &

        Parameters:
            self: FIX::Session const *

        """
        return _quickfix.Session_getDataDictionaryProvider(self)


    def sendToTarget(*args) -> "std::string &, std::string &":
        """
        sendToTarget(Message message, std::string const & qualifier) -> bool

        Parameters:
            message: FIX::Message &
            qualifier: std::string const &

        sendToTarget(Message message) -> bool

        Parameters:
            message: FIX::Message &

        sendToTarget(Message message, SessionID sessionID) -> bool

        Parameters:
            message: FIX::Message &
            sessionID: FIX::SessionID const &

        sendToTarget(Message arg1, SenderCompID senderCompID, TargetCompID targetCompID, std::string const & qualifier) -> bool

        Parameters:
            arg1: FIX::Message &
            senderCompID: FIX::SenderCompID const &
            targetCompID: FIX::TargetCompID const &
            qualifier: std::string const &

        sendToTarget(Message arg1, SenderCompID senderCompID, TargetCompID targetCompID) -> bool

        Parameters:
            arg1: FIX::Message &
            senderCompID: FIX::SenderCompID const &
            targetCompID: FIX::TargetCompID const &

        sendToTarget(Message message, std::string const & senderCompID, std::string const & targetCompID, std::string const & qualifier) -> bool

        Parameters:
            message: FIX::Message &
            senderCompID: std::string const &
            targetCompID: std::string const &
            qualifier: std::string const &

        sendToTarget(Message message, std::string const & senderCompID, std::string const & targetCompID) -> bool

        Parameters:
            message: FIX::Message &
            senderCompID: std::string const &
            targetCompID: std::string const &

        """
        return _quickfix.Session_sendToTarget(*args)

    if _newclass:
        sendToTarget = staticmethod(sendToTarget)
    __swig_getmethods__["sendToTarget"] = lambda x: sendToTarget

    def getSessions() -> "std::set< FIX::SessionID >":
        """getSessions() -> std::set< FIX::SessionID >"""
        return _quickfix.Session_getSessions()

    if _newclass:
        getSessions = staticmethod(getSessions)
    __swig_getmethods__["getSessions"] = lambda x: getSessions

    def doesSessionExist(arg1: 'SessionID') -> "bool":
        """
        doesSessionExist(SessionID arg1) -> bool

        Parameters:
            arg1: FIX::SessionID const &

        """
        return _quickfix.Session_doesSessionExist(arg1)

    if _newclass:
        doesSessionExist = staticmethod(doesSessionExist)
    __swig_getmethods__["doesSessionExist"] = lambda x: doesSessionExist

    def lookupSession(*args) -> "std::string &":
        """
        lookupSession(SessionID arg1) -> Session

        Parameters:
            arg1: FIX::SessionID const &

        lookupSession(std::string const & arg1, bool reverse=False) -> Session

        Parameters:
            arg1: std::string const &
            reverse: bool

        lookupSession(std::string const & arg1) -> Session

        Parameters:
            arg1: std::string const &

        """
        return _quickfix.Session_lookupSession(*args)

    if _newclass:
        lookupSession = staticmethod(lookupSession)
    __swig_getmethods__["lookupSession"] = lambda x: lookupSession

    def isSessionRegistered(arg1: 'SessionID') -> "bool":
        """
        isSessionRegistered(SessionID arg1) -> bool

        Parameters:
            arg1: FIX::SessionID const &

        """
        return _quickfix.Session_isSessionRegistered(arg1)

    if _newclass:
        isSessionRegistered = staticmethod(isSessionRegistered)
    __swig_getmethods__["isSessionRegistered"] = lambda x: isSessionRegistered

    def registerSession(arg1: 'SessionID') -> "FIX::Session *":
        """
        registerSession(SessionID arg1) -> Session

        Parameters:
            arg1: FIX::SessionID const &

        """
        return _quickfix.Session_registerSession(arg1)

    if _newclass:
        registerSession = staticmethod(registerSession)
    __swig_getmethods__["registerSession"] = lambda x: registerSession

    def unregisterSession(arg1: 'SessionID') -> "void":
        """
        unregisterSession(SessionID arg1)

        Parameters:
            arg1: FIX::SessionID const &

        """
        return _quickfix.Session_unregisterSession(arg1)

    if _newclass:
        unregisterSession = staticmethod(unregisterSession)
    __swig_getmethods__["unregisterSession"] = lambda x: unregisterSession

    def numSessions() -> "size_t":
        """numSessions() -> size_t"""
        return _quickfix.Session_numSessions()

    if _newclass:
        numSessions = staticmethod(numSessions)
    __swig_getmethods__["numSessions"] = lambda x: numSessions

    def isSessionTime(self, time: 'UtcTimeStamp const &') -> "bool":
        """
        isSessionTime(Session self, UtcTimeStamp const & time) -> bool

        Parameters:
            time: UtcTimeStamp const &

        """
        return _quickfix.Session_isSessionTime(self, time)


    def isLogonTime(self, time: 'UtcTimeStamp const &') -> "bool":
        """
        isLogonTime(Session self, UtcTimeStamp const & time) -> bool

        Parameters:
            time: UtcTimeStamp const &

        """
        return _quickfix.Session_isLogonTime(self, time)


    def isInitiator(self) -> "bool":
        """
        isInitiator(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_isInitiator(self)


    def isAcceptor(self) -> "bool":
        """
        isAcceptor(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_isAcceptor(self)


    def getLogonTime(self) -> "TimeRange const &":
        """
        getLogonTime(Session self) -> TimeRange const &

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getLogonTime(self)


    def setLogonTime(self, value: 'TimeRange const &') -> "void":
        """
        setLogonTime(Session self, TimeRange const & value)

        Parameters:
            value: TimeRange const &

        """
        return _quickfix.Session_setLogonTime(self, value)


    def getSenderDefaultApplVerID(self) -> "std::string const &":
        """
        getSenderDefaultApplVerID(Session self) -> std::string const &

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getSenderDefaultApplVerID(self)


    def setSenderDefaultApplVerID(self, senderDefaultApplVerID: 'std::string const &') -> "void":
        """
        setSenderDefaultApplVerID(Session self, std::string const & senderDefaultApplVerID)

        Parameters:
            senderDefaultApplVerID: std::string const &

        """
        return _quickfix.Session_setSenderDefaultApplVerID(self, senderDefaultApplVerID)


    def getTargetDefaultApplVerID(self) -> "std::string const &":
        """
        getTargetDefaultApplVerID(Session self) -> std::string const &

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getTargetDefaultApplVerID(self)


    def setTargetDefaultApplVerID(self, targetDefaultApplVerID: 'std::string const &') -> "void":
        """
        setTargetDefaultApplVerID(Session self, std::string const & targetDefaultApplVerID)

        Parameters:
            targetDefaultApplVerID: std::string const &

        """
        return _quickfix.Session_setTargetDefaultApplVerID(self, targetDefaultApplVerID)


    def getSendRedundantResendRequests(self) -> "bool":
        """
        getSendRedundantResendRequests(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getSendRedundantResendRequests(self)


    def setSendRedundantResendRequests(self, value: 'bool') -> "void":
        """
        setSendRedundantResendRequests(Session self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.Session_setSendRedundantResendRequests(self, value)


    def getCheckCompId(self) -> "bool":
        """
        getCheckCompId(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getCheckCompId(self)


    def setCheckCompId(self, value: 'bool') -> "void":
        """
        setCheckCompId(Session self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.Session_setCheckCompId(self, value)


    def getCheckLatency(self) -> "bool":
        """
        getCheckLatency(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getCheckLatency(self)


    def setCheckLatency(self, value: 'bool') -> "void":
        """
        setCheckLatency(Session self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.Session_setCheckLatency(self, value)


    def getMaxLatency(self) -> "int":
        """
        getMaxLatency(Session self) -> int

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getMaxLatency(self)


    def setMaxLatency(self, value: 'int') -> "void":
        """
        setMaxLatency(Session self, int value)

        Parameters:
            value: int

        """
        return _quickfix.Session_setMaxLatency(self, value)


    def getLogonTimeout(self) -> "int":
        """
        getLogonTimeout(Session self) -> int

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getLogonTimeout(self)


    def setLogonTimeout(self, value: 'int') -> "void":
        """
        setLogonTimeout(Session self, int value)

        Parameters:
            value: int

        """
        return _quickfix.Session_setLogonTimeout(self, value)


    def getLogoutTimeout(self) -> "int":
        """
        getLogoutTimeout(Session self) -> int

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getLogoutTimeout(self)


    def setLogoutTimeout(self, value: 'int') -> "void":
        """
        setLogoutTimeout(Session self, int value)

        Parameters:
            value: int

        """
        return _quickfix.Session_setLogoutTimeout(self, value)


    def getResetOnLogon(self) -> "bool":
        """
        getResetOnLogon(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getResetOnLogon(self)


    def setResetOnLogon(self, value: 'bool') -> "void":
        """
        setResetOnLogon(Session self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.Session_setResetOnLogon(self, value)


    def getResetOnLogout(self) -> "bool":
        """
        getResetOnLogout(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getResetOnLogout(self)


    def setResetOnLogout(self, value: 'bool') -> "void":
        """
        setResetOnLogout(Session self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.Session_setResetOnLogout(self, value)


    def getResetOnDisconnect(self) -> "bool":
        """
        getResetOnDisconnect(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getResetOnDisconnect(self)


    def setResetOnDisconnect(self, value: 'bool') -> "void":
        """
        setResetOnDisconnect(Session self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.Session_setResetOnDisconnect(self, value)


    def getRefreshOnLogon(self) -> "bool":
        """
        getRefreshOnLogon(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getRefreshOnLogon(self)


    def setRefreshOnLogon(self, value: 'bool') -> "void":
        """
        setRefreshOnLogon(Session self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.Session_setRefreshOnLogon(self, value)


    def getMillisecondsInTimeStamp(self) -> "bool":
        """
        getMillisecondsInTimeStamp(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getMillisecondsInTimeStamp(self)


    def setMillisecondsInTimeStamp(self, value: 'bool') -> "void":
        """
        setMillisecondsInTimeStamp(Session self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.Session_setMillisecondsInTimeStamp(self, value)


    def getPersistMessages(self) -> "bool":
        """
        getPersistMessages(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getPersistMessages(self)


    def setPersistMessages(self, value: 'bool') -> "void":
        """
        setPersistMessages(Session self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.Session_setPersistMessages(self, value)


    def getValidateLengthAndChecksum(self) -> "bool":
        """
        getValidateLengthAndChecksum(Session self) -> bool

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getValidateLengthAndChecksum(self)


    def setValidateLengthAndChecksum(self, value: 'bool') -> "void":
        """
        setValidateLengthAndChecksum(Session self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.Session_setValidateLengthAndChecksum(self, value)


    def setResponder(self, pR: 'Responder *') -> "void":
        """
        setResponder(Session self, Responder * pR)

        Parameters:
            pR: Responder *

        """
        return _quickfix.Session_setResponder(self, pR)


    def send(self, arg2: 'Message') -> "bool":
        """
        send(Session self, Message arg2) -> bool

        Parameters:
            arg2: FIX::Message &

        """
        return _quickfix.Session_send(self, arg2)


    def next(self, *args) -> "void":
        """
        next(Session self)
        next(Session self, UtcTimeStamp const & timeStamp)

        Parameters:
            timeStamp: UtcTimeStamp const &

        next(Session self, std::string const & arg2, UtcTimeStamp const & timeStamp, bool queued=False)

        Parameters:
            arg2: std::string const &
            timeStamp: UtcTimeStamp const &
            queued: bool

        next(Session self, std::string const & arg2, UtcTimeStamp const & timeStamp)

        Parameters:
            arg2: std::string const &
            timeStamp: UtcTimeStamp const &

        next(Session self, Message arg2, UtcTimeStamp const & timeStamp, bool queued=False)

        Parameters:
            arg2: FIX::Message const &
            timeStamp: UtcTimeStamp const &
            queued: bool

        next(Session self, Message arg2, UtcTimeStamp const & timeStamp)

        Parameters:
            arg2: FIX::Message const &
            timeStamp: UtcTimeStamp const &

        """
        return _quickfix.Session_next(self, *args)


    def disconnect(self) -> "void":
        """
        disconnect(Session self)

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_disconnect(self)


    def getExpectedSenderNum(self) -> "int":
        """
        getExpectedSenderNum(Session self) -> int

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getExpectedSenderNum(self)


    def getExpectedTargetNum(self) -> "int":
        """
        getExpectedTargetNum(Session self) -> int

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getExpectedTargetNum(self)


    def getLog(self) -> "Log *":
        """
        getLog(Session self) -> Log *

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getLog(self)


    def getStore(self) -> "MessageStore const *":
        """
        getStore(Session self) -> MessageStore const *

        Parameters:
            self: FIX::Session *

        """
        return _quickfix.Session_getStore(self)

Session_swigregister = _quickfix.Session_swigregister
Session_swigregister(Session)

def Session_sendToTarget(*args) -> "std::string &, std::string &":
    """
    sendToTarget(Message message, std::string const & qualifier) -> bool

    Parameters:
        message: FIX::Message &
        qualifier: std::string const &

    sendToTarget(Message message) -> bool

    Parameters:
        message: FIX::Message &

    sendToTarget(Message message, SessionID sessionID) -> bool

    Parameters:
        message: FIX::Message &
        sessionID: FIX::SessionID const &

    sendToTarget(Message arg1, SenderCompID senderCompID, TargetCompID targetCompID, std::string const & qualifier) -> bool

    Parameters:
        arg1: FIX::Message &
        senderCompID: FIX::SenderCompID const &
        targetCompID: FIX::TargetCompID const &
        qualifier: std::string const &

    sendToTarget(Message arg1, SenderCompID senderCompID, TargetCompID targetCompID) -> bool

    Parameters:
        arg1: FIX::Message &
        senderCompID: FIX::SenderCompID const &
        targetCompID: FIX::TargetCompID const &

    sendToTarget(Message message, std::string const & senderCompID, std::string const & targetCompID, std::string const & qualifier) -> bool

    Parameters:
        message: FIX::Message &
        senderCompID: std::string const &
        targetCompID: std::string const &
        qualifier: std::string const &

    Session_sendToTarget(Message message, std::string const & senderCompID, std::string const & targetCompID) -> bool

    Parameters:
        message: FIX::Message &
        senderCompID: std::string const &
        targetCompID: std::string const &

    """
    return _quickfix.Session_sendToTarget(*args)

def Session_getSessions() -> "std::set< FIX::SessionID >":
    """Session_getSessions() -> std::set< FIX::SessionID >"""
    return _quickfix.Session_getSessions()

def Session_doesSessionExist(arg2: 'SessionID') -> "bool":
    """
    Session_doesSessionExist(SessionID arg2) -> bool

    Parameters:
        arg1: FIX::SessionID const &

    """
    return _quickfix.Session_doesSessionExist(arg2)

def Session_lookupSession(*args) -> "std::string &":
    """
    lookupSession(SessionID arg1) -> Session

    Parameters:
        arg1: FIX::SessionID const &

    lookupSession(std::string const & arg1, bool reverse=False) -> Session

    Parameters:
        arg1: std::string const &
        reverse: bool

    Session_lookupSession(std::string const & arg2) -> Session

    Parameters:
        arg1: std::string const &

    """
    return _quickfix.Session_lookupSession(*args)

def Session_isSessionRegistered(arg2: 'SessionID') -> "bool":
    """
    Session_isSessionRegistered(SessionID arg2) -> bool

    Parameters:
        arg1: FIX::SessionID const &

    """
    return _quickfix.Session_isSessionRegistered(arg2)

def Session_registerSession(arg2: 'SessionID') -> "FIX::Session *":
    """
    Session_registerSession(SessionID arg2) -> Session

    Parameters:
        arg1: FIX::SessionID const &

    """
    return _quickfix.Session_registerSession(arg2)

def Session_unregisterSession(arg2: 'SessionID') -> "void":
    """
    Session_unregisterSession(SessionID arg2)

    Parameters:
        arg1: FIX::SessionID const &

    """
    return _quickfix.Session_unregisterSession(arg2)

def Session_numSessions() -> "size_t":
    """Session_numSessions() -> size_t"""
    return _quickfix.Session_numSessions()

class LogFactory(_object):
    """Proxy of C++ FIX::LogFactory class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_LogFactory
    __del__ = lambda self: None

    def create(self, *args) -> "FIX::Log *":
        """
        create(LogFactory self) -> Log
        create(LogFactory self, SessionID arg2) -> Log

        Parameters:
            arg2: FIX::SessionID const &

        """
        return _quickfix.LogFactory_create(self, *args)


    def destroy(self, arg2: 'Log') -> "void":
        """
        destroy(LogFactory self, Log arg2)

        Parameters:
            arg2: FIX::Log *

        """
        return _quickfix.LogFactory_destroy(self, arg2)

LogFactory_swigregister = _quickfix.LogFactory_swigregister
LogFactory_swigregister(LogFactory)

class ScreenLogFactory(LogFactory):
    """Proxy of C++ FIX::ScreenLogFactory class"""
    __swig_setmethods__ = {}
    for _s in [LogFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenLogFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [LogFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenLogFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ScreenLogFactory self, SessionSettings settings) -> ScreenLogFactory

        Parameters:
            settings: FIX::SessionSettings const &

        __init__(FIX::ScreenLogFactory self, bool incoming, bool outgoing, bool event) -> ScreenLogFactory

        Parameters:
            incoming: bool
            outgoing: bool
            event: bool

        """
        this = _quickfix.new_ScreenLogFactory(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def create(self, *args) -> "FIX::Log *":
        """
        create(ScreenLogFactory self) -> Log
        create(ScreenLogFactory self, SessionID arg2) -> Log

        Parameters:
            arg2: FIX::SessionID const &

        """
        return _quickfix.ScreenLogFactory_create(self, *args)


    def destroy(self, log: 'Log') -> "void":
        """
        destroy(ScreenLogFactory self, Log log)

        Parameters:
            log: FIX::Log *

        """
        return _quickfix.ScreenLogFactory_destroy(self, log)

    __swig_destroy__ = _quickfix.delete_ScreenLogFactory
    __del__ = lambda self: None
ScreenLogFactory_swigregister = _quickfix.ScreenLogFactory_swigregister
ScreenLogFactory_swigregister(ScreenLogFactory)

class Log(_object):
    """Proxy of C++ FIX::Log class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Log
    __del__ = lambda self: None

    def clear(self) -> "void":
        """
        clear(Log self)

        Parameters:
            self: FIX::Log *

        """
        return _quickfix.Log_clear(self)


    def backup(self) -> "void":
        """
        backup(Log self)

        Parameters:
            self: FIX::Log *

        """
        return _quickfix.Log_backup(self)


    def onIncoming(self, arg2: 'std::string const &') -> "void":
        """
        onIncoming(Log self, std::string const & arg2)

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.Log_onIncoming(self, arg2)


    def onOutgoing(self, arg2: 'std::string const &') -> "void":
        """
        onOutgoing(Log self, std::string const & arg2)

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.Log_onOutgoing(self, arg2)


    def onEvent(self, arg2: 'std::string const &') -> "void":
        """
        onEvent(Log self, std::string const & arg2)

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.Log_onEvent(self, arg2)

Log_swigregister = _quickfix.Log_swigregister
Log_swigregister(Log)

class NullLog(Log):
    """Proxy of C++ FIX::NullLog class"""
    __swig_setmethods__ = {}
    for _s in [Log]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullLog, name, value)
    __swig_getmethods__ = {}
    for _s in [Log]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullLog, name)
    __repr__ = _swig_repr

    def clear(self) -> "void":
        """
        clear(NullLog self)

        Parameters:
            self: FIX::NullLog *

        """
        return _quickfix.NullLog_clear(self)


    def backup(self) -> "void":
        """
        backup(NullLog self)

        Parameters:
            self: FIX::NullLog *

        """
        return _quickfix.NullLog_backup(self)


    def onIncoming(self, arg2: 'std::string const &') -> "void":
        """
        onIncoming(NullLog self, std::string const & arg2)

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.NullLog_onIncoming(self, arg2)


    def onOutgoing(self, arg2: 'std::string const &') -> "void":
        """
        onOutgoing(NullLog self, std::string const & arg2)

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.NullLog_onOutgoing(self, arg2)


    def onEvent(self, arg2: 'std::string const &') -> "void":
        """
        onEvent(NullLog self, std::string const & arg2)

        Parameters:
            arg2: std::string const &

        """
        return _quickfix.NullLog_onEvent(self, arg2)


    def __init__(self):
        """__init__(FIX::NullLog self) -> NullLog"""
        this = _quickfix.new_NullLog()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NullLog
    __del__ = lambda self: None
NullLog_swigregister = _quickfix.NullLog_swigregister
NullLog_swigregister(NullLog)

class ScreenLog(Log):
    """Proxy of C++ FIX::ScreenLog class"""
    __swig_setmethods__ = {}
    for _s in [Log]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScreenLog, name, value)
    __swig_getmethods__ = {}
    for _s in [Log]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScreenLog, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::ScreenLog self, bool incoming, bool outgoing, bool event) -> ScreenLog

        Parameters:
            incoming: bool
            outgoing: bool
            event: bool

        __init__(FIX::ScreenLog self, SessionID sessionID, bool incoming, bool outgoing, bool event) -> ScreenLog

        Parameters:
            sessionID: FIX::SessionID const &
            incoming: bool
            outgoing: bool
            event: bool

        """
        this = _quickfix.new_ScreenLog(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def clear(self) -> "void":
        """
        clear(ScreenLog self)

        Parameters:
            self: FIX::ScreenLog *

        """
        return _quickfix.ScreenLog_clear(self)


    def backup(self) -> "void":
        """
        backup(ScreenLog self)

        Parameters:
            self: FIX::ScreenLog *

        """
        return _quickfix.ScreenLog_backup(self)


    def onIncoming(self, value: 'std::string const &') -> "void":
        """
        onIncoming(ScreenLog self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _quickfix.ScreenLog_onIncoming(self, value)


    def onOutgoing(self, value: 'std::string const &') -> "void":
        """
        onOutgoing(ScreenLog self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _quickfix.ScreenLog_onOutgoing(self, value)


    def onEvent(self, value: 'std::string const &') -> "void":
        """
        onEvent(ScreenLog self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _quickfix.ScreenLog_onEvent(self, value)


    def getMillisecondsInTimeStamp(self) -> "bool":
        """
        getMillisecondsInTimeStamp(ScreenLog self) -> bool

        Parameters:
            self: FIX::ScreenLog const *

        """
        return _quickfix.ScreenLog_getMillisecondsInTimeStamp(self)


    def setMillisecondsInTimeStamp(self, value: 'bool') -> "void":
        """
        setMillisecondsInTimeStamp(ScreenLog self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.ScreenLog_setMillisecondsInTimeStamp(self, value)

    __swig_destroy__ = _quickfix.delete_ScreenLog
    __del__ = lambda self: None
ScreenLog_swigregister = _quickfix.ScreenLog_swigregister
ScreenLog_swigregister(ScreenLog)

class FileLogFactory(LogFactory):
    """Proxy of C++ FIX::FileLogFactory class"""
    __swig_setmethods__ = {}
    for _s in [LogFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileLogFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [LogFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileLogFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FileLogFactory self, SessionSettings settings) -> FileLogFactory

        Parameters:
            settings: FIX::SessionSettings const &

        __init__(FIX::FileLogFactory self, std::string const & path) -> FileLogFactory

        Parameters:
            path: std::string const &

        __init__(FIX::FileLogFactory self, std::string const & path, std::string const & backupPath) -> FileLogFactory

        Parameters:
            path: std::string const &
            backupPath: std::string const &

        """
        this = _quickfix.new_FileLogFactory(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def create(self, *args) -> "FIX::Log *":
        """
        create(FileLogFactory self) -> Log
        create(FileLogFactory self, SessionID arg2) -> Log

        Parameters:
            arg2: FIX::SessionID const &

        """
        return _quickfix.FileLogFactory_create(self, *args)


    def destroy(self, log: 'Log') -> "void":
        """
        destroy(FileLogFactory self, Log log)

        Parameters:
            log: FIX::Log *

        """
        return _quickfix.FileLogFactory_destroy(self, log)

    __swig_destroy__ = _quickfix.delete_FileLogFactory
    __del__ = lambda self: None
FileLogFactory_swigregister = _quickfix.FileLogFactory_swigregister
FileLogFactory_swigregister(FileLogFactory)

class FileLog(Log):
    """Proxy of C++ FIX::FileLog class"""
    __swig_setmethods__ = {}
    for _s in [Log]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileLog, name, value)
    __swig_getmethods__ = {}
    for _s in [Log]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileLog, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FileLog self, std::string const & path) -> FileLog

        Parameters:
            path: std::string const &

        __init__(FIX::FileLog self, std::string const & path, std::string const & backupPath) -> FileLog

        Parameters:
            path: std::string const &
            backupPath: std::string const &

        __init__(FIX::FileLog self, std::string const & path, SessionID sessionID) -> FileLog

        Parameters:
            path: std::string const &
            sessionID: FIX::SessionID const &

        __init__(FIX::FileLog self, std::string const & path, std::string const & backupPath, SessionID sessionID) -> FileLog

        Parameters:
            path: std::string const &
            backupPath: std::string const &
            sessionID: FIX::SessionID const &

        """
        this = _quickfix.new_FileLog(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FileLog
    __del__ = lambda self: None

    def clear(self) -> "void":
        """
        clear(FileLog self)

        Parameters:
            self: FIX::FileLog *

        """
        return _quickfix.FileLog_clear(self)


    def backup(self) -> "void":
        """
        backup(FileLog self)

        Parameters:
            self: FIX::FileLog *

        """
        return _quickfix.FileLog_backup(self)


    def onIncoming(self, value: 'std::string const &') -> "void":
        """
        onIncoming(FileLog self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _quickfix.FileLog_onIncoming(self, value)


    def onOutgoing(self, value: 'std::string const &') -> "void":
        """
        onOutgoing(FileLog self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _quickfix.FileLog_onOutgoing(self, value)


    def onEvent(self, value: 'std::string const &') -> "void":
        """
        onEvent(FileLog self, std::string const & value)

        Parameters:
            value: std::string const &

        """
        return _quickfix.FileLog_onEvent(self, value)


    def getMillisecondsInTimeStamp(self) -> "bool":
        """
        getMillisecondsInTimeStamp(FileLog self) -> bool

        Parameters:
            self: FIX::FileLog const *

        """
        return _quickfix.FileLog_getMillisecondsInTimeStamp(self)


    def setMillisecondsInTimeStamp(self, value: 'bool') -> "void":
        """
        setMillisecondsInTimeStamp(FileLog self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.FileLog_setMillisecondsInTimeStamp(self, value)

FileLog_swigregister = _quickfix.FileLog_swigregister
FileLog_swigregister(FileLog)

class MessageStoreFactory(_object):
    """Proxy of C++ FIX::MessageStoreFactory class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStoreFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStoreFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_MessageStoreFactory
    __del__ = lambda self: None

    def create(self, arg2: 'SessionID') -> "FIX::MessageStore *":
        """
        create(MessageStoreFactory self, SessionID arg2) -> MessageStore

        Parameters:
            arg2: FIX::SessionID const &

        """
        return _quickfix.MessageStoreFactory_create(self, arg2)


    def destroy(self, arg2: 'MessageStore') -> "void":
        """
        destroy(MessageStoreFactory self, MessageStore arg2)

        Parameters:
            arg2: FIX::MessageStore *

        """
        return _quickfix.MessageStoreFactory_destroy(self, arg2)

MessageStoreFactory_swigregister = _quickfix.MessageStoreFactory_swigregister
MessageStoreFactory_swigregister(MessageStoreFactory)

class MemoryStoreFactory(MessageStoreFactory):
    """Proxy of C++ FIX::MemoryStoreFactory class"""
    __swig_setmethods__ = {}
    for _s in [MessageStoreFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryStoreFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStoreFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryStoreFactory, name)
    __repr__ = _swig_repr

    def create(self, arg2: 'SessionID') -> "FIX::MessageStore *":
        """
        create(MemoryStoreFactory self, SessionID arg2) -> MessageStore

        Parameters:
            arg2: FIX::SessionID const &

        """
        return _quickfix.MemoryStoreFactory_create(self, arg2)


    def destroy(self, arg2: 'MessageStore') -> "void":
        """
        destroy(MemoryStoreFactory self, MessageStore arg2)

        Parameters:
            arg2: FIX::MessageStore *

        """
        return _quickfix.MemoryStoreFactory_destroy(self, arg2)


    def __init__(self):
        """__init__(FIX::MemoryStoreFactory self) -> MemoryStoreFactory"""
        this = _quickfix.new_MemoryStoreFactory()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MemoryStoreFactory
    __del__ = lambda self: None
MemoryStoreFactory_swigregister = _quickfix.MemoryStoreFactory_swigregister
MemoryStoreFactory_swigregister(MemoryStoreFactory)

class MessageStore(_object):
    """Proxy of C++ FIX::MessageStore class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStore, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_MessageStore
    __del__ = lambda self: None

    def set(self, arg2: 'int', arg3: 'std::string const &') -> "bool":
        """
        set(MessageStore self, int arg2, std::string const & arg3) -> bool

        Parameters:
            arg2: int
            arg3: std::string const &

        """
        return _quickfix.MessageStore_set(self, arg2, arg3)


    def get(self, arg2: 'int', arg3: 'int', arg4: 'std::vector< std::string > &') -> "void":
        """
        get(MessageStore self, int arg2, int arg3, std::vector< std::string > & arg4)

        Parameters:
            arg2: int
            arg3: int
            arg4: std::vector< std::string > &

        """
        return _quickfix.MessageStore_get(self, arg2, arg3, arg4)


    def getNextSenderMsgSeqNum(self) -> "int":
        """
        getNextSenderMsgSeqNum(MessageStore self) -> int

        Parameters:
            self: FIX::MessageStore const *

        """
        return _quickfix.MessageStore_getNextSenderMsgSeqNum(self)


    def getNextTargetMsgSeqNum(self) -> "int":
        """
        getNextTargetMsgSeqNum(MessageStore self) -> int

        Parameters:
            self: FIX::MessageStore const *

        """
        return _quickfix.MessageStore_getNextTargetMsgSeqNum(self)


    def setNextSenderMsgSeqNum(self, arg2: 'int') -> "void":
        """
        setNextSenderMsgSeqNum(MessageStore self, int arg2)

        Parameters:
            arg2: int

        """
        return _quickfix.MessageStore_setNextSenderMsgSeqNum(self, arg2)


    def setNextTargetMsgSeqNum(self, arg2: 'int') -> "void":
        """
        setNextTargetMsgSeqNum(MessageStore self, int arg2)

        Parameters:
            arg2: int

        """
        return _quickfix.MessageStore_setNextTargetMsgSeqNum(self, arg2)


    def incrNextSenderMsgSeqNum(self) -> "void":
        """
        incrNextSenderMsgSeqNum(MessageStore self)

        Parameters:
            self: FIX::MessageStore *

        """
        return _quickfix.MessageStore_incrNextSenderMsgSeqNum(self)


    def incrNextTargetMsgSeqNum(self) -> "void":
        """
        incrNextTargetMsgSeqNum(MessageStore self)

        Parameters:
            self: FIX::MessageStore *

        """
        return _quickfix.MessageStore_incrNextTargetMsgSeqNum(self)


    def getCreationTime(self) -> "UtcTimeStamp":
        """
        getCreationTime(MessageStore self) -> UtcTimeStamp

        Parameters:
            self: FIX::MessageStore const *

        """
        return _quickfix.MessageStore_getCreationTime(self)


    def reset(self) -> "void":
        """
        reset(MessageStore self)

        Parameters:
            self: FIX::MessageStore *

        """
        return _quickfix.MessageStore_reset(self)


    def refresh(self) -> "void":
        """
        refresh(MessageStore self)

        Parameters:
            self: FIX::MessageStore *

        """
        return _quickfix.MessageStore_refresh(self)

MessageStore_swigregister = _quickfix.MessageStore_swigregister
MessageStore_swigregister(MessageStore)

class MemoryStore(MessageStore):
    """Proxy of C++ FIX::MemoryStore class"""
    __swig_setmethods__ = {}
    for _s in [MessageStore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryStore, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FIX::MemoryStore self) -> MemoryStore"""
        this = _quickfix.new_MemoryStore()
        try:
            self.this.append(this)
        except:
            self.this = this

    def set(self, arg2: 'int', arg3: 'std::string const &') -> "bool":
        """
        set(MemoryStore self, int arg2, std::string const & arg3) -> bool

        Parameters:
            arg2: int
            arg3: std::string const &

        """
        return _quickfix.MemoryStore_set(self, arg2, arg3)


    def get(self, arg2: 'int', arg3: 'int', arg4: 'std::vector< std::string > &') -> "void":
        """
        get(MemoryStore self, int arg2, int arg3, std::vector< std::string > & arg4)

        Parameters:
            arg2: int
            arg3: int
            arg4: std::vector< std::string > &

        """
        return _quickfix.MemoryStore_get(self, arg2, arg3, arg4)


    def getNextSenderMsgSeqNum(self) -> "int":
        """
        getNextSenderMsgSeqNum(MemoryStore self) -> int

        Parameters:
            self: FIX::MemoryStore const *

        """
        return _quickfix.MemoryStore_getNextSenderMsgSeqNum(self)


    def getNextTargetMsgSeqNum(self) -> "int":
        """
        getNextTargetMsgSeqNum(MemoryStore self) -> int

        Parameters:
            self: FIX::MemoryStore const *

        """
        return _quickfix.MemoryStore_getNextTargetMsgSeqNum(self)


    def setNextSenderMsgSeqNum(self, value: 'int') -> "void":
        """
        setNextSenderMsgSeqNum(MemoryStore self, int value)

        Parameters:
            value: int

        """
        return _quickfix.MemoryStore_setNextSenderMsgSeqNum(self, value)


    def setNextTargetMsgSeqNum(self, value: 'int') -> "void":
        """
        setNextTargetMsgSeqNum(MemoryStore self, int value)

        Parameters:
            value: int

        """
        return _quickfix.MemoryStore_setNextTargetMsgSeqNum(self, value)


    def incrNextSenderMsgSeqNum(self) -> "void":
        """
        incrNextSenderMsgSeqNum(MemoryStore self)

        Parameters:
            self: FIX::MemoryStore *

        """
        return _quickfix.MemoryStore_incrNextSenderMsgSeqNum(self)


    def incrNextTargetMsgSeqNum(self) -> "void":
        """
        incrNextTargetMsgSeqNum(MemoryStore self)

        Parameters:
            self: FIX::MemoryStore *

        """
        return _quickfix.MemoryStore_incrNextTargetMsgSeqNum(self)


    def setCreationTime(self, creationTime: 'UtcTimeStamp const &') -> "void":
        """
        setCreationTime(MemoryStore self, UtcTimeStamp const & creationTime)

        Parameters:
            creationTime: UtcTimeStamp const &

        """
        return _quickfix.MemoryStore_setCreationTime(self, creationTime)


    def getCreationTime(self) -> "UtcTimeStamp":
        """
        getCreationTime(MemoryStore self) -> UtcTimeStamp

        Parameters:
            self: FIX::MemoryStore const *

        """
        return _quickfix.MemoryStore_getCreationTime(self)


    def reset(self) -> "void":
        """
        reset(MemoryStore self)

        Parameters:
            self: FIX::MemoryStore *

        """
        return _quickfix.MemoryStore_reset(self)


    def refresh(self) -> "void":
        """
        refresh(MemoryStore self)

        Parameters:
            self: FIX::MemoryStore *

        """
        return _quickfix.MemoryStore_refresh(self)

    __swig_destroy__ = _quickfix.delete_MemoryStore
    __del__ = lambda self: None
MemoryStore_swigregister = _quickfix.MemoryStore_swigregister
MemoryStore_swigregister(MemoryStore)

class MessageStoreFactoryExceptionWrapper(_object):
    """Proxy of C++ FIX::MessageStoreFactoryExceptionWrapper class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStoreFactoryExceptionWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStoreFactoryExceptionWrapper, name)
    __repr__ = _swig_repr

    def __init__(self, pFactory: 'MessageStoreFactory'):
        """
        __init__(FIX::MessageStoreFactoryExceptionWrapper self, MessageStoreFactory pFactory) -> MessageStoreFactoryExceptionWrapper

        Parameters:
            pFactory: FIX::MessageStoreFactory *

        """
        this = _quickfix.new_MessageStoreFactoryExceptionWrapper(pFactory)
        try:
            self.this.append(this)
        except:
            self.this = this

    def create(self, arg2: 'SessionID', arg3: 'bool &', arg4: 'ConfigError') -> "FIX::MessageStore *":
        """
        create(MessageStoreFactoryExceptionWrapper self, SessionID arg2, bool & arg3, ConfigError arg4) -> MessageStore

        Parameters:
            arg2: FIX::SessionID const &
            arg3: bool &
            arg4: FIX::ConfigError &

        """
        return _quickfix.MessageStoreFactoryExceptionWrapper_create(self, arg2, arg3, arg4)


    def destroy(self, arg2: 'MessageStore') -> "void":
        """
        destroy(MessageStoreFactoryExceptionWrapper self, MessageStore arg2)

        Parameters:
            arg2: FIX::MessageStore *

        """
        return _quickfix.MessageStoreFactoryExceptionWrapper_destroy(self, arg2)

    __swig_destroy__ = _quickfix.delete_MessageStoreFactoryExceptionWrapper
    __del__ = lambda self: None
MessageStoreFactoryExceptionWrapper_swigregister = _quickfix.MessageStoreFactoryExceptionWrapper_swigregister
MessageStoreFactoryExceptionWrapper_swigregister(MessageStoreFactoryExceptionWrapper)

class MessageStoreExceptionWrapper(_object):
    """Proxy of C++ FIX::MessageStoreExceptionWrapper class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessageStoreExceptionWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MessageStoreExceptionWrapper, name)
    __repr__ = _swig_repr

    def __init__(self, pStore: 'MessageStore'):
        """
        __init__(FIX::MessageStoreExceptionWrapper self, MessageStore pStore) -> MessageStoreExceptionWrapper

        Parameters:
            pStore: FIX::MessageStore *

        """
        this = _quickfix.new_MessageStoreExceptionWrapper(pStore)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_MessageStoreExceptionWrapper
    __del__ = lambda self: None

    def set(self, arg2: 'int', arg3: 'std::string const &', arg4: 'bool &', arg5: 'IOException') -> "bool":
        """
        set(MessageStoreExceptionWrapper self, int arg2, std::string const & arg3, bool & arg4, IOException arg5) -> bool

        Parameters:
            arg2: int
            arg3: std::string const &
            arg4: bool &
            arg5: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_set(self, arg2, arg3, arg4, arg5)


    def get(self, arg2: 'int', arg3: 'int', arg4: 'std::vector< std::string > &', arg5: 'bool &', arg6: 'IOException') -> "void":
        """
        get(MessageStoreExceptionWrapper self, int arg2, int arg3, std::vector< std::string > & arg4, bool & arg5, IOException arg6)

        Parameters:
            arg2: int
            arg3: int
            arg4: std::vector< std::string > &
            arg5: bool &
            arg6: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_get(self, arg2, arg3, arg4, arg5, arg6)


    def getNextSenderMsgSeqNum(self, arg2: 'bool &', arg3: 'IOException') -> "int":
        """
        getNextSenderMsgSeqNum(MessageStoreExceptionWrapper self, bool & arg2, IOException arg3) -> int

        Parameters:
            arg2: bool &
            arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_getNextSenderMsgSeqNum(self, arg2, arg3)


    def getNextTargetMsgSeqNum(self, arg2: 'bool &', arg3: 'IOException') -> "int":
        """
        getNextTargetMsgSeqNum(MessageStoreExceptionWrapper self, bool & arg2, IOException arg3) -> int

        Parameters:
            arg2: bool &
            arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_getNextTargetMsgSeqNum(self, arg2, arg3)


    def setNextSenderMsgSeqNum(self, arg2: 'int', arg3: 'bool &', arg4: 'IOException') -> "void":
        """
        setNextSenderMsgSeqNum(MessageStoreExceptionWrapper self, int arg2, bool & arg3, IOException arg4)

        Parameters:
            arg2: int
            arg3: bool &
            arg4: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_setNextSenderMsgSeqNum(self, arg2, arg3, arg4)


    def setNextTargetMsgSeqNum(self, arg2: 'int', arg3: 'bool &', arg4: 'IOException') -> "void":
        """
        setNextTargetMsgSeqNum(MessageStoreExceptionWrapper self, int arg2, bool & arg3, IOException arg4)

        Parameters:
            arg2: int
            arg3: bool &
            arg4: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_setNextTargetMsgSeqNum(self, arg2, arg3, arg4)


    def incrNextSenderMsgSeqNum(self, arg2: 'bool &', arg3: 'IOException') -> "void":
        """
        incrNextSenderMsgSeqNum(MessageStoreExceptionWrapper self, bool & arg2, IOException arg3)

        Parameters:
            arg2: bool &
            arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum(self, arg2, arg3)


    def incrNextTargetMsgSeqNum(self, arg2: 'bool &', arg3: 'IOException') -> "void":
        """
        incrNextTargetMsgSeqNum(MessageStoreExceptionWrapper self, bool & arg2, IOException arg3)

        Parameters:
            arg2: bool &
            arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum(self, arg2, arg3)


    def getCreationTime(self, arg2: 'bool &', arg3: 'IOException') -> "UtcTimeStamp":
        """
        getCreationTime(MessageStoreExceptionWrapper self, bool & arg2, IOException arg3) -> UtcTimeStamp

        Parameters:
            arg2: bool &
            arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_getCreationTime(self, arg2, arg3)


    def reset(self, arg2: 'bool &', arg3: 'IOException') -> "void":
        """
        reset(MessageStoreExceptionWrapper self, bool & arg2, IOException arg3)

        Parameters:
            arg2: bool &
            arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_reset(self, arg2, arg3)


    def refresh(self, arg2: 'bool &', arg3: 'IOException') -> "void":
        """
        refresh(MessageStoreExceptionWrapper self, bool & arg2, IOException arg3)

        Parameters:
            arg2: bool &
            arg3: FIX::IOException &

        """
        return _quickfix.MessageStoreExceptionWrapper_refresh(self, arg2, arg3)

MessageStoreExceptionWrapper_swigregister = _quickfix.MessageStoreExceptionWrapper_swigregister
MessageStoreExceptionWrapper_swigregister(MessageStoreExceptionWrapper)

class FileStoreFactory(MessageStoreFactory):
    """Proxy of C++ FIX::FileStoreFactory class"""
    __swig_setmethods__ = {}
    for _s in [MessageStoreFactory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStoreFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStoreFactory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileStoreFactory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::FileStoreFactory self, SessionSettings settings) -> FileStoreFactory

        Parameters:
            settings: FIX::SessionSettings const &

        __init__(FIX::FileStoreFactory self, std::string const & path) -> FileStoreFactory

        Parameters:
            path: std::string const &

        """
        this = _quickfix.new_FileStoreFactory(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def create(self, arg2: 'SessionID') -> "FIX::MessageStore *":
        """
        create(FileStoreFactory self, SessionID arg2) -> MessageStore

        Parameters:
            arg2: FIX::SessionID const &

        """
        return _quickfix.FileStoreFactory_create(self, arg2)


    def destroy(self, arg2: 'MessageStore') -> "void":
        """
        destroy(FileStoreFactory self, MessageStore arg2)

        Parameters:
            arg2: FIX::MessageStore *

        """
        return _quickfix.FileStoreFactory_destroy(self, arg2)

    __swig_destroy__ = _quickfix.delete_FileStoreFactory
    __del__ = lambda self: None
FileStoreFactory_swigregister = _quickfix.FileStoreFactory_swigregister
FileStoreFactory_swigregister(FileStoreFactory)

class FileStore(MessageStore):
    """Proxy of C++ FIX::FileStore class"""
    __swig_setmethods__ = {}
    for _s in [MessageStore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStore, name, value)
    __swig_getmethods__ = {}
    for _s in [MessageStore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileStore, name)
    __repr__ = _swig_repr

    def __init__(self, arg2: 'std::string', s: 'SessionID'):
        """
        __init__(FIX::FileStore self, std::string arg2, SessionID s) -> FileStore

        Parameters:
            arg2: std::string
            s: FIX::SessionID const &

        """
        this = _quickfix.new_FileStore(arg2, s)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_FileStore
    __del__ = lambda self: None

    def set(self, arg2: 'int', arg3: 'std::string const &') -> "bool":
        """
        set(FileStore self, int arg2, std::string const & arg3) -> bool

        Parameters:
            arg2: int
            arg3: std::string const &

        """
        return _quickfix.FileStore_set(self, arg2, arg3)


    def get(self, arg2: 'int', arg3: 'int', arg4: 'std::vector< std::string > &') -> "void":
        """
        get(FileStore self, int arg2, int arg3, std::vector< std::string > & arg4)

        Parameters:
            arg2: int
            arg3: int
            arg4: std::vector< std::string > &

        """
        return _quickfix.FileStore_get(self, arg2, arg3, arg4)


    def getNextSenderMsgSeqNum(self) -> "int":
        """
        getNextSenderMsgSeqNum(FileStore self) -> int

        Parameters:
            self: FIX::FileStore const *

        """
        return _quickfix.FileStore_getNextSenderMsgSeqNum(self)


    def getNextTargetMsgSeqNum(self) -> "int":
        """
        getNextTargetMsgSeqNum(FileStore self) -> int

        Parameters:
            self: FIX::FileStore const *

        """
        return _quickfix.FileStore_getNextTargetMsgSeqNum(self)


    def setNextSenderMsgSeqNum(self, value: 'int') -> "void":
        """
        setNextSenderMsgSeqNum(FileStore self, int value)

        Parameters:
            value: int

        """
        return _quickfix.FileStore_setNextSenderMsgSeqNum(self, value)


    def setNextTargetMsgSeqNum(self, value: 'int') -> "void":
        """
        setNextTargetMsgSeqNum(FileStore self, int value)

        Parameters:
            value: int

        """
        return _quickfix.FileStore_setNextTargetMsgSeqNum(self, value)


    def incrNextSenderMsgSeqNum(self) -> "void":
        """
        incrNextSenderMsgSeqNum(FileStore self)

        Parameters:
            self: FIX::FileStore *

        """
        return _quickfix.FileStore_incrNextSenderMsgSeqNum(self)


    def incrNextTargetMsgSeqNum(self) -> "void":
        """
        incrNextTargetMsgSeqNum(FileStore self)

        Parameters:
            self: FIX::FileStore *

        """
        return _quickfix.FileStore_incrNextTargetMsgSeqNum(self)


    def getCreationTime(self) -> "UtcTimeStamp":
        """
        getCreationTime(FileStore self) -> UtcTimeStamp

        Parameters:
            self: FIX::FileStore const *

        """
        return _quickfix.FileStore_getCreationTime(self)


    def reset(self) -> "void":
        """
        reset(FileStore self)

        Parameters:
            self: FIX::FileStore *

        """
        return _quickfix.FileStore_reset(self)


    def refresh(self) -> "void":
        """
        refresh(FileStore self)

        Parameters:
            self: FIX::FileStore *

        """
        return _quickfix.FileStore_refresh(self)

FileStore_swigregister = _quickfix.FileStore_swigregister
FileStore_swigregister(FileStore)

class Application(_object):
    """Proxy of C++ FIX::Application class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Application, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Application, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Application
    __del__ = lambda self: None

    def onCreate(self, arg0: 'SessionID') -> "void":
        """
        onCreate(Application self, SessionID arg0)

        Parameters:
            arg0: FIX::SessionID const &

        """
        return _quickfix.Application_onCreate(self, arg0)


    def onLogon(self, arg0: 'SessionID') -> "void":
        """
        onLogon(Application self, SessionID arg0)

        Parameters:
            arg0: FIX::SessionID const &

        """
        return _quickfix.Application_onLogon(self, arg0)


    def onLogout(self, arg0: 'SessionID') -> "void":
        """
        onLogout(Application self, SessionID arg0)

        Parameters:
            arg0: FIX::SessionID const &

        """
        return _quickfix.Application_onLogout(self, arg0)


    def toAdmin(self, arg0: 'Message', arg1: 'SessionID') -> "void":
        """
        toAdmin(Application self, Message arg0, SessionID arg1)

        Parameters:
            arg0: FIX::Message &
            arg1: FIX::SessionID const &

        """
        return _quickfix.Application_toAdmin(self, arg0, arg1)


    def toApp(self, arg0: 'Message', arg1: 'SessionID') -> "void":
        """
        toApp(Application self, Message arg0, SessionID arg1)

        Parameters:
            arg0: FIX::Message &
            arg1: FIX::SessionID const &

        """
        return _quickfix.Application_toApp(self, arg0, arg1)


    def fromAdmin(self, arg0: 'Message', arg1: 'SessionID') -> "void":
        """
        fromAdmin(Application self, Message arg0, SessionID arg1)

        Parameters:
            arg0: FIX::Message const &
            arg1: FIX::SessionID const &

        """
        return _quickfix.Application_fromAdmin(self, arg0, arg1)


    def fromApp(self, arg0: 'Message', arg1: 'SessionID') -> "void":
        """
        fromApp(Application self, Message arg0, SessionID arg1)

        Parameters:
            arg0: FIX::Message const &
            arg1: FIX::SessionID const &

        """
        return _quickfix.Application_fromApp(self, arg0, arg1)


    def __init__(self):
        """
        __init__(FIX::Application self) -> Application

        Parameters:
            self: PyObject *

        """
        if self.__class__ == Application:
            _self = None
        else:
            _self = self
        this = _quickfix.new_Application(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _quickfix.disown_Application(self)
        return weakref_proxy(self)
Application_swigregister = _quickfix.Application_swigregister
Application_swigregister(Application)

class SynchronizedApplication(Application):
    """Proxy of C++ FIX::SynchronizedApplication class"""
    __swig_setmethods__ = {}
    for _s in [Application]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynchronizedApplication, name, value)
    __swig_getmethods__ = {}
    for _s in [Application]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SynchronizedApplication, name)
    __repr__ = _swig_repr

    def __init__(self, app: 'Application'):
        """
        __init__(FIX::SynchronizedApplication self, Application app) -> SynchronizedApplication

        Parameters:
            app: FIX::Application &

        """
        this = _quickfix.new_SynchronizedApplication(app)
        try:
            self.this.append(this)
        except:
            self.this = this

    def onCreate(self, sessionID: 'SessionID') -> "void":
        """
        onCreate(SynchronizedApplication self, SessionID sessionID)

        Parameters:
            sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_onCreate(self, sessionID)


    def onLogon(self, sessionID: 'SessionID') -> "void":
        """
        onLogon(SynchronizedApplication self, SessionID sessionID)

        Parameters:
            sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_onLogon(self, sessionID)


    def onLogout(self, sessionID: 'SessionID') -> "void":
        """
        onLogout(SynchronizedApplication self, SessionID sessionID)

        Parameters:
            sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_onLogout(self, sessionID)


    def toAdmin(self, message: 'Message', sessionID: 'SessionID') -> "void":
        """
        toAdmin(SynchronizedApplication self, Message message, SessionID sessionID)

        Parameters:
            message: FIX::Message &
            sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_toAdmin(self, message, sessionID)


    def toApp(self, message: 'Message', sessionID: 'SessionID') -> "void":
        """
        toApp(SynchronizedApplication self, Message message, SessionID sessionID)

        Parameters:
            message: FIX::Message &
            sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_toApp(self, message, sessionID)


    def fromAdmin(self, message: 'Message', sessionID: 'SessionID') -> "void":
        """
        fromAdmin(SynchronizedApplication self, Message message, SessionID sessionID)

        Parameters:
            message: FIX::Message const &
            sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_fromAdmin(self, message, sessionID)


    def fromApp(self, message: 'Message', sessionID: 'SessionID') -> "void":
        """
        fromApp(SynchronizedApplication self, Message message, SessionID sessionID)

        Parameters:
            message: FIX::Message const &
            sessionID: FIX::SessionID const &

        """
        return _quickfix.SynchronizedApplication_fromApp(self, message, sessionID)

    __swig_setmethods__["m_mutex"] = _quickfix.SynchronizedApplication_m_mutex_set
    __swig_getmethods__["m_mutex"] = _quickfix.SynchronizedApplication_m_mutex_get
    if _newclass:
        m_mutex = _swig_property(_quickfix.SynchronizedApplication_m_mutex_get, _quickfix.SynchronizedApplication_m_mutex_set)

    def app(self) -> "FIX::Application &":
        """
        app(SynchronizedApplication self) -> Application

        Parameters:
            self: FIX::SynchronizedApplication *

        """
        return _quickfix.SynchronizedApplication_app(self)

    __swig_setmethods__["m_app"] = _quickfix.SynchronizedApplication_m_app_set
    __swig_getmethods__["m_app"] = _quickfix.SynchronizedApplication_m_app_get
    if _newclass:
        m_app = _swig_property(_quickfix.SynchronizedApplication_m_app_get, _quickfix.SynchronizedApplication_m_app_set)
    __swig_destroy__ = _quickfix.delete_SynchronizedApplication
    __del__ = lambda self: None
SynchronizedApplication_swigregister = _quickfix.SynchronizedApplication_swigregister
SynchronizedApplication_swigregister(SynchronizedApplication)

class NullApplication(Application):
    """Proxy of C++ FIX::NullApplication class"""
    __swig_setmethods__ = {}
    for _s in [Application]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullApplication, name, value)
    __swig_getmethods__ = {}
    for _s in [Application]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullApplication, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(FIX::NullApplication self) -> NullApplication"""
        this = _quickfix.new_NullApplication()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_NullApplication
    __del__ = lambda self: None
NullApplication_swigregister = _quickfix.NullApplication_swigregister
NullApplication_swigregister(NullApplication)

class Initiator(_object):
    """Proxy of C++ FIX::Initiator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Initiator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Initiator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Initiator
    __del__ = lambda self: None

    def start(self) -> "void":
        """
        start(Initiator self)

        Parameters:
            self: FIX::Initiator *

        """
        return _quickfix.Initiator_start(self)


    def block(self) -> "void":
        """
        block(Initiator self)

        Parameters:
            self: FIX::Initiator *

        """
        return _quickfix.Initiator_block(self)


    def poll(self, timeout: 'double'=0.0) -> "bool":
        """
        poll(Initiator self, double timeout=0.0) -> bool

        Parameters:
            timeout: double

        poll(Initiator self) -> bool

        Parameters:
            self: FIX::Initiator *

        """
        return _quickfix.Initiator_poll(self, timeout)


    def stop(self, force: 'bool'=False) -> "void":
        """
        stop(Initiator self, bool force=False)

        Parameters:
            force: bool

        stop(Initiator self)

        Parameters:
            self: FIX::Initiator *

        """
        return _quickfix.Initiator_stop(self, force)


    def isLoggedOn(self) -> "bool":
        """
        isLoggedOn(Initiator self) -> bool

        Parameters:
            self: FIX::Initiator *

        """
        return _quickfix.Initiator_isLoggedOn(self)


    def getSessions(self) -> "std::set< FIX::SessionID > const &":
        """
        getSessions(Initiator self) -> std::set< FIX::SessionID > const &

        Parameters:
            self: FIX::Initiator const *

        """
        return _quickfix.Initiator_getSessions(self)


    def getSession(self, *args) -> "FIX::Session *":
        """
        getSession(Initiator self, SessionID sessionID, Responder & arg3) -> Session

        Parameters:
            sessionID: FIX::SessionID const &
            arg3: Responder &

        getSession(Initiator self, SessionID sessionID) -> Session

        Parameters:
            sessionID: FIX::SessionID const &

        """
        return _quickfix.Initiator_getSession(self, *args)


    def getSessionSettings(self, sessionID: 'SessionID') -> "FIX::Dictionary const *const":
        """
        getSessionSettings(Initiator self, SessionID sessionID) -> Dictionary

        Parameters:
            sessionID: FIX::SessionID const &

        """
        return _quickfix.Initiator_getSessionSettings(self, sessionID)


    def has(self, id: 'SessionID') -> "bool":
        """
        has(Initiator self, SessionID id) -> bool

        Parameters:
            id: FIX::SessionID const &

        """
        return _quickfix.Initiator_has(self, id)


    def isStopped(self) -> "bool":
        """
        isStopped(Initiator self) -> bool

        Parameters:
            self: FIX::Initiator *

        """
        return _quickfix.Initiator_isStopped(self)


    def getApplication(self) -> "FIX::Application &":
        """
        getApplication(Initiator self) -> Application

        Parameters:
            self: FIX::Initiator *

        """
        return _quickfix.Initiator_getApplication(self)


    def getMessageStoreFactory(self) -> "FIX::MessageStoreFactory &":
        """
        getMessageStoreFactory(Initiator self) -> MessageStoreFactory

        Parameters:
            self: FIX::Initiator *

        """
        return _quickfix.Initiator_getMessageStoreFactory(self)


    def getLog(self) -> "FIX::Log *":
        """
        getLog(Initiator self) -> Log

        Parameters:
            self: FIX::Initiator *

        """
        return _quickfix.Initiator_getLog(self)

Initiator_swigregister = _quickfix.Initiator_swigregister
Initiator_swigregister(Initiator)

class SocketInitiatorBase(Initiator):
    """Proxy of C++ FIX::SocketInitiator class"""
    __swig_setmethods__ = {}
    for _s in [Initiator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketInitiatorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Initiator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketInitiatorBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        SocketInitiator(Application arg2, MessageStoreFactory arg3, SessionSettings arg4) -> SocketInitiatorBase

        Parameters:
            arg2: FIX::Application &
            arg3: FIX::MessageStoreFactory &
            arg4: FIX::SessionSettings const &

        __init__(FIX::SocketInitiator self, Application arg2, MessageStoreFactory arg3, SessionSettings arg4, LogFactory arg5) -> SocketInitiatorBase

        Parameters:
            arg2: FIX::Application &
            arg3: FIX::MessageStoreFactory &
            arg4: FIX::SessionSettings const &
            arg5: FIX::LogFactory &

        """
        this = _quickfix.new_SocketInitiatorBase(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SocketInitiatorBase
    __del__ = lambda self: None
SocketInitiatorBase_swigregister = _quickfix.SocketInitiatorBase_swigregister
SocketInitiatorBase_swigregister(SocketInitiatorBase)

class Acceptor(_object):
    """Proxy of C++ FIX::Acceptor class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Acceptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Acceptor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Acceptor
    __del__ = lambda self: None

    def getLog(self) -> "FIX::Log *":
        """
        getLog(Acceptor self) -> Log

        Parameters:
            self: FIX::Acceptor *

        """
        return _quickfix.Acceptor_getLog(self)


    def start(self) -> "void":
        """
        start(Acceptor self)

        Parameters:
            self: FIX::Acceptor *

        """
        return _quickfix.Acceptor_start(self)


    def block(self) -> "void":
        """
        block(Acceptor self)

        Parameters:
            self: FIX::Acceptor *

        """
        return _quickfix.Acceptor_block(self)


    def poll(self, timeout: 'double'=0.0) -> "bool":
        """
        poll(Acceptor self, double timeout=0.0) -> bool

        Parameters:
            timeout: double

        poll(Acceptor self) -> bool

        Parameters:
            self: FIX::Acceptor *

        """
        return _quickfix.Acceptor_poll(self, timeout)


    def stop(self, force: 'bool'=False) -> "void":
        """
        stop(Acceptor self, bool force=False)

        Parameters:
            force: bool

        stop(Acceptor self)

        Parameters:
            self: FIX::Acceptor *

        """
        return _quickfix.Acceptor_stop(self, force)


    def isLoggedOn(self) -> "bool":
        """
        isLoggedOn(Acceptor self) -> bool

        Parameters:
            self: FIX::Acceptor *

        """
        return _quickfix.Acceptor_isLoggedOn(self)


    def getSessions(self) -> "std::set< FIX::SessionID > const &":
        """
        getSessions(Acceptor self) -> std::set< FIX::SessionID > const &

        Parameters:
            self: FIX::Acceptor const *

        """
        return _quickfix.Acceptor_getSessions(self)


    def getSession(self, *args) -> "FIX::Session *":
        """
        getSession(Acceptor self, std::string const & msg, Responder & arg3) -> Session

        Parameters:
            msg: std::string const &
            arg3: Responder &

        getSession(Acceptor self, SessionID sessionID) -> Session

        Parameters:
            sessionID: FIX::SessionID const &

        """
        return _quickfix.Acceptor_getSession(self, *args)


    def getSessionSettings(self, sessionID: 'SessionID') -> "FIX::Dictionary const *const":
        """
        getSessionSettings(Acceptor self, SessionID sessionID) -> Dictionary

        Parameters:
            sessionID: FIX::SessionID const &

        """
        return _quickfix.Acceptor_getSessionSettings(self, sessionID)


    def has(self, id: 'SessionID') -> "bool":
        """
        has(Acceptor self, SessionID id) -> bool

        Parameters:
            id: FIX::SessionID const &

        """
        return _quickfix.Acceptor_has(self, id)


    def isStopped(self) -> "bool":
        """
        isStopped(Acceptor self) -> bool

        Parameters:
            self: FIX::Acceptor *

        """
        return _quickfix.Acceptor_isStopped(self)


    def getApplication(self) -> "FIX::Application &":
        """
        getApplication(Acceptor self) -> Application

        Parameters:
            self: FIX::Acceptor *

        """
        return _quickfix.Acceptor_getApplication(self)


    def getMessageStoreFactory(self) -> "FIX::MessageStoreFactory &":
        """
        getMessageStoreFactory(Acceptor self) -> MessageStoreFactory

        Parameters:
            self: FIX::Acceptor *

        """
        return _quickfix.Acceptor_getMessageStoreFactory(self)

Acceptor_swigregister = _quickfix.Acceptor_swigregister
Acceptor_swigregister(Acceptor)

class SocketAcceptorBase(Acceptor):
    """Proxy of C++ FIX::SocketAcceptor class"""
    __swig_setmethods__ = {}
    for _s in [Acceptor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SocketAcceptorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Acceptor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SocketAcceptorBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        SocketAcceptor(Application arg2, MessageStoreFactory arg3, SessionSettings arg4) -> SocketAcceptorBase

        Parameters:
            arg2: FIX::Application &
            arg3: FIX::MessageStoreFactory &
            arg4: FIX::SessionSettings const &

        __init__(FIX::SocketAcceptor self, Application arg2, MessageStoreFactory arg3, SessionSettings arg4, LogFactory arg5) -> SocketAcceptorBase

        Parameters:
            arg2: FIX::Application &
            arg3: FIX::MessageStoreFactory &
            arg4: FIX::SessionSettings const &
            arg5: FIX::LogFactory &

        """
        this = _quickfix.new_SocketAcceptorBase(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_SocketAcceptorBase
    __del__ = lambda self: None
SocketAcceptorBase_swigregister = _quickfix.SocketAcceptorBase_swigregister
SocketAcceptorBase_swigregister(SocketAcceptorBase)

class DataDictionary(_object):
    """Proxy of C++ FIX::DataDictionary class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataDictionary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataDictionary, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FIX::DataDictionary self) -> DataDictionary
        __init__(FIX::DataDictionary self, DataDictionary copy) -> DataDictionary

        Parameters:
            copy: FIX::DataDictionary const &

        __init__(FIX::DataDictionary self, std::istream & stream) -> DataDictionary

        Parameters:
            stream: std::istream &

        __init__(FIX::DataDictionary self, std::string const & url) -> DataDictionary

        Parameters:
            url: std::string const &

        """
        this = _quickfix.new_DataDictionary(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _quickfix.delete_DataDictionary
    __del__ = lambda self: None

    def readFromURL(self, url: 'std::string const &') -> "void":
        """
        readFromURL(DataDictionary self, std::string const & url)

        Parameters:
            url: std::string const &

        """
        return _quickfix.DataDictionary_readFromURL(self, url)


    def readFromDocument(self, pDoc: 'DOMDocumentPtr') -> "void":
        """
        readFromDocument(DataDictionary self, DOMDocumentPtr pDoc)

        Parameters:
            pDoc: DOMDocumentPtr

        """
        return _quickfix.DataDictionary_readFromDocument(self, pDoc)


    def readFromStream(self, stream: 'std::istream &') -> "void":
        """
        readFromStream(DataDictionary self, std::istream & stream)

        Parameters:
            stream: std::istream &

        """
        return _quickfix.DataDictionary_readFromStream(self, stream)


    def getOrderedFields(self) -> "message_order const &":
        """
        getOrderedFields(DataDictionary self) -> message_order const &

        Parameters:
            self: FIX::DataDictionary const *

        """
        return _quickfix.DataDictionary_getOrderedFields(self)


    def setVersion(self, beginString: 'std::string const &') -> "void":
        """
        setVersion(DataDictionary self, std::string const & beginString)

        Parameters:
            beginString: std::string const &

        """
        return _quickfix.DataDictionary_setVersion(self, beginString)


    def getVersion(self) -> "std::string":
        """
        getVersion(DataDictionary self) -> std::string

        Parameters:
            self: FIX::DataDictionary const *

        """
        return _quickfix.DataDictionary_getVersion(self)


    def addField(self, field: 'int') -> "void":
        """
        addField(DataDictionary self, int field)

        Parameters:
            field: int

        """
        return _quickfix.DataDictionary_addField(self, field)


    def addFieldName(self, field: 'int', name: 'std::string const &') -> "void":
        """
        addFieldName(DataDictionary self, int field, std::string const & name)

        Parameters:
            field: int
            name: std::string const &

        """
        return _quickfix.DataDictionary_addFieldName(self, field, name)


    def getFieldName(self, field: 'int', name: 'std::string &') -> "bool":
        """
        getFieldName(DataDictionary self, int field, std::string & name) -> bool

        Parameters:
            field: int
            name: std::string &

        """
        return _quickfix.DataDictionary_getFieldName(self, field, name)


    def getFieldTag(self, name: 'std::string const &', field: 'int &') -> "bool":
        """
        getFieldTag(DataDictionary self, std::string const & name, int & field) -> bool

        Parameters:
            name: std::string const &
            field: int &

        """
        return _quickfix.DataDictionary_getFieldTag(self, name, field)


    def addValueName(self, field: 'int', value: 'std::string const &', name: 'std::string const &') -> "void":
        """
        addValueName(DataDictionary self, int field, std::string const & value, std::string const & name)

        Parameters:
            field: int
            value: std::string const &
            name: std::string const &

        """
        return _quickfix.DataDictionary_addValueName(self, field, value, name)


    def getValueName(self, field: 'int', value: 'std::string const &', name: 'std::string &') -> "bool":
        """
        getValueName(DataDictionary self, int field, std::string const & value, std::string & name) -> bool

        Parameters:
            field: int
            value: std::string const &
            name: std::string &

        """
        return _quickfix.DataDictionary_getValueName(self, field, value, name)


    def isField(self, field: 'int') -> "bool":
        """
        isField(DataDictionary self, int field) -> bool

        Parameters:
            field: int

        """
        return _quickfix.DataDictionary_isField(self, field)


    def addMsgType(self, msgType: 'std::string const &') -> "void":
        """
        addMsgType(DataDictionary self, std::string const & msgType)

        Parameters:
            msgType: std::string const &

        """
        return _quickfix.DataDictionary_addMsgType(self, msgType)


    def isMsgType(self, msgType: 'std::string const &') -> "bool":
        """
        isMsgType(DataDictionary self, std::string const & msgType) -> bool

        Parameters:
            msgType: std::string const &

        """
        return _quickfix.DataDictionary_isMsgType(self, msgType)


    def addMsgField(self, msgType: 'std::string const &', field: 'int') -> "void":
        """
        addMsgField(DataDictionary self, std::string const & msgType, int field)

        Parameters:
            msgType: std::string const &
            field: int

        """
        return _quickfix.DataDictionary_addMsgField(self, msgType, field)


    def isMsgField(self, msgType: 'std::string const &', field: 'int') -> "bool":
        """
        isMsgField(DataDictionary self, std::string const & msgType, int field) -> bool

        Parameters:
            msgType: std::string const &
            field: int

        """
        return _quickfix.DataDictionary_isMsgField(self, msgType, field)


    def addHeaderField(self, field: 'int', required: 'bool') -> "void":
        """
        addHeaderField(DataDictionary self, int field, bool required)

        Parameters:
            field: int
            required: bool

        """
        return _quickfix.DataDictionary_addHeaderField(self, field, required)


    def isHeaderField(self, field: 'int') -> "bool":
        """
        isHeaderField(DataDictionary self, int field) -> bool

        Parameters:
            field: int

        """
        return _quickfix.DataDictionary_isHeaderField(self, field)


    def addTrailerField(self, field: 'int', required: 'bool') -> "void":
        """
        addTrailerField(DataDictionary self, int field, bool required)

        Parameters:
            field: int
            required: bool

        """
        return _quickfix.DataDictionary_addTrailerField(self, field, required)


    def isTrailerField(self, field: 'int') -> "bool":
        """
        isTrailerField(DataDictionary self, int field) -> bool

        Parameters:
            field: int

        """
        return _quickfix.DataDictionary_isTrailerField(self, field)


    def addFieldType(self, field: 'int', type: 'FIX::TYPE::Type') -> "void":
        """
        addFieldType(DataDictionary self, int field, FIX::TYPE::Type type)

        Parameters:
            field: int
            type: FIX::TYPE::Type

        """
        return _quickfix.DataDictionary_addFieldType(self, field, type)


    def getFieldType(self, field: 'int', type: 'FIX::TYPE::Type &') -> "bool":
        """
        getFieldType(DataDictionary self, int field, FIX::TYPE::Type & type) -> bool

        Parameters:
            field: int
            type: FIX::TYPE::Type &

        """
        return _quickfix.DataDictionary_getFieldType(self, field, type)


    def addRequiredField(self, msgType: 'std::string const &', field: 'int') -> "void":
        """
        addRequiredField(DataDictionary self, std::string const & msgType, int field)

        Parameters:
            msgType: std::string const &
            field: int

        """
        return _quickfix.DataDictionary_addRequiredField(self, msgType, field)


    def isRequiredField(self, msgType: 'std::string const &', field: 'int') -> "bool":
        """
        isRequiredField(DataDictionary self, std::string const & msgType, int field) -> bool

        Parameters:
            msgType: std::string const &
            field: int

        """
        return _quickfix.DataDictionary_isRequiredField(self, msgType, field)


    def addFieldValue(self, field: 'int', value: 'std::string const &') -> "void":
        """
        addFieldValue(DataDictionary self, int field, std::string const & value)

        Parameters:
            field: int
            value: std::string const &

        """
        return _quickfix.DataDictionary_addFieldValue(self, field, value)


    def hasFieldValue(self, field: 'int') -> "bool":
        """
        hasFieldValue(DataDictionary self, int field) -> bool

        Parameters:
            field: int

        """
        return _quickfix.DataDictionary_hasFieldValue(self, field)


    def isFieldValue(self, field: 'int', value: 'std::string const &') -> "bool":
        """
        isFieldValue(DataDictionary self, int field, std::string const & value) -> bool

        Parameters:
            field: int
            value: std::string const &

        """
        return _quickfix.DataDictionary_isFieldValue(self, field, value)


    def addGroup(self, msg: 'std::string const &', field: 'int', delim: 'int', dataDictionary: 'DataDictionary') -> "void":
        """
        addGroup(DataDictionary self, std::string const & msg, int field, int delim, DataDictionary dataDictionary)

        Parameters:
            msg: std::string const &
            field: int
            delim: int
            dataDictionary: FIX::DataDictionary const &

        """
        return _quickfix.DataDictionary_addGroup(self, msg, field, delim, dataDictionary)


    def isGroup(self, msg: 'std::string const &', field: 'int') -> "bool":
        """
        isGroup(DataDictionary self, std::string const & msg, int field) -> bool

        Parameters:
            msg: std::string const &
            field: int

        """
        return _quickfix.DataDictionary_isGroup(self, msg, field)


    def getGroup(self, msg: 'std::string const &', field: 'int', delim: 'int &', pDataDictionary: 'FIX::DataDictionary const *&') -> "bool":
        """
        getGroup(DataDictionary self, std::string const & msg, int field, int & delim, FIX::DataDictionary const *& pDataDictionary) -> bool

        Parameters:
            msg: std::string const &
            field: int
            delim: int &
            pDataDictionary: FIX::DataDictionary const *&

        """
        return _quickfix.DataDictionary_getGroup(self, msg, field, delim, pDataDictionary)


    def isDataField(self, field: 'int') -> "bool":
        """
        isDataField(DataDictionary self, int field) -> bool

        Parameters:
            field: int

        """
        return _quickfix.DataDictionary_isDataField(self, field)


    def isMultipleValueField(self, field: 'int') -> "bool":
        """
        isMultipleValueField(DataDictionary self, int field) -> bool

        Parameters:
            field: int

        """
        return _quickfix.DataDictionary_isMultipleValueField(self, field)


    def checkFieldsOutOfOrder(self, value: 'bool') -> "void":
        """
        checkFieldsOutOfOrder(DataDictionary self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.DataDictionary_checkFieldsOutOfOrder(self, value)


    def checkFieldsHaveValues(self, value: 'bool') -> "void":
        """
        checkFieldsHaveValues(DataDictionary self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.DataDictionary_checkFieldsHaveValues(self, value)


    def checkUserDefinedFields(self, value: 'bool') -> "void":
        """
        checkUserDefinedFields(DataDictionary self, bool value)

        Parameters:
            value: bool

        """
        return _quickfix.DataDictionary_checkUserDefinedFields(self, value)


    def validate(self, *args) -> "void":
        """
        validate(DataDictionary self, Message message, DataDictionary pSessionDD, DataDictionary pAppID)

        Parameters:
            message: FIX::Message const &
            pSessionDD: FIX::DataDictionary const *const
            pAppID: FIX::DataDictionary const *const

        validate(DataDictionary self, Message message)

        Parameters:
            message: FIX::Message const &

        validate(DataDictionary self, Message message, bool bodyOnly)

        Parameters:
            message: FIX::Message const &
            bodyOnly: bool

        """
        return _quickfix.DataDictionary_validate(self, *args)

DataDictionary_swigregister = _quickfix.DataDictionary_swigregister
DataDictionary_swigregister(DataDictionary)

#ifdef SWIGPYTHON
try:
  import thread
except ImportError:
  import _thread as thread

def _quickfix_start_thread(i_or_a):
  i_or_a.block()
#endif

#ifdef SWIGPYTHON
class SocketInitiator(SocketInitiatorBase):
    def __init__(self, application, storeFactory, settings, logFactory=None):
        if logFactory is None:
            super(SocketInitiator, self).__init__(application, storeFactory, settings)
        else:
            super(SocketInitiator, self).__init__(application, storeFactory, settings, logFactory)

        self.application = application
        self.storeFactory = storeFactory
        self.settings = settings
        self.logFactory = logFactory


class SocketAcceptor(SocketAcceptorBase):
    def __init__(self, application, storeFactory, settings, logFactory=None):
        if logFactory is None:
            super(SocketAcceptor, self).__init__(application, storeFactory, settings)
        else:
            super(SocketAcceptor, self).__init__(application, storeFactory, settings, logFactory)

        self.application = application
        self.storeFactory = storeFactory
        self.settings = settings
        self.logFactory = logFactory


class SSLSocketInitiator(SSLSocketInitiatorBase):
    def __init__(self, application, storeFactory, settings, logFactory=None):
        if logFactory is None:
            super(SSLSocketInitiator, self).__init__(application, storeFactory, settings)
        else:
            super(SSLSocketInitiator, self).__init__(application, storeFactory, settings, logFactory)

        self.application = application
        self.storeFactory = storeFactory
        self.settings = settings
        self.logFactory = logFactory

class SSLSocketAcceptor(SSLSocketAcceptorBase):
    def __init__(self, application, storeFactory, settings, logFactory=None):
        if logFactory is None:
            super(SSLSocketAcceptor, self).__init__(application, storeFactory, settings)
        else:
            super(SSLSocketAcceptor, self).__init__(application, storeFactory, settings, logFactory)

        self.application = application
        self.storeFactory = storeFactory
        self.settings = settings
        self.logFactory = logFactory
#endif

# This file is compatible with both classic and new-style classes.


import quickfix


class BeginSeqNo(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(BeginSeqNo, self).__init__(7)
        else:
            super(BeginSeqNo, self).__init__(7, data)


class BeginString(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BeginString, self).__init__(8)
        else:
            super(BeginString, self).__init__(8, data)


class BodyLength(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(BodyLength, self).__init__(9)
        else:
            super(BodyLength, self).__init__(9, data)


class CheckSum(quickfix.CheckSumField):
    def __init__(self, data=None):
        if data is None:
            super(CheckSum, self).__init__(10)
        else:
            super(CheckSum, self).__init__(10, data)


class EndSeqNo(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EndSeqNo, self).__init__(16)
        else:
            super(EndSeqNo, self).__init__(16, data)


class MsgSeqNum(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MsgSeqNum, self).__init__(34)
        else:
            super(MsgSeqNum, self).__init__(34, data)


class MsgType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MsgType, self).__init__(35)
        else:
            super(MsgType, self).__init__(35, data)


class NewSeqNo(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NewSeqNo, self).__init__(36)
        else:
            super(NewSeqNo, self).__init__(36, data)


class PossDupFlag(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(PossDupFlag, self).__init__(43)
        else:
            super(PossDupFlag, self).__init__(43, data)


class RefSeqNum(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RefSeqNum, self).__init__(45)
        else:
            super(RefSeqNum, self).__init__(45, data)


class SenderCompID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SenderCompID, self).__init__(49)
        else:
            super(SenderCompID, self).__init__(49, data)


class SenderSubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SenderSubID, self).__init__(50)
        else:
            super(SenderSubID, self).__init__(50, data)


class SendingTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(SendingTime, self).__init__(52)
        else:
            super(SendingTime, self).__init__(52, data)


class TargetCompID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TargetCompID, self).__init__(56)
        else:
            super(TargetCompID, self).__init__(56, data)


class TargetSubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TargetSubID, self).__init__(57)
        else:
            super(TargetSubID, self).__init__(57, data)


class Text(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Text, self).__init__(58)
        else:
            super(Text, self).__init__(58, data)


class Signature(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Signature, self).__init__(89)
        else:
            super(Signature, self).__init__(89, data)


class SecureDataLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecureDataLen, self).__init__(90)
        else:
            super(SecureDataLen, self).__init__(90, data)


class SecureData(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecureData, self).__init__(91)
        else:
            super(SecureData, self).__init__(91, data)


class SignatureLength(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SignatureLength, self).__init__(93)
        else:
            super(SignatureLength, self).__init__(93, data)


class RawDataLength(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RawDataLength, self).__init__(95)
        else:
            super(RawDataLength, self).__init__(95, data)


class RawData(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RawData, self).__init__(96)
        else:
            super(RawData, self).__init__(96, data)


class PossResend(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(PossResend, self).__init__(97)
        else:
            super(PossResend, self).__init__(97, data)


class EncryptMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncryptMethod, self).__init__(98)
        else:
            super(EncryptMethod, self).__init__(98, data)


class HeartBtInt(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(HeartBtInt, self).__init__(108)
        else:
            super(HeartBtInt, self).__init__(108, data)


class TestReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TestReqID, self).__init__(112)
        else:
            super(TestReqID, self).__init__(112, data)


class OnBehalfOfCompID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OnBehalfOfCompID, self).__init__(115)
        else:
            super(OnBehalfOfCompID, self).__init__(115, data)


class OnBehalfOfSubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OnBehalfOfSubID, self).__init__(116)
        else:
            super(OnBehalfOfSubID, self).__init__(116, data)


class OrigSendingTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(OrigSendingTime, self).__init__(122)
        else:
            super(OrigSendingTime, self).__init__(122, data)


class GapFillFlag(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(GapFillFlag, self).__init__(123)
        else:
            super(GapFillFlag, self).__init__(123, data)


class DeliverToCompID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DeliverToCompID, self).__init__(128)
        else:
            super(DeliverToCompID, self).__init__(128, data)


class DeliverToSubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DeliverToSubID, self).__init__(129)
        else:
            super(DeliverToSubID, self).__init__(129, data)


class ResetSeqNumFlag(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(ResetSeqNumFlag, self).__init__(141)
        else:
            super(ResetSeqNumFlag, self).__init__(141, data)


class SenderLocationID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SenderLocationID, self).__init__(142)
        else:
            super(SenderLocationID, self).__init__(142, data)


class TargetLocationID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TargetLocationID, self).__init__(143)
        else:
            super(TargetLocationID, self).__init__(143, data)


class OnBehalfOfLocationID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OnBehalfOfLocationID, self).__init__(144)
        else:
            super(OnBehalfOfLocationID, self).__init__(144, data)


class DeliverToLocationID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DeliverToLocationID, self).__init__(145)
        else:
            super(DeliverToLocationID, self).__init__(145, data)


class XmlDataLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(XmlDataLen, self).__init__(212)
        else:
            super(XmlDataLen, self).__init__(212, data)


class XmlData(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(XmlData, self).__init__(213)
        else:
            super(XmlData, self).__init__(213, data)


class MessageEncoding(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MessageEncoding, self).__init__(347)
        else:
            super(MessageEncoding, self).__init__(347, data)


class EncodedTextLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedTextLen, self).__init__(354)
        else:
            super(EncodedTextLen, self).__init__(354, data)


class EncodedText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedText, self).__init__(355)
        else:
            super(EncodedText, self).__init__(355, data)


class LastMsgSeqNumProcessed(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LastMsgSeqNumProcessed, self).__init__(369)
        else:
            super(LastMsgSeqNumProcessed, self).__init__(369, data)


class RefTagID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RefTagID, self).__init__(371)
        else:
            super(RefTagID, self).__init__(371, data)


class RefMsgType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RefMsgType, self).__init__(372)
        else:
            super(RefMsgType, self).__init__(372, data)


class SessionRejectReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SessionRejectReason, self).__init__(373)
        else:
            super(SessionRejectReason, self).__init__(373, data)


class MaxMessageSize(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MaxMessageSize, self).__init__(383)
        else:
            super(MaxMessageSize, self).__init__(383, data)


class NoMsgTypes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoMsgTypes, self).__init__(384)
        else:
            super(NoMsgTypes, self).__init__(384, data)


class MsgDirection(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(MsgDirection, self).__init__(385)
        else:
            super(MsgDirection, self).__init__(385, data)


class TestMessageIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(TestMessageIndicator, self).__init__(464)
        else:
            super(TestMessageIndicator, self).__init__(464, data)


class Username(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Username, self).__init__(553)
        else:
            super(Username, self).__init__(553, data)


class Password(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Password, self).__init__(554)
        else:
            super(Password, self).__init__(554, data)


class NoHops(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoHops, self).__init__(627)
        else:
            super(NoHops, self).__init__(627, data)


class HopCompID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(HopCompID, self).__init__(628)
        else:
            super(HopCompID, self).__init__(628, data)


class HopSendingTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(HopSendingTime, self).__init__(629)
        else:
            super(HopSendingTime, self).__init__(629, data)


class HopRefID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(HopRefID, self).__init__(630)
        else:
            super(HopRefID, self).__init__(630, data)


class NextExpectedMsgSeqNum(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NextExpectedMsgSeqNum, self).__init__(789)
        else:
            super(NextExpectedMsgSeqNum, self).__init__(789, data)


class ApplVerID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ApplVerID, self).__init__(1128)
        else:
            super(ApplVerID, self).__init__(1128, data)


class CstmApplVerID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CstmApplVerID, self).__init__(1129)
        else:
            super(CstmApplVerID, self).__init__(1129, data)


class RefApplVerID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RefApplVerID, self).__init__(1130)
        else:
            super(RefApplVerID, self).__init__(1130, data)


class RefCstmApplVerID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RefCstmApplVerID, self).__init__(1131)
        else:
            super(RefCstmApplVerID, self).__init__(1131, data)


class DefaultApplVerID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DefaultApplVerID, self).__init__(1137)
        else:
            super(DefaultApplVerID, self).__init__(1137, data)


class Account(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Account, self).__init__(1)
        else:
            super(Account, self).__init__(1, data)


class AdvId(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AdvId, self).__init__(2)
        else:
            super(AdvId, self).__init__(2, data)


class AdvRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AdvRefID, self).__init__(3)
        else:
            super(AdvRefID, self).__init__(3, data)


class AdvSide(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(AdvSide, self).__init__(4)
        else:
            super(AdvSide, self).__init__(4, data)


class AdvTransType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AdvTransType, self).__init__(5)
        else:
            super(AdvTransType, self).__init__(5, data)


class AvgPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AvgPx, self).__init__(6)
        else:
            super(AvgPx, self).__init__(6, data)


class ClOrdID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ClOrdID, self).__init__(11)
        else:
            super(ClOrdID, self).__init__(11, data)


class Commission(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(Commission, self).__init__(12)
        else:
            super(Commission, self).__init__(12, data)


class CommType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(CommType, self).__init__(13)
        else:
            super(CommType, self).__init__(13, data)


class CumQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(CumQty, self).__init__(14)
        else:
            super(CumQty, self).__init__(14, data)


class Currency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Currency, self).__init__(15)
        else:
            super(Currency, self).__init__(15, data)


class ExecID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ExecID, self).__init__(17)
        else:
            super(ExecID, self).__init__(17, data)


class ExecInst(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ExecInst, self).__init__(18)
        else:
            super(ExecInst, self).__init__(18, data)


class ExecRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ExecRefID, self).__init__(19)
        else:
            super(ExecRefID, self).__init__(19, data)


class ExecTransType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(ExecTransType, self).__init__(20)
        else:
            super(ExecTransType, self).__init__(20, data)


class HandlInst(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(HandlInst, self).__init__(21)
        else:
            super(HandlInst, self).__init__(21, data)


class IDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(IDSource, self).__init__(22)
        else:
            super(IDSource, self).__init__(22, data)


class IOIid(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(IOIid, self).__init__(23)
        else:
            super(IOIid, self).__init__(23, data)


class IOIOthSvc(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(IOIOthSvc, self).__init__(24)
        else:
            super(IOIOthSvc, self).__init__(24, data)


class IOIQltyInd(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(IOIQltyInd, self).__init__(25)
        else:
            super(IOIQltyInd, self).__init__(25, data)


class IOIRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(IOIRefID, self).__init__(26)
        else:
            super(IOIRefID, self).__init__(26, data)


class IOIShares(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(IOIShares, self).__init__(27)
        else:
            super(IOIShares, self).__init__(27, data)


class IOITransType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(IOITransType, self).__init__(28)
        else:
            super(IOITransType, self).__init__(28, data)


class LastCapacity(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(LastCapacity, self).__init__(29)
        else:
            super(LastCapacity, self).__init__(29, data)


class LastMkt(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LastMkt, self).__init__(30)
        else:
            super(LastMkt, self).__init__(30, data)


class LastPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LastPx, self).__init__(31)
        else:
            super(LastPx, self).__init__(31, data)


class LastShares(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LastShares, self).__init__(32)
        else:
            super(LastShares, self).__init__(32, data)


class LinesOfText(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LinesOfText, self).__init__(33)
        else:
            super(LinesOfText, self).__init__(33, data)


class OrderID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OrderID, self).__init__(37)
        else:
            super(OrderID, self).__init__(37, data)


class OrderQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OrderQty, self).__init__(38)
        else:
            super(OrderQty, self).__init__(38, data)


class OrdStatus(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(OrdStatus, self).__init__(39)
        else:
            super(OrdStatus, self).__init__(39, data)


class OrdType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(OrdType, self).__init__(40)
        else:
            super(OrdType, self).__init__(40, data)


class OrigClOrdID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OrigClOrdID, self).__init__(41)
        else:
            super(OrigClOrdID, self).__init__(41, data)


class OrigTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(OrigTime, self).__init__(42)
        else:
            super(OrigTime, self).__init__(42, data)


class Price(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(Price, self).__init__(44)
        else:
            super(Price, self).__init__(44, data)


class RelatdSym(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RelatdSym, self).__init__(46)
        else:
            super(RelatdSym, self).__init__(46, data)


class Rule80A(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(Rule80A, self).__init__(47)
        else:
            super(Rule80A, self).__init__(47, data)


class SecurityID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityID, self).__init__(48)
        else:
            super(SecurityID, self).__init__(48, data)


class Shares(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(Shares, self).__init__(53)
        else:
            super(Shares, self).__init__(53, data)


class Side(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(Side, self).__init__(54)
        else:
            super(Side, self).__init__(54, data)


class Symbol(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Symbol, self).__init__(55)
        else:
            super(Symbol, self).__init__(55, data)


class TimeInForce(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TimeInForce, self).__init__(59)
        else:
            super(TimeInForce, self).__init__(59, data)


class TransactTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(TransactTime, self).__init__(60)
        else:
            super(TransactTime, self).__init__(60, data)


class Urgency(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(Urgency, self).__init__(61)
        else:
            super(Urgency, self).__init__(61, data)


class ValidUntilTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(ValidUntilTime, self).__init__(62)
        else:
            super(ValidUntilTime, self).__init__(62, data)


class SettlmntTyp(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SettlmntTyp, self).__init__(63)
        else:
            super(SettlmntTyp, self).__init__(63, data)


class FutSettDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(FutSettDate, self).__init__(64)
        else:
            super(FutSettDate, self).__init__(64, data)


class SymbolSfx(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SymbolSfx, self).__init__(65)
        else:
            super(SymbolSfx, self).__init__(65, data)


class ListID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ListID, self).__init__(66)
        else:
            super(ListID, self).__init__(66, data)


class ListSeqNo(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ListSeqNo, self).__init__(67)
        else:
            super(ListSeqNo, self).__init__(67, data)


class ListNoOrds(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ListNoOrds, self).__init__(68)
        else:
            super(ListNoOrds, self).__init__(68, data)


class ListExecInst(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ListExecInst, self).__init__(69)
        else:
            super(ListExecInst, self).__init__(69, data)


class AllocID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AllocID, self).__init__(70)
        else:
            super(AllocID, self).__init__(70, data)


class AllocTransType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(AllocTransType, self).__init__(71)
        else:
            super(AllocTransType, self).__init__(71, data)


class RefAllocID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RefAllocID, self).__init__(72)
        else:
            super(RefAllocID, self).__init__(72, data)


class NoOrders(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoOrders, self).__init__(73)
        else:
            super(NoOrders, self).__init__(73, data)


class AvgPrxPrecision(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AvgPrxPrecision, self).__init__(74)
        else:
            super(AvgPrxPrecision, self).__init__(74, data)


class TradeDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeDate, self).__init__(75)
        else:
            super(TradeDate, self).__init__(75, data)


class ExecBroker(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ExecBroker, self).__init__(76)
        else:
            super(ExecBroker, self).__init__(76, data)


class OpenClose(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(OpenClose, self).__init__(77)
        else:
            super(OpenClose, self).__init__(77, data)


class NoAllocs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoAllocs, self).__init__(78)
        else:
            super(NoAllocs, self).__init__(78, data)


class AllocAccount(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AllocAccount, self).__init__(79)
        else:
            super(AllocAccount, self).__init__(79, data)


class AllocShares(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AllocShares, self).__init__(80)
        else:
            super(AllocShares, self).__init__(80, data)


class ProcessCode(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(ProcessCode, self).__init__(81)
        else:
            super(ProcessCode, self).__init__(81, data)


class NoRpts(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoRpts, self).__init__(82)
        else:
            super(NoRpts, self).__init__(82, data)


class RptSeq(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RptSeq, self).__init__(83)
        else:
            super(RptSeq, self).__init__(83, data)


class CxlQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(CxlQty, self).__init__(84)
        else:
            super(CxlQty, self).__init__(84, data)


class NoDlvyInst(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoDlvyInst, self).__init__(85)
        else:
            super(NoDlvyInst, self).__init__(85, data)


class DlvyInst(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DlvyInst, self).__init__(86)
        else:
            super(DlvyInst, self).__init__(86, data)


class AllocStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocStatus, self).__init__(87)
        else:
            super(AllocStatus, self).__init__(87, data)


class AllocRejCode(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocRejCode, self).__init__(88)
        else:
            super(AllocRejCode, self).__init__(88, data)


class BrokerOfCredit(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BrokerOfCredit, self).__init__(92)
        else:
            super(BrokerOfCredit, self).__init__(92, data)


class EmailType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(EmailType, self).__init__(94)
        else:
            super(EmailType, self).__init__(94, data)


class StopPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(StopPx, self).__init__(99)
        else:
            super(StopPx, self).__init__(99, data)


class ExDestination(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ExDestination, self).__init__(100)
        else:
            super(ExDestination, self).__init__(100, data)


class CxlRejReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CxlRejReason, self).__init__(102)
        else:
            super(CxlRejReason, self).__init__(102, data)


class OrdRejReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(OrdRejReason, self).__init__(103)
        else:
            super(OrdRejReason, self).__init__(103, data)


class IOIQualifier(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(IOIQualifier, self).__init__(104)
        else:
            super(IOIQualifier, self).__init__(104, data)


class WaveNo(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(WaveNo, self).__init__(105)
        else:
            super(WaveNo, self).__init__(105, data)


class Issuer(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Issuer, self).__init__(106)
        else:
            super(Issuer, self).__init__(106, data)


class SecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityDesc, self).__init__(107)
        else:
            super(SecurityDesc, self).__init__(107, data)


class ClientID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ClientID, self).__init__(109)
        else:
            super(ClientID, self).__init__(109, data)


class MinQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MinQty, self).__init__(110)
        else:
            super(MinQty, self).__init__(110, data)


class MaxFloor(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MaxFloor, self).__init__(111)
        else:
            super(MaxFloor, self).__init__(111, data)


class ReportToExch(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(ReportToExch, self).__init__(113)
        else:
            super(ReportToExch, self).__init__(113, data)


class LocateReqd(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(LocateReqd, self).__init__(114)
        else:
            super(LocateReqd, self).__init__(114, data)


class QuoteID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteID, self).__init__(117)
        else:
            super(QuoteID, self).__init__(117, data)


class NetMoney(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(NetMoney, self).__init__(118)
        else:
            super(NetMoney, self).__init__(118, data)


class SettlCurrAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SettlCurrAmt, self).__init__(119)
        else:
            super(SettlCurrAmt, self).__init__(119, data)


class SettlCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlCurrency, self).__init__(120)
        else:
            super(SettlCurrency, self).__init__(120, data)


class ForexReq(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(ForexReq, self).__init__(121)
        else:
            super(ForexReq, self).__init__(121, data)


class NoExecs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoExecs, self).__init__(124)
        else:
            super(NoExecs, self).__init__(124, data)


class CxlType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(CxlType, self).__init__(125)
        else:
            super(CxlType, self).__init__(125, data)


class ExpireTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(ExpireTime, self).__init__(126)
        else:
            super(ExpireTime, self).__init__(126, data)


class DKReason(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DKReason, self).__init__(127)
        else:
            super(DKReason, self).__init__(127, data)


class IOINaturalFlag(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(IOINaturalFlag, self).__init__(130)
        else:
            super(IOINaturalFlag, self).__init__(130, data)


class QuoteReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteReqID, self).__init__(131)
        else:
            super(QuoteReqID, self).__init__(131, data)


class BidPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(BidPx, self).__init__(132)
        else:
            super(BidPx, self).__init__(132, data)


class OfferPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OfferPx, self).__init__(133)
        else:
            super(OfferPx, self).__init__(133, data)


class BidSize(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(BidSize, self).__init__(134)
        else:
            super(BidSize, self).__init__(134, data)


class OfferSize(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OfferSize, self).__init__(135)
        else:
            super(OfferSize, self).__init__(135, data)


class NoMiscFees(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoMiscFees, self).__init__(136)
        else:
            super(NoMiscFees, self).__init__(136, data)


class MiscFeeAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MiscFeeAmt, self).__init__(137)
        else:
            super(MiscFeeAmt, self).__init__(137, data)


class MiscFeeCurr(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MiscFeeCurr, self).__init__(138)
        else:
            super(MiscFeeCurr, self).__init__(138, data)


class MiscFeeType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MiscFeeType, self).__init__(139)
        else:
            super(MiscFeeType, self).__init__(139, data)


class PrevClosePx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PrevClosePx, self).__init__(140)
        else:
            super(PrevClosePx, self).__init__(140, data)


class NoRelatedSym(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoRelatedSym, self).__init__(146)
        else:
            super(NoRelatedSym, self).__init__(146, data)


class Subject(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Subject, self).__init__(147)
        else:
            super(Subject, self).__init__(147, data)


class Headline(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Headline, self).__init__(148)
        else:
            super(Headline, self).__init__(148, data)


class URLLink(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(URLLink, self).__init__(149)
        else:
            super(URLLink, self).__init__(149, data)


class ExecType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(ExecType, self).__init__(150)
        else:
            super(ExecType, self).__init__(150, data)


class LeavesQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LeavesQty, self).__init__(151)
        else:
            super(LeavesQty, self).__init__(151, data)


class CashOrderQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(CashOrderQty, self).__init__(152)
        else:
            super(CashOrderQty, self).__init__(152, data)


class AllocAvgPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AllocAvgPx, self).__init__(153)
        else:
            super(AllocAvgPx, self).__init__(153, data)


class AllocNetMoney(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AllocNetMoney, self).__init__(154)
        else:
            super(AllocNetMoney, self).__init__(154, data)


class SettlCurrFxRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SettlCurrFxRate, self).__init__(155)
        else:
            super(SettlCurrFxRate, self).__init__(155, data)


class SettlCurrFxRateCalc(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SettlCurrFxRateCalc, self).__init__(156)
        else:
            super(SettlCurrFxRateCalc, self).__init__(156, data)


class NumDaysInterest(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NumDaysInterest, self).__init__(157)
        else:
            super(NumDaysInterest, self).__init__(157, data)


class AccruedInterestRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AccruedInterestRate, self).__init__(158)
        else:
            super(AccruedInterestRate, self).__init__(158, data)


class AccruedInterestAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AccruedInterestAmt, self).__init__(159)
        else:
            super(AccruedInterestAmt, self).__init__(159, data)


class SettlInstMode(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SettlInstMode, self).__init__(160)
        else:
            super(SettlInstMode, self).__init__(160, data)


class AllocText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AllocText, self).__init__(161)
        else:
            super(AllocText, self).__init__(161, data)


class SettlInstID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlInstID, self).__init__(162)
        else:
            super(SettlInstID, self).__init__(162, data)


class SettlInstTransType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SettlInstTransType, self).__init__(163)
        else:
            super(SettlInstTransType, self).__init__(163, data)


class EmailThreadID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EmailThreadID, self).__init__(164)
        else:
            super(EmailThreadID, self).__init__(164, data)


class SettlInstSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SettlInstSource, self).__init__(165)
        else:
            super(SettlInstSource, self).__init__(165, data)


class SettlLocation(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlLocation, self).__init__(166)
        else:
            super(SettlLocation, self).__init__(166, data)


class SecurityType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityType, self).__init__(167)
        else:
            super(SecurityType, self).__init__(167, data)


class EffectiveTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(EffectiveTime, self).__init__(168)
        else:
            super(EffectiveTime, self).__init__(168, data)


class StandInstDbType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StandInstDbType, self).__init__(169)
        else:
            super(StandInstDbType, self).__init__(169, data)


class StandInstDbName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StandInstDbName, self).__init__(170)
        else:
            super(StandInstDbName, self).__init__(170, data)


class StandInstDbID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StandInstDbID, self).__init__(171)
        else:
            super(StandInstDbID, self).__init__(171, data)


class SettlDeliveryType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SettlDeliveryType, self).__init__(172)
        else:
            super(SettlDeliveryType, self).__init__(172, data)


class SettlDepositoryCode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlDepositoryCode, self).__init__(173)
        else:
            super(SettlDepositoryCode, self).__init__(173, data)


class SettlBrkrCode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlBrkrCode, self).__init__(174)
        else:
            super(SettlBrkrCode, self).__init__(174, data)


class SettlInstCode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlInstCode, self).__init__(175)
        else:
            super(SettlInstCode, self).__init__(175, data)


class SecuritySettlAgentName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecuritySettlAgentName, self).__init__(176)
        else:
            super(SecuritySettlAgentName, self).__init__(176, data)


class SecuritySettlAgentCode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecuritySettlAgentCode, self).__init__(177)
        else:
            super(SecuritySettlAgentCode, self).__init__(177, data)


class SecuritySettlAgentAcctNum(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecuritySettlAgentAcctNum, self).__init__(178)
        else:
            super(SecuritySettlAgentAcctNum, self).__init__(178, data)


class SecuritySettlAgentAcctName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecuritySettlAgentAcctName, self).__init__(179)
        else:
            super(SecuritySettlAgentAcctName, self).__init__(179, data)


class SecuritySettlAgentContactName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecuritySettlAgentContactName, self).__init__(180)
        else:
            super(SecuritySettlAgentContactName, self).__init__(180, data)


class SecuritySettlAgentContactPhone(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecuritySettlAgentContactPhone, self).__init__(181)
        else:
            super(SecuritySettlAgentContactPhone, self).__init__(181, data)


class CashSettlAgentName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashSettlAgentName, self).__init__(182)
        else:
            super(CashSettlAgentName, self).__init__(182, data)


class CashSettlAgentCode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashSettlAgentCode, self).__init__(183)
        else:
            super(CashSettlAgentCode, self).__init__(183, data)


class CashSettlAgentAcctNum(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashSettlAgentAcctNum, self).__init__(184)
        else:
            super(CashSettlAgentAcctNum, self).__init__(184, data)


class CashSettlAgentAcctName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashSettlAgentAcctName, self).__init__(185)
        else:
            super(CashSettlAgentAcctName, self).__init__(185, data)


class CashSettlAgentContactName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashSettlAgentContactName, self).__init__(186)
        else:
            super(CashSettlAgentContactName, self).__init__(186, data)


class CashSettlAgentContactPhone(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashSettlAgentContactPhone, self).__init__(187)
        else:
            super(CashSettlAgentContactPhone, self).__init__(187, data)


class BidSpotRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(BidSpotRate, self).__init__(188)
        else:
            super(BidSpotRate, self).__init__(188, data)


class BidForwardPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(BidForwardPoints, self).__init__(189)
        else:
            super(BidForwardPoints, self).__init__(189, data)


class OfferSpotRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OfferSpotRate, self).__init__(190)
        else:
            super(OfferSpotRate, self).__init__(190, data)


class OfferForwardPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OfferForwardPoints, self).__init__(191)
        else:
            super(OfferForwardPoints, self).__init__(191, data)


class OrderQty2(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OrderQty2, self).__init__(192)
        else:
            super(OrderQty2, self).__init__(192, data)


class FutSettDate2(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(FutSettDate2, self).__init__(193)
        else:
            super(FutSettDate2, self).__init__(193, data)


class LastSpotRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LastSpotRate, self).__init__(194)
        else:
            super(LastSpotRate, self).__init__(194, data)


class LastForwardPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LastForwardPoints, self).__init__(195)
        else:
            super(LastForwardPoints, self).__init__(195, data)


class AllocLinkID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AllocLinkID, self).__init__(196)
        else:
            super(AllocLinkID, self).__init__(196, data)


class AllocLinkType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocLinkType, self).__init__(197)
        else:
            super(AllocLinkType, self).__init__(197, data)


class SecondaryOrderID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryOrderID, self).__init__(198)
        else:
            super(SecondaryOrderID, self).__init__(198, data)


class NoIOIQualifiers(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoIOIQualifiers, self).__init__(199)
        else:
            super(NoIOIQualifiers, self).__init__(199, data)


class MaturityMonthYear(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MaturityMonthYear, self).__init__(200)
        else:
            super(MaturityMonthYear, self).__init__(200, data)


class PutOrCall(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PutOrCall, self).__init__(201)
        else:
            super(PutOrCall, self).__init__(201, data)


class StrikePrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(StrikePrice, self).__init__(202)
        else:
            super(StrikePrice, self).__init__(202, data)


class CoveredOrUncovered(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CoveredOrUncovered, self).__init__(203)
        else:
            super(CoveredOrUncovered, self).__init__(203, data)


class CustomerOrFirm(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CustomerOrFirm, self).__init__(204)
        else:
            super(CustomerOrFirm, self).__init__(204, data)


class MaturityDay(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MaturityDay, self).__init__(205)
        else:
            super(MaturityDay, self).__init__(205, data)


class OptAttribute(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(OptAttribute, self).__init__(206)
        else:
            super(OptAttribute, self).__init__(206, data)


class SecurityExchange(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityExchange, self).__init__(207)
        else:
            super(SecurityExchange, self).__init__(207, data)


class NotifyBrokerOfCredit(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(NotifyBrokerOfCredit, self).__init__(208)
        else:
            super(NotifyBrokerOfCredit, self).__init__(208, data)


class AllocHandlInst(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocHandlInst, self).__init__(209)
        else:
            super(AllocHandlInst, self).__init__(209, data)


class MaxShow(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MaxShow, self).__init__(210)
        else:
            super(MaxShow, self).__init__(210, data)


class PegDifference(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PegDifference, self).__init__(211)
        else:
            super(PegDifference, self).__init__(211, data)


class SendingDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SendingDate, self).__init__(51)
        else:
            super(SendingDate, self).__init__(51, data)


class TotNoOrders(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNoOrders, self).__init__(68)
        else:
            super(TotNoOrders, self).__init__(68, data)


class SettlInstRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlInstRefID, self).__init__(214)
        else:
            super(SettlInstRefID, self).__init__(214, data)


class NoRoutingIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoRoutingIDs, self).__init__(215)
        else:
            super(NoRoutingIDs, self).__init__(215, data)


class RoutingType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RoutingType, self).__init__(216)
        else:
            super(RoutingType, self).__init__(216, data)


class RoutingID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RoutingID, self).__init__(217)
        else:
            super(RoutingID, self).__init__(217, data)


class SpreadToBenchmark(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SpreadToBenchmark, self).__init__(218)
        else:
            super(SpreadToBenchmark, self).__init__(218, data)


class Benchmark(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(Benchmark, self).__init__(219)
        else:
            super(Benchmark, self).__init__(219, data)


class CouponRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(CouponRate, self).__init__(223)
        else:
            super(CouponRate, self).__init__(223, data)


class ContractMultiplier(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ContractMultiplier, self).__init__(231)
        else:
            super(ContractMultiplier, self).__init__(231, data)


class MDReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MDReqID, self).__init__(262)
        else:
            super(MDReqID, self).__init__(262, data)


class SubscriptionRequestType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SubscriptionRequestType, self).__init__(263)
        else:
            super(SubscriptionRequestType, self).__init__(263, data)


class MarketDepth(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MarketDepth, self).__init__(264)
        else:
            super(MarketDepth, self).__init__(264, data)


class MDUpdateType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MDUpdateType, self).__init__(265)
        else:
            super(MDUpdateType, self).__init__(265, data)


class AggregatedBook(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(AggregatedBook, self).__init__(266)
        else:
            super(AggregatedBook, self).__init__(266, data)


class NoMDEntryTypes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoMDEntryTypes, self).__init__(267)
        else:
            super(NoMDEntryTypes, self).__init__(267, data)


class NoMDEntries(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoMDEntries, self).__init__(268)
        else:
            super(NoMDEntries, self).__init__(268, data)


class MDEntryType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntryType, self).__init__(269)
        else:
            super(MDEntryType, self).__init__(269, data)


class MDEntryPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntryPx, self).__init__(270)
        else:
            super(MDEntryPx, self).__init__(270, data)


class MDEntrySize(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntrySize, self).__init__(271)
        else:
            super(MDEntrySize, self).__init__(271, data)


class MDEntryDate(quickfix.UtcDateField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntryDate, self).__init__(272)
        else:
            super(MDEntryDate, self).__init__(272, data)


class MDEntryTime(quickfix.UtcTimeOnlyField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntryTime, self).__init__(273)
        else:
            super(MDEntryTime, self).__init__(273, data)


class TickDirection(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TickDirection, self).__init__(274)
        else:
            super(TickDirection, self).__init__(274, data)


class MDMkt(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MDMkt, self).__init__(275)
        else:
            super(MDMkt, self).__init__(275, data)


class QuoteCondition(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteCondition, self).__init__(276)
        else:
            super(QuoteCondition, self).__init__(276, data)


class TradeCondition(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeCondition, self).__init__(277)
        else:
            super(TradeCondition, self).__init__(277, data)


class MDEntryID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntryID, self).__init__(278)
        else:
            super(MDEntryID, self).__init__(278, data)


class MDUpdateAction(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(MDUpdateAction, self).__init__(279)
        else:
            super(MDUpdateAction, self).__init__(279, data)


class MDEntryRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntryRefID, self).__init__(280)
        else:
            super(MDEntryRefID, self).__init__(280, data)


class MDReqRejReason(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(MDReqRejReason, self).__init__(281)
        else:
            super(MDReqRejReason, self).__init__(281, data)


class MDEntryOriginator(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntryOriginator, self).__init__(282)
        else:
            super(MDEntryOriginator, self).__init__(282, data)


class LocationID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LocationID, self).__init__(283)
        else:
            super(LocationID, self).__init__(283, data)


class DeskID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DeskID, self).__init__(284)
        else:
            super(DeskID, self).__init__(284, data)


class DeleteReason(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DeleteReason, self).__init__(285)
        else:
            super(DeleteReason, self).__init__(285, data)


class OpenCloseSettleFlag(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OpenCloseSettleFlag, self).__init__(286)
        else:
            super(OpenCloseSettleFlag, self).__init__(286, data)


class SellerDays(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SellerDays, self).__init__(287)
        else:
            super(SellerDays, self).__init__(287, data)


class MDEntryBuyer(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntryBuyer, self).__init__(288)
        else:
            super(MDEntryBuyer, self).__init__(288, data)


class MDEntrySeller(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntrySeller, self).__init__(289)
        else:
            super(MDEntrySeller, self).__init__(289, data)


class MDEntryPositionNo(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntryPositionNo, self).__init__(290)
        else:
            super(MDEntryPositionNo, self).__init__(290, data)


class FinancialStatus(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(FinancialStatus, self).__init__(291)
        else:
            super(FinancialStatus, self).__init__(291, data)


class CorporateAction(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CorporateAction, self).__init__(292)
        else:
            super(CorporateAction, self).__init__(292, data)


class DefBidSize(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DefBidSize, self).__init__(293)
        else:
            super(DefBidSize, self).__init__(293, data)


class DefOfferSize(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DefOfferSize, self).__init__(294)
        else:
            super(DefOfferSize, self).__init__(294, data)


class NoQuoteEntries(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoQuoteEntries, self).__init__(295)
        else:
            super(NoQuoteEntries, self).__init__(295, data)


class NoQuoteSets(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoQuoteSets, self).__init__(296)
        else:
            super(NoQuoteSets, self).__init__(296, data)


class QuoteAckStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteAckStatus, self).__init__(297)
        else:
            super(QuoteAckStatus, self).__init__(297, data)


class QuoteCancelType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteCancelType, self).__init__(298)
        else:
            super(QuoteCancelType, self).__init__(298, data)


class QuoteEntryID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteEntryID, self).__init__(299)
        else:
            super(QuoteEntryID, self).__init__(299, data)


class QuoteRejectReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteRejectReason, self).__init__(300)
        else:
            super(QuoteRejectReason, self).__init__(300, data)


class QuoteResponseLevel(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteResponseLevel, self).__init__(301)
        else:
            super(QuoteResponseLevel, self).__init__(301, data)


class QuoteSetID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteSetID, self).__init__(302)
        else:
            super(QuoteSetID, self).__init__(302, data)


class QuoteRequestType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteRequestType, self).__init__(303)
        else:
            super(QuoteRequestType, self).__init__(303, data)


class TotQuoteEntries(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotQuoteEntries, self).__init__(304)
        else:
            super(TotQuoteEntries, self).__init__(304, data)


class UnderlyingIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingIDSource, self).__init__(305)
        else:
            super(UnderlyingIDSource, self).__init__(305, data)


class UnderlyingIssuer(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingIssuer, self).__init__(306)
        else:
            super(UnderlyingIssuer, self).__init__(306, data)


class UnderlyingSecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSecurityDesc, self).__init__(307)
        else:
            super(UnderlyingSecurityDesc, self).__init__(307, data)


class UnderlyingSecurityExchange(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSecurityExchange, self).__init__(308)
        else:
            super(UnderlyingSecurityExchange, self).__init__(308, data)


class UnderlyingSecurityID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSecurityID, self).__init__(309)
        else:
            super(UnderlyingSecurityID, self).__init__(309, data)


class UnderlyingSecurityType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSecurityType, self).__init__(310)
        else:
            super(UnderlyingSecurityType, self).__init__(310, data)


class UnderlyingSymbol(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSymbol, self).__init__(311)
        else:
            super(UnderlyingSymbol, self).__init__(311, data)


class UnderlyingSymbolSfx(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSymbolSfx, self).__init__(312)
        else:
            super(UnderlyingSymbolSfx, self).__init__(312, data)


class UnderlyingMaturityMonthYear(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingMaturityMonthYear, self).__init__(313)
        else:
            super(UnderlyingMaturityMonthYear, self).__init__(313, data)


class UnderlyingMaturityDay(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingMaturityDay, self).__init__(314)
        else:
            super(UnderlyingMaturityDay, self).__init__(314, data)


class UnderlyingPutOrCall(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingPutOrCall, self).__init__(315)
        else:
            super(UnderlyingPutOrCall, self).__init__(315, data)


class UnderlyingStrikePrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingStrikePrice, self).__init__(316)
        else:
            super(UnderlyingStrikePrice, self).__init__(316, data)


class UnderlyingOptAttribute(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingOptAttribute, self).__init__(317)
        else:
            super(UnderlyingOptAttribute, self).__init__(317, data)


class UnderlyingCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCurrency, self).__init__(318)
        else:
            super(UnderlyingCurrency, self).__init__(318, data)


class RatioQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(RatioQty, self).__init__(319)
        else:
            super(RatioQty, self).__init__(319, data)


class SecurityReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityReqID, self).__init__(320)
        else:
            super(SecurityReqID, self).__init__(320, data)


class SecurityRequestType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityRequestType, self).__init__(321)
        else:
            super(SecurityRequestType, self).__init__(321, data)


class SecurityResponseID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityResponseID, self).__init__(322)
        else:
            super(SecurityResponseID, self).__init__(322, data)


class SecurityResponseType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityResponseType, self).__init__(323)
        else:
            super(SecurityResponseType, self).__init__(323, data)


class SecurityStatusReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityStatusReqID, self).__init__(324)
        else:
            super(SecurityStatusReqID, self).__init__(324, data)


class UnsolicitedIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(UnsolicitedIndicator, self).__init__(325)
        else:
            super(UnsolicitedIndicator, self).__init__(325, data)


class SecurityTradingStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityTradingStatus, self).__init__(326)
        else:
            super(SecurityTradingStatus, self).__init__(326, data)


class HaltReasonChar(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(HaltReasonChar, self).__init__(327)
        else:
            super(HaltReasonChar, self).__init__(327, data)


class InViewOfCommon(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(InViewOfCommon, self).__init__(328)
        else:
            super(InViewOfCommon, self).__init__(328, data)


class DueToRelated(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(DueToRelated, self).__init__(329)
        else:
            super(DueToRelated, self).__init__(329, data)


class BuyVolume(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(BuyVolume, self).__init__(330)
        else:
            super(BuyVolume, self).__init__(330, data)


class SellVolume(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SellVolume, self).__init__(331)
        else:
            super(SellVolume, self).__init__(331, data)


class HighPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(HighPx, self).__init__(332)
        else:
            super(HighPx, self).__init__(332, data)


class LowPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LowPx, self).__init__(333)
        else:
            super(LowPx, self).__init__(333, data)


class Adjustment(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(Adjustment, self).__init__(334)
        else:
            super(Adjustment, self).__init__(334, data)


class TradSesReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesReqID, self).__init__(335)
        else:
            super(TradSesReqID, self).__init__(335, data)


class TradingSessionID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradingSessionID, self).__init__(336)
        else:
            super(TradingSessionID, self).__init__(336, data)


class ContraTrader(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ContraTrader, self).__init__(337)
        else:
            super(ContraTrader, self).__init__(337, data)


class TradSesMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesMethod, self).__init__(338)
        else:
            super(TradSesMethod, self).__init__(338, data)


class TradSesMode(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesMode, self).__init__(339)
        else:
            super(TradSesMode, self).__init__(339, data)


class TradSesStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesStatus, self).__init__(340)
        else:
            super(TradSesStatus, self).__init__(340, data)


class TradSesStartTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesStartTime, self).__init__(341)
        else:
            super(TradSesStartTime, self).__init__(341, data)


class TradSesOpenTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesOpenTime, self).__init__(342)
        else:
            super(TradSesOpenTime, self).__init__(342, data)


class TradSesPreCloseTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesPreCloseTime, self).__init__(343)
        else:
            super(TradSesPreCloseTime, self).__init__(343, data)


class TradSesCloseTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesCloseTime, self).__init__(344)
        else:
            super(TradSesCloseTime, self).__init__(344, data)


class TradSesEndTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesEndTime, self).__init__(345)
        else:
            super(TradSesEndTime, self).__init__(345, data)


class NumberOfOrders(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NumberOfOrders, self).__init__(346)
        else:
            super(NumberOfOrders, self).__init__(346, data)


class EncodedIssuerLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedIssuerLen, self).__init__(348)
        else:
            super(EncodedIssuerLen, self).__init__(348, data)


class EncodedIssuer(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedIssuer, self).__init__(349)
        else:
            super(EncodedIssuer, self).__init__(349, data)


class EncodedSecurityDescLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedSecurityDescLen, self).__init__(350)
        else:
            super(EncodedSecurityDescLen, self).__init__(350, data)


class EncodedSecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedSecurityDesc, self).__init__(351)
        else:
            super(EncodedSecurityDesc, self).__init__(351, data)


class EncodedListExecInstLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedListExecInstLen, self).__init__(352)
        else:
            super(EncodedListExecInstLen, self).__init__(352, data)


class EncodedListExecInst(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedListExecInst, self).__init__(353)
        else:
            super(EncodedListExecInst, self).__init__(353, data)


class EncodedSubjectLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedSubjectLen, self).__init__(356)
        else:
            super(EncodedSubjectLen, self).__init__(356, data)


class EncodedSubject(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedSubject, self).__init__(357)
        else:
            super(EncodedSubject, self).__init__(357, data)


class EncodedHeadlineLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedHeadlineLen, self).__init__(358)
        else:
            super(EncodedHeadlineLen, self).__init__(358, data)


class EncodedHeadline(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedHeadline, self).__init__(359)
        else:
            super(EncodedHeadline, self).__init__(359, data)


class EncodedAllocTextLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedAllocTextLen, self).__init__(360)
        else:
            super(EncodedAllocTextLen, self).__init__(360, data)


class EncodedAllocText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedAllocText, self).__init__(361)
        else:
            super(EncodedAllocText, self).__init__(361, data)


class EncodedUnderlyingIssuerLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedUnderlyingIssuerLen, self).__init__(362)
        else:
            super(EncodedUnderlyingIssuerLen, self).__init__(362, data)


class EncodedUnderlyingIssuer(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedUnderlyingIssuer, self).__init__(363)
        else:
            super(EncodedUnderlyingIssuer, self).__init__(363, data)


class EncodedUnderlyingSecurityDescLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedUnderlyingSecurityDescLen, self).__init__(364)
        else:
            super(EncodedUnderlyingSecurityDescLen, self).__init__(364, data)


class EncodedUnderlyingSecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedUnderlyingSecurityDesc, self).__init__(365)
        else:
            super(EncodedUnderlyingSecurityDesc, self).__init__(365, data)


class AllocPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AllocPrice, self).__init__(366)
        else:
            super(AllocPrice, self).__init__(366, data)


class QuoteSetValidUntilTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteSetValidUntilTime, self).__init__(367)
        else:
            super(QuoteSetValidUntilTime, self).__init__(367, data)


class QuoteEntryRejectReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteEntryRejectReason, self).__init__(368)
        else:
            super(QuoteEntryRejectReason, self).__init__(368, data)


class OnBehalfOfSendingTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(OnBehalfOfSendingTime, self).__init__(370)
        else:
            super(OnBehalfOfSendingTime, self).__init__(370, data)


class BidRequestTransType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(BidRequestTransType, self).__init__(374)
        else:
            super(BidRequestTransType, self).__init__(374, data)


class ContraBroker(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ContraBroker, self).__init__(375)
        else:
            super(ContraBroker, self).__init__(375, data)


class ComplianceID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ComplianceID, self).__init__(376)
        else:
            super(ComplianceID, self).__init__(376, data)


class SolicitedFlag(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(SolicitedFlag, self).__init__(377)
        else:
            super(SolicitedFlag, self).__init__(377, data)


class ExecRestatementReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ExecRestatementReason, self).__init__(378)
        else:
            super(ExecRestatementReason, self).__init__(378, data)


class BusinessRejectRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BusinessRejectRefID, self).__init__(379)
        else:
            super(BusinessRejectRefID, self).__init__(379, data)


class BusinessRejectReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(BusinessRejectReason, self).__init__(380)
        else:
            super(BusinessRejectReason, self).__init__(380, data)


class GrossTradeAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(GrossTradeAmt, self).__init__(381)
        else:
            super(GrossTradeAmt, self).__init__(381, data)


class NoContraBrokers(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoContraBrokers, self).__init__(382)
        else:
            super(NoContraBrokers, self).__init__(382, data)


class NoTradingSessions(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoTradingSessions, self).__init__(386)
        else:
            super(NoTradingSessions, self).__init__(386, data)


class TotalVolumeTraded(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TotalVolumeTraded, self).__init__(387)
        else:
            super(TotalVolumeTraded, self).__init__(387, data)


class DiscretionInst(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DiscretionInst, self).__init__(388)
        else:
            super(DiscretionInst, self).__init__(388, data)


class DiscretionOffset(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DiscretionOffset, self).__init__(389)
        else:
            super(DiscretionOffset, self).__init__(389, data)


class BidID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BidID, self).__init__(390)
        else:
            super(BidID, self).__init__(390, data)


class ClientBidID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ClientBidID, self).__init__(391)
        else:
            super(ClientBidID, self).__init__(391, data)


class ListName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ListName, self).__init__(392)
        else:
            super(ListName, self).__init__(392, data)


class TotalNumSecurities(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotalNumSecurities, self).__init__(393)
        else:
            super(TotalNumSecurities, self).__init__(393, data)


class BidType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(BidType, self).__init__(394)
        else:
            super(BidType, self).__init__(394, data)


class NumTickets(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NumTickets, self).__init__(395)
        else:
            super(NumTickets, self).__init__(395, data)


class SideValue1(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SideValue1, self).__init__(396)
        else:
            super(SideValue1, self).__init__(396, data)


class SideValue2(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SideValue2, self).__init__(397)
        else:
            super(SideValue2, self).__init__(397, data)


class NoBidDescriptors(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoBidDescriptors, self).__init__(398)
        else:
            super(NoBidDescriptors, self).__init__(398, data)


class BidDescriptorType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(BidDescriptorType, self).__init__(399)
        else:
            super(BidDescriptorType, self).__init__(399, data)


class BidDescriptor(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BidDescriptor, self).__init__(400)
        else:
            super(BidDescriptor, self).__init__(400, data)


class SideValueInd(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SideValueInd, self).__init__(401)
        else:
            super(SideValueInd, self).__init__(401, data)


class LiquidityPctLow(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LiquidityPctLow, self).__init__(402)
        else:
            super(LiquidityPctLow, self).__init__(402, data)


class LiquidityPctHigh(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LiquidityPctHigh, self).__init__(403)
        else:
            super(LiquidityPctHigh, self).__init__(403, data)


class LiquidityValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LiquidityValue, self).__init__(404)
        else:
            super(LiquidityValue, self).__init__(404, data)


class EFPTrackingError(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(EFPTrackingError, self).__init__(405)
        else:
            super(EFPTrackingError, self).__init__(405, data)


class FairValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(FairValue, self).__init__(406)
        else:
            super(FairValue, self).__init__(406, data)


class OutsideIndexPct(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OutsideIndexPct, self).__init__(407)
        else:
            super(OutsideIndexPct, self).__init__(407, data)


class ValueOfFutures(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ValueOfFutures, self).__init__(408)
        else:
            super(ValueOfFutures, self).__init__(408, data)


class LiquidityIndType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LiquidityIndType, self).__init__(409)
        else:
            super(LiquidityIndType, self).__init__(409, data)


class WtAverageLiquidity(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(WtAverageLiquidity, self).__init__(410)
        else:
            super(WtAverageLiquidity, self).__init__(410, data)


class ExchangeForPhysical(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(ExchangeForPhysical, self).__init__(411)
        else:
            super(ExchangeForPhysical, self).__init__(411, data)


class OutMainCntryUIndex(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OutMainCntryUIndex, self).__init__(412)
        else:
            super(OutMainCntryUIndex, self).__init__(412, data)


class CrossPercent(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(CrossPercent, self).__init__(413)
        else:
            super(CrossPercent, self).__init__(413, data)


class ProgRptReqs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ProgRptReqs, self).__init__(414)
        else:
            super(ProgRptReqs, self).__init__(414, data)


class ProgPeriodInterval(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ProgPeriodInterval, self).__init__(415)
        else:
            super(ProgPeriodInterval, self).__init__(415, data)


class IncTaxInd(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(IncTaxInd, self).__init__(416)
        else:
            super(IncTaxInd, self).__init__(416, data)


class NumBidders(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NumBidders, self).__init__(417)
        else:
            super(NumBidders, self).__init__(417, data)


class TradeType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TradeType, self).__init__(418)
        else:
            super(TradeType, self).__init__(418, data)


class BasisPxType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(BasisPxType, self).__init__(419)
        else:
            super(BasisPxType, self).__init__(419, data)


class NoBidComponents(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoBidComponents, self).__init__(420)
        else:
            super(NoBidComponents, self).__init__(420, data)


class Country(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Country, self).__init__(421)
        else:
            super(Country, self).__init__(421, data)


class TotNoStrikes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNoStrikes, self).__init__(422)
        else:
            super(TotNoStrikes, self).__init__(422, data)


class PriceType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PriceType, self).__init__(423)
        else:
            super(PriceType, self).__init__(423, data)


class DayOrderQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DayOrderQty, self).__init__(424)
        else:
            super(DayOrderQty, self).__init__(424, data)


class DayCumQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DayCumQty, self).__init__(425)
        else:
            super(DayCumQty, self).__init__(425, data)


class DayAvgPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DayAvgPx, self).__init__(426)
        else:
            super(DayAvgPx, self).__init__(426, data)


class GTBookingInst(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(GTBookingInst, self).__init__(427)
        else:
            super(GTBookingInst, self).__init__(427, data)


class NoStrikes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoStrikes, self).__init__(428)
        else:
            super(NoStrikes, self).__init__(428, data)


class ListStatusType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ListStatusType, self).__init__(429)
        else:
            super(ListStatusType, self).__init__(429, data)


class NetGrossInd(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NetGrossInd, self).__init__(430)
        else:
            super(NetGrossInd, self).__init__(430, data)


class ListOrderStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ListOrderStatus, self).__init__(431)
        else:
            super(ListOrderStatus, self).__init__(431, data)


class ExpireDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ExpireDate, self).__init__(432)
        else:
            super(ExpireDate, self).__init__(432, data)


class ListExecInstType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(ListExecInstType, self).__init__(433)
        else:
            super(ListExecInstType, self).__init__(433, data)


class CxlRejResponseTo(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(CxlRejResponseTo, self).__init__(434)
        else:
            super(CxlRejResponseTo, self).__init__(434, data)


class UnderlyingCouponRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCouponRate, self).__init__(435)
        else:
            super(UnderlyingCouponRate, self).__init__(435, data)


class UnderlyingContractMultiplier(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingContractMultiplier, self).__init__(436)
        else:
            super(UnderlyingContractMultiplier, self).__init__(436, data)


class ContraTradeQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ContraTradeQty, self).__init__(437)
        else:
            super(ContraTradeQty, self).__init__(437, data)


class ContraTradeTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(ContraTradeTime, self).__init__(438)
        else:
            super(ContraTradeTime, self).__init__(438, data)


class ClearingFirm(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ClearingFirm, self).__init__(439)
        else:
            super(ClearingFirm, self).__init__(439, data)


class ClearingAccount(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ClearingAccount, self).__init__(440)
        else:
            super(ClearingAccount, self).__init__(440, data)


class LiquidityNumSecurities(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LiquidityNumSecurities, self).__init__(441)
        else:
            super(LiquidityNumSecurities, self).__init__(441, data)


class MultiLegReportingType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(MultiLegReportingType, self).__init__(442)
        else:
            super(MultiLegReportingType, self).__init__(442, data)


class StrikeTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(StrikeTime, self).__init__(443)
        else:
            super(StrikeTime, self).__init__(443, data)


class ListStatusText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ListStatusText, self).__init__(444)
        else:
            super(ListStatusText, self).__init__(444, data)


class EncodedListStatusTextLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedListStatusTextLen, self).__init__(445)
        else:
            super(EncodedListStatusTextLen, self).__init__(445, data)


class EncodedListStatusText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedListStatusText, self).__init__(446)
        else:
            super(EncodedListStatusText, self).__init__(446, data)


class SecurityIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityIDSource, self).__init__(22)
        else:
            super(SecurityIDSource, self).__init__(22, data)


class IOIQty(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(IOIQty, self).__init__(27)
        else:
            super(IOIQty, self).__init__(27, data)


class LastQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LastQty, self).__init__(32)
        else:
            super(LastQty, self).__init__(32, data)


class Quantity(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(Quantity, self).__init__(53)
        else:
            super(Quantity, self).__init__(53, data)


class PositionEffect(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(PositionEffect, self).__init__(77)
        else:
            super(PositionEffect, self).__init__(77, data)


class AllocQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AllocQty, self).__init__(80)
        else:
            super(AllocQty, self).__init__(80, data)


class Spread(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(Spread, self).__init__(218)
        else:
            super(Spread, self).__init__(218, data)


class BenchmarkCurveCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BenchmarkCurveCurrency, self).__init__(220)
        else:
            super(BenchmarkCurveCurrency, self).__init__(220, data)


class BenchmarkCurveName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BenchmarkCurveName, self).__init__(221)
        else:
            super(BenchmarkCurveName, self).__init__(221, data)


class BenchmarkCurvePoint(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BenchmarkCurvePoint, self).__init__(222)
        else:
            super(BenchmarkCurvePoint, self).__init__(222, data)


class CouponPaymentDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CouponPaymentDate, self).__init__(224)
        else:
            super(CouponPaymentDate, self).__init__(224, data)


class IssueDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(IssueDate, self).__init__(225)
        else:
            super(IssueDate, self).__init__(225, data)


class RepurchaseTerm(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RepurchaseTerm, self).__init__(226)
        else:
            super(RepurchaseTerm, self).__init__(226, data)


class RepurchaseRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(RepurchaseRate, self).__init__(227)
        else:
            super(RepurchaseRate, self).__init__(227, data)


class Factor(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(Factor, self).__init__(228)
        else:
            super(Factor, self).__init__(228, data)


class TradeOriginationDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeOriginationDate, self).__init__(229)
        else:
            super(TradeOriginationDate, self).__init__(229, data)


class ExDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ExDate, self).__init__(230)
        else:
            super(ExDate, self).__init__(230, data)


class NoStipulations(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoStipulations, self).__init__(232)
        else:
            super(NoStipulations, self).__init__(232, data)


class StipulationType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StipulationType, self).__init__(233)
        else:
            super(StipulationType, self).__init__(233, data)


class StipulationValue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StipulationValue, self).__init__(234)
        else:
            super(StipulationValue, self).__init__(234, data)


class YieldType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(YieldType, self).__init__(235)
        else:
            super(YieldType, self).__init__(235, data)


class Yield(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(Yield, self).__init__(236)
        else:
            super(Yield, self).__init__(236, data)


class TotalTakedown(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TotalTakedown, self).__init__(237)
        else:
            super(TotalTakedown, self).__init__(237, data)


class Concession(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(Concession, self).__init__(238)
        else:
            super(Concession, self).__init__(238, data)


class RepoCollateralSecurityType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RepoCollateralSecurityType, self).__init__(239)
        else:
            super(RepoCollateralSecurityType, self).__init__(239, data)


class RedemptionDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RedemptionDate, self).__init__(240)
        else:
            super(RedemptionDate, self).__init__(240, data)


class UnderlyingCouponPaymentDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCouponPaymentDate, self).__init__(241)
        else:
            super(UnderlyingCouponPaymentDate, self).__init__(241, data)


class UnderlyingIssueDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingIssueDate, self).__init__(242)
        else:
            super(UnderlyingIssueDate, self).__init__(242, data)


class UnderlyingRepoCollateralSecurityType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingRepoCollateralSecurityType, self).__init__(243)
        else:
            super(UnderlyingRepoCollateralSecurityType, self).__init__(243, data)


class UnderlyingRepurchaseTerm(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingRepurchaseTerm, self).__init__(244)
        else:
            super(UnderlyingRepurchaseTerm, self).__init__(244, data)


class UnderlyingRepurchaseRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingRepurchaseRate, self).__init__(245)
        else:
            super(UnderlyingRepurchaseRate, self).__init__(245, data)


class UnderlyingFactor(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingFactor, self).__init__(246)
        else:
            super(UnderlyingFactor, self).__init__(246, data)


class UnderlyingRedemptionDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingRedemptionDate, self).__init__(247)
        else:
            super(UnderlyingRedemptionDate, self).__init__(247, data)


class LegCouponPaymentDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegCouponPaymentDate, self).__init__(248)
        else:
            super(LegCouponPaymentDate, self).__init__(248, data)


class LegIssueDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegIssueDate, self).__init__(249)
        else:
            super(LegIssueDate, self).__init__(249, data)


class LegRepoCollateralSecurityType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegRepoCollateralSecurityType, self).__init__(250)
        else:
            super(LegRepoCollateralSecurityType, self).__init__(250, data)


class LegRepurchaseTerm(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegRepurchaseTerm, self).__init__(251)
        else:
            super(LegRepurchaseTerm, self).__init__(251, data)


class LegRepurchaseRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegRepurchaseRate, self).__init__(252)
        else:
            super(LegRepurchaseRate, self).__init__(252, data)


class LegFactor(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegFactor, self).__init__(253)
        else:
            super(LegFactor, self).__init__(253, data)


class LegRedemptionDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegRedemptionDate, self).__init__(254)
        else:
            super(LegRedemptionDate, self).__init__(254, data)


class CreditRating(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CreditRating, self).__init__(255)
        else:
            super(CreditRating, self).__init__(255, data)


class UnderlyingCreditRating(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCreditRating, self).__init__(256)
        else:
            super(UnderlyingCreditRating, self).__init__(256, data)


class LegCreditRating(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegCreditRating, self).__init__(257)
        else:
            super(LegCreditRating, self).__init__(257, data)


class TradedFlatSwitch(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(TradedFlatSwitch, self).__init__(258)
        else:
            super(TradedFlatSwitch, self).__init__(258, data)


class BasisFeatureDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BasisFeatureDate, self).__init__(259)
        else:
            super(BasisFeatureDate, self).__init__(259, data)


class BasisFeaturePrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(BasisFeaturePrice, self).__init__(260)
        else:
            super(BasisFeaturePrice, self).__init__(260, data)


class QuoteStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteStatus, self).__init__(297)
        else:
            super(QuoteStatus, self).__init__(297, data)


class UnderlyingSecurityIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSecurityIDSource, self).__init__(305)
        else:
            super(UnderlyingSecurityIDSource, self).__init__(305, data)


class PartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(PartyIDSource, self).__init__(447)
        else:
            super(PartyIDSource, self).__init__(447, data)


class PartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PartyID, self).__init__(448)
        else:
            super(PartyID, self).__init__(448, data)


class TotalVolumeTradedDate(quickfix.UtcDateField):
    def __init__(self, data=None):
        if data is None:
            super(TotalVolumeTradedDate, self).__init__(449)
        else:
            super(TotalVolumeTradedDate, self).__init__(449, data)


class TotalVolumeTradedTime(quickfix.UtcTimeOnlyField):
    def __init__(self, data=None):
        if data is None:
            super(TotalVolumeTradedTime, self).__init__(450)
        else:
            super(TotalVolumeTradedTime, self).__init__(450, data)


class NetChgPrevDay(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(NetChgPrevDay, self).__init__(451)
        else:
            super(NetChgPrevDay, self).__init__(451, data)


class PartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PartyRole, self).__init__(452)
        else:
            super(PartyRole, self).__init__(452, data)


class NoPartyIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoPartyIDs, self).__init__(453)
        else:
            super(NoPartyIDs, self).__init__(453, data)


class NoSecurityAltID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoSecurityAltID, self).__init__(454)
        else:
            super(NoSecurityAltID, self).__init__(454, data)


class SecurityAltID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityAltID, self).__init__(455)
        else:
            super(SecurityAltID, self).__init__(455, data)


class SecurityAltIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityAltIDSource, self).__init__(456)
        else:
            super(SecurityAltIDSource, self).__init__(456, data)


class NoUnderlyingSecurityAltID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoUnderlyingSecurityAltID, self).__init__(457)
        else:
            super(NoUnderlyingSecurityAltID, self).__init__(457, data)


class UnderlyingSecurityAltID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSecurityAltID, self).__init__(458)
        else:
            super(UnderlyingSecurityAltID, self).__init__(458, data)


class UnderlyingSecurityAltIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSecurityAltIDSource, self).__init__(459)
        else:
            super(UnderlyingSecurityAltIDSource, self).__init__(459, data)


class Product(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(Product, self).__init__(460)
        else:
            super(Product, self).__init__(460, data)


class CFICode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CFICode, self).__init__(461)
        else:
            super(CFICode, self).__init__(461, data)


class UnderlyingProduct(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingProduct, self).__init__(462)
        else:
            super(UnderlyingProduct, self).__init__(462, data)


class UnderlyingCFICode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCFICode, self).__init__(463)
        else:
            super(UnderlyingCFICode, self).__init__(463, data)


class QuantityType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuantityType, self).__init__(465)
        else:
            super(QuantityType, self).__init__(465, data)


class BookingRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BookingRefID, self).__init__(466)
        else:
            super(BookingRefID, self).__init__(466, data)


class IndividualAllocID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(IndividualAllocID, self).__init__(467)
        else:
            super(IndividualAllocID, self).__init__(467, data)


class RoundingDirection(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(RoundingDirection, self).__init__(468)
        else:
            super(RoundingDirection, self).__init__(468, data)


class RoundingModulus(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(RoundingModulus, self).__init__(469)
        else:
            super(RoundingModulus, self).__init__(469, data)


class CountryOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CountryOfIssue, self).__init__(470)
        else:
            super(CountryOfIssue, self).__init__(470, data)


class StateOrProvinceOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StateOrProvinceOfIssue, self).__init__(471)
        else:
            super(StateOrProvinceOfIssue, self).__init__(471, data)


class LocaleOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LocaleOfIssue, self).__init__(472)
        else:
            super(LocaleOfIssue, self).__init__(472, data)


class NoRegistDtls(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoRegistDtls, self).__init__(473)
        else:
            super(NoRegistDtls, self).__init__(473, data)


class MailingDtls(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MailingDtls, self).__init__(474)
        else:
            super(MailingDtls, self).__init__(474, data)


class InvestorCountryOfResidence(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(InvestorCountryOfResidence, self).__init__(475)
        else:
            super(InvestorCountryOfResidence, self).__init__(475, data)


class PaymentRef(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PaymentRef, self).__init__(476)
        else:
            super(PaymentRef, self).__init__(476, data)


class DistribPaymentMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DistribPaymentMethod, self).__init__(477)
        else:
            super(DistribPaymentMethod, self).__init__(477, data)


class CashDistribCurr(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashDistribCurr, self).__init__(478)
        else:
            super(CashDistribCurr, self).__init__(478, data)


class CommCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CommCurrency, self).__init__(479)
        else:
            super(CommCurrency, self).__init__(479, data)


class CancellationRights(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(CancellationRights, self).__init__(480)
        else:
            super(CancellationRights, self).__init__(480, data)


class MoneyLaunderingStatus(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(MoneyLaunderingStatus, self).__init__(481)
        else:
            super(MoneyLaunderingStatus, self).__init__(481, data)


class MailingInst(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MailingInst, self).__init__(482)
        else:
            super(MailingInst, self).__init__(482, data)


class TransBkdTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(TransBkdTime, self).__init__(483)
        else:
            super(TransBkdTime, self).__init__(483, data)


class ExecPriceType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(ExecPriceType, self).__init__(484)
        else:
            super(ExecPriceType, self).__init__(484, data)


class ExecPriceAdjustment(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ExecPriceAdjustment, self).__init__(485)
        else:
            super(ExecPriceAdjustment, self).__init__(485, data)


class DateOfBirth(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DateOfBirth, self).__init__(486)
        else:
            super(DateOfBirth, self).__init__(486, data)


class TradeReportTransType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradeReportTransType, self).__init__(487)
        else:
            super(TradeReportTransType, self).__init__(487, data)


class CardHolderName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CardHolderName, self).__init__(488)
        else:
            super(CardHolderName, self).__init__(488, data)


class CardNumber(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CardNumber, self).__init__(489)
        else:
            super(CardNumber, self).__init__(489, data)


class CardExpDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CardExpDate, self).__init__(490)
        else:
            super(CardExpDate, self).__init__(490, data)


class CardIssNo(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CardIssNo, self).__init__(491)
        else:
            super(CardIssNo, self).__init__(491, data)


class PaymentMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PaymentMethod, self).__init__(492)
        else:
            super(PaymentMethod, self).__init__(492, data)


class RegistAcctType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RegistAcctType, self).__init__(493)
        else:
            super(RegistAcctType, self).__init__(493, data)


class Designation(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Designation, self).__init__(494)
        else:
            super(Designation, self).__init__(494, data)


class TaxAdvantageType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TaxAdvantageType, self).__init__(495)
        else:
            super(TaxAdvantageType, self).__init__(495, data)


class RegistRejReasonText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RegistRejReasonText, self).__init__(496)
        else:
            super(RegistRejReasonText, self).__init__(496, data)


class FundRenewWaiv(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(FundRenewWaiv, self).__init__(497)
        else:
            super(FundRenewWaiv, self).__init__(497, data)


class CashDistribAgentName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashDistribAgentName, self).__init__(498)
        else:
            super(CashDistribAgentName, self).__init__(498, data)


class CashDistribAgentCode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashDistribAgentCode, self).__init__(499)
        else:
            super(CashDistribAgentCode, self).__init__(499, data)


class CashDistribAgentAcctNumber(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashDistribAgentAcctNumber, self).__init__(500)
        else:
            super(CashDistribAgentAcctNumber, self).__init__(500, data)


class CashDistribPayRef(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashDistribPayRef, self).__init__(501)
        else:
            super(CashDistribPayRef, self).__init__(501, data)


class CardStartDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CardStartDate, self).__init__(503)
        else:
            super(CardStartDate, self).__init__(503, data)


class PaymentDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PaymentDate, self).__init__(504)
        else:
            super(PaymentDate, self).__init__(504, data)


class PaymentRemitterID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PaymentRemitterID, self).__init__(505)
        else:
            super(PaymentRemitterID, self).__init__(505, data)


class RegistStatus(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(RegistStatus, self).__init__(506)
        else:
            super(RegistStatus, self).__init__(506, data)


class RegistRejReasonCode(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RegistRejReasonCode, self).__init__(507)
        else:
            super(RegistRejReasonCode, self).__init__(507, data)


class RegistRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RegistRefID, self).__init__(508)
        else:
            super(RegistRefID, self).__init__(508, data)


class RegistDetls(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RegistDetls, self).__init__(509)
        else:
            super(RegistDetls, self).__init__(509, data)


class NoDistribInsts(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoDistribInsts, self).__init__(510)
        else:
            super(NoDistribInsts, self).__init__(510, data)


class RegistEmail(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RegistEmail, self).__init__(511)
        else:
            super(RegistEmail, self).__init__(511, data)


class DistribPercentage(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DistribPercentage, self).__init__(512)
        else:
            super(DistribPercentage, self).__init__(512, data)


class RegistID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RegistID, self).__init__(513)
        else:
            super(RegistID, self).__init__(513, data)


class RegistTransType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(RegistTransType, self).__init__(514)
        else:
            super(RegistTransType, self).__init__(514, data)


class ExecValuationPoint(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(ExecValuationPoint, self).__init__(515)
        else:
            super(ExecValuationPoint, self).__init__(515, data)


class OrderPercent(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OrderPercent, self).__init__(516)
        else:
            super(OrderPercent, self).__init__(516, data)


class OwnershipType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(OwnershipType, self).__init__(517)
        else:
            super(OwnershipType, self).__init__(517, data)


class NoContAmts(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoContAmts, self).__init__(518)
        else:
            super(NoContAmts, self).__init__(518, data)


class ContAmtType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ContAmtType, self).__init__(519)
        else:
            super(ContAmtType, self).__init__(519, data)


class ContAmtValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ContAmtValue, self).__init__(520)
        else:
            super(ContAmtValue, self).__init__(520, data)


class ContAmtCurr(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ContAmtCurr, self).__init__(521)
        else:
            super(ContAmtCurr, self).__init__(521, data)


class OwnerType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(OwnerType, self).__init__(522)
        else:
            super(OwnerType, self).__init__(522, data)


class PartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PartySubID, self).__init__(523)
        else:
            super(PartySubID, self).__init__(523, data)


class NestedPartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(NestedPartyID, self).__init__(524)
        else:
            super(NestedPartyID, self).__init__(524, data)


class NestedPartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(NestedPartyIDSource, self).__init__(525)
        else:
            super(NestedPartyIDSource, self).__init__(525, data)


class SecondaryClOrdID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryClOrdID, self).__init__(526)
        else:
            super(SecondaryClOrdID, self).__init__(526, data)


class SecondaryExecID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryExecID, self).__init__(527)
        else:
            super(SecondaryExecID, self).__init__(527, data)


class OrderCapacity(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(OrderCapacity, self).__init__(528)
        else:
            super(OrderCapacity, self).__init__(528, data)


class OrderRestrictions(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OrderRestrictions, self).__init__(529)
        else:
            super(OrderRestrictions, self).__init__(529, data)


class MassCancelRequestType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(MassCancelRequestType, self).__init__(530)
        else:
            super(MassCancelRequestType, self).__init__(530, data)


class MassCancelResponse(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(MassCancelResponse, self).__init__(531)
        else:
            super(MassCancelResponse, self).__init__(531, data)


class MassCancelRejectReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MassCancelRejectReason, self).__init__(532)
        else:
            super(MassCancelRejectReason, self).__init__(532, data)


class TotalAffectedOrders(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotalAffectedOrders, self).__init__(533)
        else:
            super(TotalAffectedOrders, self).__init__(533, data)


class NoAffectedOrders(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoAffectedOrders, self).__init__(534)
        else:
            super(NoAffectedOrders, self).__init__(534, data)


class AffectedOrderID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AffectedOrderID, self).__init__(535)
        else:
            super(AffectedOrderID, self).__init__(535, data)


class AffectedSecondaryOrderID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AffectedSecondaryOrderID, self).__init__(536)
        else:
            super(AffectedSecondaryOrderID, self).__init__(536, data)


class QuoteType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteType, self).__init__(537)
        else:
            super(QuoteType, self).__init__(537, data)


class NestedPartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NestedPartyRole, self).__init__(538)
        else:
            super(NestedPartyRole, self).__init__(538, data)


class NoNestedPartyIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNestedPartyIDs, self).__init__(539)
        else:
            super(NoNestedPartyIDs, self).__init__(539, data)


class TotalAccruedInterestAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TotalAccruedInterestAmt, self).__init__(540)
        else:
            super(TotalAccruedInterestAmt, self).__init__(540, data)


class MaturityDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MaturityDate, self).__init__(541)
        else:
            super(MaturityDate, self).__init__(541, data)


class UnderlyingMaturityDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingMaturityDate, self).__init__(542)
        else:
            super(UnderlyingMaturityDate, self).__init__(542, data)


class InstrRegistry(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(InstrRegistry, self).__init__(543)
        else:
            super(InstrRegistry, self).__init__(543, data)


class CashMargin(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(CashMargin, self).__init__(544)
        else:
            super(CashMargin, self).__init__(544, data)


class NestedPartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(NestedPartySubID, self).__init__(545)
        else:
            super(NestedPartySubID, self).__init__(545, data)


class Scope(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Scope, self).__init__(546)
        else:
            super(Scope, self).__init__(546, data)


class MDImplicitDelete(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(MDImplicitDelete, self).__init__(547)
        else:
            super(MDImplicitDelete, self).__init__(547, data)


class CrossID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CrossID, self).__init__(548)
        else:
            super(CrossID, self).__init__(548, data)


class CrossType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CrossType, self).__init__(549)
        else:
            super(CrossType, self).__init__(549, data)


class CrossPrioritization(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CrossPrioritization, self).__init__(550)
        else:
            super(CrossPrioritization, self).__init__(550, data)


class OrigCrossID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OrigCrossID, self).__init__(551)
        else:
            super(OrigCrossID, self).__init__(551, data)


class NoSides(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoSides, self).__init__(552)
        else:
            super(NoSides, self).__init__(552, data)


class NoLegs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoLegs, self).__init__(555)
        else:
            super(NoLegs, self).__init__(555, data)


class LegCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegCurrency, self).__init__(556)
        else:
            super(LegCurrency, self).__init__(556, data)


class TotalNumSecurityTypes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotalNumSecurityTypes, self).__init__(557)
        else:
            super(TotalNumSecurityTypes, self).__init__(557, data)


class NoSecurityTypes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoSecurityTypes, self).__init__(558)
        else:
            super(NoSecurityTypes, self).__init__(558, data)


class SecurityListRequestType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityListRequestType, self).__init__(559)
        else:
            super(SecurityListRequestType, self).__init__(559, data)


class SecurityRequestResult(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityRequestResult, self).__init__(560)
        else:
            super(SecurityRequestResult, self).__init__(560, data)


class RoundLot(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(RoundLot, self).__init__(561)
        else:
            super(RoundLot, self).__init__(561, data)


class MinTradeVol(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MinTradeVol, self).__init__(562)
        else:
            super(MinTradeVol, self).__init__(562, data)


class MultiLegRptTypeReq(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MultiLegRptTypeReq, self).__init__(563)
        else:
            super(MultiLegRptTypeReq, self).__init__(563, data)


class LegPositionEffect(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(LegPositionEffect, self).__init__(564)
        else:
            super(LegPositionEffect, self).__init__(564, data)


class LegCoveredOrUncovered(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegCoveredOrUncovered, self).__init__(565)
        else:
            super(LegCoveredOrUncovered, self).__init__(565, data)


class LegPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegPrice, self).__init__(566)
        else:
            super(LegPrice, self).__init__(566, data)


class TradSesStatusRejReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesStatusRejReason, self).__init__(567)
        else:
            super(TradSesStatusRejReason, self).__init__(567, data)


class TradeRequestID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeRequestID, self).__init__(568)
        else:
            super(TradeRequestID, self).__init__(568, data)


class TradeRequestType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradeRequestType, self).__init__(569)
        else:
            super(TradeRequestType, self).__init__(569, data)


class PreviouslyReported(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(PreviouslyReported, self).__init__(570)
        else:
            super(PreviouslyReported, self).__init__(570, data)


class TradeReportID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeReportID, self).__init__(571)
        else:
            super(TradeReportID, self).__init__(571, data)


class TradeReportRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeReportRefID, self).__init__(572)
        else:
            super(TradeReportRefID, self).__init__(572, data)


class MatchStatus(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(MatchStatus, self).__init__(573)
        else:
            super(MatchStatus, self).__init__(573, data)


class MatchType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MatchType, self).__init__(574)
        else:
            super(MatchType, self).__init__(574, data)


class OddLot(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(OddLot, self).__init__(575)
        else:
            super(OddLot, self).__init__(575, data)


class NoClearingInstructions(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoClearingInstructions, self).__init__(576)
        else:
            super(NoClearingInstructions, self).__init__(576, data)


class ClearingInstruction(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ClearingInstruction, self).__init__(577)
        else:
            super(ClearingInstruction, self).__init__(577, data)


class TradeInputSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeInputSource, self).__init__(578)
        else:
            super(TradeInputSource, self).__init__(578, data)


class TradeInputDevice(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeInputDevice, self).__init__(579)
        else:
            super(TradeInputDevice, self).__init__(579, data)


class NoDates(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoDates, self).__init__(580)
        else:
            super(NoDates, self).__init__(580, data)


class AccountType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AccountType, self).__init__(581)
        else:
            super(AccountType, self).__init__(581, data)


class CustOrderCapacity(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CustOrderCapacity, self).__init__(582)
        else:
            super(CustOrderCapacity, self).__init__(582, data)


class ClOrdLinkID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ClOrdLinkID, self).__init__(583)
        else:
            super(ClOrdLinkID, self).__init__(583, data)


class MassStatusReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MassStatusReqID, self).__init__(584)
        else:
            super(MassStatusReqID, self).__init__(584, data)


class MassStatusReqType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MassStatusReqType, self).__init__(585)
        else:
            super(MassStatusReqType, self).__init__(585, data)


class OrigOrdModTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(OrigOrdModTime, self).__init__(586)
        else:
            super(OrigOrdModTime, self).__init__(586, data)


class LegSettlmntTyp(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(LegSettlmntTyp, self).__init__(587)
        else:
            super(LegSettlmntTyp, self).__init__(587, data)


class LegFutSettDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegFutSettDate, self).__init__(588)
        else:
            super(LegFutSettDate, self).__init__(588, data)


class DayBookingInst(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DayBookingInst, self).__init__(589)
        else:
            super(DayBookingInst, self).__init__(589, data)


class BookingUnit(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(BookingUnit, self).__init__(590)
        else:
            super(BookingUnit, self).__init__(590, data)


class PreallocMethod(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(PreallocMethod, self).__init__(591)
        else:
            super(PreallocMethod, self).__init__(591, data)


class UnderlyingCountryOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCountryOfIssue, self).__init__(592)
        else:
            super(UnderlyingCountryOfIssue, self).__init__(592, data)


class UnderlyingStateOrProvinceOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingStateOrProvinceOfIssue, self).__init__(593)
        else:
            super(UnderlyingStateOrProvinceOfIssue, self).__init__(593, data)


class UnderlyingLocaleOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLocaleOfIssue, self).__init__(594)
        else:
            super(UnderlyingLocaleOfIssue, self).__init__(594, data)


class UnderlyingInstrRegistry(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingInstrRegistry, self).__init__(595)
        else:
            super(UnderlyingInstrRegistry, self).__init__(595, data)


class LegCountryOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegCountryOfIssue, self).__init__(596)
        else:
            super(LegCountryOfIssue, self).__init__(596, data)


class LegStateOrProvinceOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegStateOrProvinceOfIssue, self).__init__(597)
        else:
            super(LegStateOrProvinceOfIssue, self).__init__(597, data)


class LegLocaleOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegLocaleOfIssue, self).__init__(598)
        else:
            super(LegLocaleOfIssue, self).__init__(598, data)


class LegInstrRegistry(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegInstrRegistry, self).__init__(599)
        else:
            super(LegInstrRegistry, self).__init__(599, data)


class LegSymbol(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSymbol, self).__init__(600)
        else:
            super(LegSymbol, self).__init__(600, data)


class LegSymbolSfx(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSymbolSfx, self).__init__(601)
        else:
            super(LegSymbolSfx, self).__init__(601, data)


class LegSecurityID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSecurityID, self).__init__(602)
        else:
            super(LegSecurityID, self).__init__(602, data)


class LegSecurityIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSecurityIDSource, self).__init__(603)
        else:
            super(LegSecurityIDSource, self).__init__(603, data)


class NoLegSecurityAltID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoLegSecurityAltID, self).__init__(604)
        else:
            super(NoLegSecurityAltID, self).__init__(604, data)


class LegSecurityAltID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSecurityAltID, self).__init__(605)
        else:
            super(LegSecurityAltID, self).__init__(605, data)


class LegSecurityAltIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSecurityAltIDSource, self).__init__(606)
        else:
            super(LegSecurityAltIDSource, self).__init__(606, data)


class LegProduct(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegProduct, self).__init__(607)
        else:
            super(LegProduct, self).__init__(607, data)


class LegCFICode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegCFICode, self).__init__(608)
        else:
            super(LegCFICode, self).__init__(608, data)


class LegSecurityType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSecurityType, self).__init__(609)
        else:
            super(LegSecurityType, self).__init__(609, data)


class LegMaturityMonthYear(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegMaturityMonthYear, self).__init__(610)
        else:
            super(LegMaturityMonthYear, self).__init__(610, data)


class LegMaturityDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegMaturityDate, self).__init__(611)
        else:
            super(LegMaturityDate, self).__init__(611, data)


class LegStrikePrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegStrikePrice, self).__init__(612)
        else:
            super(LegStrikePrice, self).__init__(612, data)


class LegOptAttribute(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(LegOptAttribute, self).__init__(613)
        else:
            super(LegOptAttribute, self).__init__(613, data)


class LegContractMultiplier(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegContractMultiplier, self).__init__(614)
        else:
            super(LegContractMultiplier, self).__init__(614, data)


class LegCouponRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegCouponRate, self).__init__(615)
        else:
            super(LegCouponRate, self).__init__(615, data)


class LegSecurityExchange(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSecurityExchange, self).__init__(616)
        else:
            super(LegSecurityExchange, self).__init__(616, data)


class LegIssuer(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegIssuer, self).__init__(617)
        else:
            super(LegIssuer, self).__init__(617, data)


class EncodedLegIssuerLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedLegIssuerLen, self).__init__(618)
        else:
            super(EncodedLegIssuerLen, self).__init__(618, data)


class EncodedLegIssuer(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedLegIssuer, self).__init__(619)
        else:
            super(EncodedLegIssuer, self).__init__(619, data)


class LegSecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSecurityDesc, self).__init__(620)
        else:
            super(LegSecurityDesc, self).__init__(620, data)


class EncodedLegSecurityDescLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedLegSecurityDescLen, self).__init__(621)
        else:
            super(EncodedLegSecurityDescLen, self).__init__(621, data)


class EncodedLegSecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedLegSecurityDesc, self).__init__(622)
        else:
            super(EncodedLegSecurityDesc, self).__init__(622, data)


class LegRatioQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegRatioQty, self).__init__(623)
        else:
            super(LegRatioQty, self).__init__(623, data)


class LegSide(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(LegSide, self).__init__(624)
        else:
            super(LegSide, self).__init__(624, data)


class TradingSessionSubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradingSessionSubID, self).__init__(625)
        else:
            super(TradingSessionSubID, self).__init__(625, data)


class AllocType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocType, self).__init__(626)
        else:
            super(AllocType, self).__init__(626, data)


class MidPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MidPx, self).__init__(631)
        else:
            super(MidPx, self).__init__(631, data)


class BidYield(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(BidYield, self).__init__(632)
        else:
            super(BidYield, self).__init__(632, data)


class MidYield(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MidYield, self).__init__(633)
        else:
            super(MidYield, self).__init__(633, data)


class OfferYield(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OfferYield, self).__init__(634)
        else:
            super(OfferYield, self).__init__(634, data)


class ClearingFeeIndicator(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ClearingFeeIndicator, self).__init__(635)
        else:
            super(ClearingFeeIndicator, self).__init__(635, data)


class WorkingIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(WorkingIndicator, self).__init__(636)
        else:
            super(WorkingIndicator, self).__init__(636, data)


class LegLastPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegLastPx, self).__init__(637)
        else:
            super(LegLastPx, self).__init__(637, data)


class PriorityIndicator(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PriorityIndicator, self).__init__(638)
        else:
            super(PriorityIndicator, self).__init__(638, data)


class PriceImprovement(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PriceImprovement, self).__init__(639)
        else:
            super(PriceImprovement, self).__init__(639, data)


class Price2(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(Price2, self).__init__(640)
        else:
            super(Price2, self).__init__(640, data)


class LastForwardPoints2(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LastForwardPoints2, self).__init__(641)
        else:
            super(LastForwardPoints2, self).__init__(641, data)


class BidForwardPoints2(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(BidForwardPoints2, self).__init__(642)
        else:
            super(BidForwardPoints2, self).__init__(642, data)


class OfferForwardPoints2(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OfferForwardPoints2, self).__init__(643)
        else:
            super(OfferForwardPoints2, self).__init__(643, data)


class RFQReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RFQReqID, self).__init__(644)
        else:
            super(RFQReqID, self).__init__(644, data)


class MktBidPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MktBidPx, self).__init__(645)
        else:
            super(MktBidPx, self).__init__(645, data)


class MktOfferPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MktOfferPx, self).__init__(646)
        else:
            super(MktOfferPx, self).__init__(646, data)


class MinBidSize(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MinBidSize, self).__init__(647)
        else:
            super(MinBidSize, self).__init__(647, data)


class MinOfferSize(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MinOfferSize, self).__init__(648)
        else:
            super(MinOfferSize, self).__init__(648, data)


class QuoteStatusReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteStatusReqID, self).__init__(649)
        else:
            super(QuoteStatusReqID, self).__init__(649, data)


class LegalConfirm(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(LegalConfirm, self).__init__(650)
        else:
            super(LegalConfirm, self).__init__(650, data)


class UnderlyingLastPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLastPx, self).__init__(651)
        else:
            super(UnderlyingLastPx, self).__init__(651, data)


class UnderlyingLastQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLastQty, self).__init__(652)
        else:
            super(UnderlyingLastQty, self).__init__(652, data)


class LegRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegRefID, self).__init__(654)
        else:
            super(LegRefID, self).__init__(654, data)


class ContraLegRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ContraLegRefID, self).__init__(655)
        else:
            super(ContraLegRefID, self).__init__(655, data)


class SettlCurrBidFxRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SettlCurrBidFxRate, self).__init__(656)
        else:
            super(SettlCurrBidFxRate, self).__init__(656, data)


class SettlCurrOfferFxRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SettlCurrOfferFxRate, self).__init__(657)
        else:
            super(SettlCurrOfferFxRate, self).__init__(657, data)


class QuoteRequestRejectReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteRequestRejectReason, self).__init__(658)
        else:
            super(QuoteRequestRejectReason, self).__init__(658, data)


class SideComplianceID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SideComplianceID, self).__init__(659)
        else:
            super(SideComplianceID, self).__init__(659, data)


class IOIID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(IOIID, self).__init__(23)
        else:
            super(IOIID, self).__init__(23, data)


class NoLinesOfText(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoLinesOfText, self).__init__(33)
        else:
            super(NoLinesOfText, self).__init__(33, data)


class SettlType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlType, self).__init__(63)
        else:
            super(SettlType, self).__init__(63, data)


class SettlDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlDate, self).__init__(64)
        else:
            super(SettlDate, self).__init__(64, data)


class AvgPxPrecision(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AvgPxPrecision, self).__init__(74)
        else:
            super(AvgPxPrecision, self).__init__(74, data)


class SettlDate2(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlDate2, self).__init__(193)
        else:
            super(SettlDate2, self).__init__(193, data)


class PegOffsetValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PegOffsetValue, self).__init__(211)
        else:
            super(PegOffsetValue, self).__init__(211, data)


class OpenCloseSettlFlag(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OpenCloseSettlFlag, self).__init__(286)
        else:
            super(OpenCloseSettlFlag, self).__init__(286, data)


class TotNoQuoteEntries(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNoQuoteEntries, self).__init__(304)
        else:
            super(TotNoQuoteEntries, self).__init__(304, data)


class DiscretionOffsetValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DiscretionOffsetValue, self).__init__(389)
        else:
            super(DiscretionOffsetValue, self).__init__(389, data)


class TotNoRelatedSym(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNoRelatedSym, self).__init__(393)
        else:
            super(TotNoRelatedSym, self).__init__(393, data)


class BidTradeType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(BidTradeType, self).__init__(418)
        else:
            super(BidTradeType, self).__init__(418, data)


class CardIssNum(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CardIssNum, self).__init__(491)
        else:
            super(CardIssNum, self).__init__(491, data)


class CashDistribAgentAcctName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CashDistribAgentAcctName, self).__init__(502)
        else:
            super(CashDistribAgentAcctName, self).__init__(502, data)


class RegistDtls(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RegistDtls, self).__init__(509)
        else:
            super(RegistDtls, self).__init__(509, data)


class TotNoSecurityTypes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNoSecurityTypes, self).__init__(557)
        else:
            super(TotNoSecurityTypes, self).__init__(557, data)


class LegSettlType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(LegSettlType, self).__init__(587)
        else:
            super(LegSettlType, self).__init__(587, data)


class LegSettlDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSettlDate, self).__init__(588)
        else:
            super(LegSettlDate, self).__init__(588, data)


class AcctIDSource(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AcctIDSource, self).__init__(660)
        else:
            super(AcctIDSource, self).__init__(660, data)


class AllocAcctIDSource(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocAcctIDSource, self).__init__(661)
        else:
            super(AllocAcctIDSource, self).__init__(661, data)


class BenchmarkPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(BenchmarkPrice, self).__init__(662)
        else:
            super(BenchmarkPrice, self).__init__(662, data)


class BenchmarkPriceType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(BenchmarkPriceType, self).__init__(663)
        else:
            super(BenchmarkPriceType, self).__init__(663, data)


class ConfirmID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ConfirmID, self).__init__(664)
        else:
            super(ConfirmID, self).__init__(664, data)


class ConfirmStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ConfirmStatus, self).__init__(665)
        else:
            super(ConfirmStatus, self).__init__(665, data)


class ConfirmTransType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ConfirmTransType, self).__init__(666)
        else:
            super(ConfirmTransType, self).__init__(666, data)


class ContractSettlMonth(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ContractSettlMonth, self).__init__(667)
        else:
            super(ContractSettlMonth, self).__init__(667, data)


class DeliveryForm(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DeliveryForm, self).__init__(668)
        else:
            super(DeliveryForm, self).__init__(668, data)


class LastParPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LastParPx, self).__init__(669)
        else:
            super(LastParPx, self).__init__(669, data)


class NoLegAllocs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoLegAllocs, self).__init__(670)
        else:
            super(NoLegAllocs, self).__init__(670, data)


class LegAllocAccount(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegAllocAccount, self).__init__(671)
        else:
            super(LegAllocAccount, self).__init__(671, data)


class LegIndividualAllocID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegIndividualAllocID, self).__init__(672)
        else:
            super(LegIndividualAllocID, self).__init__(672, data)


class LegAllocQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegAllocQty, self).__init__(673)
        else:
            super(LegAllocQty, self).__init__(673, data)


class LegAllocAcctIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegAllocAcctIDSource, self).__init__(674)
        else:
            super(LegAllocAcctIDSource, self).__init__(674, data)


class LegSettlCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSettlCurrency, self).__init__(675)
        else:
            super(LegSettlCurrency, self).__init__(675, data)


class LegBenchmarkCurveCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegBenchmarkCurveCurrency, self).__init__(676)
        else:
            super(LegBenchmarkCurveCurrency, self).__init__(676, data)


class LegBenchmarkCurveName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegBenchmarkCurveName, self).__init__(677)
        else:
            super(LegBenchmarkCurveName, self).__init__(677, data)


class LegBenchmarkCurvePoint(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegBenchmarkCurvePoint, self).__init__(678)
        else:
            super(LegBenchmarkCurvePoint, self).__init__(678, data)


class LegBenchmarkPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegBenchmarkPrice, self).__init__(679)
        else:
            super(LegBenchmarkPrice, self).__init__(679, data)


class LegBenchmarkPriceType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegBenchmarkPriceType, self).__init__(680)
        else:
            super(LegBenchmarkPriceType, self).__init__(680, data)


class LegBidPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegBidPx, self).__init__(681)
        else:
            super(LegBidPx, self).__init__(681, data)


class LegIOIQty(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegIOIQty, self).__init__(682)
        else:
            super(LegIOIQty, self).__init__(682, data)


class NoLegStipulations(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoLegStipulations, self).__init__(683)
        else:
            super(NoLegStipulations, self).__init__(683, data)


class LegOfferPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegOfferPx, self).__init__(684)
        else:
            super(LegOfferPx, self).__init__(684, data)


class LegPriceType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegPriceType, self).__init__(686)
        else:
            super(LegPriceType, self).__init__(686, data)


class LegQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegQty, self).__init__(687)
        else:
            super(LegQty, self).__init__(687, data)


class LegStipulationType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegStipulationType, self).__init__(688)
        else:
            super(LegStipulationType, self).__init__(688, data)


class LegStipulationValue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegStipulationValue, self).__init__(689)
        else:
            super(LegStipulationValue, self).__init__(689, data)


class LegSwapType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegSwapType, self).__init__(690)
        else:
            super(LegSwapType, self).__init__(690, data)


class Pool(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Pool, self).__init__(691)
        else:
            super(Pool, self).__init__(691, data)


class QuotePriceType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuotePriceType, self).__init__(692)
        else:
            super(QuotePriceType, self).__init__(692, data)


class QuoteRespID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteRespID, self).__init__(693)
        else:
            super(QuoteRespID, self).__init__(693, data)


class QuoteRespType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteRespType, self).__init__(694)
        else:
            super(QuoteRespType, self).__init__(694, data)


class QuoteQualifier(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteQualifier, self).__init__(695)
        else:
            super(QuoteQualifier, self).__init__(695, data)


class YieldRedemptionDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(YieldRedemptionDate, self).__init__(696)
        else:
            super(YieldRedemptionDate, self).__init__(696, data)


class YieldRedemptionPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(YieldRedemptionPrice, self).__init__(697)
        else:
            super(YieldRedemptionPrice, self).__init__(697, data)


class YieldRedemptionPriceType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(YieldRedemptionPriceType, self).__init__(698)
        else:
            super(YieldRedemptionPriceType, self).__init__(698, data)


class BenchmarkSecurityID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BenchmarkSecurityID, self).__init__(699)
        else:
            super(BenchmarkSecurityID, self).__init__(699, data)


class ReversalIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(ReversalIndicator, self).__init__(700)
        else:
            super(ReversalIndicator, self).__init__(700, data)


class YieldCalcDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(YieldCalcDate, self).__init__(701)
        else:
            super(YieldCalcDate, self).__init__(701, data)


class NoPositions(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoPositions, self).__init__(702)
        else:
            super(NoPositions, self).__init__(702, data)


class PosType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PosType, self).__init__(703)
        else:
            super(PosType, self).__init__(703, data)


class LongQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LongQty, self).__init__(704)
        else:
            super(LongQty, self).__init__(704, data)


class ShortQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ShortQty, self).__init__(705)
        else:
            super(ShortQty, self).__init__(705, data)


class PosQtyStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PosQtyStatus, self).__init__(706)
        else:
            super(PosQtyStatus, self).__init__(706, data)


class PosAmtType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PosAmtType, self).__init__(707)
        else:
            super(PosAmtType, self).__init__(707, data)


class PosAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PosAmt, self).__init__(708)
        else:
            super(PosAmt, self).__init__(708, data)


class PosTransType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PosTransType, self).__init__(709)
        else:
            super(PosTransType, self).__init__(709, data)


class PosReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PosReqID, self).__init__(710)
        else:
            super(PosReqID, self).__init__(710, data)


class NoUnderlyings(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoUnderlyings, self).__init__(711)
        else:
            super(NoUnderlyings, self).__init__(711, data)


class PosMaintAction(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PosMaintAction, self).__init__(712)
        else:
            super(PosMaintAction, self).__init__(712, data)


class OrigPosReqRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OrigPosReqRefID, self).__init__(713)
        else:
            super(OrigPosReqRefID, self).__init__(713, data)


class PosMaintRptRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PosMaintRptRefID, self).__init__(714)
        else:
            super(PosMaintRptRefID, self).__init__(714, data)


class ClearingBusinessDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ClearingBusinessDate, self).__init__(715)
        else:
            super(ClearingBusinessDate, self).__init__(715, data)


class SettlSessID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlSessID, self).__init__(716)
        else:
            super(SettlSessID, self).__init__(716, data)


class SettlSessSubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlSessSubID, self).__init__(717)
        else:
            super(SettlSessSubID, self).__init__(717, data)


class AdjustmentType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AdjustmentType, self).__init__(718)
        else:
            super(AdjustmentType, self).__init__(718, data)


class ContraryInstructionIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(ContraryInstructionIndicator, self).__init__(719)
        else:
            super(ContraryInstructionIndicator, self).__init__(719, data)


class PriorSpreadIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(PriorSpreadIndicator, self).__init__(720)
        else:
            super(PriorSpreadIndicator, self).__init__(720, data)


class PosMaintRptID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PosMaintRptID, self).__init__(721)
        else:
            super(PosMaintRptID, self).__init__(721, data)


class PosMaintStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PosMaintStatus, self).__init__(722)
        else:
            super(PosMaintStatus, self).__init__(722, data)


class PosMaintResult(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PosMaintResult, self).__init__(723)
        else:
            super(PosMaintResult, self).__init__(723, data)


class PosReqType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PosReqType, self).__init__(724)
        else:
            super(PosReqType, self).__init__(724, data)


class ResponseTransportType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ResponseTransportType, self).__init__(725)
        else:
            super(ResponseTransportType, self).__init__(725, data)


class ResponseDestination(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ResponseDestination, self).__init__(726)
        else:
            super(ResponseDestination, self).__init__(726, data)


class TotalNumPosReports(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotalNumPosReports, self).__init__(727)
        else:
            super(TotalNumPosReports, self).__init__(727, data)


class PosReqResult(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PosReqResult, self).__init__(728)
        else:
            super(PosReqResult, self).__init__(728, data)


class PosReqStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PosReqStatus, self).__init__(729)
        else:
            super(PosReqStatus, self).__init__(729, data)


class SettlPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SettlPrice, self).__init__(730)
        else:
            super(SettlPrice, self).__init__(730, data)


class SettlPriceType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SettlPriceType, self).__init__(731)
        else:
            super(SettlPriceType, self).__init__(731, data)


class UnderlyingSettlPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSettlPrice, self).__init__(732)
        else:
            super(UnderlyingSettlPrice, self).__init__(732, data)


class UnderlyingSettlPriceType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSettlPriceType, self).__init__(733)
        else:
            super(UnderlyingSettlPriceType, self).__init__(733, data)


class PriorSettlPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PriorSettlPrice, self).__init__(734)
        else:
            super(PriorSettlPrice, self).__init__(734, data)


class NoQuoteQualifiers(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoQuoteQualifiers, self).__init__(735)
        else:
            super(NoQuoteQualifiers, self).__init__(735, data)


class AllocSettlCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AllocSettlCurrency, self).__init__(736)
        else:
            super(AllocSettlCurrency, self).__init__(736, data)


class AllocSettlCurrAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AllocSettlCurrAmt, self).__init__(737)
        else:
            super(AllocSettlCurrAmt, self).__init__(737, data)


class InterestAtMaturity(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(InterestAtMaturity, self).__init__(738)
        else:
            super(InterestAtMaturity, self).__init__(738, data)


class LegDatedDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegDatedDate, self).__init__(739)
        else:
            super(LegDatedDate, self).__init__(739, data)


class LegPool(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegPool, self).__init__(740)
        else:
            super(LegPool, self).__init__(740, data)


class AllocInterestAtMaturity(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AllocInterestAtMaturity, self).__init__(741)
        else:
            super(AllocInterestAtMaturity, self).__init__(741, data)


class AllocAccruedInterestAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AllocAccruedInterestAmt, self).__init__(742)
        else:
            super(AllocAccruedInterestAmt, self).__init__(742, data)


class DeliveryDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DeliveryDate, self).__init__(743)
        else:
            super(DeliveryDate, self).__init__(743, data)


class AssignmentMethod(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(AssignmentMethod, self).__init__(744)
        else:
            super(AssignmentMethod, self).__init__(744, data)


class AssignmentUnit(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AssignmentUnit, self).__init__(745)
        else:
            super(AssignmentUnit, self).__init__(745, data)


class OpenInterest(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OpenInterest, self).__init__(746)
        else:
            super(OpenInterest, self).__init__(746, data)


class ExerciseMethod(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(ExerciseMethod, self).__init__(747)
        else:
            super(ExerciseMethod, self).__init__(747, data)


class TotNumTradeReports(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNumTradeReports, self).__init__(748)
        else:
            super(TotNumTradeReports, self).__init__(748, data)


class TradeRequestResult(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradeRequestResult, self).__init__(749)
        else:
            super(TradeRequestResult, self).__init__(749, data)


class TradeRequestStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradeRequestStatus, self).__init__(750)
        else:
            super(TradeRequestStatus, self).__init__(750, data)


class TradeReportRejectReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradeReportRejectReason, self).__init__(751)
        else:
            super(TradeReportRejectReason, self).__init__(751, data)


class SideMultiLegReportingType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SideMultiLegReportingType, self).__init__(752)
        else:
            super(SideMultiLegReportingType, self).__init__(752, data)


class NoPosAmt(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoPosAmt, self).__init__(753)
        else:
            super(NoPosAmt, self).__init__(753, data)


class AutoAcceptIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(AutoAcceptIndicator, self).__init__(754)
        else:
            super(AutoAcceptIndicator, self).__init__(754, data)


class AllocReportID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AllocReportID, self).__init__(755)
        else:
            super(AllocReportID, self).__init__(755, data)


class NoNested2PartyIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNested2PartyIDs, self).__init__(756)
        else:
            super(NoNested2PartyIDs, self).__init__(756, data)


class Nested2PartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Nested2PartyID, self).__init__(757)
        else:
            super(Nested2PartyID, self).__init__(757, data)


class Nested2PartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(Nested2PartyIDSource, self).__init__(758)
        else:
            super(Nested2PartyIDSource, self).__init__(758, data)


class Nested2PartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(Nested2PartyRole, self).__init__(759)
        else:
            super(Nested2PartyRole, self).__init__(759, data)


class Nested2PartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Nested2PartySubID, self).__init__(760)
        else:
            super(Nested2PartySubID, self).__init__(760, data)


class BenchmarkSecurityIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(BenchmarkSecurityIDSource, self).__init__(761)
        else:
            super(BenchmarkSecurityIDSource, self).__init__(761, data)


class SecuritySubType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecuritySubType, self).__init__(762)
        else:
            super(SecuritySubType, self).__init__(762, data)


class UnderlyingSecuritySubType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSecuritySubType, self).__init__(763)
        else:
            super(UnderlyingSecuritySubType, self).__init__(763, data)


class LegSecuritySubType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegSecuritySubType, self).__init__(764)
        else:
            super(LegSecuritySubType, self).__init__(764, data)


class AllowableOneSidednessPct(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AllowableOneSidednessPct, self).__init__(765)
        else:
            super(AllowableOneSidednessPct, self).__init__(765, data)


class AllowableOneSidednessValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AllowableOneSidednessValue, self).__init__(766)
        else:
            super(AllowableOneSidednessValue, self).__init__(766, data)


class AllowableOneSidednessCurr(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AllowableOneSidednessCurr, self).__init__(767)
        else:
            super(AllowableOneSidednessCurr, self).__init__(767, data)


class NoTrdRegTimestamps(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoTrdRegTimestamps, self).__init__(768)
        else:
            super(NoTrdRegTimestamps, self).__init__(768, data)


class TrdRegTimestamp(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(TrdRegTimestamp, self).__init__(769)
        else:
            super(TrdRegTimestamp, self).__init__(769, data)


class TrdRegTimestampType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TrdRegTimestampType, self).__init__(770)
        else:
            super(TrdRegTimestampType, self).__init__(770, data)


class TrdRegTimestampOrigin(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TrdRegTimestampOrigin, self).__init__(771)
        else:
            super(TrdRegTimestampOrigin, self).__init__(771, data)


class ConfirmRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ConfirmRefID, self).__init__(772)
        else:
            super(ConfirmRefID, self).__init__(772, data)


class ConfirmType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ConfirmType, self).__init__(773)
        else:
            super(ConfirmType, self).__init__(773, data)


class ConfirmRejReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ConfirmRejReason, self).__init__(774)
        else:
            super(ConfirmRejReason, self).__init__(774, data)


class BookingType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(BookingType, self).__init__(775)
        else:
            super(BookingType, self).__init__(775, data)


class IndividualAllocRejCode(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(IndividualAllocRejCode, self).__init__(776)
        else:
            super(IndividualAllocRejCode, self).__init__(776, data)


class SettlInstMsgID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlInstMsgID, self).__init__(777)
        else:
            super(SettlInstMsgID, self).__init__(777, data)


class NoSettlInst(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoSettlInst, self).__init__(778)
        else:
            super(NoSettlInst, self).__init__(778, data)


class LastUpdateTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(LastUpdateTime, self).__init__(779)
        else:
            super(LastUpdateTime, self).__init__(779, data)


class AllocSettlInstType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocSettlInstType, self).__init__(780)
        else:
            super(AllocSettlInstType, self).__init__(780, data)


class NoSettlPartyIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoSettlPartyIDs, self).__init__(781)
        else:
            super(NoSettlPartyIDs, self).__init__(781, data)


class SettlPartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlPartyID, self).__init__(782)
        else:
            super(SettlPartyID, self).__init__(782, data)


class SettlPartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SettlPartyIDSource, self).__init__(783)
        else:
            super(SettlPartyIDSource, self).__init__(783, data)


class SettlPartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SettlPartyRole, self).__init__(784)
        else:
            super(SettlPartyRole, self).__init__(784, data)


class SettlPartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlPartySubID, self).__init__(785)
        else:
            super(SettlPartySubID, self).__init__(785, data)


class SettlPartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SettlPartySubIDType, self).__init__(786)
        else:
            super(SettlPartySubIDType, self).__init__(786, data)


class DlvyInstType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DlvyInstType, self).__init__(787)
        else:
            super(DlvyInstType, self).__init__(787, data)


class TerminationType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TerminationType, self).__init__(788)
        else:
            super(TerminationType, self).__init__(788, data)


class OrdStatusReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OrdStatusReqID, self).__init__(790)
        else:
            super(OrdStatusReqID, self).__init__(790, data)


class SettlInstReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlInstReqID, self).__init__(791)
        else:
            super(SettlInstReqID, self).__init__(791, data)


class SettlInstReqRejCode(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SettlInstReqRejCode, self).__init__(792)
        else:
            super(SettlInstReqRejCode, self).__init__(792, data)


class SecondaryAllocID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryAllocID, self).__init__(793)
        else:
            super(SecondaryAllocID, self).__init__(793, data)


class AllocReportType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocReportType, self).__init__(794)
        else:
            super(AllocReportType, self).__init__(794, data)


class AllocReportRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AllocReportRefID, self).__init__(795)
        else:
            super(AllocReportRefID, self).__init__(795, data)


class AllocCancReplaceReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocCancReplaceReason, self).__init__(796)
        else:
            super(AllocCancReplaceReason, self).__init__(796, data)


class CopyMsgIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(CopyMsgIndicator, self).__init__(797)
        else:
            super(CopyMsgIndicator, self).__init__(797, data)


class AllocAccountType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocAccountType, self).__init__(798)
        else:
            super(AllocAccountType, self).__init__(798, data)


class OrderAvgPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OrderAvgPx, self).__init__(799)
        else:
            super(OrderAvgPx, self).__init__(799, data)


class OrderBookingQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OrderBookingQty, self).__init__(800)
        else:
            super(OrderBookingQty, self).__init__(800, data)


class NoSettlPartySubIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoSettlPartySubIDs, self).__init__(801)
        else:
            super(NoSettlPartySubIDs, self).__init__(801, data)


class NoPartySubIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoPartySubIDs, self).__init__(802)
        else:
            super(NoPartySubIDs, self).__init__(802, data)


class PartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PartySubIDType, self).__init__(803)
        else:
            super(PartySubIDType, self).__init__(803, data)


class NoNestedPartySubIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNestedPartySubIDs, self).__init__(804)
        else:
            super(NoNestedPartySubIDs, self).__init__(804, data)


class NestedPartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NestedPartySubIDType, self).__init__(805)
        else:
            super(NestedPartySubIDType, self).__init__(805, data)


class NoNested2PartySubIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNested2PartySubIDs, self).__init__(806)
        else:
            super(NoNested2PartySubIDs, self).__init__(806, data)


class Nested2PartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(Nested2PartySubIDType, self).__init__(807)
        else:
            super(Nested2PartySubIDType, self).__init__(807, data)


class AllocIntermedReqType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocIntermedReqType, self).__init__(808)
        else:
            super(AllocIntermedReqType, self).__init__(808, data)


class UnderlyingPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingPx, self).__init__(810)
        else:
            super(UnderlyingPx, self).__init__(810, data)


class PriceDelta(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PriceDelta, self).__init__(811)
        else:
            super(PriceDelta, self).__init__(811, data)


class ApplQueueMax(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplQueueMax, self).__init__(812)
        else:
            super(ApplQueueMax, self).__init__(812, data)


class ApplQueueDepth(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplQueueDepth, self).__init__(813)
        else:
            super(ApplQueueDepth, self).__init__(813, data)


class ApplQueueResolution(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplQueueResolution, self).__init__(814)
        else:
            super(ApplQueueResolution, self).__init__(814, data)


class ApplQueueAction(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplQueueAction, self).__init__(815)
        else:
            super(ApplQueueAction, self).__init__(815, data)


class NoAltMDSource(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoAltMDSource, self).__init__(816)
        else:
            super(NoAltMDSource, self).__init__(816, data)


class AltMDSourceID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AltMDSourceID, self).__init__(817)
        else:
            super(AltMDSourceID, self).__init__(817, data)


class SecondaryTradeReportID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryTradeReportID, self).__init__(818)
        else:
            super(SecondaryTradeReportID, self).__init__(818, data)


class AvgPxIndicator(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AvgPxIndicator, self).__init__(819)
        else:
            super(AvgPxIndicator, self).__init__(819, data)


class TradeLinkID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeLinkID, self).__init__(820)
        else:
            super(TradeLinkID, self).__init__(820, data)


class OrderInputDevice(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OrderInputDevice, self).__init__(821)
        else:
            super(OrderInputDevice, self).__init__(821, data)


class UnderlyingTradingSessionID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingTradingSessionID, self).__init__(822)
        else:
            super(UnderlyingTradingSessionID, self).__init__(822, data)


class UnderlyingTradingSessionSubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingTradingSessionSubID, self).__init__(823)
        else:
            super(UnderlyingTradingSessionSubID, self).__init__(823, data)


class TradeLegRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeLegRefID, self).__init__(824)
        else:
            super(TradeLegRefID, self).__init__(824, data)


class ExchangeRule(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ExchangeRule, self).__init__(825)
        else:
            super(ExchangeRule, self).__init__(825, data)


class TradeAllocIndicator(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradeAllocIndicator, self).__init__(826)
        else:
            super(TradeAllocIndicator, self).__init__(826, data)


class ExpirationCycle(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ExpirationCycle, self).__init__(827)
        else:
            super(ExpirationCycle, self).__init__(827, data)


class TrdType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TrdType, self).__init__(828)
        else:
            super(TrdType, self).__init__(828, data)


class TrdSubType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TrdSubType, self).__init__(829)
        else:
            super(TrdSubType, self).__init__(829, data)


class TransferReason(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TransferReason, self).__init__(830)
        else:
            super(TransferReason, self).__init__(830, data)


class TotNumAssignmentReports(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNumAssignmentReports, self).__init__(832)
        else:
            super(TotNumAssignmentReports, self).__init__(832, data)


class AsgnRptID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AsgnRptID, self).__init__(833)
        else:
            super(AsgnRptID, self).__init__(833, data)


class ThresholdAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ThresholdAmount, self).__init__(834)
        else:
            super(ThresholdAmount, self).__init__(834, data)


class PegMoveType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PegMoveType, self).__init__(835)
        else:
            super(PegMoveType, self).__init__(835, data)


class PegOffsetType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PegOffsetType, self).__init__(836)
        else:
            super(PegOffsetType, self).__init__(836, data)


class PegLimitType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PegLimitType, self).__init__(837)
        else:
            super(PegLimitType, self).__init__(837, data)


class PegRoundDirection(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PegRoundDirection, self).__init__(838)
        else:
            super(PegRoundDirection, self).__init__(838, data)


class PeggedPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PeggedPrice, self).__init__(839)
        else:
            super(PeggedPrice, self).__init__(839, data)


class PegScope(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PegScope, self).__init__(840)
        else:
            super(PegScope, self).__init__(840, data)


class DiscretionMoveType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DiscretionMoveType, self).__init__(841)
        else:
            super(DiscretionMoveType, self).__init__(841, data)


class DiscretionOffsetType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DiscretionOffsetType, self).__init__(842)
        else:
            super(DiscretionOffsetType, self).__init__(842, data)


class DiscretionLimitType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DiscretionLimitType, self).__init__(843)
        else:
            super(DiscretionLimitType, self).__init__(843, data)


class DiscretionRoundDirection(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DiscretionRoundDirection, self).__init__(844)
        else:
            super(DiscretionRoundDirection, self).__init__(844, data)


class DiscretionPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DiscretionPrice, self).__init__(845)
        else:
            super(DiscretionPrice, self).__init__(845, data)


class DiscretionScope(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DiscretionScope, self).__init__(846)
        else:
            super(DiscretionScope, self).__init__(846, data)


class TargetStrategy(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TargetStrategy, self).__init__(847)
        else:
            super(TargetStrategy, self).__init__(847, data)


class TargetStrategyParameters(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TargetStrategyParameters, self).__init__(848)
        else:
            super(TargetStrategyParameters, self).__init__(848, data)


class ParticipationRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ParticipationRate, self).__init__(849)
        else:
            super(ParticipationRate, self).__init__(849, data)


class TargetStrategyPerformance(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TargetStrategyPerformance, self).__init__(850)
        else:
            super(TargetStrategyPerformance, self).__init__(850, data)


class LastLiquidityInd(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LastLiquidityInd, self).__init__(851)
        else:
            super(LastLiquidityInd, self).__init__(851, data)


class PublishTrdIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(PublishTrdIndicator, self).__init__(852)
        else:
            super(PublishTrdIndicator, self).__init__(852, data)


class ShortSaleReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ShortSaleReason, self).__init__(853)
        else:
            super(ShortSaleReason, self).__init__(853, data)


class QtyType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QtyType, self).__init__(854)
        else:
            super(QtyType, self).__init__(854, data)


class SecondaryTrdType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryTrdType, self).__init__(855)
        else:
            super(SecondaryTrdType, self).__init__(855, data)


class TradeReportType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradeReportType, self).__init__(856)
        else:
            super(TradeReportType, self).__init__(856, data)


class AllocNoOrdersType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocNoOrdersType, self).__init__(857)
        else:
            super(AllocNoOrdersType, self).__init__(857, data)


class SharedCommission(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SharedCommission, self).__init__(858)
        else:
            super(SharedCommission, self).__init__(858, data)


class ConfirmReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ConfirmReqID, self).__init__(859)
        else:
            super(ConfirmReqID, self).__init__(859, data)


class AvgParPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AvgParPx, self).__init__(860)
        else:
            super(AvgParPx, self).__init__(860, data)


class ReportedPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ReportedPx, self).__init__(861)
        else:
            super(ReportedPx, self).__init__(861, data)


class NoCapacities(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoCapacities, self).__init__(862)
        else:
            super(NoCapacities, self).__init__(862, data)


class OrderCapacityQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OrderCapacityQty, self).__init__(863)
        else:
            super(OrderCapacityQty, self).__init__(863, data)


class NoEvents(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoEvents, self).__init__(864)
        else:
            super(NoEvents, self).__init__(864, data)


class EventType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EventType, self).__init__(865)
        else:
            super(EventType, self).__init__(865, data)


class EventDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EventDate, self).__init__(866)
        else:
            super(EventDate, self).__init__(866, data)


class EventPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(EventPx, self).__init__(867)
        else:
            super(EventPx, self).__init__(867, data)


class EventText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EventText, self).__init__(868)
        else:
            super(EventText, self).__init__(868, data)


class PctAtRisk(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PctAtRisk, self).__init__(869)
        else:
            super(PctAtRisk, self).__init__(869, data)


class NoInstrAttrib(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoInstrAttrib, self).__init__(870)
        else:
            super(NoInstrAttrib, self).__init__(870, data)


class InstrAttribType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(InstrAttribType, self).__init__(871)
        else:
            super(InstrAttribType, self).__init__(871, data)


class InstrAttribValue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(InstrAttribValue, self).__init__(872)
        else:
            super(InstrAttribValue, self).__init__(872, data)


class DatedDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DatedDate, self).__init__(873)
        else:
            super(DatedDate, self).__init__(873, data)


class InterestAccrualDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(InterestAccrualDate, self).__init__(874)
        else:
            super(InterestAccrualDate, self).__init__(874, data)


class CPProgram(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CPProgram, self).__init__(875)
        else:
            super(CPProgram, self).__init__(875, data)


class CPRegType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CPRegType, self).__init__(876)
        else:
            super(CPRegType, self).__init__(876, data)


class UnderlyingCPProgram(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCPProgram, self).__init__(877)
        else:
            super(UnderlyingCPProgram, self).__init__(877, data)


class UnderlyingCPRegType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCPRegType, self).__init__(878)
        else:
            super(UnderlyingCPRegType, self).__init__(878, data)


class UnderlyingQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingQty, self).__init__(879)
        else:
            super(UnderlyingQty, self).__init__(879, data)


class TrdMatchID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TrdMatchID, self).__init__(880)
        else:
            super(TrdMatchID, self).__init__(880, data)


class SecondaryTradeReportRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryTradeReportRefID, self).__init__(881)
        else:
            super(SecondaryTradeReportRefID, self).__init__(881, data)


class UnderlyingDirtyPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingDirtyPrice, self).__init__(882)
        else:
            super(UnderlyingDirtyPrice, self).__init__(882, data)


class UnderlyingEndPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingEndPrice, self).__init__(883)
        else:
            super(UnderlyingEndPrice, self).__init__(883, data)


class UnderlyingStartValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingStartValue, self).__init__(884)
        else:
            super(UnderlyingStartValue, self).__init__(884, data)


class UnderlyingCurrentValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCurrentValue, self).__init__(885)
        else:
            super(UnderlyingCurrentValue, self).__init__(885, data)


class UnderlyingEndValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingEndValue, self).__init__(886)
        else:
            super(UnderlyingEndValue, self).__init__(886, data)


class NoUnderlyingStips(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoUnderlyingStips, self).__init__(887)
        else:
            super(NoUnderlyingStips, self).__init__(887, data)


class UnderlyingStipType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingStipType, self).__init__(888)
        else:
            super(UnderlyingStipType, self).__init__(888, data)


class UnderlyingStipValue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingStipValue, self).__init__(889)
        else:
            super(UnderlyingStipValue, self).__init__(889, data)


class MaturityNetMoney(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MaturityNetMoney, self).__init__(890)
        else:
            super(MaturityNetMoney, self).__init__(890, data)


class MiscFeeBasis(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MiscFeeBasis, self).__init__(891)
        else:
            super(MiscFeeBasis, self).__init__(891, data)


class TotNoAllocs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNoAllocs, self).__init__(892)
        else:
            super(TotNoAllocs, self).__init__(892, data)


class LastFragment(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(LastFragment, self).__init__(893)
        else:
            super(LastFragment, self).__init__(893, data)


class CollReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CollReqID, self).__init__(894)
        else:
            super(CollReqID, self).__init__(894, data)


class CollAsgnReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CollAsgnReason, self).__init__(895)
        else:
            super(CollAsgnReason, self).__init__(895, data)


class CollInquiryQualifier(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CollInquiryQualifier, self).__init__(896)
        else:
            super(CollInquiryQualifier, self).__init__(896, data)


class NoTrades(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoTrades, self).__init__(897)
        else:
            super(NoTrades, self).__init__(897, data)


class MarginRatio(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MarginRatio, self).__init__(898)
        else:
            super(MarginRatio, self).__init__(898, data)


class MarginExcess(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MarginExcess, self).__init__(899)
        else:
            super(MarginExcess, self).__init__(899, data)


class TotalNetValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TotalNetValue, self).__init__(900)
        else:
            super(TotalNetValue, self).__init__(900, data)


class CashOutstanding(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(CashOutstanding, self).__init__(901)
        else:
            super(CashOutstanding, self).__init__(901, data)


class CollAsgnID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CollAsgnID, self).__init__(902)
        else:
            super(CollAsgnID, self).__init__(902, data)


class CollAsgnTransType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CollAsgnTransType, self).__init__(903)
        else:
            super(CollAsgnTransType, self).__init__(903, data)


class CollRespID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CollRespID, self).__init__(904)
        else:
            super(CollRespID, self).__init__(904, data)


class CollAsgnRespType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CollAsgnRespType, self).__init__(905)
        else:
            super(CollAsgnRespType, self).__init__(905, data)


class CollAsgnRejectReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CollAsgnRejectReason, self).__init__(906)
        else:
            super(CollAsgnRejectReason, self).__init__(906, data)


class CollAsgnRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CollAsgnRefID, self).__init__(907)
        else:
            super(CollAsgnRefID, self).__init__(907, data)


class CollRptID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CollRptID, self).__init__(908)
        else:
            super(CollRptID, self).__init__(908, data)


class CollInquiryID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CollInquiryID, self).__init__(909)
        else:
            super(CollInquiryID, self).__init__(909, data)


class CollStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CollStatus, self).__init__(910)
        else:
            super(CollStatus, self).__init__(910, data)


class TotNumReports(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNumReports, self).__init__(911)
        else:
            super(TotNumReports, self).__init__(911, data)


class LastRptRequested(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(LastRptRequested, self).__init__(912)
        else:
            super(LastRptRequested, self).__init__(912, data)


class AgreementDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AgreementDesc, self).__init__(913)
        else:
            super(AgreementDesc, self).__init__(913, data)


class AgreementID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AgreementID, self).__init__(914)
        else:
            super(AgreementID, self).__init__(914, data)


class AgreementDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AgreementDate, self).__init__(915)
        else:
            super(AgreementDate, self).__init__(915, data)


class StartDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StartDate, self).__init__(916)
        else:
            super(StartDate, self).__init__(916, data)


class EndDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EndDate, self).__init__(917)
        else:
            super(EndDate, self).__init__(917, data)


class AgreementCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AgreementCurrency, self).__init__(918)
        else:
            super(AgreementCurrency, self).__init__(918, data)


class DeliveryType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DeliveryType, self).__init__(919)
        else:
            super(DeliveryType, self).__init__(919, data)


class EndAccruedInterestAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(EndAccruedInterestAmt, self).__init__(920)
        else:
            super(EndAccruedInterestAmt, self).__init__(920, data)


class StartCash(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(StartCash, self).__init__(921)
        else:
            super(StartCash, self).__init__(921, data)


class EndCash(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(EndCash, self).__init__(922)
        else:
            super(EndCash, self).__init__(922, data)


class UserRequestID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UserRequestID, self).__init__(923)
        else:
            super(UserRequestID, self).__init__(923, data)


class UserRequestType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UserRequestType, self).__init__(924)
        else:
            super(UserRequestType, self).__init__(924, data)


class NewPassword(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(NewPassword, self).__init__(925)
        else:
            super(NewPassword, self).__init__(925, data)


class UserStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UserStatus, self).__init__(926)
        else:
            super(UserStatus, self).__init__(926, data)


class UserStatusText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UserStatusText, self).__init__(927)
        else:
            super(UserStatusText, self).__init__(927, data)


class StatusValue(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StatusValue, self).__init__(928)
        else:
            super(StatusValue, self).__init__(928, data)


class StatusText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StatusText, self).__init__(929)
        else:
            super(StatusText, self).__init__(929, data)


class RefCompID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RefCompID, self).__init__(930)
        else:
            super(RefCompID, self).__init__(930, data)


class RefSubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RefSubID, self).__init__(931)
        else:
            super(RefSubID, self).__init__(931, data)


class NetworkResponseID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(NetworkResponseID, self).__init__(932)
        else:
            super(NetworkResponseID, self).__init__(932, data)


class NetworkRequestID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(NetworkRequestID, self).__init__(933)
        else:
            super(NetworkRequestID, self).__init__(933, data)


class LastNetworkResponseID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LastNetworkResponseID, self).__init__(934)
        else:
            super(LastNetworkResponseID, self).__init__(934, data)


class NetworkRequestType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NetworkRequestType, self).__init__(935)
        else:
            super(NetworkRequestType, self).__init__(935, data)


class NoCompIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoCompIDs, self).__init__(936)
        else:
            super(NoCompIDs, self).__init__(936, data)


class NetworkStatusResponseType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NetworkStatusResponseType, self).__init__(937)
        else:
            super(NetworkStatusResponseType, self).__init__(937, data)


class NoCollInquiryQualifier(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoCollInquiryQualifier, self).__init__(938)
        else:
            super(NoCollInquiryQualifier, self).__init__(938, data)


class TrdRptStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TrdRptStatus, self).__init__(939)
        else:
            super(TrdRptStatus, self).__init__(939, data)


class AffirmStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AffirmStatus, self).__init__(940)
        else:
            super(AffirmStatus, self).__init__(940, data)


class UnderlyingStrikeCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingStrikeCurrency, self).__init__(941)
        else:
            super(UnderlyingStrikeCurrency, self).__init__(941, data)


class LegStrikeCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegStrikeCurrency, self).__init__(942)
        else:
            super(LegStrikeCurrency, self).__init__(942, data)


class TimeBracket(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TimeBracket, self).__init__(943)
        else:
            super(TimeBracket, self).__init__(943, data)


class CollAction(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CollAction, self).__init__(944)
        else:
            super(CollAction, self).__init__(944, data)


class CollInquiryStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CollInquiryStatus, self).__init__(945)
        else:
            super(CollInquiryStatus, self).__init__(945, data)


class CollInquiryResult(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CollInquiryResult, self).__init__(946)
        else:
            super(CollInquiryResult, self).__init__(946, data)


class StrikeCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StrikeCurrency, self).__init__(947)
        else:
            super(StrikeCurrency, self).__init__(947, data)


class NoNested3PartyIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNested3PartyIDs, self).__init__(948)
        else:
            super(NoNested3PartyIDs, self).__init__(948, data)


class Nested3PartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Nested3PartyID, self).__init__(949)
        else:
            super(Nested3PartyID, self).__init__(949, data)


class Nested3PartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(Nested3PartyIDSource, self).__init__(950)
        else:
            super(Nested3PartyIDSource, self).__init__(950, data)


class Nested3PartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(Nested3PartyRole, self).__init__(951)
        else:
            super(Nested3PartyRole, self).__init__(951, data)


class NoNested3PartySubIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNested3PartySubIDs, self).__init__(952)
        else:
            super(NoNested3PartySubIDs, self).__init__(952, data)


class Nested3PartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Nested3PartySubID, self).__init__(953)
        else:
            super(Nested3PartySubID, self).__init__(953, data)


class Nested3PartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(Nested3PartySubIDType, self).__init__(954)
        else:
            super(Nested3PartySubIDType, self).__init__(954, data)


class LegContractSettlMonth(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegContractSettlMonth, self).__init__(955)
        else:
            super(LegContractSettlMonth, self).__init__(955, data)


class LegInterestAccrualDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegInterestAccrualDate, self).__init__(956)
        else:
            super(LegInterestAccrualDate, self).__init__(956, data)


class LegOrderQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegOrderQty, self).__init__(685)
        else:
            super(LegOrderQty, self).__init__(685, data)


class NoStrategyParameters(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoStrategyParameters, self).__init__(957)
        else:
            super(NoStrategyParameters, self).__init__(957, data)


class StrategyParameterName(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StrategyParameterName, self).__init__(958)
        else:
            super(StrategyParameterName, self).__init__(958, data)


class StrategyParameterType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StrategyParameterType, self).__init__(959)
        else:
            super(StrategyParameterType, self).__init__(959, data)


class StrategyParameterValue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StrategyParameterValue, self).__init__(960)
        else:
            super(StrategyParameterValue, self).__init__(960, data)


class HostCrossID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(HostCrossID, self).__init__(961)
        else:
            super(HostCrossID, self).__init__(961, data)


class SideTimeInForce(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(SideTimeInForce, self).__init__(962)
        else:
            super(SideTimeInForce, self).__init__(962, data)


class MDReportID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MDReportID, self).__init__(963)
        else:
            super(MDReportID, self).__init__(963, data)


class SecurityReportID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityReportID, self).__init__(964)
        else:
            super(SecurityReportID, self).__init__(964, data)


class SecurityStatus(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityStatus, self).__init__(965)
        else:
            super(SecurityStatus, self).__init__(965, data)


class SettleOnOpenFlag(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettleOnOpenFlag, self).__init__(966)
        else:
            super(SettleOnOpenFlag, self).__init__(966, data)


class StrikeMultiplier(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(StrikeMultiplier, self).__init__(967)
        else:
            super(StrikeMultiplier, self).__init__(967, data)


class StrikeValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(StrikeValue, self).__init__(968)
        else:
            super(StrikeValue, self).__init__(968, data)


class MinPriceIncrement(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MinPriceIncrement, self).__init__(969)
        else:
            super(MinPriceIncrement, self).__init__(969, data)


class PositionLimit(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PositionLimit, self).__init__(970)
        else:
            super(PositionLimit, self).__init__(970, data)


class NTPositionLimit(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NTPositionLimit, self).__init__(971)
        else:
            super(NTPositionLimit, self).__init__(971, data)


class UnderlyingAllocationPercent(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingAllocationPercent, self).__init__(972)
        else:
            super(UnderlyingAllocationPercent, self).__init__(972, data)


class UnderlyingCashAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCashAmount, self).__init__(973)
        else:
            super(UnderlyingCashAmount, self).__init__(973, data)


class UnderlyingCashType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCashType, self).__init__(974)
        else:
            super(UnderlyingCashType, self).__init__(974, data)


class UnderlyingSettlementType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSettlementType, self).__init__(975)
        else:
            super(UnderlyingSettlementType, self).__init__(975, data)


class QuantityDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(QuantityDate, self).__init__(976)
        else:
            super(QuantityDate, self).__init__(976, data)


class ContIntRptID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ContIntRptID, self).__init__(977)
        else:
            super(ContIntRptID, self).__init__(977, data)


class LateIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(LateIndicator, self).__init__(978)
        else:
            super(LateIndicator, self).__init__(978, data)


class InputSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(InputSource, self).__init__(979)
        else:
            super(InputSource, self).__init__(979, data)


class SecurityUpdateAction(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityUpdateAction, self).__init__(980)
        else:
            super(SecurityUpdateAction, self).__init__(980, data)


class NoExpiration(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoExpiration, self).__init__(981)
        else:
            super(NoExpiration, self).__init__(981, data)


class ExpType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ExpType, self).__init__(982)
        else:
            super(ExpType, self).__init__(982, data)


class ExpQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ExpQty, self).__init__(983)
        else:
            super(ExpQty, self).__init__(983, data)


class NoUnderlyingAmounts(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoUnderlyingAmounts, self).__init__(984)
        else:
            super(NoUnderlyingAmounts, self).__init__(984, data)


class UnderlyingPayAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingPayAmount, self).__init__(985)
        else:
            super(UnderlyingPayAmount, self).__init__(985, data)


class UnderlyingCollectAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCollectAmount, self).__init__(986)
        else:
            super(UnderlyingCollectAmount, self).__init__(986, data)


class UnderlyingSettlementDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSettlementDate, self).__init__(987)
        else:
            super(UnderlyingSettlementDate, self).__init__(987, data)


class UnderlyingSettlementStatus(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSettlementStatus, self).__init__(988)
        else:
            super(UnderlyingSettlementStatus, self).__init__(988, data)


class SecondaryIndividualAllocID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryIndividualAllocID, self).__init__(989)
        else:
            super(SecondaryIndividualAllocID, self).__init__(989, data)


class LegReportID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegReportID, self).__init__(990)
        else:
            super(LegReportID, self).__init__(990, data)


class RndPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(RndPx, self).__init__(991)
        else:
            super(RndPx, self).__init__(991, data)


class IndividualAllocType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(IndividualAllocType, self).__init__(992)
        else:
            super(IndividualAllocType, self).__init__(992, data)


class AllocCustomerCapacity(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AllocCustomerCapacity, self).__init__(993)
        else:
            super(AllocCustomerCapacity, self).__init__(993, data)


class TierCode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TierCode, self).__init__(994)
        else:
            super(TierCode, self).__init__(994, data)


class UnitOfMeasure(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnitOfMeasure, self).__init__(996)
        else:
            super(UnitOfMeasure, self).__init__(996, data)


class TimeUnit(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TimeUnit, self).__init__(997)
        else:
            super(TimeUnit, self).__init__(997, data)


class UnderlyingUnitOfMeasure(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingUnitOfMeasure, self).__init__(998)
        else:
            super(UnderlyingUnitOfMeasure, self).__init__(998, data)


class LegUnitOfMeasure(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegUnitOfMeasure, self).__init__(999)
        else:
            super(LegUnitOfMeasure, self).__init__(999, data)


class UnderlyingTimeUnit(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingTimeUnit, self).__init__(1000)
        else:
            super(UnderlyingTimeUnit, self).__init__(1000, data)


class LegTimeUnit(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegTimeUnit, self).__init__(1001)
        else:
            super(LegTimeUnit, self).__init__(1001, data)


class AllocMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(AllocMethod, self).__init__(1002)
        else:
            super(AllocMethod, self).__init__(1002, data)


class TradeID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradeID, self).__init__(1003)
        else:
            super(TradeID, self).__init__(1003, data)


class SideTradeReportID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SideTradeReportID, self).__init__(1005)
        else:
            super(SideTradeReportID, self).__init__(1005, data)


class SideFillStationCd(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SideFillStationCd, self).__init__(1006)
        else:
            super(SideFillStationCd, self).__init__(1006, data)


class SideReasonCd(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SideReasonCd, self).__init__(1007)
        else:
            super(SideReasonCd, self).__init__(1007, data)


class SideTrdSubTyp(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SideTrdSubTyp, self).__init__(1008)
        else:
            super(SideTrdSubTyp, self).__init__(1008, data)


class SideQty(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SideQty, self).__init__(1009)
        else:
            super(SideQty, self).__init__(1009, data)


class MessageEventSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MessageEventSource, self).__init__(1011)
        else:
            super(MessageEventSource, self).__init__(1011, data)


class SideTrdRegTimestamp(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(SideTrdRegTimestamp, self).__init__(1012)
        else:
            super(SideTrdRegTimestamp, self).__init__(1012, data)


class SideTrdRegTimestampType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SideTrdRegTimestampType, self).__init__(1013)
        else:
            super(SideTrdRegTimestampType, self).__init__(1013, data)


class SideTrdRegTimestampSrc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SideTrdRegTimestampSrc, self).__init__(1014)
        else:
            super(SideTrdRegTimestampSrc, self).__init__(1014, data)


class AsOfIndicator(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(AsOfIndicator, self).__init__(1015)
        else:
            super(AsOfIndicator, self).__init__(1015, data)


class NoSideTrdRegTS(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoSideTrdRegTS, self).__init__(1016)
        else:
            super(NoSideTrdRegTS, self).__init__(1016, data)


class LegOptionRatio(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegOptionRatio, self).__init__(1017)
        else:
            super(LegOptionRatio, self).__init__(1017, data)


class NoInstrumentParties(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoInstrumentParties, self).__init__(1018)
        else:
            super(NoInstrumentParties, self).__init__(1018, data)


class InstrumentPartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(InstrumentPartyID, self).__init__(1019)
        else:
            super(InstrumentPartyID, self).__init__(1019, data)


class TradeVolume(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TradeVolume, self).__init__(1020)
        else:
            super(TradeVolume, self).__init__(1020, data)


class MDBookType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MDBookType, self).__init__(1021)
        else:
            super(MDBookType, self).__init__(1021, data)


class MDFeedType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MDFeedType, self).__init__(1022)
        else:
            super(MDFeedType, self).__init__(1022, data)


class MDPriceLevel(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MDPriceLevel, self).__init__(1023)
        else:
            super(MDPriceLevel, self).__init__(1023, data)


class MDOriginType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MDOriginType, self).__init__(1024)
        else:
            super(MDOriginType, self).__init__(1024, data)


class FirstPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(FirstPx, self).__init__(1025)
        else:
            super(FirstPx, self).__init__(1025, data)


class MDEntrySpotRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntrySpotRate, self).__init__(1026)
        else:
            super(MDEntrySpotRate, self).__init__(1026, data)


class MDEntryForwardPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MDEntryForwardPoints, self).__init__(1027)
        else:
            super(MDEntryForwardPoints, self).__init__(1027, data)


class ManualOrderIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(ManualOrderIndicator, self).__init__(1028)
        else:
            super(ManualOrderIndicator, self).__init__(1028, data)


class CustDirectedOrder(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(CustDirectedOrder, self).__init__(1029)
        else:
            super(CustDirectedOrder, self).__init__(1029, data)


class ReceivedDeptID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ReceivedDeptID, self).__init__(1030)
        else:
            super(ReceivedDeptID, self).__init__(1030, data)


class CustOrderHandlingInst(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(CustOrderHandlingInst, self).__init__(1031)
        else:
            super(CustOrderHandlingInst, self).__init__(1031, data)


class OrderHandlingInstSource(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(OrderHandlingInstSource, self).__init__(1032)
        else:
            super(OrderHandlingInstSource, self).__init__(1032, data)


class DeskType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DeskType, self).__init__(1033)
        else:
            super(DeskType, self).__init__(1033, data)


class DeskTypeSource(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DeskTypeSource, self).__init__(1034)
        else:
            super(DeskTypeSource, self).__init__(1034, data)


class DeskOrderHandlingInst(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DeskOrderHandlingInst, self).__init__(1035)
        else:
            super(DeskOrderHandlingInst, self).__init__(1035, data)


class ExecAckStatus(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(ExecAckStatus, self).__init__(1036)
        else:
            super(ExecAckStatus, self).__init__(1036, data)


class UnderlyingDeliveryAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingDeliveryAmount, self).__init__(1037)
        else:
            super(UnderlyingDeliveryAmount, self).__init__(1037, data)


class UnderlyingCapValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingCapValue, self).__init__(1038)
        else:
            super(UnderlyingCapValue, self).__init__(1038, data)


class UnderlyingSettlMethod(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSettlMethod, self).__init__(1039)
        else:
            super(UnderlyingSettlMethod, self).__init__(1039, data)


class SecondaryTradeID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryTradeID, self).__init__(1040)
        else:
            super(SecondaryTradeID, self).__init__(1040, data)


class FirmTradeID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(FirmTradeID, self).__init__(1041)
        else:
            super(FirmTradeID, self).__init__(1041, data)


class SecondaryFirmTradeID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryFirmTradeID, self).__init__(1042)
        else:
            super(SecondaryFirmTradeID, self).__init__(1042, data)


class CollApplType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(CollApplType, self).__init__(1043)
        else:
            super(CollApplType, self).__init__(1043, data)


class UnderlyingAdjustedQuantity(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingAdjustedQuantity, self).__init__(1044)
        else:
            super(UnderlyingAdjustedQuantity, self).__init__(1044, data)


class UnderlyingFXRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingFXRate, self).__init__(1045)
        else:
            super(UnderlyingFXRate, self).__init__(1045, data)


class UnderlyingFXRateCalc(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingFXRateCalc, self).__init__(1046)
        else:
            super(UnderlyingFXRateCalc, self).__init__(1046, data)


class AllocPositionEffect(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(AllocPositionEffect, self).__init__(1047)
        else:
            super(AllocPositionEffect, self).__init__(1047, data)


class DealingCapacity(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DealingCapacity, self).__init__(1048)
        else:
            super(DealingCapacity, self).__init__(1048, data)


class InstrmtAssignmentMethod(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(InstrmtAssignmentMethod, self).__init__(1049)
        else:
            super(InstrmtAssignmentMethod, self).__init__(1049, data)


class InstrumentPartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(InstrumentPartyIDSource, self).__init__(1050)
        else:
            super(InstrumentPartyIDSource, self).__init__(1050, data)


class InstrumentPartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(InstrumentPartyRole, self).__init__(1051)
        else:
            super(InstrumentPartyRole, self).__init__(1051, data)


class NoInstrumentPartySubIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoInstrumentPartySubIDs, self).__init__(1052)
        else:
            super(NoInstrumentPartySubIDs, self).__init__(1052, data)


class InstrumentPartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(InstrumentPartySubID, self).__init__(1053)
        else:
            super(InstrumentPartySubID, self).__init__(1053, data)


class InstrumentPartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(InstrumentPartySubIDType, self).__init__(1054)
        else:
            super(InstrumentPartySubIDType, self).__init__(1054, data)


class PositionCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PositionCurrency, self).__init__(1055)
        else:
            super(PositionCurrency, self).__init__(1055, data)


class CalculatedCcyLastQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(CalculatedCcyLastQty, self).__init__(1056)
        else:
            super(CalculatedCcyLastQty, self).__init__(1056, data)


class AggressorIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(AggressorIndicator, self).__init__(1057)
        else:
            super(AggressorIndicator, self).__init__(1057, data)


class NoUndlyInstrumentParties(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoUndlyInstrumentParties, self).__init__(1058)
        else:
            super(NoUndlyInstrumentParties, self).__init__(1058, data)


class UndlyInstrumentPartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UndlyInstrumentPartyID, self).__init__(1059)
        else:
            super(UndlyInstrumentPartyID, self).__init__(1059, data)


class UndlyInstrumentPartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(UndlyInstrumentPartyIDSource, self).__init__(1060)
        else:
            super(UndlyInstrumentPartyIDSource, self).__init__(1060, data)


class UndlyInstrumentPartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UndlyInstrumentPartyRole, self).__init__(1061)
        else:
            super(UndlyInstrumentPartyRole, self).__init__(1061, data)


class NoUndlyInstrumentPartySubIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoUndlyInstrumentPartySubIDs, self).__init__(1062)
        else:
            super(NoUndlyInstrumentPartySubIDs, self).__init__(1062, data)


class UndlyInstrumentPartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UndlyInstrumentPartySubID, self).__init__(1063)
        else:
            super(UndlyInstrumentPartySubID, self).__init__(1063, data)


class UndlyInstrumentPartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UndlyInstrumentPartySubIDType, self).__init__(1064)
        else:
            super(UndlyInstrumentPartySubIDType, self).__init__(1064, data)


class BidSwapPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(BidSwapPoints, self).__init__(1065)
        else:
            super(BidSwapPoints, self).__init__(1065, data)


class OfferSwapPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OfferSwapPoints, self).__init__(1066)
        else:
            super(OfferSwapPoints, self).__init__(1066, data)


class LegBidForwardPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegBidForwardPoints, self).__init__(1067)
        else:
            super(LegBidForwardPoints, self).__init__(1067, data)


class LegOfferForwardPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegOfferForwardPoints, self).__init__(1068)
        else:
            super(LegOfferForwardPoints, self).__init__(1068, data)


class SwapPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SwapPoints, self).__init__(1069)
        else:
            super(SwapPoints, self).__init__(1069, data)


class MDQuoteType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MDQuoteType, self).__init__(1070)
        else:
            super(MDQuoteType, self).__init__(1070, data)


class LastSwapPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LastSwapPoints, self).__init__(1071)
        else:
            super(LastSwapPoints, self).__init__(1071, data)


class SideGrossTradeAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SideGrossTradeAmt, self).__init__(1072)
        else:
            super(SideGrossTradeAmt, self).__init__(1072, data)


class LegLastForwardPoints(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegLastForwardPoints, self).__init__(1073)
        else:
            super(LegLastForwardPoints, self).__init__(1073, data)


class LegCalculatedCcyLastQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegCalculatedCcyLastQty, self).__init__(1074)
        else:
            super(LegCalculatedCcyLastQty, self).__init__(1074, data)


class LegGrossTradeAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegGrossTradeAmt, self).__init__(1075)
        else:
            super(LegGrossTradeAmt, self).__init__(1075, data)


class MaturityTime(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MaturityTime, self).__init__(1079)
        else:
            super(MaturityTime, self).__init__(1079, data)


class RefOrderID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RefOrderID, self).__init__(1080)
        else:
            super(RefOrderID, self).__init__(1080, data)


class RefOrderIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(RefOrderIDSource, self).__init__(1081)
        else:
            super(RefOrderIDSource, self).__init__(1081, data)


class SecondaryDisplayQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryDisplayQty, self).__init__(1082)
        else:
            super(SecondaryDisplayQty, self).__init__(1082, data)


class DisplayWhen(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DisplayWhen, self).__init__(1083)
        else:
            super(DisplayWhen, self).__init__(1083, data)


class DisplayMethod(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DisplayMethod, self).__init__(1084)
        else:
            super(DisplayMethod, self).__init__(1084, data)


class DisplayLowQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DisplayLowQty, self).__init__(1085)
        else:
            super(DisplayLowQty, self).__init__(1085, data)


class DisplayHighQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DisplayHighQty, self).__init__(1086)
        else:
            super(DisplayHighQty, self).__init__(1086, data)


class DisplayMinIncr(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DisplayMinIncr, self).__init__(1087)
        else:
            super(DisplayMinIncr, self).__init__(1087, data)


class RefreshQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(RefreshQty, self).__init__(1088)
        else:
            super(RefreshQty, self).__init__(1088, data)


class MatchIncrement(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MatchIncrement, self).__init__(1089)
        else:
            super(MatchIncrement, self).__init__(1089, data)


class MaxPriceLevels(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MaxPriceLevels, self).__init__(1090)
        else:
            super(MaxPriceLevels, self).__init__(1090, data)


class PreTradeAnonymity(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(PreTradeAnonymity, self).__init__(1091)
        else:
            super(PreTradeAnonymity, self).__init__(1091, data)


class PriceProtectionScope(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(PriceProtectionScope, self).__init__(1092)
        else:
            super(PriceProtectionScope, self).__init__(1092, data)


class LotType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(LotType, self).__init__(1093)
        else:
            super(LotType, self).__init__(1093, data)


class PegPriceType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PegPriceType, self).__init__(1094)
        else:
            super(PegPriceType, self).__init__(1094, data)


class PeggedRefPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PeggedRefPrice, self).__init__(1095)
        else:
            super(PeggedRefPrice, self).__init__(1095, data)


class PegSecurityIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PegSecurityIDSource, self).__init__(1096)
        else:
            super(PegSecurityIDSource, self).__init__(1096, data)


class PegSecurityID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PegSecurityID, self).__init__(1097)
        else:
            super(PegSecurityID, self).__init__(1097, data)


class PegSymbol(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PegSymbol, self).__init__(1098)
        else:
            super(PegSymbol, self).__init__(1098, data)


class PegSecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PegSecurityDesc, self).__init__(1099)
        else:
            super(PegSecurityDesc, self).__init__(1099, data)


class TriggerType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerType, self).__init__(1100)
        else:
            super(TriggerType, self).__init__(1100, data)


class TriggerAction(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerAction, self).__init__(1101)
        else:
            super(TriggerAction, self).__init__(1101, data)


class TriggerPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerPrice, self).__init__(1102)
        else:
            super(TriggerPrice, self).__init__(1102, data)


class TriggerSymbol(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerSymbol, self).__init__(1103)
        else:
            super(TriggerSymbol, self).__init__(1103, data)


class TriggerSecurityID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerSecurityID, self).__init__(1104)
        else:
            super(TriggerSecurityID, self).__init__(1104, data)


class TriggerSecurityIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerSecurityIDSource, self).__init__(1105)
        else:
            super(TriggerSecurityIDSource, self).__init__(1105, data)


class TriggerSecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerSecurityDesc, self).__init__(1106)
        else:
            super(TriggerSecurityDesc, self).__init__(1106, data)


class TriggerPriceType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerPriceType, self).__init__(1107)
        else:
            super(TriggerPriceType, self).__init__(1107, data)


class TriggerPriceTypeScope(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerPriceTypeScope, self).__init__(1108)
        else:
            super(TriggerPriceTypeScope, self).__init__(1108, data)


class TriggerPriceDirection(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerPriceDirection, self).__init__(1109)
        else:
            super(TriggerPriceDirection, self).__init__(1109, data)


class TriggerNewPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerNewPrice, self).__init__(1110)
        else:
            super(TriggerNewPrice, self).__init__(1110, data)


class TriggerOrderType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerOrderType, self).__init__(1111)
        else:
            super(TriggerOrderType, self).__init__(1111, data)


class TriggerNewQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerNewQty, self).__init__(1112)
        else:
            super(TriggerNewQty, self).__init__(1112, data)


class TriggerTradingSessionID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerTradingSessionID, self).__init__(1113)
        else:
            super(TriggerTradingSessionID, self).__init__(1113, data)


class TriggerTradingSessionSubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TriggerTradingSessionSubID, self).__init__(1114)
        else:
            super(TriggerTradingSessionSubID, self).__init__(1114, data)


class OrderCategory(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(OrderCategory, self).__init__(1115)
        else:
            super(OrderCategory, self).__init__(1115, data)


class NoRootPartyIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoRootPartyIDs, self).__init__(1116)
        else:
            super(NoRootPartyIDs, self).__init__(1116, data)


class RootPartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RootPartyID, self).__init__(1117)
        else:
            super(RootPartyID, self).__init__(1117, data)


class RootPartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(RootPartyIDSource, self).__init__(1118)
        else:
            super(RootPartyIDSource, self).__init__(1118, data)


class RootPartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RootPartyRole, self).__init__(1119)
        else:
            super(RootPartyRole, self).__init__(1119, data)


class NoRootPartySubIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoRootPartySubIDs, self).__init__(1120)
        else:
            super(NoRootPartySubIDs, self).__init__(1120, data)


class RootPartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RootPartySubID, self).__init__(1121)
        else:
            super(RootPartySubID, self).__init__(1121, data)


class RootPartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RootPartySubIDType, self).__init__(1122)
        else:
            super(RootPartySubIDType, self).__init__(1122, data)


class TradeHandlingInstr(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TradeHandlingInstr, self).__init__(1123)
        else:
            super(TradeHandlingInstr, self).__init__(1123, data)


class OrigTradeHandlingInstr(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(OrigTradeHandlingInstr, self).__init__(1124)
        else:
            super(OrigTradeHandlingInstr, self).__init__(1124, data)


class OrigTradeDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OrigTradeDate, self).__init__(1125)
        else:
            super(OrigTradeDate, self).__init__(1125, data)


class OrigTradeID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OrigTradeID, self).__init__(1126)
        else:
            super(OrigTradeID, self).__init__(1126, data)


class OrigSecondaryTradeID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(OrigSecondaryTradeID, self).__init__(1127)
        else:
            super(OrigSecondaryTradeID, self).__init__(1127, data)


class TZTransactTime(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TZTransactTime, self).__init__(1132)
        else:
            super(TZTransactTime, self).__init__(1132, data)


class ExDestinationIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(ExDestinationIDSource, self).__init__(1133)
        else:
            super(ExDestinationIDSource, self).__init__(1133, data)


class ReportedPxDiff(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(ReportedPxDiff, self).__init__(1134)
        else:
            super(ReportedPxDiff, self).__init__(1134, data)


class RptSys(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RptSys, self).__init__(1135)
        else:
            super(RptSys, self).__init__(1135, data)


class AllocClearingFeeIndicator(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(AllocClearingFeeIndicator, self).__init__(1136)
        else:
            super(AllocClearingFeeIndicator, self).__init__(1136, data)


class DisplayQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DisplayQty, self).__init__(1138)
        else:
            super(DisplayQty, self).__init__(1138, data)


class ExchangeSpecialInstructions(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ExchangeSpecialInstructions, self).__init__(1139)
        else:
            super(ExchangeSpecialInstructions, self).__init__(1139, data)


class ExpirationQtyType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ExpirationQtyType, self).__init__(982)
        else:
            super(ExpirationQtyType, self).__init__(982, data)


class MaxTradeVol(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MaxTradeVol, self).__init__(1140)
        else:
            super(MaxTradeVol, self).__init__(1140, data)


class NoMDFeedTypes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoMDFeedTypes, self).__init__(1141)
        else:
            super(NoMDFeedTypes, self).__init__(1141, data)


class MatchAlgorithm(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MatchAlgorithm, self).__init__(1142)
        else:
            super(MatchAlgorithm, self).__init__(1142, data)


class MaxPriceVariation(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MaxPriceVariation, self).__init__(1143)
        else:
            super(MaxPriceVariation, self).__init__(1143, data)


class ImpliedMarketIndicator(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ImpliedMarketIndicator, self).__init__(1144)
        else:
            super(ImpliedMarketIndicator, self).__init__(1144, data)


class EventTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(EventTime, self).__init__(1145)
        else:
            super(EventTime, self).__init__(1145, data)


class MinPriceIncrementAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MinPriceIncrementAmount, self).__init__(1146)
        else:
            super(MinPriceIncrementAmount, self).__init__(1146, data)


class UnitOfMeasureQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnitOfMeasureQty, self).__init__(1147)
        else:
            super(UnitOfMeasureQty, self).__init__(1147, data)


class LowLimitPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LowLimitPrice, self).__init__(1148)
        else:
            super(LowLimitPrice, self).__init__(1148, data)


class HighLimitPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(HighLimitPrice, self).__init__(1149)
        else:
            super(HighLimitPrice, self).__init__(1149, data)


class TradingReferencePrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TradingReferencePrice, self).__init__(1150)
        else:
            super(TradingReferencePrice, self).__init__(1150, data)


class SecurityGroup(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityGroup, self).__init__(1151)
        else:
            super(SecurityGroup, self).__init__(1151, data)


class LegNumber(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegNumber, self).__init__(1152)
        else:
            super(LegNumber, self).__init__(1152, data)


class SettlementCycleNo(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SettlementCycleNo, self).__init__(1153)
        else:
            super(SettlementCycleNo, self).__init__(1153, data)


class SideCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SideCurrency, self).__init__(1154)
        else:
            super(SideCurrency, self).__init__(1154, data)


class SideSettlCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SideSettlCurrency, self).__init__(1155)
        else:
            super(SideSettlCurrency, self).__init__(1155, data)


class ApplExtID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplExtID, self).__init__(1156)
        else:
            super(ApplExtID, self).__init__(1156, data)


class CcyAmt(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(CcyAmt, self).__init__(1157)
        else:
            super(CcyAmt, self).__init__(1157, data)


class NoSettlDetails(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoSettlDetails, self).__init__(1158)
        else:
            super(NoSettlDetails, self).__init__(1158, data)


class SettlObligMode(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SettlObligMode, self).__init__(1159)
        else:
            super(SettlObligMode, self).__init__(1159, data)


class SettlObligMsgID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlObligMsgID, self).__init__(1160)
        else:
            super(SettlObligMsgID, self).__init__(1160, data)


class SettlObligID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlObligID, self).__init__(1161)
        else:
            super(SettlObligID, self).__init__(1161, data)


class SettlObligTransType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SettlObligTransType, self).__init__(1162)
        else:
            super(SettlObligTransType, self).__init__(1162, data)


class SettlObligRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SettlObligRefID, self).__init__(1163)
        else:
            super(SettlObligRefID, self).__init__(1163, data)


class SettlObligSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SettlObligSource, self).__init__(1164)
        else:
            super(SettlObligSource, self).__init__(1164, data)


class NoSettlOblig(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoSettlOblig, self).__init__(1165)
        else:
            super(NoSettlOblig, self).__init__(1165, data)


class QuoteMsgID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteMsgID, self).__init__(1166)
        else:
            super(QuoteMsgID, self).__init__(1166, data)


class QuoteEntryStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(QuoteEntryStatus, self).__init__(1167)
        else:
            super(QuoteEntryStatus, self).__init__(1167, data)


class TotNoCxldQuotes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNoCxldQuotes, self).__init__(1168)
        else:
            super(TotNoCxldQuotes, self).__init__(1168, data)


class TotNoAccQuotes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNoAccQuotes, self).__init__(1169)
        else:
            super(TotNoAccQuotes, self).__init__(1169, data)


class TotNoRejQuotes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNoRejQuotes, self).__init__(1170)
        else:
            super(TotNoRejQuotes, self).__init__(1170, data)


class PrivateQuote(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(PrivateQuote, self).__init__(1171)
        else:
            super(PrivateQuote, self).__init__(1171, data)


class RespondentType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RespondentType, self).__init__(1172)
        else:
            super(RespondentType, self).__init__(1172, data)


class MDSubBookType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MDSubBookType, self).__init__(1173)
        else:
            super(MDSubBookType, self).__init__(1173, data)


class SecurityTradingEvent(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityTradingEvent, self).__init__(1174)
        else:
            super(SecurityTradingEvent, self).__init__(1174, data)


class NoStatsIndicators(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoStatsIndicators, self).__init__(1175)
        else:
            super(NoStatsIndicators, self).__init__(1175, data)


class StatsType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StatsType, self).__init__(1176)
        else:
            super(StatsType, self).__init__(1176, data)


class NoOfSecSizes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoOfSecSizes, self).__init__(1177)
        else:
            super(NoOfSecSizes, self).__init__(1177, data)


class MDSecSizeType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MDSecSizeType, self).__init__(1178)
        else:
            super(MDSecSizeType, self).__init__(1178, data)


class MDSecSize(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MDSecSize, self).__init__(1179)
        else:
            super(MDSecSize, self).__init__(1179, data)


class ApplID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ApplID, self).__init__(1180)
        else:
            super(ApplID, self).__init__(1180, data)


class ApplSeqNum(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplSeqNum, self).__init__(1181)
        else:
            super(ApplSeqNum, self).__init__(1181, data)


class ApplBegSeqNum(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplBegSeqNum, self).__init__(1182)
        else:
            super(ApplBegSeqNum, self).__init__(1182, data)


class ApplEndSeqNum(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplEndSeqNum, self).__init__(1183)
        else:
            super(ApplEndSeqNum, self).__init__(1183, data)


class SecurityXMLLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityXMLLen, self).__init__(1184)
        else:
            super(SecurityXMLLen, self).__init__(1184, data)


class SecurityXML(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityXML, self).__init__(1185)
        else:
            super(SecurityXML, self).__init__(1185, data)


class SecurityXMLSchema(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityXMLSchema, self).__init__(1186)
        else:
            super(SecurityXMLSchema, self).__init__(1186, data)


class RefreshIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(RefreshIndicator, self).__init__(1187)
        else:
            super(RefreshIndicator, self).__init__(1187, data)


class Volatility(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(Volatility, self).__init__(1188)
        else:
            super(Volatility, self).__init__(1188, data)


class TimeToExpiration(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TimeToExpiration, self).__init__(1189)
        else:
            super(TimeToExpiration, self).__init__(1189, data)


class RiskFreeRate(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(RiskFreeRate, self).__init__(1190)
        else:
            super(RiskFreeRate, self).__init__(1190, data)


class PriceUnitOfMeasure(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PriceUnitOfMeasure, self).__init__(1191)
        else:
            super(PriceUnitOfMeasure, self).__init__(1191, data)


class PriceUnitOfMeasureQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(PriceUnitOfMeasureQty, self).__init__(1192)
        else:
            super(PriceUnitOfMeasureQty, self).__init__(1192, data)


class SettlMethod(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(SettlMethod, self).__init__(1193)
        else:
            super(SettlMethod, self).__init__(1193, data)


class ExerciseStyle(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ExerciseStyle, self).__init__(1194)
        else:
            super(ExerciseStyle, self).__init__(1194, data)


class OptPayAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OptPayAmount, self).__init__(1195)
        else:
            super(OptPayAmount, self).__init__(1195, data)


class PriceQuoteMethod(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(PriceQuoteMethod, self).__init__(1196)
        else:
            super(PriceQuoteMethod, self).__init__(1196, data)


class FuturesValuationMethod(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(FuturesValuationMethod, self).__init__(1197)
        else:
            super(FuturesValuationMethod, self).__init__(1197, data)


class ListMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ListMethod, self).__init__(1198)
        else:
            super(ListMethod, self).__init__(1198, data)


class CapPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(CapPrice, self).__init__(1199)
        else:
            super(CapPrice, self).__init__(1199, data)


class FloorPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(FloorPrice, self).__init__(1200)
        else:
            super(FloorPrice, self).__init__(1200, data)


class NoStrikeRules(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoStrikeRules, self).__init__(1201)
        else:
            super(NoStrikeRules, self).__init__(1201, data)


class StartStrikePxRange(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(StartStrikePxRange, self).__init__(1202)
        else:
            super(StartStrikePxRange, self).__init__(1202, data)


class EndStrikePxRange(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(EndStrikePxRange, self).__init__(1203)
        else:
            super(EndStrikePxRange, self).__init__(1203, data)


class StrikeIncrement(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(StrikeIncrement, self).__init__(1204)
        else:
            super(StrikeIncrement, self).__init__(1204, data)


class NoTickRules(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoTickRules, self).__init__(1205)
        else:
            super(NoTickRules, self).__init__(1205, data)


class StartTickPriceRange(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(StartTickPriceRange, self).__init__(1206)
        else:
            super(StartTickPriceRange, self).__init__(1206, data)


class EndTickPriceRange(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(EndTickPriceRange, self).__init__(1207)
        else:
            super(EndTickPriceRange, self).__init__(1207, data)


class TickIncrement(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(TickIncrement, self).__init__(1208)
        else:
            super(TickIncrement, self).__init__(1208, data)


class TickRuleType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TickRuleType, self).__init__(1209)
        else:
            super(TickRuleType, self).__init__(1209, data)


class NestedInstrAttribType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NestedInstrAttribType, self).__init__(1210)
        else:
            super(NestedInstrAttribType, self).__init__(1210, data)


class NestedInstrAttribValue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(NestedInstrAttribValue, self).__init__(1211)
        else:
            super(NestedInstrAttribValue, self).__init__(1211, data)


class LegMaturityTime(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegMaturityTime, self).__init__(1212)
        else:
            super(LegMaturityTime, self).__init__(1212, data)


class UnderlyingMaturityTime(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingMaturityTime, self).__init__(1213)
        else:
            super(UnderlyingMaturityTime, self).__init__(1213, data)


class DerivativeSymbol(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSymbol, self).__init__(1214)
        else:
            super(DerivativeSymbol, self).__init__(1214, data)


class DerivativeSymbolSfx(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSymbolSfx, self).__init__(1215)
        else:
            super(DerivativeSymbolSfx, self).__init__(1215, data)


class DerivativeSecurityID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityID, self).__init__(1216)
        else:
            super(DerivativeSecurityID, self).__init__(1216, data)


class DerivativeSecurityIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityIDSource, self).__init__(1217)
        else:
            super(DerivativeSecurityIDSource, self).__init__(1217, data)


class NoDerivativeSecurityAltID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoDerivativeSecurityAltID, self).__init__(1218)
        else:
            super(NoDerivativeSecurityAltID, self).__init__(1218, data)


class DerivativeSecurityAltID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityAltID, self).__init__(1219)
        else:
            super(DerivativeSecurityAltID, self).__init__(1219, data)


class DerivativeSecurityAltIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityAltIDSource, self).__init__(1220)
        else:
            super(DerivativeSecurityAltIDSource, self).__init__(1220, data)


class SecondaryLowLimitPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryLowLimitPrice, self).__init__(1221)
        else:
            super(SecondaryLowLimitPrice, self).__init__(1221, data)


class MaturityRuleID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MaturityRuleID, self).__init__(1222)
        else:
            super(MaturityRuleID, self).__init__(1222, data)


class StrikeRuleID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StrikeRuleID, self).__init__(1223)
        else:
            super(StrikeRuleID, self).__init__(1223, data)


class LegUnitOfMeasureQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegUnitOfMeasureQty, self).__init__(1224)
        else:
            super(LegUnitOfMeasureQty, self).__init__(1224, data)


class DerivativeOptPayAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeOptPayAmount, self).__init__(1225)
        else:
            super(DerivativeOptPayAmount, self).__init__(1225, data)


class EndMaturityMonthYear(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EndMaturityMonthYear, self).__init__(1226)
        else:
            super(EndMaturityMonthYear, self).__init__(1226, data)


class ProductComplex(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ProductComplex, self).__init__(1227)
        else:
            super(ProductComplex, self).__init__(1227, data)


class DerivativeProductComplex(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeProductComplex, self).__init__(1228)
        else:
            super(DerivativeProductComplex, self).__init__(1228, data)


class MaturityMonthYearIncrement(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MaturityMonthYearIncrement, self).__init__(1229)
        else:
            super(MaturityMonthYearIncrement, self).__init__(1229, data)


class SecondaryHighLimitPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryHighLimitPrice, self).__init__(1230)
        else:
            super(SecondaryHighLimitPrice, self).__init__(1230, data)


class MinLotSize(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(MinLotSize, self).__init__(1231)
        else:
            super(MinLotSize, self).__init__(1231, data)


class NoExecInstRules(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoExecInstRules, self).__init__(1232)
        else:
            super(NoExecInstRules, self).__init__(1232, data)


class NoLotTypeRules(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoLotTypeRules, self).__init__(1234)
        else:
            super(NoLotTypeRules, self).__init__(1234, data)


class NoMatchRules(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoMatchRules, self).__init__(1235)
        else:
            super(NoMatchRules, self).__init__(1235, data)


class NoMaturityRules(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoMaturityRules, self).__init__(1236)
        else:
            super(NoMaturityRules, self).__init__(1236, data)


class NoOrdTypeRules(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoOrdTypeRules, self).__init__(1237)
        else:
            super(NoOrdTypeRules, self).__init__(1237, data)


class NoTimeInForceRules(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoTimeInForceRules, self).__init__(1239)
        else:
            super(NoTimeInForceRules, self).__init__(1239, data)


class SecondaryTradingReferencePrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryTradingReferencePrice, self).__init__(1240)
        else:
            super(SecondaryTradingReferencePrice, self).__init__(1240, data)


class StartMaturityMonthYear(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StartMaturityMonthYear, self).__init__(1241)
        else:
            super(StartMaturityMonthYear, self).__init__(1241, data)


class FlexProductEligibilityIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(FlexProductEligibilityIndicator, self).__init__(1242)
        else:
            super(FlexProductEligibilityIndicator, self).__init__(1242, data)


class DerivFlexProductEligibilityIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(DerivFlexProductEligibilityIndicator, self).__init__(1243)
        else:
            super(DerivFlexProductEligibilityIndicator, self).__init__(1243, data)


class FlexibleIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(FlexibleIndicator, self).__init__(1244)
        else:
            super(FlexibleIndicator, self).__init__(1244, data)


class TradingCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradingCurrency, self).__init__(1245)
        else:
            super(TradingCurrency, self).__init__(1245, data)


class DerivativeProduct(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeProduct, self).__init__(1246)
        else:
            super(DerivativeProduct, self).__init__(1246, data)


class DerivativeSecurityGroup(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityGroup, self).__init__(1247)
        else:
            super(DerivativeSecurityGroup, self).__init__(1247, data)


class DerivativeCFICode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeCFICode, self).__init__(1248)
        else:
            super(DerivativeCFICode, self).__init__(1248, data)


class DerivativeSecurityType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityType, self).__init__(1249)
        else:
            super(DerivativeSecurityType, self).__init__(1249, data)


class DerivativeSecuritySubType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecuritySubType, self).__init__(1250)
        else:
            super(DerivativeSecuritySubType, self).__init__(1250, data)


class DerivativeMaturityMonthYear(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeMaturityMonthYear, self).__init__(1251)
        else:
            super(DerivativeMaturityMonthYear, self).__init__(1251, data)


class DerivativeMaturityDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeMaturityDate, self).__init__(1252)
        else:
            super(DerivativeMaturityDate, self).__init__(1252, data)


class DerivativeMaturityTime(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeMaturityTime, self).__init__(1253)
        else:
            super(DerivativeMaturityTime, self).__init__(1253, data)


class DerivativeSettleOnOpenFlag(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSettleOnOpenFlag, self).__init__(1254)
        else:
            super(DerivativeSettleOnOpenFlag, self).__init__(1254, data)


class DerivativeInstrmtAssignmentMethod(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeInstrmtAssignmentMethod, self).__init__(1255)
        else:
            super(DerivativeInstrmtAssignmentMethod, self).__init__(1255, data)


class DerivativeSecurityStatus(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityStatus, self).__init__(1256)
        else:
            super(DerivativeSecurityStatus, self).__init__(1256, data)


class DerivativeInstrRegistry(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeInstrRegistry, self).__init__(1257)
        else:
            super(DerivativeInstrRegistry, self).__init__(1257, data)


class DerivativeCountryOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeCountryOfIssue, self).__init__(1258)
        else:
            super(DerivativeCountryOfIssue, self).__init__(1258, data)


class DerivativeStateOrProvinceOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeStateOrProvinceOfIssue, self).__init__(1259)
        else:
            super(DerivativeStateOrProvinceOfIssue, self).__init__(1259, data)


class DerivativeLocaleOfIssue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeLocaleOfIssue, self).__init__(1260)
        else:
            super(DerivativeLocaleOfIssue, self).__init__(1260, data)


class DerivativeStrikePrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeStrikePrice, self).__init__(1261)
        else:
            super(DerivativeStrikePrice, self).__init__(1261, data)


class DerivativeStrikeCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeStrikeCurrency, self).__init__(1262)
        else:
            super(DerivativeStrikeCurrency, self).__init__(1262, data)


class DerivativeStrikeMultiplier(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeStrikeMultiplier, self).__init__(1263)
        else:
            super(DerivativeStrikeMultiplier, self).__init__(1263, data)


class DerivativeStrikeValue(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeStrikeValue, self).__init__(1264)
        else:
            super(DerivativeStrikeValue, self).__init__(1264, data)


class DerivativeOptAttribute(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeOptAttribute, self).__init__(1265)
        else:
            super(DerivativeOptAttribute, self).__init__(1265, data)


class DerivativeContractMultiplier(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeContractMultiplier, self).__init__(1266)
        else:
            super(DerivativeContractMultiplier, self).__init__(1266, data)


class DerivativeMinPriceIncrement(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeMinPriceIncrement, self).__init__(1267)
        else:
            super(DerivativeMinPriceIncrement, self).__init__(1267, data)


class DerivativeMinPriceIncrementAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeMinPriceIncrementAmount, self).__init__(1268)
        else:
            super(DerivativeMinPriceIncrementAmount, self).__init__(1268, data)


class DerivativeUnitOfMeasure(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeUnitOfMeasure, self).__init__(1269)
        else:
            super(DerivativeUnitOfMeasure, self).__init__(1269, data)


class DerivativeUnitOfMeasureQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeUnitOfMeasureQty, self).__init__(1270)
        else:
            super(DerivativeUnitOfMeasureQty, self).__init__(1270, data)


class DerivativeTimeUnit(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeTimeUnit, self).__init__(1271)
        else:
            super(DerivativeTimeUnit, self).__init__(1271, data)


class DerivativeSecurityExchange(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityExchange, self).__init__(1272)
        else:
            super(DerivativeSecurityExchange, self).__init__(1272, data)


class DerivativePositionLimit(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativePositionLimit, self).__init__(1273)
        else:
            super(DerivativePositionLimit, self).__init__(1273, data)


class DerivativeNTPositionLimit(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeNTPositionLimit, self).__init__(1274)
        else:
            super(DerivativeNTPositionLimit, self).__init__(1274, data)


class DerivativeIssuer(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeIssuer, self).__init__(1275)
        else:
            super(DerivativeIssuer, self).__init__(1275, data)


class DerivativeIssueDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeIssueDate, self).__init__(1276)
        else:
            super(DerivativeIssueDate, self).__init__(1276, data)


class DerivativeEncodedIssuerLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeEncodedIssuerLen, self).__init__(1277)
        else:
            super(DerivativeEncodedIssuerLen, self).__init__(1277, data)


class DerivativeEncodedIssuer(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeEncodedIssuer, self).__init__(1278)
        else:
            super(DerivativeEncodedIssuer, self).__init__(1278, data)


class DerivativeSecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityDesc, self).__init__(1279)
        else:
            super(DerivativeSecurityDesc, self).__init__(1279, data)


class DerivativeEncodedSecurityDescLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeEncodedSecurityDescLen, self).__init__(1280)
        else:
            super(DerivativeEncodedSecurityDescLen, self).__init__(1280, data)


class DerivativeEncodedSecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeEncodedSecurityDesc, self).__init__(1281)
        else:
            super(DerivativeEncodedSecurityDesc, self).__init__(1281, data)


class DerivativeSecurityXMLLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityXMLLen, self).__init__(1282)
        else:
            super(DerivativeSecurityXMLLen, self).__init__(1282, data)


class DerivativeSecurityXML(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityXML, self).__init__(1283)
        else:
            super(DerivativeSecurityXML, self).__init__(1283, data)


class DerivativeSecurityXMLSchema(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSecurityXMLSchema, self).__init__(1284)
        else:
            super(DerivativeSecurityXMLSchema, self).__init__(1284, data)


class DerivativeContractSettlMonth(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeContractSettlMonth, self).__init__(1285)
        else:
            super(DerivativeContractSettlMonth, self).__init__(1285, data)


class NoDerivativeEvents(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoDerivativeEvents, self).__init__(1286)
        else:
            super(NoDerivativeEvents, self).__init__(1286, data)


class DerivativeEventType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeEventType, self).__init__(1287)
        else:
            super(DerivativeEventType, self).__init__(1287, data)


class DerivativeEventDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeEventDate, self).__init__(1288)
        else:
            super(DerivativeEventDate, self).__init__(1288, data)


class DerivativeEventTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeEventTime, self).__init__(1289)
        else:
            super(DerivativeEventTime, self).__init__(1289, data)


class DerivativeEventPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeEventPx, self).__init__(1290)
        else:
            super(DerivativeEventPx, self).__init__(1290, data)


class DerivativeEventText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeEventText, self).__init__(1291)
        else:
            super(DerivativeEventText, self).__init__(1291, data)


class NoDerivativeInstrumentParties(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoDerivativeInstrumentParties, self).__init__(1292)
        else:
            super(NoDerivativeInstrumentParties, self).__init__(1292, data)


class DerivativeInstrumentPartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeInstrumentPartyID, self).__init__(1293)
        else:
            super(DerivativeInstrumentPartyID, self).__init__(1293, data)


class DerivativeInstrumentPartyIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeInstrumentPartyIDSource, self).__init__(1294)
        else:
            super(DerivativeInstrumentPartyIDSource, self).__init__(1294, data)


class DerivativeInstrumentPartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeInstrumentPartyRole, self).__init__(1295)
        else:
            super(DerivativeInstrumentPartyRole, self).__init__(1295, data)


class NoDerivativeInstrumentPartySubIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoDerivativeInstrumentPartySubIDs, self).__init__(1296)
        else:
            super(NoDerivativeInstrumentPartySubIDs, self).__init__(1296, data)


class DerivativeInstrumentPartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeInstrumentPartySubID, self).__init__(1297)
        else:
            super(DerivativeInstrumentPartySubID, self).__init__(1297, data)


class DerivativeInstrumentPartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeInstrumentPartySubIDType, self).__init__(1298)
        else:
            super(DerivativeInstrumentPartySubIDType, self).__init__(1298, data)


class DerivativeExerciseStyle(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeExerciseStyle, self).__init__(1299)
        else:
            super(DerivativeExerciseStyle, self).__init__(1299, data)


class MarketSegmentID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MarketSegmentID, self).__init__(1300)
        else:
            super(MarketSegmentID, self).__init__(1300, data)


class MarketID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MarketID, self).__init__(1301)
        else:
            super(MarketID, self).__init__(1301, data)


class MaturityMonthYearIncrementUnits(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MaturityMonthYearIncrementUnits, self).__init__(1302)
        else:
            super(MaturityMonthYearIncrementUnits, self).__init__(1302, data)


class MaturityMonthYearFormat(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MaturityMonthYearFormat, self).__init__(1303)
        else:
            super(MaturityMonthYearFormat, self).__init__(1303, data)


class StrikeExerciseStyle(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StrikeExerciseStyle, self).__init__(1304)
        else:
            super(StrikeExerciseStyle, self).__init__(1304, data)


class SecondaryPriceLimitType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecondaryPriceLimitType, self).__init__(1305)
        else:
            super(SecondaryPriceLimitType, self).__init__(1305, data)


class PriceLimitType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(PriceLimitType, self).__init__(1306)
        else:
            super(PriceLimitType, self).__init__(1306, data)


class ExecInstValue(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(ExecInstValue, self).__init__(1308)
        else:
            super(ExecInstValue, self).__init__(1308, data)


class NoTradingSessionRules(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoTradingSessionRules, self).__init__(1309)
        else:
            super(NoTradingSessionRules, self).__init__(1309, data)


class NoMarketSegments(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoMarketSegments, self).__init__(1310)
        else:
            super(NoMarketSegments, self).__init__(1310, data)


class NoDerivativeInstrAttrib(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoDerivativeInstrAttrib, self).__init__(1311)
        else:
            super(NoDerivativeInstrAttrib, self).__init__(1311, data)


class NoNestedInstrAttrib(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNestedInstrAttrib, self).__init__(1312)
        else:
            super(NoNestedInstrAttrib, self).__init__(1312, data)


class DerivativeInstrAttribType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeInstrAttribType, self).__init__(1313)
        else:
            super(DerivativeInstrAttribType, self).__init__(1313, data)


class DerivativeInstrAttribValue(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeInstrAttribValue, self).__init__(1314)
        else:
            super(DerivativeInstrAttribValue, self).__init__(1314, data)


class DerivativePriceUnitOfMeasure(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativePriceUnitOfMeasure, self).__init__(1315)
        else:
            super(DerivativePriceUnitOfMeasure, self).__init__(1315, data)


class DerivativePriceUnitOfMeasureQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativePriceUnitOfMeasureQty, self).__init__(1316)
        else:
            super(DerivativePriceUnitOfMeasureQty, self).__init__(1316, data)


class DerivativeSettlMethod(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeSettlMethod, self).__init__(1317)
        else:
            super(DerivativeSettlMethod, self).__init__(1317, data)


class DerivativePriceQuoteMethod(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativePriceQuoteMethod, self).__init__(1318)
        else:
            super(DerivativePriceQuoteMethod, self).__init__(1318, data)


class DerivativeFuturesValuationMethod(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeFuturesValuationMethod, self).__init__(1319)
        else:
            super(DerivativeFuturesValuationMethod, self).__init__(1319, data)


class DerivativeListMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeListMethod, self).__init__(1320)
        else:
            super(DerivativeListMethod, self).__init__(1320, data)


class DerivativeCapPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeCapPrice, self).__init__(1321)
        else:
            super(DerivativeCapPrice, self).__init__(1321, data)


class DerivativeFloorPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeFloorPrice, self).__init__(1322)
        else:
            super(DerivativeFloorPrice, self).__init__(1322, data)


class DerivativePutOrCall(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativePutOrCall, self).__init__(1323)
        else:
            super(DerivativePutOrCall, self).__init__(1323, data)


class ListUpdateAction(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(ListUpdateAction, self).__init__(1324)
        else:
            super(ListUpdateAction, self).__init__(1324, data)


class ParentMktSegmID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ParentMktSegmID, self).__init__(1325)
        else:
            super(ParentMktSegmID, self).__init__(1325, data)


class TradingSessionDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TradingSessionDesc, self).__init__(1326)
        else:
            super(TradingSessionDesc, self).__init__(1326, data)


class TradSesUpdateAction(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesUpdateAction, self).__init__(1327)
        else:
            super(TradSesUpdateAction, self).__init__(1327, data)


class RejectText(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RejectText, self).__init__(1328)
        else:
            super(RejectText, self).__init__(1328, data)


class FeeMultiplier(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(FeeMultiplier, self).__init__(1329)
        else:
            super(FeeMultiplier, self).__init__(1329, data)


class UnderlyingLegSymbol(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegSymbol, self).__init__(1330)
        else:
            super(UnderlyingLegSymbol, self).__init__(1330, data)


class UnderlyingLegSymbolSfx(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegSymbolSfx, self).__init__(1331)
        else:
            super(UnderlyingLegSymbolSfx, self).__init__(1331, data)


class UnderlyingLegSecurityID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegSecurityID, self).__init__(1332)
        else:
            super(UnderlyingLegSecurityID, self).__init__(1332, data)


class UnderlyingLegSecurityIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegSecurityIDSource, self).__init__(1333)
        else:
            super(UnderlyingLegSecurityIDSource, self).__init__(1333, data)


class NoUnderlyingLegSecurityAltID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoUnderlyingLegSecurityAltID, self).__init__(1334)
        else:
            super(NoUnderlyingLegSecurityAltID, self).__init__(1334, data)


class UnderlyingLegSecurityAltID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegSecurityAltID, self).__init__(1335)
        else:
            super(UnderlyingLegSecurityAltID, self).__init__(1335, data)


class UnderlyingLegSecurityAltIDSource(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegSecurityAltIDSource, self).__init__(1336)
        else:
            super(UnderlyingLegSecurityAltIDSource, self).__init__(1336, data)


class UnderlyingLegSecurityType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegSecurityType, self).__init__(1337)
        else:
            super(UnderlyingLegSecurityType, self).__init__(1337, data)


class UnderlyingLegSecuritySubType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegSecuritySubType, self).__init__(1338)
        else:
            super(UnderlyingLegSecuritySubType, self).__init__(1338, data)


class UnderlyingLegMaturityMonthYear(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegMaturityMonthYear, self).__init__(1339)
        else:
            super(UnderlyingLegMaturityMonthYear, self).__init__(1339, data)


class UnderlyingLegStrikePrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegStrikePrice, self).__init__(1340)
        else:
            super(UnderlyingLegStrikePrice, self).__init__(1340, data)


class UnderlyingLegSecurityExchange(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegSecurityExchange, self).__init__(1341)
        else:
            super(UnderlyingLegSecurityExchange, self).__init__(1341, data)


class NoOfLegUnderlyings(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoOfLegUnderlyings, self).__init__(1342)
        else:
            super(NoOfLegUnderlyings, self).__init__(1342, data)


class UnderlyingLegPutOrCall(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegPutOrCall, self).__init__(1343)
        else:
            super(UnderlyingLegPutOrCall, self).__init__(1343, data)


class UnderlyingLegCFICode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegCFICode, self).__init__(1344)
        else:
            super(UnderlyingLegCFICode, self).__init__(1344, data)


class UnderlyingLegMaturityDate(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegMaturityDate, self).__init__(1345)
        else:
            super(UnderlyingLegMaturityDate, self).__init__(1345, data)


class ApplReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ApplReqID, self).__init__(1346)
        else:
            super(ApplReqID, self).__init__(1346, data)


class ApplReqType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplReqType, self).__init__(1347)
        else:
            super(ApplReqType, self).__init__(1347, data)


class ApplResponseType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplResponseType, self).__init__(1348)
        else:
            super(ApplResponseType, self).__init__(1348, data)


class ApplTotalMessageCount(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplTotalMessageCount, self).__init__(1349)
        else:
            super(ApplTotalMessageCount, self).__init__(1349, data)


class ApplLastSeqNum(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplLastSeqNum, self).__init__(1350)
        else:
            super(ApplLastSeqNum, self).__init__(1350, data)


class NoApplIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoApplIDs, self).__init__(1351)
        else:
            super(NoApplIDs, self).__init__(1351, data)


class ApplResendFlag(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(ApplResendFlag, self).__init__(1352)
        else:
            super(ApplResendFlag, self).__init__(1352, data)


class ApplResponseID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ApplResponseID, self).__init__(1353)
        else:
            super(ApplResponseID, self).__init__(1353, data)


class ApplResponseError(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplResponseError, self).__init__(1354)
        else:
            super(ApplResponseError, self).__init__(1354, data)


class RefApplID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RefApplID, self).__init__(1355)
        else:
            super(RefApplID, self).__init__(1355, data)


class ApplReportID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ApplReportID, self).__init__(1356)
        else:
            super(ApplReportID, self).__init__(1356, data)


class RefApplLastSeqNum(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RefApplLastSeqNum, self).__init__(1357)
        else:
            super(RefApplLastSeqNum, self).__init__(1357, data)


class LegPutOrCall(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegPutOrCall, self).__init__(1358)
        else:
            super(LegPutOrCall, self).__init__(1358, data)


class TotNoFills(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TotNoFills, self).__init__(1361)
        else:
            super(TotNoFills, self).__init__(1361, data)


class NoFills(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoFills, self).__init__(1362)
        else:
            super(NoFills, self).__init__(1362, data)


class FillExecID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(FillExecID, self).__init__(1363)
        else:
            super(FillExecID, self).__init__(1363, data)


class FillPx(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(FillPx, self).__init__(1364)
        else:
            super(FillPx, self).__init__(1364, data)


class FillQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(FillQty, self).__init__(1365)
        else:
            super(FillQty, self).__init__(1365, data)


class LegAllocID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegAllocID, self).__init__(1366)
        else:
            super(LegAllocID, self).__init__(1366, data)


class LegAllocSettlCurrency(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegAllocSettlCurrency, self).__init__(1367)
        else:
            super(LegAllocSettlCurrency, self).__init__(1367, data)


class TradSesEvent(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradSesEvent, self).__init__(1368)
        else:
            super(TradSesEvent, self).__init__(1368, data)


class MassActionReportID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MassActionReportID, self).__init__(1369)
        else:
            super(MassActionReportID, self).__init__(1369, data)


class NoNotAffectedOrders(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNotAffectedOrders, self).__init__(1370)
        else:
            super(NoNotAffectedOrders, self).__init__(1370, data)


class NotAffectedOrderID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(NotAffectedOrderID, self).__init__(1371)
        else:
            super(NotAffectedOrderID, self).__init__(1371, data)


class NotAffOrigClOrdID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(NotAffOrigClOrdID, self).__init__(1372)
        else:
            super(NotAffOrigClOrdID, self).__init__(1372, data)


class MassActionType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MassActionType, self).__init__(1373)
        else:
            super(MassActionType, self).__init__(1373, data)


class MassActionScope(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MassActionScope, self).__init__(1374)
        else:
            super(MassActionScope, self).__init__(1374, data)


class MassActionResponse(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MassActionResponse, self).__init__(1375)
        else:
            super(MassActionResponse, self).__init__(1375, data)


class MassActionRejectReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MassActionRejectReason, self).__init__(1376)
        else:
            super(MassActionRejectReason, self).__init__(1376, data)


class MultilegModel(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MultilegModel, self).__init__(1377)
        else:
            super(MultilegModel, self).__init__(1377, data)


class MultilegPriceMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(MultilegPriceMethod, self).__init__(1378)
        else:
            super(MultilegPriceMethod, self).__init__(1378, data)


class LegVolatility(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegVolatility, self).__init__(1379)
        else:
            super(LegVolatility, self).__init__(1379, data)


class DividendYield(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DividendYield, self).__init__(1380)
        else:
            super(DividendYield, self).__init__(1380, data)


class LegDividendYield(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegDividendYield, self).__init__(1381)
        else:
            super(LegDividendYield, self).__init__(1381, data)


class CurrencyRatio(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(CurrencyRatio, self).__init__(1382)
        else:
            super(CurrencyRatio, self).__init__(1382, data)


class LegCurrencyRatio(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegCurrencyRatio, self).__init__(1383)
        else:
            super(LegCurrencyRatio, self).__init__(1383, data)


class LegExecInst(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegExecInst, self).__init__(1384)
        else:
            super(LegExecInst, self).__init__(1384, data)


class ContingencyType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ContingencyType, self).__init__(1385)
        else:
            super(ContingencyType, self).__init__(1385, data)


class ListRejectReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ListRejectReason, self).__init__(1386)
        else:
            super(ListRejectReason, self).__init__(1386, data)


class NoTrdRepIndicators(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoTrdRepIndicators, self).__init__(1387)
        else:
            super(NoTrdRepIndicators, self).__init__(1387, data)


class TrdRepPartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TrdRepPartyRole, self).__init__(1388)
        else:
            super(TrdRepPartyRole, self).__init__(1388, data)


class TrdRepIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(TrdRepIndicator, self).__init__(1389)
        else:
            super(TrdRepIndicator, self).__init__(1389, data)


class TradePublishIndicator(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TradePublishIndicator, self).__init__(1390)
        else:
            super(TradePublishIndicator, self).__init__(1390, data)


class UnderlyingLegOptAttribute(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegOptAttribute, self).__init__(1391)
        else:
            super(UnderlyingLegOptAttribute, self).__init__(1391, data)


class UnderlyingLegSecurityDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegSecurityDesc, self).__init__(1392)
        else:
            super(UnderlyingLegSecurityDesc, self).__init__(1392, data)


class MarketReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MarketReqID, self).__init__(1393)
        else:
            super(MarketReqID, self).__init__(1393, data)


class MarketReportID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MarketReportID, self).__init__(1394)
        else:
            super(MarketReportID, self).__init__(1394, data)


class MarketUpdateAction(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(MarketUpdateAction, self).__init__(1395)
        else:
            super(MarketUpdateAction, self).__init__(1395, data)


class MarketSegmentDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MarketSegmentDesc, self).__init__(1396)
        else:
            super(MarketSegmentDesc, self).__init__(1396, data)


class EncodedMktSegmDescLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedMktSegmDescLen, self).__init__(1397)
        else:
            super(EncodedMktSegmDescLen, self).__init__(1397, data)


class EncodedMktSegmDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedMktSegmDesc, self).__init__(1398)
        else:
            super(EncodedMktSegmDesc, self).__init__(1398, data)


class ApplNewSeqNum(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplNewSeqNum, self).__init__(1399)
        else:
            super(ApplNewSeqNum, self).__init__(1399, data)


class EncryptedPasswordMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncryptedPasswordMethod, self).__init__(1400)
        else:
            super(EncryptedPasswordMethod, self).__init__(1400, data)


class EncryptedPasswordLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncryptedPasswordLen, self).__init__(1401)
        else:
            super(EncryptedPasswordLen, self).__init__(1401, data)


class EncryptedPassword(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncryptedPassword, self).__init__(1402)
        else:
            super(EncryptedPassword, self).__init__(1402, data)


class EncryptedNewPasswordLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncryptedNewPasswordLen, self).__init__(1403)
        else:
            super(EncryptedNewPasswordLen, self).__init__(1403, data)


class EncryptedNewPassword(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncryptedNewPassword, self).__init__(1404)
        else:
            super(EncryptedNewPassword, self).__init__(1404, data)


class UnderlyingLegMaturityTime(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingLegMaturityTime, self).__init__(1405)
        else:
            super(UnderlyingLegMaturityTime, self).__init__(1405, data)


class RefApplExtID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RefApplExtID, self).__init__(1406)
        else:
            super(RefApplExtID, self).__init__(1406, data)


class DefaultApplExtID(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DefaultApplExtID, self).__init__(1407)
        else:
            super(DefaultApplExtID, self).__init__(1407, data)


class DefaultCstmApplVerID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DefaultCstmApplVerID, self).__init__(1408)
        else:
            super(DefaultCstmApplVerID, self).__init__(1408, data)


class SessionStatus(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SessionStatus, self).__init__(1409)
        else:
            super(SessionStatus, self).__init__(1409, data)


class DefaultVerIndicator(quickfix.BoolField):
    def __init__(self, data=None):
        if data is None:
            super(DefaultVerIndicator, self).__init__(1410)
        else:
            super(DefaultVerIndicator, self).__init__(1410, data)


class Nested4PartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(Nested4PartySubIDType, self).__init__(1411)
        else:
            super(Nested4PartySubIDType, self).__init__(1411, data)


class Nested4PartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Nested4PartySubID, self).__init__(1412)
        else:
            super(Nested4PartySubID, self).__init__(1412, data)


class NoNested4PartySubIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNested4PartySubIDs, self).__init__(1413)
        else:
            super(NoNested4PartySubIDs, self).__init__(1413, data)


class NoNested4PartyIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNested4PartyIDs, self).__init__(1414)
        else:
            super(NoNested4PartyIDs, self).__init__(1414, data)


class Nested4PartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Nested4PartyID, self).__init__(1415)
        else:
            super(Nested4PartyID, self).__init__(1415, data)


class Nested4PartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(Nested4PartyIDSource, self).__init__(1416)
        else:
            super(Nested4PartyIDSource, self).__init__(1416, data)


class Nested4PartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(Nested4PartyRole, self).__init__(1417)
        else:
            super(Nested4PartyRole, self).__init__(1417, data)


class LegLastQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegLastQty, self).__init__(1418)
        else:
            super(LegLastQty, self).__init__(1418, data)


class UnderlyingExerciseStyle(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingExerciseStyle, self).__init__(1419)
        else:
            super(UnderlyingExerciseStyle, self).__init__(1419, data)


class LegExerciseStyle(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegExerciseStyle, self).__init__(1420)
        else:
            super(LegExerciseStyle, self).__init__(1420, data)


class LegPriceUnitOfMeasure(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LegPriceUnitOfMeasure, self).__init__(1421)
        else:
            super(LegPriceUnitOfMeasure, self).__init__(1421, data)


class LegPriceUnitOfMeasureQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(LegPriceUnitOfMeasureQty, self).__init__(1422)
        else:
            super(LegPriceUnitOfMeasureQty, self).__init__(1422, data)


class UnderlyingUnitOfMeasureQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingUnitOfMeasureQty, self).__init__(1423)
        else:
            super(UnderlyingUnitOfMeasureQty, self).__init__(1423, data)


class UnderlyingPriceUnitOfMeasure(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingPriceUnitOfMeasure, self).__init__(1424)
        else:
            super(UnderlyingPriceUnitOfMeasure, self).__init__(1424, data)


class UnderlyingPriceUnitOfMeasureQty(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingPriceUnitOfMeasureQty, self).__init__(1425)
        else:
            super(UnderlyingPriceUnitOfMeasureQty, self).__init__(1425, data)


class ApplReportType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ApplReportType, self).__init__(1426)
        else:
            super(ApplReportType, self).__init__(1426, data)


class HaltReasonInt(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(HaltReasonInt, self).__init__(327)
        else:
            super(HaltReasonInt, self).__init__(327, data)


class SideLastQty(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SideLastQty, self).__init__(1009)
        else:
            super(SideLastQty, self).__init__(1009, data)


class UnderlyingInstrumentPartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingInstrumentPartyID, self).__init__(1059)
        else:
            super(UnderlyingInstrumentPartyID, self).__init__(1059, data)


class UnderlyingInstrumentPartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingInstrumentPartyIDSource, self).__init__(1060)
        else:
            super(UnderlyingInstrumentPartyIDSource, self).__init__(1060, data)


class UnderlyingInstrumentPartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingInstrumentPartyRole, self).__init__(1061)
        else:
            super(UnderlyingInstrumentPartyRole, self).__init__(1061, data)


class UnderlyingInstrumentPartySubID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingInstrumentPartySubID, self).__init__(1063)
        else:
            super(UnderlyingInstrumentPartySubID, self).__init__(1063, data)


class UnderlyingInstrumentPartySubIDType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingInstrumentPartySubIDType, self).__init__(1064)
        else:
            super(UnderlyingInstrumentPartySubIDType, self).__init__(1064, data)


class OptPayoutAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OptPayoutAmount, self).__init__(1195)
        else:
            super(OptPayoutAmount, self).__init__(1195, data)


class ValuationMethod(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ValuationMethod, self).__init__(1197)
        else:
            super(ValuationMethod, self).__init__(1197, data)


class DerivativeValuationMethod(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeValuationMethod, self).__init__(1319)
        else:
            super(DerivativeValuationMethod, self).__init__(1319, data)


class SideExecID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SideExecID, self).__init__(1427)
        else:
            super(SideExecID, self).__init__(1427, data)


class OrderDelay(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(OrderDelay, self).__init__(1428)
        else:
            super(OrderDelay, self).__init__(1428, data)


class OrderDelayUnit(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(OrderDelayUnit, self).__init__(1429)
        else:
            super(OrderDelayUnit, self).__init__(1429, data)


class VenueType(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(VenueType, self).__init__(1430)
        else:
            super(VenueType, self).__init__(1430, data)


class RefOrdIDReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RefOrdIDReason, self).__init__(1431)
        else:
            super(RefOrdIDReason, self).__init__(1431, data)


class OrigCustOrderCapacity(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(OrigCustOrderCapacity, self).__init__(1432)
        else:
            super(OrigCustOrderCapacity, self).__init__(1432, data)


class RefApplReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RefApplReqID, self).__init__(1433)
        else:
            super(RefApplReqID, self).__init__(1433, data)


class ModelType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ModelType, self).__init__(1434)
        else:
            super(ModelType, self).__init__(1434, data)


class ContractMultiplierUnit(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ContractMultiplierUnit, self).__init__(1435)
        else:
            super(ContractMultiplierUnit, self).__init__(1435, data)


class LegContractMultiplierUnit(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegContractMultiplierUnit, self).__init__(1436)
        else:
            super(LegContractMultiplierUnit, self).__init__(1436, data)


class UnderlyingContractMultiplierUnit(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingContractMultiplierUnit, self).__init__(1437)
        else:
            super(UnderlyingContractMultiplierUnit, self).__init__(1437, data)


class DerivativeContractMultiplierUnit(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeContractMultiplierUnit, self).__init__(1438)
        else:
            super(DerivativeContractMultiplierUnit, self).__init__(1438, data)


class FlowScheduleType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(FlowScheduleType, self).__init__(1439)
        else:
            super(FlowScheduleType, self).__init__(1439, data)


class LegFlowScheduleType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(LegFlowScheduleType, self).__init__(1440)
        else:
            super(LegFlowScheduleType, self).__init__(1440, data)


class UnderlyingFlowScheduleType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingFlowScheduleType, self).__init__(1441)
        else:
            super(UnderlyingFlowScheduleType, self).__init__(1441, data)


class DerivativeFlowScheduleType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(DerivativeFlowScheduleType, self).__init__(1442)
        else:
            super(DerivativeFlowScheduleType, self).__init__(1442, data)


class FillLiquidityInd(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(FillLiquidityInd, self).__init__(1443)
        else:
            super(FillLiquidityInd, self).__init__(1443, data)


class SideLiquidityInd(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SideLiquidityInd, self).__init__(1444)
        else:
            super(SideLiquidityInd, self).__init__(1444, data)


class NoRateSources(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoRateSources, self).__init__(1445)
        else:
            super(NoRateSources, self).__init__(1445, data)


class RateSource(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RateSource, self).__init__(1446)
        else:
            super(RateSource, self).__init__(1446, data)


class RateSourceType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(RateSourceType, self).__init__(1447)
        else:
            super(RateSourceType, self).__init__(1447, data)


class ReferencePage(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(ReferencePage, self).__init__(1448)
        else:
            super(ReferencePage, self).__init__(1448, data)


class RestructuringType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(RestructuringType, self).__init__(1449)
        else:
            super(RestructuringType, self).__init__(1449, data)


class Seniority(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(Seniority, self).__init__(1450)
        else:
            super(Seniority, self).__init__(1450, data)


class NotionalPercentageOutstanding(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(NotionalPercentageOutstanding, self).__init__(1451)
        else:
            super(NotionalPercentageOutstanding, self).__init__(1451, data)


class OriginalNotionalPercentageOutstanding(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(OriginalNotionalPercentageOutstanding, self).__init__(1452)
        else:
            super(OriginalNotionalPercentageOutstanding, self).__init__(1452, data)


class UnderlyingRestructuringType(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingRestructuringType, self).__init__(1453)
        else:
            super(UnderlyingRestructuringType, self).__init__(1453, data)


class UnderlyingSeniority(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingSeniority, self).__init__(1454)
        else:
            super(UnderlyingSeniority, self).__init__(1454, data)


class UnderlyingNotionalPercentageOutstanding(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingNotionalPercentageOutstanding, self).__init__(1455)
        else:
            super(UnderlyingNotionalPercentageOutstanding, self).__init__(1455, data)


class UnderlyingOriginalNotionalPercentageOutstanding(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingOriginalNotionalPercentageOutstanding, self).__init__(1456)
        else:
            super(UnderlyingOriginalNotionalPercentageOutstanding, self).__init__(1456, data)


class AttachmentPoint(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(AttachmentPoint, self).__init__(1457)
        else:
            super(AttachmentPoint, self).__init__(1457, data)


class DetachmentPoint(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(DetachmentPoint, self).__init__(1458)
        else:
            super(DetachmentPoint, self).__init__(1458, data)


class UnderlyingAttachmentPoint(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingAttachmentPoint, self).__init__(1459)
        else:
            super(UnderlyingAttachmentPoint, self).__init__(1459, data)


class UnderlyingDetachmentPoint(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingDetachmentPoint, self).__init__(1460)
        else:
            super(UnderlyingDetachmentPoint, self).__init__(1460, data)


class NoTargetPartyIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoTargetPartyIDs, self).__init__(1461)
        else:
            super(NoTargetPartyIDs, self).__init__(1461, data)


class TargetPartyID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(TargetPartyID, self).__init__(1462)
        else:
            super(TargetPartyID, self).__init__(1462, data)


class TargetPartyIDSource(quickfix.CharField):
    def __init__(self, data=None):
        if data is None:
            super(TargetPartyIDSource, self).__init__(1463)
        else:
            super(TargetPartyIDSource, self).__init__(1463, data)


class TargetPartyRole(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(TargetPartyRole, self).__init__(1464)
        else:
            super(TargetPartyRole, self).__init__(1464, data)


class SecurityListID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityListID, self).__init__(1465)
        else:
            super(SecurityListID, self).__init__(1465, data)


class SecurityListRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityListRefID, self).__init__(1466)
        else:
            super(SecurityListRefID, self).__init__(1466, data)


class SecurityListDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityListDesc, self).__init__(1467)
        else:
            super(SecurityListDesc, self).__init__(1467, data)


class EncodedSecurityListDescLen(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedSecurityListDescLen, self).__init__(1468)
        else:
            super(EncodedSecurityListDescLen, self).__init__(1468, data)


class EncodedSecurityListDesc(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(EncodedSecurityListDesc, self).__init__(1469)
        else:
            super(EncodedSecurityListDesc, self).__init__(1469, data)


class SecurityListType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityListType, self).__init__(1470)
        else:
            super(SecurityListType, self).__init__(1470, data)


class SecurityListTypeSource(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(SecurityListTypeSource, self).__init__(1471)
        else:
            super(SecurityListTypeSource, self).__init__(1471, data)


class NewsID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(NewsID, self).__init__(1472)
        else:
            super(NewsID, self).__init__(1472, data)


class NewsCategory(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NewsCategory, self).__init__(1473)
        else:
            super(NewsCategory, self).__init__(1473, data)


class LanguageCode(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(LanguageCode, self).__init__(1474)
        else:
            super(LanguageCode, self).__init__(1474, data)


class NoNewsRefIDs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoNewsRefIDs, self).__init__(1475)
        else:
            super(NoNewsRefIDs, self).__init__(1475, data)


class NewsRefID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(NewsRefID, self).__init__(1476)
        else:
            super(NewsRefID, self).__init__(1476, data)


class NewsRefType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NewsRefType, self).__init__(1477)
        else:
            super(NewsRefType, self).__init__(1477, data)


class StrikePriceDeterminationMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StrikePriceDeterminationMethod, self).__init__(1478)
        else:
            super(StrikePriceDeterminationMethod, self).__init__(1478, data)


class StrikePriceBoundaryMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StrikePriceBoundaryMethod, self).__init__(1479)
        else:
            super(StrikePriceBoundaryMethod, self).__init__(1479, data)


class StrikePriceBoundaryPrecision(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(StrikePriceBoundaryPrecision, self).__init__(1480)
        else:
            super(StrikePriceBoundaryPrecision, self).__init__(1480, data)


class UnderlyingPriceDeterminationMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(UnderlyingPriceDeterminationMethod, self).__init__(1481)
        else:
            super(UnderlyingPriceDeterminationMethod, self).__init__(1481, data)


class OptPayoutType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(OptPayoutType, self).__init__(1482)
        else:
            super(OptPayoutType, self).__init__(1482, data)


class NoComplexEvents(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoComplexEvents, self).__init__(1483)
        else:
            super(NoComplexEvents, self).__init__(1483, data)


class ComplexEventType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexEventType, self).__init__(1484)
        else:
            super(ComplexEventType, self).__init__(1484, data)


class ComplexOptPayoutAmount(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexOptPayoutAmount, self).__init__(1485)
        else:
            super(ComplexOptPayoutAmount, self).__init__(1485, data)


class ComplexEventPrice(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexEventPrice, self).__init__(1486)
        else:
            super(ComplexEventPrice, self).__init__(1486, data)


class ComplexEventPriceBoundaryMethod(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexEventPriceBoundaryMethod, self).__init__(1487)
        else:
            super(ComplexEventPriceBoundaryMethod, self).__init__(1487, data)


class ComplexEventPriceBoundaryPrecision(quickfix.DoubleField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexEventPriceBoundaryPrecision, self).__init__(1488)
        else:
            super(ComplexEventPriceBoundaryPrecision, self).__init__(1488, data)


class ComplexEventPriceTimeType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexEventPriceTimeType, self).__init__(1489)
        else:
            super(ComplexEventPriceTimeType, self).__init__(1489, data)


class ComplexEventCondition(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexEventCondition, self).__init__(1490)
        else:
            super(ComplexEventCondition, self).__init__(1490, data)


class NoComplexEventDates(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoComplexEventDates, self).__init__(1491)
        else:
            super(NoComplexEventDates, self).__init__(1491, data)


class ComplexEventStartDate(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexEventStartDate, self).__init__(1492)
        else:
            super(ComplexEventStartDate, self).__init__(1492, data)


class ComplexEventEndDate(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexEventEndDate, self).__init__(1493)
        else:
            super(ComplexEventEndDate, self).__init__(1493, data)


class NoComplexEventTimes(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoComplexEventTimes, self).__init__(1494)
        else:
            super(NoComplexEventTimes, self).__init__(1494, data)


class ComplexEventStartTime(quickfix.UtcTimeOnlyField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexEventStartTime, self).__init__(1495)
        else:
            super(ComplexEventStartTime, self).__init__(1495, data)


class ComplexEventEndTime(quickfix.UtcTimeOnlyField):
    def __init__(self, data=None):
        if data is None:
            super(ComplexEventEndTime, self).__init__(1496)
        else:
            super(ComplexEventEndTime, self).__init__(1496, data)


class StreamAsgnReqID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StreamAsgnReqID, self).__init__(1497)
        else:
            super(StreamAsgnReqID, self).__init__(1497, data)


class StreamAsgnReqType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StreamAsgnReqType, self).__init__(1498)
        else:
            super(StreamAsgnReqType, self).__init__(1498, data)


class NoAsgnReqs(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(NoAsgnReqs, self).__init__(1499)
        else:
            super(NoAsgnReqs, self).__init__(1499, data)


class MDStreamID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(MDStreamID, self).__init__(1500)
        else:
            super(MDStreamID, self).__init__(1500, data)


class StreamAsgnRptID(quickfix.StringField):
    def __init__(self, data=None):
        if data is None:
            super(StreamAsgnRptID, self).__init__(1501)
        else:
            super(StreamAsgnRptID, self).__init__(1501, data)


class StreamAsgnRejReason(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StreamAsgnRejReason, self).__init__(1502)
        else:
            super(StreamAsgnRejReason, self).__init__(1502, data)


class StreamAsgnAckType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StreamAsgnAckType, self).__init__(1503)
        else:
            super(StreamAsgnAckType, self).__init__(1503, data)


class RelSymTransactTime(quickfix.UtcTimeStampField):
    def __init__(self, data=None):
        if data is None:
            super(RelSymTransactTime, self).__init__(1504)
        else:
            super(RelSymTransactTime, self).__init__(1504, data)


class StreamAsgnType(quickfix.IntField):
    def __init__(self, data=None):
        if data is None:
            super(StreamAsgnType, self).__init__(1617)
        else:
            super(StreamAsgnType, self).__init__(1617, data)


