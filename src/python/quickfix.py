# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _quickfix
else:
    import _quickfix

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_SwigPyIterator

    def value(self):
        return _quickfix.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _quickfix.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _quickfix.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _quickfix.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _quickfix.SwigPyIterator_equal(self, x)

    def copy(self):
        return _quickfix.SwigPyIterator_copy(self)

    def next(self):
        return _quickfix.SwigPyIterator_next(self)

    def __next__(self):
        return _quickfix.SwigPyIterator___next__(self)

    def previous(self):
        return _quickfix.SwigPyIterator_previous(self)

    def advance(self, n):
        return _quickfix.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _quickfix.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _quickfix.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _quickfix.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _quickfix.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _quickfix.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _quickfix.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _quickfix:
_quickfix.SwigPyIterator_swigregister(SwigPyIterator)

class IntArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _quickfix.IntArray_swiginit(self, _quickfix.new_IntArray(nelements))
    __swig_destroy__ = _quickfix.delete_IntArray

    def __getitem__(self, index):
        return _quickfix.IntArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _quickfix.IntArray___setitem__(self, index, value)

    def cast(self):
        return _quickfix.IntArray_cast(self)

    @staticmethod
    def frompointer(t):
        return _quickfix.IntArray_frompointer(t)

# Register IntArray in _quickfix:
_quickfix.IntArray_swigregister(IntArray)

def IntArray_frompointer(t):
    return _quickfix.IntArray_frompointer(t)

class SessionIDSet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _quickfix.SessionIDSet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _quickfix.SessionIDSet___nonzero__(self)

    def __bool__(self):
        return _quickfix.SessionIDSet___bool__(self)

    def __len__(self):
        return _quickfix.SessionIDSet___len__(self)

    def append(self, x):
        return _quickfix.SessionIDSet_append(self, x)

    def __contains__(self, x):
        return _quickfix.SessionIDSet___contains__(self, x)

    def __getitem__(self, i):
        return _quickfix.SessionIDSet___getitem__(self, i)

    def add(self, x):
        return _quickfix.SessionIDSet_add(self, x)

    def discard(self, x):
        return _quickfix.SessionIDSet_discard(self, x)

    def __init__(self, *args):
        _quickfix.SessionIDSet_swiginit(self, _quickfix.new_SessionIDSet(*args))

    def empty(self):
        return _quickfix.SessionIDSet_empty(self)

    def size(self):
        return _quickfix.SessionIDSet_size(self)

    def clear(self):
        return _quickfix.SessionIDSet_clear(self)

    def swap(self, v):
        return _quickfix.SessionIDSet_swap(self, v)

    def count(self, x):
        return _quickfix.SessionIDSet_count(self, x)

    def begin(self):
        return _quickfix.SessionIDSet_begin(self)

    def end(self):
        return _quickfix.SessionIDSet_end(self)

    def rbegin(self):
        return _quickfix.SessionIDSet_rbegin(self)

    def rend(self):
        return _quickfix.SessionIDSet_rend(self)

    def erase(self, *args):
        return _quickfix.SessionIDSet_erase(self, *args)

    def find(self, x):
        return _quickfix.SessionIDSet_find(self, x)

    def lower_bound(self, x):
        return _quickfix.SessionIDSet_lower_bound(self, x)

    def upper_bound(self, x):
        return _quickfix.SessionIDSet_upper_bound(self, x)

    def equal_range(self, x):
        return _quickfix.SessionIDSet_equal_range(self, x)

    def insert(self, __x):
        return _quickfix.SessionIDSet_insert(self, __x)
    __swig_destroy__ = _quickfix.delete_SessionIDSet

# Register SessionIDSet in _quickfix:
_quickfix.SessionIDSet_swigregister(SessionIDSet)

class FIXException(Exception):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type, detail):
        _quickfix.FIXException_swiginit(self, _quickfix.new_FIXException(type, detail))
    __swig_destroy__ = _quickfix.delete_FIXException
    type = property(_quickfix.FIXException_type_get, _quickfix.FIXException_type_set)
    detail = property(_quickfix.FIXException_detail_get, _quickfix.FIXException_detail_set)

    def __str__(self):
        return _quickfix.FIXException___str__(self)

# Register FIXException in _quickfix:
_quickfix.FIXException_swigregister(FIXException)

class DataDictionaryNotFound(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DataDictionaryNotFound_swiginit(self, _quickfix.new_DataDictionaryNotFound(*args))
    __swig_destroy__ = _quickfix.delete_DataDictionaryNotFound
    version = property(_quickfix.DataDictionaryNotFound_version_get, _quickfix.DataDictionaryNotFound_version_set)

# Register DataDictionaryNotFound in _quickfix:
_quickfix.DataDictionaryNotFound_swigregister(DataDictionaryNotFound)

class FieldNotFound(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FieldNotFound_swiginit(self, _quickfix.new_FieldNotFound(*args))
    field = property(_quickfix.FieldNotFound_field_get, _quickfix.FieldNotFound_field_set)
    __swig_destroy__ = _quickfix.delete_FieldNotFound

# Register FieldNotFound in _quickfix:
_quickfix.FieldNotFound_swigregister(FieldNotFound)

class FieldConvertError(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FieldConvertError_swiginit(self, _quickfix.new_FieldConvertError(*args))
    __swig_destroy__ = _quickfix.delete_FieldConvertError

# Register FieldConvertError in _quickfix:
_quickfix.FieldConvertError_swigregister(FieldConvertError)

class MessageParseError(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MessageParseError_swiginit(self, _quickfix.new_MessageParseError(*args))
    __swig_destroy__ = _quickfix.delete_MessageParseError

# Register MessageParseError in _quickfix:
_quickfix.MessageParseError_swigregister(MessageParseError)

class InvalidMessage(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InvalidMessage_swiginit(self, _quickfix.new_InvalidMessage(*args))
    __swig_destroy__ = _quickfix.delete_InvalidMessage

# Register InvalidMessage in _quickfix:
_quickfix.InvalidMessage_swigregister(InvalidMessage)

class ConfigError(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ConfigError_swiginit(self, _quickfix.new_ConfigError(*args))
    __swig_destroy__ = _quickfix.delete_ConfigError

# Register ConfigError in _quickfix:
_quickfix.ConfigError_swigregister(ConfigError)

class RuntimeError(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RuntimeError_swiginit(self, _quickfix.new_RuntimeError(*args))
    __swig_destroy__ = _quickfix.delete_RuntimeError

# Register RuntimeError in _quickfix:
_quickfix.RuntimeError_swigregister(RuntimeError)

class InvalidTagNumber(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InvalidTagNumber_swiginit(self, _quickfix.new_InvalidTagNumber(*args))
    field = property(_quickfix.InvalidTagNumber_field_get, _quickfix.InvalidTagNumber_field_set)
    __swig_destroy__ = _quickfix.delete_InvalidTagNumber

# Register InvalidTagNumber in _quickfix:
_quickfix.InvalidTagNumber_swigregister(InvalidTagNumber)

class RequiredTagMissing(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RequiredTagMissing_swiginit(self, _quickfix.new_RequiredTagMissing(*args))
    field = property(_quickfix.RequiredTagMissing_field_get, _quickfix.RequiredTagMissing_field_set)
    __swig_destroy__ = _quickfix.delete_RequiredTagMissing

# Register RequiredTagMissing in _quickfix:
_quickfix.RequiredTagMissing_swigregister(RequiredTagMissing)

class TagNotDefinedForMessage(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TagNotDefinedForMessage_swiginit(self, _quickfix.new_TagNotDefinedForMessage(*args))
    field = property(_quickfix.TagNotDefinedForMessage_field_get, _quickfix.TagNotDefinedForMessage_field_set)
    __swig_destroy__ = _quickfix.delete_TagNotDefinedForMessage

# Register TagNotDefinedForMessage in _quickfix:
_quickfix.TagNotDefinedForMessage_swigregister(TagNotDefinedForMessage)

class NoTagValue(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoTagValue_swiginit(self, _quickfix.new_NoTagValue(*args))
    field = property(_quickfix.NoTagValue_field_get, _quickfix.NoTagValue_field_set)
    __swig_destroy__ = _quickfix.delete_NoTagValue

# Register NoTagValue in _quickfix:
_quickfix.NoTagValue_swigregister(NoTagValue)

class IncorrectTagValue(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IncorrectTagValue_swiginit(self, _quickfix.new_IncorrectTagValue(*args))
    field = property(_quickfix.IncorrectTagValue_field_get, _quickfix.IncorrectTagValue_field_set)
    __swig_destroy__ = _quickfix.delete_IncorrectTagValue

# Register IncorrectTagValue in _quickfix:
_quickfix.IncorrectTagValue_swigregister(IncorrectTagValue)

class IncorrectDataFormat(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IncorrectDataFormat_swiginit(self, _quickfix.new_IncorrectDataFormat(*args))
    field = property(_quickfix.IncorrectDataFormat_field_get, _quickfix.IncorrectDataFormat_field_set)
    __swig_destroy__ = _quickfix.delete_IncorrectDataFormat

# Register IncorrectDataFormat in _quickfix:
_quickfix.IncorrectDataFormat_swigregister(IncorrectDataFormat)

class IncorrectMessageStructure(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IncorrectMessageStructure_swiginit(self, _quickfix.new_IncorrectMessageStructure(*args))
    __swig_destroy__ = _quickfix.delete_IncorrectMessageStructure

# Register IncorrectMessageStructure in _quickfix:
_quickfix.IncorrectMessageStructure_swigregister(IncorrectMessageStructure)

class DuplicateFieldNumber(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DuplicateFieldNumber_swiginit(self, _quickfix.new_DuplicateFieldNumber(*args))
    __swig_destroy__ = _quickfix.delete_DuplicateFieldNumber

# Register DuplicateFieldNumber in _quickfix:
_quickfix.DuplicateFieldNumber_swigregister(DuplicateFieldNumber)

class InvalidMessageType(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InvalidMessageType_swiginit(self, _quickfix.new_InvalidMessageType(*args))
    __swig_destroy__ = _quickfix.delete_InvalidMessageType

# Register InvalidMessageType in _quickfix:
_quickfix.InvalidMessageType_swigregister(InvalidMessageType)

class UnsupportedMessageType(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnsupportedMessageType_swiginit(self, _quickfix.new_UnsupportedMessageType(*args))
    __swig_destroy__ = _quickfix.delete_UnsupportedMessageType

# Register UnsupportedMessageType in _quickfix:
_quickfix.UnsupportedMessageType_swigregister(UnsupportedMessageType)

class UnsupportedVersion(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnsupportedVersion_swiginit(self, _quickfix.new_UnsupportedVersion(*args))
    __swig_destroy__ = _quickfix.delete_UnsupportedVersion

# Register UnsupportedVersion in _quickfix:
_quickfix.UnsupportedVersion_swigregister(UnsupportedVersion)

class TagOutOfOrder(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TagOutOfOrder_swiginit(self, _quickfix.new_TagOutOfOrder(*args))
    field = property(_quickfix.TagOutOfOrder_field_get, _quickfix.TagOutOfOrder_field_set)
    __swig_destroy__ = _quickfix.delete_TagOutOfOrder

# Register TagOutOfOrder in _quickfix:
_quickfix.TagOutOfOrder_swigregister(TagOutOfOrder)

class RepeatedTag(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RepeatedTag_swiginit(self, _quickfix.new_RepeatedTag(*args))
    field = property(_quickfix.RepeatedTag_field_get, _quickfix.RepeatedTag_field_set)
    __swig_destroy__ = _quickfix.delete_RepeatedTag

# Register RepeatedTag in _quickfix:
_quickfix.RepeatedTag_swigregister(RepeatedTag)

class RepeatingGroupCountMismatch(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RepeatingGroupCountMismatch_swiginit(self, _quickfix.new_RepeatingGroupCountMismatch(*args))
    field = property(_quickfix.RepeatingGroupCountMismatch_field_get, _quickfix.RepeatingGroupCountMismatch_field_set)
    __swig_destroy__ = _quickfix.delete_RepeatingGroupCountMismatch

# Register RepeatingGroupCountMismatch in _quickfix:
_quickfix.RepeatingGroupCountMismatch_swigregister(RepeatingGroupCountMismatch)

class DoNotSend(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DoNotSend_swiginit(self, _quickfix.new_DoNotSend(*args))
    __swig_destroy__ = _quickfix.delete_DoNotSend

# Register DoNotSend in _quickfix:
_quickfix.DoNotSend_swigregister(DoNotSend)

class RejectLogon(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RejectLogon_swiginit(self, _quickfix.new_RejectLogon(*args))
    __swig_destroy__ = _quickfix.delete_RejectLogon

# Register RejectLogon in _quickfix:
_quickfix.RejectLogon_swigregister(RejectLogon)

class SessionNotFound(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SessionNotFound_swiginit(self, _quickfix.new_SessionNotFound(*args))
    __swig_destroy__ = _quickfix.delete_SessionNotFound

# Register SessionNotFound in _quickfix:
_quickfix.SessionNotFound_swigregister(SessionNotFound)

class IOException(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOException_swiginit(self, _quickfix.new_IOException(*args))
    __swig_destroy__ = _quickfix.delete_IOException

# Register IOException in _quickfix:
_quickfix.IOException_swigregister(IOException)

class SocketException(FIXException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SocketException_swiginit(self, _quickfix.new_SocketException(*args))

    @staticmethod
    def errorToWhat():
        return _quickfix.SocketException_errorToWhat()
    __swig_destroy__ = _quickfix.delete_SocketException

# Register SocketException in _quickfix:
_quickfix.SocketException_swigregister(SocketException)

def SocketException_errorToWhat():
    return _quickfix.SocketException_errorToWhat()

class SocketSendFailed(SocketException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SocketSendFailed_swiginit(self, _quickfix.new_SocketSendFailed(*args))
    __swig_destroy__ = _quickfix.delete_SocketSendFailed

# Register SocketSendFailed in _quickfix:
_quickfix.SocketSendFailed_swigregister(SocketSendFailed)

class SocketRecvFailed(SocketException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SocketRecvFailed_swiginit(self, _quickfix.new_SocketRecvFailed(*args))
    __swig_destroy__ = _quickfix.delete_SocketRecvFailed

# Register SocketRecvFailed in _quickfix:
_quickfix.SocketRecvFailed_swigregister(SocketRecvFailed)

class SocketCloseFailed(SocketException):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SocketCloseFailed_swiginit(self, _quickfix.new_SocketCloseFailed(*args))
    __swig_destroy__ = _quickfix.delete_SocketCloseFailed

# Register SocketCloseFailed in _quickfix:
_quickfix.SocketCloseFailed_swigregister(SocketCloseFailed)

class DateTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_date = property(_quickfix.DateTime_m_date_get, _quickfix.DateTime_m_date_set)
    m_time = property(_quickfix.DateTime_m_time_get, _quickfix.DateTime_m_time_set)

    def __init__(self, *args):
        _quickfix.DateTime_swiginit(self, _quickfix.new_DateTime(*args))
    __swig_destroy__ = _quickfix.delete_DateTime

    def getYear(self):
        return _quickfix.DateTime_getYear(self)

    def getMonth(self):
        return _quickfix.DateTime_getMonth(self)

    def getDay(self):
        return _quickfix.DateTime_getDay(self)

    def getDate(self):
        return _quickfix.DateTime_getDate(self)

    def getJulianDate(self):
        return _quickfix.DateTime_getJulianDate(self)

    def getHour(self):
        return _quickfix.DateTime_getHour(self)

    def getMinute(self):
        return _quickfix.DateTime_getMinute(self)

    def getSecond(self):
        return _quickfix.DateTime_getSecond(self)

    def getMillisecond(self):
        return _quickfix.DateTime_getMillisecond(self)

    def getMicrosecond(self):
        return _quickfix.DateTime_getMicrosecond(self)

    def getMicroecond(self):
        return _quickfix.DateTime_getMicroecond(self)

    def getNanosecond(self):
        return _quickfix.DateTime_getNanosecond(self)

    def getFraction(self, precision):
        return _quickfix.DateTime_getFraction(self, precision)

    def getWeekDay(self):
        return _quickfix.DateTime_getWeekDay(self)

    def getTimeT(self):
        return _quickfix.DateTime_getTimeT(self)

    def getTmUtc(self):
        return _quickfix.DateTime_getTmUtc(self)

    def setYMD(self, year, month, day):
        return _quickfix.DateTime_setYMD(self, year, month, day)

    def setHMS(self, *args):
        return _quickfix.DateTime_setHMS(self, *args)

    def setHour(self, hour):
        return _quickfix.DateTime_setHour(self, hour)

    def setMinute(self, min):
        return _quickfix.DateTime_setMinute(self, min)

    def setSecond(self, sec):
        return _quickfix.DateTime_setSecond(self, sec)

    def setMillisecond(self, millis):
        return _quickfix.DateTime_setMillisecond(self, millis)

    def setMicrosecond(self, micros):
        return _quickfix.DateTime_setMicrosecond(self, micros)

    def setNanosecond(self, nanos):
        return _quickfix.DateTime_setNanosecond(self, nanos)

    def setFraction(self, fraction, precision):
        return _quickfix.DateTime_setFraction(self, fraction, precision)

    def clearDate(self):
        return _quickfix.DateTime_clearDate(self)

    def clearTime(self):
        return _quickfix.DateTime_clearTime(self)

    def set(self, *args):
        return _quickfix.DateTime_set(self, *args)

    def __iadd__(self, seconds):
        return _quickfix.DateTime___iadd__(self, seconds)

    @staticmethod
    def convertToNanos(fraction, precision):
        return _quickfix.DateTime_convertToNanos(fraction, precision)

    @staticmethod
    def makeHMS(hour, minute, second, nanos):
        return _quickfix.DateTime_makeHMS(hour, minute, second, nanos)

    @staticmethod
    def nowUtc():
        return _quickfix.DateTime_nowUtc()

    @staticmethod
    def nowLocal():
        return _quickfix.DateTime_nowLocal()

    @staticmethod
    def fromUtcTimeT(*args):
        return _quickfix.DateTime_fromUtcTimeT(*args)

    @staticmethod
    def fromLocalTimeT(*args):
        return _quickfix.DateTime_fromLocalTimeT(*args)

    @staticmethod
    def fromTm(*args):
        return _quickfix.DateTime_fromTm(*args)

    @staticmethod
    def julianDate(year, month, day):
        return _quickfix.DateTime_julianDate(year, month, day)

# Register DateTime in _quickfix:
_quickfix.DateTime_swigregister(DateTime)
cvar = _quickfix.cvar
PRECISION_FACTOR = cvar.PRECISION_FACTOR

def DateTime_convertToNanos(fraction, precision):
    return _quickfix.DateTime_convertToNanos(fraction, precision)

def DateTime_makeHMS(hour, minute, second, nanos):
    return _quickfix.DateTime_makeHMS(hour, minute, second, nanos)

def DateTime_nowUtc():
    return _quickfix.DateTime_nowUtc()

def DateTime_nowLocal():
    return _quickfix.DateTime_nowLocal()

def DateTime_fromUtcTimeT(*args):
    return _quickfix.DateTime_fromUtcTimeT(*args)

def DateTime_fromLocalTimeT(*args):
    return _quickfix.DateTime_fromLocalTimeT(*args)

def DateTime_fromTm(*args):
    return _quickfix.DateTime_fromTm(*args)

def DateTime_julianDate(year, month, day):
    return _quickfix.DateTime_julianDate(year, month, day)


def __sub__(lhs, rhs):
    return _quickfix.__sub__(lhs, rhs)
class UtcTimeStamp(DateTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UtcTimeStamp_swiginit(self, _quickfix.new_UtcTimeStamp(*args))

    def setCurrent(self):
        return _quickfix.UtcTimeStamp_setCurrent(self)

    def getDateTime(self):
        return _quickfix.UtcTimeStamp_getDateTime(self)
    __swig_destroy__ = _quickfix.delete_UtcTimeStamp

# Register UtcTimeStamp in _quickfix:
_quickfix.UtcTimeStamp_swigregister(UtcTimeStamp)

class LocalTimeStamp(DateTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LocalTimeStamp_swiginit(self, _quickfix.new_LocalTimeStamp(*args))

    def setCurrent(self):
        return _quickfix.LocalTimeStamp_setCurrent(self)
    __swig_destroy__ = _quickfix.delete_LocalTimeStamp

# Register LocalTimeStamp in _quickfix:
_quickfix.LocalTimeStamp_swigregister(LocalTimeStamp)

class UtcTimeOnly(DateTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UtcTimeOnly_swiginit(self, _quickfix.new_UtcTimeOnly(*args))

    def setCurrent(self):
        return _quickfix.UtcTimeOnly_setCurrent(self)
    __swig_destroy__ = _quickfix.delete_UtcTimeOnly

# Register UtcTimeOnly in _quickfix:
_quickfix.UtcTimeOnly_swigregister(UtcTimeOnly)

class LocalTimeOnly(DateTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LocalTimeOnly_swiginit(self, _quickfix.new_LocalTimeOnly(*args))

    def setCurrent(self):
        return _quickfix.LocalTimeOnly_setCurrent(self)
    __swig_destroy__ = _quickfix.delete_LocalTimeOnly

# Register LocalTimeOnly in _quickfix:
_quickfix.LocalTimeOnly_swigregister(LocalTimeOnly)

class UtcDate(DateTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UtcDate_swiginit(self, _quickfix.new_UtcDate(*args))

    def setCurrent(self):
        return _quickfix.UtcDate_setCurrent(self)
    __swig_destroy__ = _quickfix.delete_UtcDate

# Register UtcDate in _quickfix:
_quickfix.UtcDate_swigregister(UtcDate)

class LocalDate(DateTime):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LocalDate_swiginit(self, _quickfix.new_LocalDate(*args))

    def setCurrent(self):
        return _quickfix.LocalDate_setCurrent(self)
    __swig_destroy__ = _quickfix.delete_LocalDate

# Register LocalDate in _quickfix:
_quickfix.LocalDate_swigregister(LocalDate)

EnumUnknown = _quickfix.EnumUnknown
EnumString = _quickfix.EnumString
EnumChar = _quickfix.EnumChar
EnumPrice = _quickfix.EnumPrice
EnumInt = _quickfix.EnumInt
EnumAmt = _quickfix.EnumAmt
EnumQty = _quickfix.EnumQty
EnumCurrency = _quickfix.EnumCurrency
EnumMultipleValueString = _quickfix.EnumMultipleValueString
EnumMultipleStringValue = _quickfix.EnumMultipleStringValue
EnumMultipleCharValue = _quickfix.EnumMultipleCharValue
EnumExchange = _quickfix.EnumExchange
EnumUtcTimeStamp = _quickfix.EnumUtcTimeStamp
EnumBoolean = _quickfix.EnumBoolean
EnumLocalMktDate = _quickfix.EnumLocalMktDate
EnumData = _quickfix.EnumData
EnumFloat = _quickfix.EnumFloat
EnumPriceOffset = _quickfix.EnumPriceOffset
EnumMonthYear = _quickfix.EnumMonthYear
EnumDayOfMonth = _quickfix.EnumDayOfMonth
EnumUtcDate = _quickfix.EnumUtcDate
EnumUtcDateOnly = _quickfix.EnumUtcDateOnly
EnumUtcTimeOnly = _quickfix.EnumUtcTimeOnly
EnumNumInGroup = _quickfix.EnumNumInGroup
EnumPercentage = _quickfix.EnumPercentage
EnumSeqNum = _quickfix.EnumSeqNum
EnumLength = _quickfix.EnumLength
EnumCountry = _quickfix.EnumCountry
EnumTzTimeOnly = _quickfix.EnumTzTimeOnly
EnumTzTimeStamp = _quickfix.EnumTzTimeStamp
EnumXmlData = _quickfix.EnumXmlData
EnumLanguage = _quickfix.EnumLanguage
class FieldBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_FieldBase

    def __init__(self, *args):
        _quickfix.FieldBase_swiginit(self, _quickfix.new_FieldBase(*args))

    def swap(self, rhs):
        return _quickfix.FieldBase_swap(self, rhs)

    def setTag(self, tag):
        return _quickfix.FieldBase_setTag(self, tag)

    def setField(self, field):
        return _quickfix.FieldBase_setField(self, field)

    def setString(self, string):
        return _quickfix.FieldBase_setString(self, string)

    def getTag(self):
        return _quickfix.FieldBase_getTag(self)

    def getField(self):
        return _quickfix.FieldBase_getField(self)

    def getString(self):
        return _quickfix.FieldBase_getString(self)

    def getFixString(self):
        return _quickfix.FieldBase_getFixString(self)

    def getLength(self):
        return _quickfix.FieldBase_getLength(self)

    def getTotal(self):
        return _quickfix.FieldBase_getTotal(self)

    def __lt__(self, field):
        return _quickfix.FieldBase___lt__(self, field)

    def __str__(self):
        return _quickfix.FieldBase___str__(self)

# Register FieldBase in _quickfix:
_quickfix.FieldBase_swigregister(FieldBase)


def swap(lhs, rhs):
    return _quickfix.swap(lhs, rhs)
class StringField(FieldBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StringField_swiginit(self, _quickfix.new_StringField(*args))

    def setValue(self, value):
        return _quickfix.StringField_setValue(self, value)

    def getValue(self):
        return _quickfix.StringField_getValue(self)

    def __lt__(self, rhs):
        return _quickfix.StringField___lt__(self, rhs)

    def __gt__(self, rhs):
        return _quickfix.StringField___gt__(self, rhs)

    def __eq__(self, rhs):
        return _quickfix.StringField___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quickfix.StringField___ne__(self, rhs)

    def __le__(self, rhs):
        return _quickfix.StringField___le__(self, rhs)

    def __ge__(self, rhs):
        return _quickfix.StringField___ge__(self, rhs)
    __swig_destroy__ = _quickfix.delete_StringField

# Register StringField in _quickfix:
_quickfix.StringField_swigregister(StringField)


def __gt__(*args):
    return _quickfix.__gt__(*args)

def __le__(*args):
    return _quickfix.__le__(*args)

def __ge__(*args):
    return _quickfix.__ge__(*args)
class CharField(FieldBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CharField_swiginit(self, _quickfix.new_CharField(*args))

    def setValue(self, value):
        return _quickfix.CharField_setValue(self, value)

    def getValue(self):
        return _quickfix.CharField_getValue(self)
    __swig_destroy__ = _quickfix.delete_CharField

# Register CharField in _quickfix:
_quickfix.CharField_swigregister(CharField)

class DoubleField(FieldBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DoubleField_swiginit(self, _quickfix.new_DoubleField(*args))

    def setValue(self, value, padding=0):
        return _quickfix.DoubleField_setValue(self, value, padding)

    def getValue(self):
        return _quickfix.DoubleField_getValue(self)
    __swig_destroy__ = _quickfix.delete_DoubleField

# Register DoubleField in _quickfix:
_quickfix.DoubleField_swigregister(DoubleField)

class IntField(FieldBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IntField_swiginit(self, _quickfix.new_IntField(*args))

    def setValue(self, value):
        return _quickfix.IntField_setValue(self, value)

    def getValue(self):
        return _quickfix.IntField_getValue(self)
    __swig_destroy__ = _quickfix.delete_IntField

# Register IntField in _quickfix:
_quickfix.IntField_swigregister(IntField)

class BoolField(FieldBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BoolField_swiginit(self, _quickfix.new_BoolField(*args))

    def setValue(self, value):
        return _quickfix.BoolField_setValue(self, value)

    def getValue(self):
        return _quickfix.BoolField_getValue(self)

    def __nonzero__(self):
        return _quickfix.BoolField___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _quickfix.delete_BoolField

# Register BoolField in _quickfix:
_quickfix.BoolField_swigregister(BoolField)

class UtcTimeStampField(FieldBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UtcTimeStampField_swiginit(self, _quickfix.new_UtcTimeStampField(*args))

    def setValue(self, value):
        return _quickfix.UtcTimeStampField_setValue(self, value)

    def getValue(self):
        return _quickfix.UtcTimeStampField_getValue(self)

    def __lt__(self, rhs):
        return _quickfix.UtcTimeStampField___lt__(self, rhs)

    def __eq__(self, rhs):
        return _quickfix.UtcTimeStampField___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quickfix.UtcTimeStampField___ne__(self, rhs)
    __swig_destroy__ = _quickfix.delete_UtcTimeStampField

# Register UtcTimeStampField in _quickfix:
_quickfix.UtcTimeStampField_swigregister(UtcTimeStampField)

class UtcDateField(FieldBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UtcDateField_swiginit(self, _quickfix.new_UtcDateField(*args))

    def setValue(self, value):
        return _quickfix.UtcDateField_setValue(self, value)

    def getValue(self):
        return _quickfix.UtcDateField_getValue(self)

    def __lt__(self, rhs):
        return _quickfix.UtcDateField___lt__(self, rhs)

    def __eq__(self, rhs):
        return _quickfix.UtcDateField___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quickfix.UtcDateField___ne__(self, rhs)
    __swig_destroy__ = _quickfix.delete_UtcDateField

# Register UtcDateField in _quickfix:
_quickfix.UtcDateField_swigregister(UtcDateField)

class UtcTimeOnlyField(FieldBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UtcTimeOnlyField_swiginit(self, _quickfix.new_UtcTimeOnlyField(*args))

    def setValue(self, value):
        return _quickfix.UtcTimeOnlyField_setValue(self, value)

    def getValue(self):
        return _quickfix.UtcTimeOnlyField_getValue(self)

    def __lt__(self, rhs):
        return _quickfix.UtcTimeOnlyField___lt__(self, rhs)

    def __eq__(self, rhs):
        return _quickfix.UtcTimeOnlyField___eq__(self, rhs)

    def __ne__(self, rhs):
        return _quickfix.UtcTimeOnlyField___ne__(self, rhs)
    __swig_destroy__ = _quickfix.delete_UtcTimeOnlyField

# Register UtcTimeOnlyField in _quickfix:
_quickfix.UtcTimeOnlyField_swigregister(UtcTimeOnlyField)

class CheckSumField(FieldBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CheckSumField_swiginit(self, _quickfix.new_CheckSumField(*args))

    def setValue(self, value):
        return _quickfix.CheckSumField_setValue(self, value)

    def getValue(self):
        return _quickfix.CheckSumField_getValue(self)
    __swig_destroy__ = _quickfix.delete_CheckSumField

# Register CheckSumField in _quickfix:
_quickfix.CheckSumField_swigregister(CheckSumField)

class FieldMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FieldMap_swiginit(self, _quickfix.new_FieldMap(*args))
    __swig_destroy__ = _quickfix.delete_FieldMap

    def setField(self, *args):
        return _quickfix.FieldMap_setField(self, *args)

    def getFieldIfSet(self, field):
        return _quickfix.FieldMap_getFieldIfSet(self, field)

    def getField(self, *args):
        return _quickfix.FieldMap_getField(self, *args)

    def getFieldRef(self, tag):
        return _quickfix.FieldMap_getFieldRef(self, tag)

    def getFieldPtr(self, tag):
        return _quickfix.FieldMap_getFieldPtr(self, tag)

    def isSetField(self, *args):
        return _quickfix.FieldMap_isSetField(self, *args)

    def removeField(self, tag):
        return _quickfix.FieldMap_removeField(self, tag)

    def addGroup(self, tag, group, setCount=True):
        return _quickfix.FieldMap_addGroup(self, tag, group, setCount)

    def addGroupPtr(self, tag, group, setCount=True):
        return _quickfix.FieldMap_addGroupPtr(self, tag, group, setCount)

    def replaceGroup(self, num, tag, group):
        return _quickfix.FieldMap_replaceGroup(self, num, tag, group)

    def getGroup(self, num, tag, group):
        return _quickfix.FieldMap_getGroup(self, num, tag, group)

    def getGroupRef(self, num, tag):
        return _quickfix.FieldMap_getGroupRef(self, num, tag)

    def getGroupPtr(self, num, tag):
        return _quickfix.FieldMap_getGroupPtr(self, num, tag)

    def groups(self):
        return _quickfix.FieldMap_groups(self)

    def removeGroup(self, *args):
        return _quickfix.FieldMap_removeGroup(self, *args)

    def hasGroup(self, *args):
        return _quickfix.FieldMap_hasGroup(self, *args)

    def groupCount(self, tag):
        return _quickfix.FieldMap_groupCount(self, tag)

    def clear(self):
        return _quickfix.FieldMap_clear(self)

    def isEmpty(self):
        return _quickfix.FieldMap_isEmpty(self)

    def totalFields(self):
        return _quickfix.FieldMap_totalFields(self)

    def calculateString(self, arg2):
        return _quickfix.FieldMap_calculateString(self, arg2)

    def calculateLength(self, *args):
        return _quickfix.FieldMap_calculateLength(self, *args)

    def calculateTotal(self, *args):
        return _quickfix.FieldMap_calculateTotal(self, *args)

    def begin(self, *args):
        return _quickfix.FieldMap_begin(self, *args)

    def end(self, *args):
        return _quickfix.FieldMap_end(self, *args)

    def g_begin(self, *args):
        return _quickfix.FieldMap_g_begin(self, *args)

    def g_end(self, *args):
        return _quickfix.FieldMap_g_end(self, *args)

# Register FieldMap in _quickfix:
_quickfix.FieldMap_swigregister(FieldMap)

class Header(FieldMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Header_swiginit(self, _quickfix.new_Header(*args))

    def addGroup(self, group):
        return _quickfix.Header_addGroup(self, group)

    def replaceGroup(self, num, group):
        return _quickfix.Header_replaceGroup(self, num, group)

    def getGroup(self, num, group):
        return _quickfix.Header_getGroup(self, num, group)

    def removeGroup(self, *args):
        return _quickfix.Header_removeGroup(self, *args)

    def hasGroup(self, *args):
        return _quickfix.Header_hasGroup(self, *args)
    __swig_destroy__ = _quickfix.delete_Header

# Register Header in _quickfix:
_quickfix.Header_swigregister(Header)

class Trailer(FieldMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Trailer_swiginit(self, _quickfix.new_Trailer(*args))

    def addGroup(self, group):
        return _quickfix.Trailer_addGroup(self, group)

    def replaceGroup(self, num, group):
        return _quickfix.Trailer_replaceGroup(self, num, group)

    def getGroup(self, num, group):
        return _quickfix.Trailer_getGroup(self, num, group)

    def removeGroup(self, *args):
        return _quickfix.Trailer_removeGroup(self, *args)

    def hasGroup(self, *args):
        return _quickfix.Trailer_hasGroup(self, *args)
    __swig_destroy__ = _quickfix.delete_Trailer

# Register Trailer in _quickfix:
_quickfix.Trailer_swigregister(Trailer)

class Message(FieldMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Message_swiginit(self, _quickfix.new_Message(*args))
    __swig_destroy__ = _quickfix.delete_Message

    @staticmethod
    def InitializeXML(string):
        return _quickfix.Message_InitializeXML(string)

    def addGroup(self, group):
        return _quickfix.Message_addGroup(self, group)

    def replaceGroup(self, num, group):
        return _quickfix.Message_replaceGroup(self, num, group)

    def getGroup(self, num, group):
        return _quickfix.Message_getGroup(self, num, group)

    def removeGroup(self, *args):
        return _quickfix.Message_removeGroup(self, *args)

    def hasGroup(self, *args):
        return _quickfix.Message_hasGroup(self, *args)

    def toString(self, *args):
        return _quickfix.Message_toString(self, *args)

    def toXML(self, *args):
        return _quickfix.Message_toXML(self, *args)

    def reverseRoute(self, arg2):
        return _quickfix.Message_reverseRoute(self, arg2)

    def setString(self, *args):
        return _quickfix.Message_setString(self, *args)

    def setGroup(self, msg, field, string, pos, map, dataDictionary):
        return _quickfix.Message_setGroup(self, msg, field, string, pos, map, dataDictionary)

    def setStringHeader(self, string):
        return _quickfix.Message_setStringHeader(self, string)

    def getHeader(self, *args):
        return _quickfix.Message_getHeader(self, *args)

    def getTrailer(self, *args):
        return _quickfix.Message_getTrailer(self, *args)

    def hasValidStructure(self, tag):
        return _quickfix.Message_hasValidStructure(self, tag)

    def bodyLength(self, *args):
        return _quickfix.Message_bodyLength(self, *args)

    def checkSum(self, *args):
        return _quickfix.Message_checkSum(self, *args)

    def isAdmin(self):
        return _quickfix.Message_isAdmin(self)

    def isApp(self):
        return _quickfix.Message_isApp(self)

    def isEmpty(self):
        return _quickfix.Message_isEmpty(self)

    def clear(self):
        return _quickfix.Message_clear(self)

    @staticmethod
    def isAdminMsgType(msgType):
        return _quickfix.Message_isAdminMsgType(msgType)

    @staticmethod
    def toApplVerID(value):
        return _quickfix.Message_toApplVerID(value)

    @staticmethod
    def toBeginString(applVerID):
        return _quickfix.Message_toBeginString(applVerID)

    @staticmethod
    def isHeaderField(*args):
        return _quickfix.Message_isHeaderField(*args)

    @staticmethod
    def isTrailerField(*args):
        return _quickfix.Message_isTrailerField(*args)

    def getSessionID(self, *args):
        return _quickfix.Message_getSessionID(self, *args)

    def setSessionID(self, sessionID):
        return _quickfix.Message_setSessionID(self, sessionID)

    def __str__(self):
        return _quickfix.Message___str__(self)

# Register Message in _quickfix:
_quickfix.Message_swigregister(Message)

def Message_InitializeXML(string):
    return _quickfix.Message_InitializeXML(string)

def Message_isAdminMsgType(msgType):
    return _quickfix.Message_isAdminMsgType(msgType)

def Message_toApplVerID(value):
    return _quickfix.Message_toApplVerID(value)

def Message_toBeginString(applVerID):
    return _quickfix.Message_toBeginString(applVerID)

def Message_isHeaderField(*args):
    return _quickfix.Message_isHeaderField(*args)

def Message_isTrailerField(*args):
    return _quickfix.Message_isTrailerField(*args)


def identifyType(message):
    return _quickfix.identifyType(message)
class Group(FieldMap):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Group_swiginit(self, _quickfix.new_Group(*args))

    def field(self):
        return _quickfix.Group_field(self)

    def delim(self):
        return _quickfix.Group_delim(self)

    def addGroup(self, group):
        return _quickfix.Group_addGroup(self, group)

    def replaceGroup(self, num, group):
        return _quickfix.Group_replaceGroup(self, num, group)

    def getGroup(self, num, group):
        return _quickfix.Group_getGroup(self, num, group)

    def removeGroup(self, *args):
        return _quickfix.Group_removeGroup(self, *args)

    def hasGroup(self, *args):
        return _quickfix.Group_hasGroup(self, *args)
    __swig_destroy__ = _quickfix.delete_Group

# Register Group in _quickfix:
_quickfix.Group_swigregister(Group)

class BeginSeqNo(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BeginSeqNo_swiginit(self, _quickfix.new_BeginSeqNo(*args))
    __swig_destroy__ = _quickfix.delete_BeginSeqNo

# Register BeginSeqNo in _quickfix:
_quickfix.BeginSeqNo_swigregister(BeginSeqNo)

class BeginString(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BeginString_swiginit(self, _quickfix.new_BeginString(*args))
    __swig_destroy__ = _quickfix.delete_BeginString

# Register BeginString in _quickfix:
_quickfix.BeginString_swigregister(BeginString)

class BodyLength(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BodyLength_swiginit(self, _quickfix.new_BodyLength(*args))
    __swig_destroy__ = _quickfix.delete_BodyLength

# Register BodyLength in _quickfix:
_quickfix.BodyLength_swigregister(BodyLength)

class CheckSum(CheckSumField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CheckSum_swiginit(self, _quickfix.new_CheckSum(*args))
    __swig_destroy__ = _quickfix.delete_CheckSum

# Register CheckSum in _quickfix:
_quickfix.CheckSum_swigregister(CheckSum)

class EndSeqNo(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EndSeqNo_swiginit(self, _quickfix.new_EndSeqNo(*args))
    __swig_destroy__ = _quickfix.delete_EndSeqNo

# Register EndSeqNo in _quickfix:
_quickfix.EndSeqNo_swigregister(EndSeqNo)

class MsgSeqNum(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MsgSeqNum_swiginit(self, _quickfix.new_MsgSeqNum(*args))
    __swig_destroy__ = _quickfix.delete_MsgSeqNum

# Register MsgSeqNum in _quickfix:
_quickfix.MsgSeqNum_swigregister(MsgSeqNum)

class MsgType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MsgType_swiginit(self, _quickfix.new_MsgType(*args))
    __swig_destroy__ = _quickfix.delete_MsgType

# Register MsgType in _quickfix:
_quickfix.MsgType_swigregister(MsgType)

class NewSeqNo(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NewSeqNo_swiginit(self, _quickfix.new_NewSeqNo(*args))
    __swig_destroy__ = _quickfix.delete_NewSeqNo

# Register NewSeqNo in _quickfix:
_quickfix.NewSeqNo_swigregister(NewSeqNo)

class PossDupFlag(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PossDupFlag_swiginit(self, _quickfix.new_PossDupFlag(*args))
    __swig_destroy__ = _quickfix.delete_PossDupFlag

# Register PossDupFlag in _quickfix:
_quickfix.PossDupFlag_swigregister(PossDupFlag)

class RefSeqNum(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefSeqNum_swiginit(self, _quickfix.new_RefSeqNum(*args))
    __swig_destroy__ = _quickfix.delete_RefSeqNum

# Register RefSeqNum in _quickfix:
_quickfix.RefSeqNum_swigregister(RefSeqNum)

class SenderCompID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SenderCompID_swiginit(self, _quickfix.new_SenderCompID(*args))
    __swig_destroy__ = _quickfix.delete_SenderCompID

# Register SenderCompID in _quickfix:
_quickfix.SenderCompID_swigregister(SenderCompID)

class SenderSubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SenderSubID_swiginit(self, _quickfix.new_SenderSubID(*args))
    __swig_destroy__ = _quickfix.delete_SenderSubID

# Register SenderSubID in _quickfix:
_quickfix.SenderSubID_swigregister(SenderSubID)

class SendingTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SendingTime_swiginit(self, _quickfix.new_SendingTime(*args))
    __swig_destroy__ = _quickfix.delete_SendingTime

# Register SendingTime in _quickfix:
_quickfix.SendingTime_swigregister(SendingTime)

class TargetCompID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TargetCompID_swiginit(self, _quickfix.new_TargetCompID(*args))
    __swig_destroy__ = _quickfix.delete_TargetCompID

# Register TargetCompID in _quickfix:
_quickfix.TargetCompID_swigregister(TargetCompID)

class TargetSubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TargetSubID_swiginit(self, _quickfix.new_TargetSubID(*args))
    __swig_destroy__ = _quickfix.delete_TargetSubID

# Register TargetSubID in _quickfix:
_quickfix.TargetSubID_swigregister(TargetSubID)

class Text(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Text_swiginit(self, _quickfix.new_Text(*args))
    __swig_destroy__ = _quickfix.delete_Text

# Register Text in _quickfix:
_quickfix.Text_swigregister(Text)

class Signature(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Signature_swiginit(self, _quickfix.new_Signature(*args))
    __swig_destroy__ = _quickfix.delete_Signature

# Register Signature in _quickfix:
_quickfix.Signature_swigregister(Signature)

class SecureDataLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecureDataLen_swiginit(self, _quickfix.new_SecureDataLen(*args))
    __swig_destroy__ = _quickfix.delete_SecureDataLen

# Register SecureDataLen in _quickfix:
_quickfix.SecureDataLen_swigregister(SecureDataLen)

class SecureData(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecureData_swiginit(self, _quickfix.new_SecureData(*args))
    __swig_destroy__ = _quickfix.delete_SecureData

# Register SecureData in _quickfix:
_quickfix.SecureData_swigregister(SecureData)

class SignatureLength(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SignatureLength_swiginit(self, _quickfix.new_SignatureLength(*args))
    __swig_destroy__ = _quickfix.delete_SignatureLength

# Register SignatureLength in _quickfix:
_quickfix.SignatureLength_swigregister(SignatureLength)

class RawDataLength(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RawDataLength_swiginit(self, _quickfix.new_RawDataLength(*args))
    __swig_destroy__ = _quickfix.delete_RawDataLength

# Register RawDataLength in _quickfix:
_quickfix.RawDataLength_swigregister(RawDataLength)

class RawData(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RawData_swiginit(self, _quickfix.new_RawData(*args))
    __swig_destroy__ = _quickfix.delete_RawData

# Register RawData in _quickfix:
_quickfix.RawData_swigregister(RawData)

class PossResend(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PossResend_swiginit(self, _quickfix.new_PossResend(*args))
    __swig_destroy__ = _quickfix.delete_PossResend

# Register PossResend in _quickfix:
_quickfix.PossResend_swigregister(PossResend)

class EncryptMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncryptMethod_swiginit(self, _quickfix.new_EncryptMethod(*args))
    __swig_destroy__ = _quickfix.delete_EncryptMethod

# Register EncryptMethod in _quickfix:
_quickfix.EncryptMethod_swigregister(EncryptMethod)

class HeartBtInt(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.HeartBtInt_swiginit(self, _quickfix.new_HeartBtInt(*args))
    __swig_destroy__ = _quickfix.delete_HeartBtInt

# Register HeartBtInt in _quickfix:
_quickfix.HeartBtInt_swigregister(HeartBtInt)

class TestReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TestReqID_swiginit(self, _quickfix.new_TestReqID(*args))
    __swig_destroy__ = _quickfix.delete_TestReqID

# Register TestReqID in _quickfix:
_quickfix.TestReqID_swigregister(TestReqID)

class OnBehalfOfCompID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OnBehalfOfCompID_swiginit(self, _quickfix.new_OnBehalfOfCompID(*args))
    __swig_destroy__ = _quickfix.delete_OnBehalfOfCompID

# Register OnBehalfOfCompID in _quickfix:
_quickfix.OnBehalfOfCompID_swigregister(OnBehalfOfCompID)

class OnBehalfOfSubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OnBehalfOfSubID_swiginit(self, _quickfix.new_OnBehalfOfSubID(*args))
    __swig_destroy__ = _quickfix.delete_OnBehalfOfSubID

# Register OnBehalfOfSubID in _quickfix:
_quickfix.OnBehalfOfSubID_swigregister(OnBehalfOfSubID)

class OrigSendingTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigSendingTime_swiginit(self, _quickfix.new_OrigSendingTime(*args))
    __swig_destroy__ = _quickfix.delete_OrigSendingTime

# Register OrigSendingTime in _quickfix:
_quickfix.OrigSendingTime_swigregister(OrigSendingTime)

class GapFillFlag(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.GapFillFlag_swiginit(self, _quickfix.new_GapFillFlag(*args))
    __swig_destroy__ = _quickfix.delete_GapFillFlag

# Register GapFillFlag in _quickfix:
_quickfix.GapFillFlag_swigregister(GapFillFlag)

class DeliverToCompID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeliverToCompID_swiginit(self, _quickfix.new_DeliverToCompID(*args))
    __swig_destroy__ = _quickfix.delete_DeliverToCompID

# Register DeliverToCompID in _quickfix:
_quickfix.DeliverToCompID_swigregister(DeliverToCompID)

class DeliverToSubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeliverToSubID_swiginit(self, _quickfix.new_DeliverToSubID(*args))
    __swig_destroy__ = _quickfix.delete_DeliverToSubID

# Register DeliverToSubID in _quickfix:
_quickfix.DeliverToSubID_swigregister(DeliverToSubID)

class ResetSeqNumFlag(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ResetSeqNumFlag_swiginit(self, _quickfix.new_ResetSeqNumFlag(*args))
    __swig_destroy__ = _quickfix.delete_ResetSeqNumFlag

# Register ResetSeqNumFlag in _quickfix:
_quickfix.ResetSeqNumFlag_swigregister(ResetSeqNumFlag)

class SenderLocationID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SenderLocationID_swiginit(self, _quickfix.new_SenderLocationID(*args))
    __swig_destroy__ = _quickfix.delete_SenderLocationID

# Register SenderLocationID in _quickfix:
_quickfix.SenderLocationID_swigregister(SenderLocationID)

class TargetLocationID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TargetLocationID_swiginit(self, _quickfix.new_TargetLocationID(*args))
    __swig_destroy__ = _quickfix.delete_TargetLocationID

# Register TargetLocationID in _quickfix:
_quickfix.TargetLocationID_swigregister(TargetLocationID)

class OnBehalfOfLocationID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OnBehalfOfLocationID_swiginit(self, _quickfix.new_OnBehalfOfLocationID(*args))
    __swig_destroy__ = _quickfix.delete_OnBehalfOfLocationID

# Register OnBehalfOfLocationID in _quickfix:
_quickfix.OnBehalfOfLocationID_swigregister(OnBehalfOfLocationID)

class DeliverToLocationID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeliverToLocationID_swiginit(self, _quickfix.new_DeliverToLocationID(*args))
    __swig_destroy__ = _quickfix.delete_DeliverToLocationID

# Register DeliverToLocationID in _quickfix:
_quickfix.DeliverToLocationID_swigregister(DeliverToLocationID)

class XmlDataLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.XmlDataLen_swiginit(self, _quickfix.new_XmlDataLen(*args))
    __swig_destroy__ = _quickfix.delete_XmlDataLen

# Register XmlDataLen in _quickfix:
_quickfix.XmlDataLen_swigregister(XmlDataLen)

class XmlData(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.XmlData_swiginit(self, _quickfix.new_XmlData(*args))
    __swig_destroy__ = _quickfix.delete_XmlData

# Register XmlData in _quickfix:
_quickfix.XmlData_swigregister(XmlData)

class MessageEncoding(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MessageEncoding_swiginit(self, _quickfix.new_MessageEncoding(*args))
    __swig_destroy__ = _quickfix.delete_MessageEncoding

# Register MessageEncoding in _quickfix:
_quickfix.MessageEncoding_swigregister(MessageEncoding)

class EncodedTextLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedTextLen_swiginit(self, _quickfix.new_EncodedTextLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedTextLen

# Register EncodedTextLen in _quickfix:
_quickfix.EncodedTextLen_swigregister(EncodedTextLen)

class EncodedText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedText_swiginit(self, _quickfix.new_EncodedText(*args))
    __swig_destroy__ = _quickfix.delete_EncodedText

# Register EncodedText in _quickfix:
_quickfix.EncodedText_swigregister(EncodedText)

class LastMsgSeqNumProcessed(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastMsgSeqNumProcessed_swiginit(self, _quickfix.new_LastMsgSeqNumProcessed(*args))
    __swig_destroy__ = _quickfix.delete_LastMsgSeqNumProcessed

# Register LastMsgSeqNumProcessed in _quickfix:
_quickfix.LastMsgSeqNumProcessed_swigregister(LastMsgSeqNumProcessed)

class RefTagID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefTagID_swiginit(self, _quickfix.new_RefTagID(*args))
    __swig_destroy__ = _quickfix.delete_RefTagID

# Register RefTagID in _quickfix:
_quickfix.RefTagID_swigregister(RefTagID)

class RefMsgType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefMsgType_swiginit(self, _quickfix.new_RefMsgType(*args))
    __swig_destroy__ = _quickfix.delete_RefMsgType

# Register RefMsgType in _quickfix:
_quickfix.RefMsgType_swigregister(RefMsgType)

class SessionRejectReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SessionRejectReason_swiginit(self, _quickfix.new_SessionRejectReason(*args))
    __swig_destroy__ = _quickfix.delete_SessionRejectReason

# Register SessionRejectReason in _quickfix:
_quickfix.SessionRejectReason_swigregister(SessionRejectReason)

class MaxMessageSize(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaxMessageSize_swiginit(self, _quickfix.new_MaxMessageSize(*args))
    __swig_destroy__ = _quickfix.delete_MaxMessageSize

# Register MaxMessageSize in _quickfix:
_quickfix.MaxMessageSize_swigregister(MaxMessageSize)

class NoMsgTypes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoMsgTypes_swiginit(self, _quickfix.new_NoMsgTypes(*args))
    __swig_destroy__ = _quickfix.delete_NoMsgTypes

# Register NoMsgTypes in _quickfix:
_quickfix.NoMsgTypes_swigregister(NoMsgTypes)

class MsgDirection(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MsgDirection_swiginit(self, _quickfix.new_MsgDirection(*args))
    __swig_destroy__ = _quickfix.delete_MsgDirection

# Register MsgDirection in _quickfix:
_quickfix.MsgDirection_swigregister(MsgDirection)

class TestMessageIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TestMessageIndicator_swiginit(self, _quickfix.new_TestMessageIndicator(*args))
    __swig_destroy__ = _quickfix.delete_TestMessageIndicator

# Register TestMessageIndicator in _quickfix:
_quickfix.TestMessageIndicator_swigregister(TestMessageIndicator)

class Username(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Username_swiginit(self, _quickfix.new_Username(*args))
    __swig_destroy__ = _quickfix.delete_Username

# Register Username in _quickfix:
_quickfix.Username_swigregister(Username)

class Password(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Password_swiginit(self, _quickfix.new_Password(*args))
    __swig_destroy__ = _quickfix.delete_Password

# Register Password in _quickfix:
_quickfix.Password_swigregister(Password)

class NoHops(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoHops_swiginit(self, _quickfix.new_NoHops(*args))
    __swig_destroy__ = _quickfix.delete_NoHops

# Register NoHops in _quickfix:
_quickfix.NoHops_swigregister(NoHops)

class HopCompID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.HopCompID_swiginit(self, _quickfix.new_HopCompID(*args))
    __swig_destroy__ = _quickfix.delete_HopCompID

# Register HopCompID in _quickfix:
_quickfix.HopCompID_swigregister(HopCompID)

class HopSendingTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.HopSendingTime_swiginit(self, _quickfix.new_HopSendingTime(*args))
    __swig_destroy__ = _quickfix.delete_HopSendingTime

# Register HopSendingTime in _quickfix:
_quickfix.HopSendingTime_swigregister(HopSendingTime)

class HopRefID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.HopRefID_swiginit(self, _quickfix.new_HopRefID(*args))
    __swig_destroy__ = _quickfix.delete_HopRefID

# Register HopRefID in _quickfix:
_quickfix.HopRefID_swigregister(HopRefID)

class NextExpectedMsgSeqNum(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NextExpectedMsgSeqNum_swiginit(self, _quickfix.new_NextExpectedMsgSeqNum(*args))
    __swig_destroy__ = _quickfix.delete_NextExpectedMsgSeqNum

# Register NextExpectedMsgSeqNum in _quickfix:
_quickfix.NextExpectedMsgSeqNum_swigregister(NextExpectedMsgSeqNum)

class ApplVerID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplVerID_swiginit(self, _quickfix.new_ApplVerID(*args))
    __swig_destroy__ = _quickfix.delete_ApplVerID

# Register ApplVerID in _quickfix:
_quickfix.ApplVerID_swigregister(ApplVerID)

class CstmApplVerID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CstmApplVerID_swiginit(self, _quickfix.new_CstmApplVerID(*args))
    __swig_destroy__ = _quickfix.delete_CstmApplVerID

# Register CstmApplVerID in _quickfix:
_quickfix.CstmApplVerID_swigregister(CstmApplVerID)

class RefApplVerID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefApplVerID_swiginit(self, _quickfix.new_RefApplVerID(*args))
    __swig_destroy__ = _quickfix.delete_RefApplVerID

# Register RefApplVerID in _quickfix:
_quickfix.RefApplVerID_swigregister(RefApplVerID)

class RefCstmApplVerID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefCstmApplVerID_swiginit(self, _quickfix.new_RefCstmApplVerID(*args))
    __swig_destroy__ = _quickfix.delete_RefCstmApplVerID

# Register RefCstmApplVerID in _quickfix:
_quickfix.RefCstmApplVerID_swigregister(RefCstmApplVerID)

class DefaultApplVerID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DefaultApplVerID_swiginit(self, _quickfix.new_DefaultApplVerID(*args))
    __swig_destroy__ = _quickfix.delete_DefaultApplVerID

# Register DefaultApplVerID in _quickfix:
_quickfix.DefaultApplVerID_swigregister(DefaultApplVerID)

class Account(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Account_swiginit(self, _quickfix.new_Account(*args))
    __swig_destroy__ = _quickfix.delete_Account

# Register Account in _quickfix:
_quickfix.Account_swigregister(Account)

class AdvId(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AdvId_swiginit(self, _quickfix.new_AdvId(*args))
    __swig_destroy__ = _quickfix.delete_AdvId

# Register AdvId in _quickfix:
_quickfix.AdvId_swigregister(AdvId)

class AdvRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AdvRefID_swiginit(self, _quickfix.new_AdvRefID(*args))
    __swig_destroy__ = _quickfix.delete_AdvRefID

# Register AdvRefID in _quickfix:
_quickfix.AdvRefID_swigregister(AdvRefID)

class AdvSide(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AdvSide_swiginit(self, _quickfix.new_AdvSide(*args))
    __swig_destroy__ = _quickfix.delete_AdvSide

# Register AdvSide in _quickfix:
_quickfix.AdvSide_swigregister(AdvSide)

class AdvTransType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AdvTransType_swiginit(self, _quickfix.new_AdvTransType(*args))
    __swig_destroy__ = _quickfix.delete_AdvTransType

# Register AdvTransType in _quickfix:
_quickfix.AdvTransType_swigregister(AdvTransType)

class AvgPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AvgPx_swiginit(self, _quickfix.new_AvgPx(*args))
    __swig_destroy__ = _quickfix.delete_AvgPx

# Register AvgPx in _quickfix:
_quickfix.AvgPx_swigregister(AvgPx)

class ClOrdID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ClOrdID_swiginit(self, _quickfix.new_ClOrdID(*args))
    __swig_destroy__ = _quickfix.delete_ClOrdID

# Register ClOrdID in _quickfix:
_quickfix.ClOrdID_swigregister(ClOrdID)

class Commission(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Commission_swiginit(self, _quickfix.new_Commission(*args))
    __swig_destroy__ = _quickfix.delete_Commission

# Register Commission in _quickfix:
_quickfix.Commission_swigregister(Commission)

class CommType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CommType_swiginit(self, _quickfix.new_CommType(*args))
    __swig_destroy__ = _quickfix.delete_CommType

# Register CommType in _quickfix:
_quickfix.CommType_swigregister(CommType)

class CumQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CumQty_swiginit(self, _quickfix.new_CumQty(*args))
    __swig_destroy__ = _quickfix.delete_CumQty

# Register CumQty in _quickfix:
_quickfix.CumQty_swigregister(CumQty)

class Currency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Currency_swiginit(self, _quickfix.new_Currency(*args))
    __swig_destroy__ = _quickfix.delete_Currency

# Register Currency in _quickfix:
_quickfix.Currency_swigregister(Currency)

class ExecID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecID_swiginit(self, _quickfix.new_ExecID(*args))
    __swig_destroy__ = _quickfix.delete_ExecID

# Register ExecID in _quickfix:
_quickfix.ExecID_swigregister(ExecID)

class ExecInst(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecInst_swiginit(self, _quickfix.new_ExecInst(*args))
    __swig_destroy__ = _quickfix.delete_ExecInst

# Register ExecInst in _quickfix:
_quickfix.ExecInst_swigregister(ExecInst)

class ExecRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecRefID_swiginit(self, _quickfix.new_ExecRefID(*args))
    __swig_destroy__ = _quickfix.delete_ExecRefID

# Register ExecRefID in _quickfix:
_quickfix.ExecRefID_swigregister(ExecRefID)

class ExecTransType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecTransType_swiginit(self, _quickfix.new_ExecTransType(*args))
    __swig_destroy__ = _quickfix.delete_ExecTransType

# Register ExecTransType in _quickfix:
_quickfix.ExecTransType_swigregister(ExecTransType)

class HandlInst(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.HandlInst_swiginit(self, _quickfix.new_HandlInst(*args))
    __swig_destroy__ = _quickfix.delete_HandlInst

# Register HandlInst in _quickfix:
_quickfix.HandlInst_swigregister(HandlInst)

class IDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IDSource_swiginit(self, _quickfix.new_IDSource(*args))
    __swig_destroy__ = _quickfix.delete_IDSource

# Register IDSource in _quickfix:
_quickfix.IDSource_swigregister(IDSource)

class IOIid(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOIid_swiginit(self, _quickfix.new_IOIid(*args))
    __swig_destroy__ = _quickfix.delete_IOIid

# Register IOIid in _quickfix:
_quickfix.IOIid_swigregister(IOIid)

class IOIOthSvc(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOIOthSvc_swiginit(self, _quickfix.new_IOIOthSvc(*args))
    __swig_destroy__ = _quickfix.delete_IOIOthSvc

# Register IOIOthSvc in _quickfix:
_quickfix.IOIOthSvc_swigregister(IOIOthSvc)

class IOIQltyInd(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOIQltyInd_swiginit(self, _quickfix.new_IOIQltyInd(*args))
    __swig_destroy__ = _quickfix.delete_IOIQltyInd

# Register IOIQltyInd in _quickfix:
_quickfix.IOIQltyInd_swigregister(IOIQltyInd)

class IOIRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOIRefID_swiginit(self, _quickfix.new_IOIRefID(*args))
    __swig_destroy__ = _quickfix.delete_IOIRefID

# Register IOIRefID in _quickfix:
_quickfix.IOIRefID_swigregister(IOIRefID)

class IOIShares(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOIShares_swiginit(self, _quickfix.new_IOIShares(*args))
    __swig_destroy__ = _quickfix.delete_IOIShares

# Register IOIShares in _quickfix:
_quickfix.IOIShares_swigregister(IOIShares)

class IOITransType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOITransType_swiginit(self, _quickfix.new_IOITransType(*args))
    __swig_destroy__ = _quickfix.delete_IOITransType

# Register IOITransType in _quickfix:
_quickfix.IOITransType_swigregister(IOITransType)

class LastCapacity(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastCapacity_swiginit(self, _quickfix.new_LastCapacity(*args))
    __swig_destroy__ = _quickfix.delete_LastCapacity

# Register LastCapacity in _quickfix:
_quickfix.LastCapacity_swigregister(LastCapacity)

class LastMkt(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastMkt_swiginit(self, _quickfix.new_LastMkt(*args))
    __swig_destroy__ = _quickfix.delete_LastMkt

# Register LastMkt in _quickfix:
_quickfix.LastMkt_swigregister(LastMkt)

class LastPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastPx_swiginit(self, _quickfix.new_LastPx(*args))
    __swig_destroy__ = _quickfix.delete_LastPx

# Register LastPx in _quickfix:
_quickfix.LastPx_swigregister(LastPx)

class LastShares(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastShares_swiginit(self, _quickfix.new_LastShares(*args))
    __swig_destroy__ = _quickfix.delete_LastShares

# Register LastShares in _quickfix:
_quickfix.LastShares_swigregister(LastShares)

class LinesOfText(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LinesOfText_swiginit(self, _quickfix.new_LinesOfText(*args))
    __swig_destroy__ = _quickfix.delete_LinesOfText

# Register LinesOfText in _quickfix:
_quickfix.LinesOfText_swigregister(LinesOfText)

class OrderID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderID_swiginit(self, _quickfix.new_OrderID(*args))
    __swig_destroy__ = _quickfix.delete_OrderID

# Register OrderID in _quickfix:
_quickfix.OrderID_swigregister(OrderID)

class OrderQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderQty_swiginit(self, _quickfix.new_OrderQty(*args))
    __swig_destroy__ = _quickfix.delete_OrderQty

# Register OrderQty in _quickfix:
_quickfix.OrderQty_swigregister(OrderQty)

class OrdStatus(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrdStatus_swiginit(self, _quickfix.new_OrdStatus(*args))
    __swig_destroy__ = _quickfix.delete_OrdStatus

# Register OrdStatus in _quickfix:
_quickfix.OrdStatus_swigregister(OrdStatus)

class OrdType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrdType_swiginit(self, _quickfix.new_OrdType(*args))
    __swig_destroy__ = _quickfix.delete_OrdType

# Register OrdType in _quickfix:
_quickfix.OrdType_swigregister(OrdType)

class OrigClOrdID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigClOrdID_swiginit(self, _quickfix.new_OrigClOrdID(*args))
    __swig_destroy__ = _quickfix.delete_OrigClOrdID

# Register OrigClOrdID in _quickfix:
_quickfix.OrigClOrdID_swigregister(OrigClOrdID)

class OrigTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigTime_swiginit(self, _quickfix.new_OrigTime(*args))
    __swig_destroy__ = _quickfix.delete_OrigTime

# Register OrigTime in _quickfix:
_quickfix.OrigTime_swigregister(OrigTime)

class Price(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Price_swiginit(self, _quickfix.new_Price(*args))
    __swig_destroy__ = _quickfix.delete_Price

# Register Price in _quickfix:
_quickfix.Price_swigregister(Price)

class RelatdSym(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RelatdSym_swiginit(self, _quickfix.new_RelatdSym(*args))
    __swig_destroy__ = _quickfix.delete_RelatdSym

# Register RelatdSym in _quickfix:
_quickfix.RelatdSym_swigregister(RelatdSym)

class Rule80A(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Rule80A_swiginit(self, _quickfix.new_Rule80A(*args))
    __swig_destroy__ = _quickfix.delete_Rule80A

# Register Rule80A in _quickfix:
_quickfix.Rule80A_swigregister(Rule80A)

class SecurityID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityID_swiginit(self, _quickfix.new_SecurityID(*args))
    __swig_destroy__ = _quickfix.delete_SecurityID

# Register SecurityID in _quickfix:
_quickfix.SecurityID_swigregister(SecurityID)

class Shares(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Shares_swiginit(self, _quickfix.new_Shares(*args))
    __swig_destroy__ = _quickfix.delete_Shares

# Register Shares in _quickfix:
_quickfix.Shares_swigregister(Shares)

class Side(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Side_swiginit(self, _quickfix.new_Side(*args))
    __swig_destroy__ = _quickfix.delete_Side

# Register Side in _quickfix:
_quickfix.Side_swigregister(Side)

class Symbol(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Symbol_swiginit(self, _quickfix.new_Symbol(*args))
    __swig_destroy__ = _quickfix.delete_Symbol

# Register Symbol in _quickfix:
_quickfix.Symbol_swigregister(Symbol)

class TimeInForce(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TimeInForce_swiginit(self, _quickfix.new_TimeInForce(*args))
    __swig_destroy__ = _quickfix.delete_TimeInForce

# Register TimeInForce in _quickfix:
_quickfix.TimeInForce_swigregister(TimeInForce)

class TransactTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TransactTime_swiginit(self, _quickfix.new_TransactTime(*args))
    __swig_destroy__ = _quickfix.delete_TransactTime

# Register TransactTime in _quickfix:
_quickfix.TransactTime_swigregister(TransactTime)

class Urgency(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Urgency_swiginit(self, _quickfix.new_Urgency(*args))
    __swig_destroy__ = _quickfix.delete_Urgency

# Register Urgency in _quickfix:
_quickfix.Urgency_swigregister(Urgency)

class ValidUntilTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ValidUntilTime_swiginit(self, _quickfix.new_ValidUntilTime(*args))
    __swig_destroy__ = _quickfix.delete_ValidUntilTime

# Register ValidUntilTime in _quickfix:
_quickfix.ValidUntilTime_swigregister(ValidUntilTime)

class SettlmntTyp(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlmntTyp_swiginit(self, _quickfix.new_SettlmntTyp(*args))
    __swig_destroy__ = _quickfix.delete_SettlmntTyp

# Register SettlmntTyp in _quickfix:
_quickfix.SettlmntTyp_swigregister(SettlmntTyp)

class FutSettDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FutSettDate_swiginit(self, _quickfix.new_FutSettDate(*args))
    __swig_destroy__ = _quickfix.delete_FutSettDate

# Register FutSettDate in _quickfix:
_quickfix.FutSettDate_swigregister(FutSettDate)

class SymbolSfx(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SymbolSfx_swiginit(self, _quickfix.new_SymbolSfx(*args))
    __swig_destroy__ = _quickfix.delete_SymbolSfx

# Register SymbolSfx in _quickfix:
_quickfix.SymbolSfx_swigregister(SymbolSfx)

class ListID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListID_swiginit(self, _quickfix.new_ListID(*args))
    __swig_destroy__ = _quickfix.delete_ListID

# Register ListID in _quickfix:
_quickfix.ListID_swigregister(ListID)

class ListSeqNo(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListSeqNo_swiginit(self, _quickfix.new_ListSeqNo(*args))
    __swig_destroy__ = _quickfix.delete_ListSeqNo

# Register ListSeqNo in _quickfix:
_quickfix.ListSeqNo_swigregister(ListSeqNo)

class ListNoOrds(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListNoOrds_swiginit(self, _quickfix.new_ListNoOrds(*args))
    __swig_destroy__ = _quickfix.delete_ListNoOrds

# Register ListNoOrds in _quickfix:
_quickfix.ListNoOrds_swigregister(ListNoOrds)

class ListExecInst(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListExecInst_swiginit(self, _quickfix.new_ListExecInst(*args))
    __swig_destroy__ = _quickfix.delete_ListExecInst

# Register ListExecInst in _quickfix:
_quickfix.ListExecInst_swigregister(ListExecInst)

class AllocID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocID_swiginit(self, _quickfix.new_AllocID(*args))
    __swig_destroy__ = _quickfix.delete_AllocID

# Register AllocID in _quickfix:
_quickfix.AllocID_swigregister(AllocID)

class AllocTransType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocTransType_swiginit(self, _quickfix.new_AllocTransType(*args))
    __swig_destroy__ = _quickfix.delete_AllocTransType

# Register AllocTransType in _quickfix:
_quickfix.AllocTransType_swigregister(AllocTransType)

class RefAllocID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefAllocID_swiginit(self, _quickfix.new_RefAllocID(*args))
    __swig_destroy__ = _quickfix.delete_RefAllocID

# Register RefAllocID in _quickfix:
_quickfix.RefAllocID_swigregister(RefAllocID)

class NoOrders(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoOrders_swiginit(self, _quickfix.new_NoOrders(*args))
    __swig_destroy__ = _quickfix.delete_NoOrders

# Register NoOrders in _quickfix:
_quickfix.NoOrders_swigregister(NoOrders)

class AvgPrxPrecision(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AvgPrxPrecision_swiginit(self, _quickfix.new_AvgPrxPrecision(*args))
    __swig_destroy__ = _quickfix.delete_AvgPrxPrecision

# Register AvgPrxPrecision in _quickfix:
_quickfix.AvgPrxPrecision_swigregister(AvgPrxPrecision)

class TradeDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeDate_swiginit(self, _quickfix.new_TradeDate(*args))
    __swig_destroy__ = _quickfix.delete_TradeDate

# Register TradeDate in _quickfix:
_quickfix.TradeDate_swigregister(TradeDate)

class ExecBroker(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecBroker_swiginit(self, _quickfix.new_ExecBroker(*args))
    __swig_destroy__ = _quickfix.delete_ExecBroker

# Register ExecBroker in _quickfix:
_quickfix.ExecBroker_swigregister(ExecBroker)

class OpenClose(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OpenClose_swiginit(self, _quickfix.new_OpenClose(*args))
    __swig_destroy__ = _quickfix.delete_OpenClose

# Register OpenClose in _quickfix:
_quickfix.OpenClose_swigregister(OpenClose)

class NoAllocs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoAllocs_swiginit(self, _quickfix.new_NoAllocs(*args))
    __swig_destroy__ = _quickfix.delete_NoAllocs

# Register NoAllocs in _quickfix:
_quickfix.NoAllocs_swigregister(NoAllocs)

class AllocAccount(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocAccount_swiginit(self, _quickfix.new_AllocAccount(*args))
    __swig_destroy__ = _quickfix.delete_AllocAccount

# Register AllocAccount in _quickfix:
_quickfix.AllocAccount_swigregister(AllocAccount)

class AllocShares(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocShares_swiginit(self, _quickfix.new_AllocShares(*args))
    __swig_destroy__ = _quickfix.delete_AllocShares

# Register AllocShares in _quickfix:
_quickfix.AllocShares_swigregister(AllocShares)

class ProcessCode(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ProcessCode_swiginit(self, _quickfix.new_ProcessCode(*args))
    __swig_destroy__ = _quickfix.delete_ProcessCode

# Register ProcessCode in _quickfix:
_quickfix.ProcessCode_swigregister(ProcessCode)

class NoRpts(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoRpts_swiginit(self, _quickfix.new_NoRpts(*args))
    __swig_destroy__ = _quickfix.delete_NoRpts

# Register NoRpts in _quickfix:
_quickfix.NoRpts_swigregister(NoRpts)

class RptSeq(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RptSeq_swiginit(self, _quickfix.new_RptSeq(*args))
    __swig_destroy__ = _quickfix.delete_RptSeq

# Register RptSeq in _quickfix:
_quickfix.RptSeq_swigregister(RptSeq)

class CxlQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CxlQty_swiginit(self, _quickfix.new_CxlQty(*args))
    __swig_destroy__ = _quickfix.delete_CxlQty

# Register CxlQty in _quickfix:
_quickfix.CxlQty_swigregister(CxlQty)

class NoDlvyInst(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoDlvyInst_swiginit(self, _quickfix.new_NoDlvyInst(*args))
    __swig_destroy__ = _quickfix.delete_NoDlvyInst

# Register NoDlvyInst in _quickfix:
_quickfix.NoDlvyInst_swigregister(NoDlvyInst)

class DlvyInst(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DlvyInst_swiginit(self, _quickfix.new_DlvyInst(*args))
    __swig_destroy__ = _quickfix.delete_DlvyInst

# Register DlvyInst in _quickfix:
_quickfix.DlvyInst_swigregister(DlvyInst)

class AllocStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocStatus_swiginit(self, _quickfix.new_AllocStatus(*args))
    __swig_destroy__ = _quickfix.delete_AllocStatus

# Register AllocStatus in _quickfix:
_quickfix.AllocStatus_swigregister(AllocStatus)

class AllocRejCode(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocRejCode_swiginit(self, _quickfix.new_AllocRejCode(*args))
    __swig_destroy__ = _quickfix.delete_AllocRejCode

# Register AllocRejCode in _quickfix:
_quickfix.AllocRejCode_swigregister(AllocRejCode)

class BrokerOfCredit(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BrokerOfCredit_swiginit(self, _quickfix.new_BrokerOfCredit(*args))
    __swig_destroy__ = _quickfix.delete_BrokerOfCredit

# Register BrokerOfCredit in _quickfix:
_quickfix.BrokerOfCredit_swigregister(BrokerOfCredit)

class EmailType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EmailType_swiginit(self, _quickfix.new_EmailType(*args))
    __swig_destroy__ = _quickfix.delete_EmailType

# Register EmailType in _quickfix:
_quickfix.EmailType_swigregister(EmailType)

class StopPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StopPx_swiginit(self, _quickfix.new_StopPx(*args))
    __swig_destroy__ = _quickfix.delete_StopPx

# Register StopPx in _quickfix:
_quickfix.StopPx_swigregister(StopPx)

class ExDestination(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExDestination_swiginit(self, _quickfix.new_ExDestination(*args))
    __swig_destroy__ = _quickfix.delete_ExDestination

# Register ExDestination in _quickfix:
_quickfix.ExDestination_swigregister(ExDestination)

class CxlRejReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CxlRejReason_swiginit(self, _quickfix.new_CxlRejReason(*args))
    __swig_destroy__ = _quickfix.delete_CxlRejReason

# Register CxlRejReason in _quickfix:
_quickfix.CxlRejReason_swigregister(CxlRejReason)

class OrdRejReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrdRejReason_swiginit(self, _quickfix.new_OrdRejReason(*args))
    __swig_destroy__ = _quickfix.delete_OrdRejReason

# Register OrdRejReason in _quickfix:
_quickfix.OrdRejReason_swigregister(OrdRejReason)

class IOIQualifier(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOIQualifier_swiginit(self, _quickfix.new_IOIQualifier(*args))
    __swig_destroy__ = _quickfix.delete_IOIQualifier

# Register IOIQualifier in _quickfix:
_quickfix.IOIQualifier_swigregister(IOIQualifier)

class WaveNo(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.WaveNo_swiginit(self, _quickfix.new_WaveNo(*args))
    __swig_destroy__ = _quickfix.delete_WaveNo

# Register WaveNo in _quickfix:
_quickfix.WaveNo_swigregister(WaveNo)

class Issuer(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Issuer_swiginit(self, _quickfix.new_Issuer(*args))
    __swig_destroy__ = _quickfix.delete_Issuer

# Register Issuer in _quickfix:
_quickfix.Issuer_swigregister(Issuer)

class SecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityDesc_swiginit(self, _quickfix.new_SecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_SecurityDesc

# Register SecurityDesc in _quickfix:
_quickfix.SecurityDesc_swigregister(SecurityDesc)

class ClientID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ClientID_swiginit(self, _quickfix.new_ClientID(*args))
    __swig_destroy__ = _quickfix.delete_ClientID

# Register ClientID in _quickfix:
_quickfix.ClientID_swigregister(ClientID)

class MinQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MinQty_swiginit(self, _quickfix.new_MinQty(*args))
    __swig_destroy__ = _quickfix.delete_MinQty

# Register MinQty in _quickfix:
_quickfix.MinQty_swigregister(MinQty)

class MaxFloor(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaxFloor_swiginit(self, _quickfix.new_MaxFloor(*args))
    __swig_destroy__ = _quickfix.delete_MaxFloor

# Register MaxFloor in _quickfix:
_quickfix.MaxFloor_swigregister(MaxFloor)

class ReportToExch(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ReportToExch_swiginit(self, _quickfix.new_ReportToExch(*args))
    __swig_destroy__ = _quickfix.delete_ReportToExch

# Register ReportToExch in _quickfix:
_quickfix.ReportToExch_swigregister(ReportToExch)

class LocateReqd(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LocateReqd_swiginit(self, _quickfix.new_LocateReqd(*args))
    __swig_destroy__ = _quickfix.delete_LocateReqd

# Register LocateReqd in _quickfix:
_quickfix.LocateReqd_swigregister(LocateReqd)

class QuoteID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteID_swiginit(self, _quickfix.new_QuoteID(*args))
    __swig_destroy__ = _quickfix.delete_QuoteID

# Register QuoteID in _quickfix:
_quickfix.QuoteID_swigregister(QuoteID)

class NetMoney(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NetMoney_swiginit(self, _quickfix.new_NetMoney(*args))
    __swig_destroy__ = _quickfix.delete_NetMoney

# Register NetMoney in _quickfix:
_quickfix.NetMoney_swigregister(NetMoney)

class SettlCurrAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlCurrAmt_swiginit(self, _quickfix.new_SettlCurrAmt(*args))
    __swig_destroy__ = _quickfix.delete_SettlCurrAmt

# Register SettlCurrAmt in _quickfix:
_quickfix.SettlCurrAmt_swigregister(SettlCurrAmt)

class SettlCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlCurrency_swiginit(self, _quickfix.new_SettlCurrency(*args))
    __swig_destroy__ = _quickfix.delete_SettlCurrency

# Register SettlCurrency in _quickfix:
_quickfix.SettlCurrency_swigregister(SettlCurrency)

class ForexReq(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ForexReq_swiginit(self, _quickfix.new_ForexReq(*args))
    __swig_destroy__ = _quickfix.delete_ForexReq

# Register ForexReq in _quickfix:
_quickfix.ForexReq_swigregister(ForexReq)

class NoExecs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoExecs_swiginit(self, _quickfix.new_NoExecs(*args))
    __swig_destroy__ = _quickfix.delete_NoExecs

# Register NoExecs in _quickfix:
_quickfix.NoExecs_swigregister(NoExecs)

class CxlType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CxlType_swiginit(self, _quickfix.new_CxlType(*args))
    __swig_destroy__ = _quickfix.delete_CxlType

# Register CxlType in _quickfix:
_quickfix.CxlType_swigregister(CxlType)

class ExpireTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExpireTime_swiginit(self, _quickfix.new_ExpireTime(*args))
    __swig_destroy__ = _quickfix.delete_ExpireTime

# Register ExpireTime in _quickfix:
_quickfix.ExpireTime_swigregister(ExpireTime)

class DKReason(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DKReason_swiginit(self, _quickfix.new_DKReason(*args))
    __swig_destroy__ = _quickfix.delete_DKReason

# Register DKReason in _quickfix:
_quickfix.DKReason_swigregister(DKReason)

class IOINaturalFlag(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOINaturalFlag_swiginit(self, _quickfix.new_IOINaturalFlag(*args))
    __swig_destroy__ = _quickfix.delete_IOINaturalFlag

# Register IOINaturalFlag in _quickfix:
_quickfix.IOINaturalFlag_swigregister(IOINaturalFlag)

class QuoteReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteReqID_swiginit(self, _quickfix.new_QuoteReqID(*args))
    __swig_destroy__ = _quickfix.delete_QuoteReqID

# Register QuoteReqID in _quickfix:
_quickfix.QuoteReqID_swigregister(QuoteReqID)

class BidPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidPx_swiginit(self, _quickfix.new_BidPx(*args))
    __swig_destroy__ = _quickfix.delete_BidPx

# Register BidPx in _quickfix:
_quickfix.BidPx_swigregister(BidPx)

class OfferPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OfferPx_swiginit(self, _quickfix.new_OfferPx(*args))
    __swig_destroy__ = _quickfix.delete_OfferPx

# Register OfferPx in _quickfix:
_quickfix.OfferPx_swigregister(OfferPx)

class BidSize(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidSize_swiginit(self, _quickfix.new_BidSize(*args))
    __swig_destroy__ = _quickfix.delete_BidSize

# Register BidSize in _quickfix:
_quickfix.BidSize_swigregister(BidSize)

class OfferSize(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OfferSize_swiginit(self, _quickfix.new_OfferSize(*args))
    __swig_destroy__ = _quickfix.delete_OfferSize

# Register OfferSize in _quickfix:
_quickfix.OfferSize_swigregister(OfferSize)

class NoMiscFees(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoMiscFees_swiginit(self, _quickfix.new_NoMiscFees(*args))
    __swig_destroy__ = _quickfix.delete_NoMiscFees

# Register NoMiscFees in _quickfix:
_quickfix.NoMiscFees_swigregister(NoMiscFees)

class MiscFeeAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MiscFeeAmt_swiginit(self, _quickfix.new_MiscFeeAmt(*args))
    __swig_destroy__ = _quickfix.delete_MiscFeeAmt

# Register MiscFeeAmt in _quickfix:
_quickfix.MiscFeeAmt_swigregister(MiscFeeAmt)

class MiscFeeCurr(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MiscFeeCurr_swiginit(self, _quickfix.new_MiscFeeCurr(*args))
    __swig_destroy__ = _quickfix.delete_MiscFeeCurr

# Register MiscFeeCurr in _quickfix:
_quickfix.MiscFeeCurr_swigregister(MiscFeeCurr)

class MiscFeeType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MiscFeeType_swiginit(self, _quickfix.new_MiscFeeType(*args))
    __swig_destroy__ = _quickfix.delete_MiscFeeType

# Register MiscFeeType in _quickfix:
_quickfix.MiscFeeType_swigregister(MiscFeeType)

class PrevClosePx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PrevClosePx_swiginit(self, _quickfix.new_PrevClosePx(*args))
    __swig_destroy__ = _quickfix.delete_PrevClosePx

# Register PrevClosePx in _quickfix:
_quickfix.PrevClosePx_swigregister(PrevClosePx)

class NoRelatedSym(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoRelatedSym_swiginit(self, _quickfix.new_NoRelatedSym(*args))
    __swig_destroy__ = _quickfix.delete_NoRelatedSym

# Register NoRelatedSym in _quickfix:
_quickfix.NoRelatedSym_swigregister(NoRelatedSym)

class Subject(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Subject_swiginit(self, _quickfix.new_Subject(*args))
    __swig_destroy__ = _quickfix.delete_Subject

# Register Subject in _quickfix:
_quickfix.Subject_swigregister(Subject)

class Headline(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Headline_swiginit(self, _quickfix.new_Headline(*args))
    __swig_destroy__ = _quickfix.delete_Headline

# Register Headline in _quickfix:
_quickfix.Headline_swigregister(Headline)

class URLLink(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.URLLink_swiginit(self, _quickfix.new_URLLink(*args))
    __swig_destroy__ = _quickfix.delete_URLLink

# Register URLLink in _quickfix:
_quickfix.URLLink_swigregister(URLLink)

class ExecType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecType_swiginit(self, _quickfix.new_ExecType(*args))
    __swig_destroy__ = _quickfix.delete_ExecType

# Register ExecType in _quickfix:
_quickfix.ExecType_swigregister(ExecType)

class LeavesQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LeavesQty_swiginit(self, _quickfix.new_LeavesQty(*args))
    __swig_destroy__ = _quickfix.delete_LeavesQty

# Register LeavesQty in _quickfix:
_quickfix.LeavesQty_swigregister(LeavesQty)

class CashOrderQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashOrderQty_swiginit(self, _quickfix.new_CashOrderQty(*args))
    __swig_destroy__ = _quickfix.delete_CashOrderQty

# Register CashOrderQty in _quickfix:
_quickfix.CashOrderQty_swigregister(CashOrderQty)

class AllocAvgPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocAvgPx_swiginit(self, _quickfix.new_AllocAvgPx(*args))
    __swig_destroy__ = _quickfix.delete_AllocAvgPx

# Register AllocAvgPx in _quickfix:
_quickfix.AllocAvgPx_swigregister(AllocAvgPx)

class AllocNetMoney(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocNetMoney_swiginit(self, _quickfix.new_AllocNetMoney(*args))
    __swig_destroy__ = _quickfix.delete_AllocNetMoney

# Register AllocNetMoney in _quickfix:
_quickfix.AllocNetMoney_swigregister(AllocNetMoney)

class SettlCurrFxRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlCurrFxRate_swiginit(self, _quickfix.new_SettlCurrFxRate(*args))
    __swig_destroy__ = _quickfix.delete_SettlCurrFxRate

# Register SettlCurrFxRate in _quickfix:
_quickfix.SettlCurrFxRate_swigregister(SettlCurrFxRate)

class SettlCurrFxRateCalc(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlCurrFxRateCalc_swiginit(self, _quickfix.new_SettlCurrFxRateCalc(*args))
    __swig_destroy__ = _quickfix.delete_SettlCurrFxRateCalc

# Register SettlCurrFxRateCalc in _quickfix:
_quickfix.SettlCurrFxRateCalc_swigregister(SettlCurrFxRateCalc)

class NumDaysInterest(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NumDaysInterest_swiginit(self, _quickfix.new_NumDaysInterest(*args))
    __swig_destroy__ = _quickfix.delete_NumDaysInterest

# Register NumDaysInterest in _quickfix:
_quickfix.NumDaysInterest_swigregister(NumDaysInterest)

class AccruedInterestRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AccruedInterestRate_swiginit(self, _quickfix.new_AccruedInterestRate(*args))
    __swig_destroy__ = _quickfix.delete_AccruedInterestRate

# Register AccruedInterestRate in _quickfix:
_quickfix.AccruedInterestRate_swigregister(AccruedInterestRate)

class AccruedInterestAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AccruedInterestAmt_swiginit(self, _quickfix.new_AccruedInterestAmt(*args))
    __swig_destroy__ = _quickfix.delete_AccruedInterestAmt

# Register AccruedInterestAmt in _quickfix:
_quickfix.AccruedInterestAmt_swigregister(AccruedInterestAmt)

class SettlInstMode(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlInstMode_swiginit(self, _quickfix.new_SettlInstMode(*args))
    __swig_destroy__ = _quickfix.delete_SettlInstMode

# Register SettlInstMode in _quickfix:
_quickfix.SettlInstMode_swigregister(SettlInstMode)

class AllocText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocText_swiginit(self, _quickfix.new_AllocText(*args))
    __swig_destroy__ = _quickfix.delete_AllocText

# Register AllocText in _quickfix:
_quickfix.AllocText_swigregister(AllocText)

class SettlInstID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlInstID_swiginit(self, _quickfix.new_SettlInstID(*args))
    __swig_destroy__ = _quickfix.delete_SettlInstID

# Register SettlInstID in _quickfix:
_quickfix.SettlInstID_swigregister(SettlInstID)

class SettlInstTransType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlInstTransType_swiginit(self, _quickfix.new_SettlInstTransType(*args))
    __swig_destroy__ = _quickfix.delete_SettlInstTransType

# Register SettlInstTransType in _quickfix:
_quickfix.SettlInstTransType_swigregister(SettlInstTransType)

class EmailThreadID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EmailThreadID_swiginit(self, _quickfix.new_EmailThreadID(*args))
    __swig_destroy__ = _quickfix.delete_EmailThreadID

# Register EmailThreadID in _quickfix:
_quickfix.EmailThreadID_swigregister(EmailThreadID)

class SettlInstSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlInstSource_swiginit(self, _quickfix.new_SettlInstSource(*args))
    __swig_destroy__ = _quickfix.delete_SettlInstSource

# Register SettlInstSource in _quickfix:
_quickfix.SettlInstSource_swigregister(SettlInstSource)

class SettlLocation(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlLocation_swiginit(self, _quickfix.new_SettlLocation(*args))
    __swig_destroy__ = _quickfix.delete_SettlLocation

# Register SettlLocation in _quickfix:
_quickfix.SettlLocation_swigregister(SettlLocation)

class SecurityType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityType_swiginit(self, _quickfix.new_SecurityType(*args))
    __swig_destroy__ = _quickfix.delete_SecurityType

# Register SecurityType in _quickfix:
_quickfix.SecurityType_swigregister(SecurityType)

class EffectiveTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EffectiveTime_swiginit(self, _quickfix.new_EffectiveTime(*args))
    __swig_destroy__ = _quickfix.delete_EffectiveTime

# Register EffectiveTime in _quickfix:
_quickfix.EffectiveTime_swigregister(EffectiveTime)

class StandInstDbType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StandInstDbType_swiginit(self, _quickfix.new_StandInstDbType(*args))
    __swig_destroy__ = _quickfix.delete_StandInstDbType

# Register StandInstDbType in _quickfix:
_quickfix.StandInstDbType_swigregister(StandInstDbType)

class StandInstDbName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StandInstDbName_swiginit(self, _quickfix.new_StandInstDbName(*args))
    __swig_destroy__ = _quickfix.delete_StandInstDbName

# Register StandInstDbName in _quickfix:
_quickfix.StandInstDbName_swigregister(StandInstDbName)

class StandInstDbID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StandInstDbID_swiginit(self, _quickfix.new_StandInstDbID(*args))
    __swig_destroy__ = _quickfix.delete_StandInstDbID

# Register StandInstDbID in _quickfix:
_quickfix.StandInstDbID_swigregister(StandInstDbID)

class SettlDeliveryType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlDeliveryType_swiginit(self, _quickfix.new_SettlDeliveryType(*args))
    __swig_destroy__ = _quickfix.delete_SettlDeliveryType

# Register SettlDeliveryType in _quickfix:
_quickfix.SettlDeliveryType_swigregister(SettlDeliveryType)

class SettlDepositoryCode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlDepositoryCode_swiginit(self, _quickfix.new_SettlDepositoryCode(*args))
    __swig_destroy__ = _quickfix.delete_SettlDepositoryCode

# Register SettlDepositoryCode in _quickfix:
_quickfix.SettlDepositoryCode_swigregister(SettlDepositoryCode)

class SettlBrkrCode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlBrkrCode_swiginit(self, _quickfix.new_SettlBrkrCode(*args))
    __swig_destroy__ = _quickfix.delete_SettlBrkrCode

# Register SettlBrkrCode in _quickfix:
_quickfix.SettlBrkrCode_swigregister(SettlBrkrCode)

class SettlInstCode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlInstCode_swiginit(self, _quickfix.new_SettlInstCode(*args))
    __swig_destroy__ = _quickfix.delete_SettlInstCode

# Register SettlInstCode in _quickfix:
_quickfix.SettlInstCode_swigregister(SettlInstCode)

class SecuritySettlAgentName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecuritySettlAgentName_swiginit(self, _quickfix.new_SecuritySettlAgentName(*args))
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentName

# Register SecuritySettlAgentName in _quickfix:
_quickfix.SecuritySettlAgentName_swigregister(SecuritySettlAgentName)

class SecuritySettlAgentCode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecuritySettlAgentCode_swiginit(self, _quickfix.new_SecuritySettlAgentCode(*args))
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentCode

# Register SecuritySettlAgentCode in _quickfix:
_quickfix.SecuritySettlAgentCode_swigregister(SecuritySettlAgentCode)

class SecuritySettlAgentAcctNum(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecuritySettlAgentAcctNum_swiginit(self, _quickfix.new_SecuritySettlAgentAcctNum(*args))
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentAcctNum

# Register SecuritySettlAgentAcctNum in _quickfix:
_quickfix.SecuritySettlAgentAcctNum_swigregister(SecuritySettlAgentAcctNum)

class SecuritySettlAgentAcctName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecuritySettlAgentAcctName_swiginit(self, _quickfix.new_SecuritySettlAgentAcctName(*args))
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentAcctName

# Register SecuritySettlAgentAcctName in _quickfix:
_quickfix.SecuritySettlAgentAcctName_swigregister(SecuritySettlAgentAcctName)

class SecuritySettlAgentContactName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecuritySettlAgentContactName_swiginit(self, _quickfix.new_SecuritySettlAgentContactName(*args))
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentContactName

# Register SecuritySettlAgentContactName in _quickfix:
_quickfix.SecuritySettlAgentContactName_swigregister(SecuritySettlAgentContactName)

class SecuritySettlAgentContactPhone(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecuritySettlAgentContactPhone_swiginit(self, _quickfix.new_SecuritySettlAgentContactPhone(*args))
    __swig_destroy__ = _quickfix.delete_SecuritySettlAgentContactPhone

# Register SecuritySettlAgentContactPhone in _quickfix:
_quickfix.SecuritySettlAgentContactPhone_swigregister(SecuritySettlAgentContactPhone)

class CashSettlAgentName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashSettlAgentName_swiginit(self, _quickfix.new_CashSettlAgentName(*args))
    __swig_destroy__ = _quickfix.delete_CashSettlAgentName

# Register CashSettlAgentName in _quickfix:
_quickfix.CashSettlAgentName_swigregister(CashSettlAgentName)

class CashSettlAgentCode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashSettlAgentCode_swiginit(self, _quickfix.new_CashSettlAgentCode(*args))
    __swig_destroy__ = _quickfix.delete_CashSettlAgentCode

# Register CashSettlAgentCode in _quickfix:
_quickfix.CashSettlAgentCode_swigregister(CashSettlAgentCode)

class CashSettlAgentAcctNum(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashSettlAgentAcctNum_swiginit(self, _quickfix.new_CashSettlAgentAcctNum(*args))
    __swig_destroy__ = _quickfix.delete_CashSettlAgentAcctNum

# Register CashSettlAgentAcctNum in _quickfix:
_quickfix.CashSettlAgentAcctNum_swigregister(CashSettlAgentAcctNum)

class CashSettlAgentAcctName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashSettlAgentAcctName_swiginit(self, _quickfix.new_CashSettlAgentAcctName(*args))
    __swig_destroy__ = _quickfix.delete_CashSettlAgentAcctName

# Register CashSettlAgentAcctName in _quickfix:
_quickfix.CashSettlAgentAcctName_swigregister(CashSettlAgentAcctName)

class CashSettlAgentContactName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashSettlAgentContactName_swiginit(self, _quickfix.new_CashSettlAgentContactName(*args))
    __swig_destroy__ = _quickfix.delete_CashSettlAgentContactName

# Register CashSettlAgentContactName in _quickfix:
_quickfix.CashSettlAgentContactName_swigregister(CashSettlAgentContactName)

class CashSettlAgentContactPhone(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashSettlAgentContactPhone_swiginit(self, _quickfix.new_CashSettlAgentContactPhone(*args))
    __swig_destroy__ = _quickfix.delete_CashSettlAgentContactPhone

# Register CashSettlAgentContactPhone in _quickfix:
_quickfix.CashSettlAgentContactPhone_swigregister(CashSettlAgentContactPhone)

class BidSpotRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidSpotRate_swiginit(self, _quickfix.new_BidSpotRate(*args))
    __swig_destroy__ = _quickfix.delete_BidSpotRate

# Register BidSpotRate in _quickfix:
_quickfix.BidSpotRate_swigregister(BidSpotRate)

class BidForwardPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidForwardPoints_swiginit(self, _quickfix.new_BidForwardPoints(*args))
    __swig_destroy__ = _quickfix.delete_BidForwardPoints

# Register BidForwardPoints in _quickfix:
_quickfix.BidForwardPoints_swigregister(BidForwardPoints)

class OfferSpotRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OfferSpotRate_swiginit(self, _quickfix.new_OfferSpotRate(*args))
    __swig_destroy__ = _quickfix.delete_OfferSpotRate

# Register OfferSpotRate in _quickfix:
_quickfix.OfferSpotRate_swigregister(OfferSpotRate)

class OfferForwardPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OfferForwardPoints_swiginit(self, _quickfix.new_OfferForwardPoints(*args))
    __swig_destroy__ = _quickfix.delete_OfferForwardPoints

# Register OfferForwardPoints in _quickfix:
_quickfix.OfferForwardPoints_swigregister(OfferForwardPoints)

class OrderQty2(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderQty2_swiginit(self, _quickfix.new_OrderQty2(*args))
    __swig_destroy__ = _quickfix.delete_OrderQty2

# Register OrderQty2 in _quickfix:
_quickfix.OrderQty2_swigregister(OrderQty2)

class FutSettDate2(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FutSettDate2_swiginit(self, _quickfix.new_FutSettDate2(*args))
    __swig_destroy__ = _quickfix.delete_FutSettDate2

# Register FutSettDate2 in _quickfix:
_quickfix.FutSettDate2_swigregister(FutSettDate2)

class LastSpotRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastSpotRate_swiginit(self, _quickfix.new_LastSpotRate(*args))
    __swig_destroy__ = _quickfix.delete_LastSpotRate

# Register LastSpotRate in _quickfix:
_quickfix.LastSpotRate_swigregister(LastSpotRate)

class LastForwardPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastForwardPoints_swiginit(self, _quickfix.new_LastForwardPoints(*args))
    __swig_destroy__ = _quickfix.delete_LastForwardPoints

# Register LastForwardPoints in _quickfix:
_quickfix.LastForwardPoints_swigregister(LastForwardPoints)

class AllocLinkID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocLinkID_swiginit(self, _quickfix.new_AllocLinkID(*args))
    __swig_destroy__ = _quickfix.delete_AllocLinkID

# Register AllocLinkID in _quickfix:
_quickfix.AllocLinkID_swigregister(AllocLinkID)

class AllocLinkType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocLinkType_swiginit(self, _quickfix.new_AllocLinkType(*args))
    __swig_destroy__ = _quickfix.delete_AllocLinkType

# Register AllocLinkType in _quickfix:
_quickfix.AllocLinkType_swigregister(AllocLinkType)

class SecondaryOrderID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryOrderID_swiginit(self, _quickfix.new_SecondaryOrderID(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryOrderID

# Register SecondaryOrderID in _quickfix:
_quickfix.SecondaryOrderID_swigregister(SecondaryOrderID)

class NoIOIQualifiers(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoIOIQualifiers_swiginit(self, _quickfix.new_NoIOIQualifiers(*args))
    __swig_destroy__ = _quickfix.delete_NoIOIQualifiers

# Register NoIOIQualifiers in _quickfix:
_quickfix.NoIOIQualifiers_swigregister(NoIOIQualifiers)

class MaturityMonthYear(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaturityMonthYear_swiginit(self, _quickfix.new_MaturityMonthYear(*args))
    __swig_destroy__ = _quickfix.delete_MaturityMonthYear

# Register MaturityMonthYear in _quickfix:
_quickfix.MaturityMonthYear_swigregister(MaturityMonthYear)

class PutOrCall(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PutOrCall_swiginit(self, _quickfix.new_PutOrCall(*args))
    __swig_destroy__ = _quickfix.delete_PutOrCall

# Register PutOrCall in _quickfix:
_quickfix.PutOrCall_swigregister(PutOrCall)

class StrikePrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikePrice_swiginit(self, _quickfix.new_StrikePrice(*args))
    __swig_destroy__ = _quickfix.delete_StrikePrice

# Register StrikePrice in _quickfix:
_quickfix.StrikePrice_swigregister(StrikePrice)

class CoveredOrUncovered(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CoveredOrUncovered_swiginit(self, _quickfix.new_CoveredOrUncovered(*args))
    __swig_destroy__ = _quickfix.delete_CoveredOrUncovered

# Register CoveredOrUncovered in _quickfix:
_quickfix.CoveredOrUncovered_swigregister(CoveredOrUncovered)

class CustomerOrFirm(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CustomerOrFirm_swiginit(self, _quickfix.new_CustomerOrFirm(*args))
    __swig_destroy__ = _quickfix.delete_CustomerOrFirm

# Register CustomerOrFirm in _quickfix:
_quickfix.CustomerOrFirm_swigregister(CustomerOrFirm)

class MaturityDay(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaturityDay_swiginit(self, _quickfix.new_MaturityDay(*args))
    __swig_destroy__ = _quickfix.delete_MaturityDay

# Register MaturityDay in _quickfix:
_quickfix.MaturityDay_swigregister(MaturityDay)

class OptAttribute(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OptAttribute_swiginit(self, _quickfix.new_OptAttribute(*args))
    __swig_destroy__ = _quickfix.delete_OptAttribute

# Register OptAttribute in _quickfix:
_quickfix.OptAttribute_swigregister(OptAttribute)

class SecurityExchange(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityExchange_swiginit(self, _quickfix.new_SecurityExchange(*args))
    __swig_destroy__ = _quickfix.delete_SecurityExchange

# Register SecurityExchange in _quickfix:
_quickfix.SecurityExchange_swigregister(SecurityExchange)

class NotifyBrokerOfCredit(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NotifyBrokerOfCredit_swiginit(self, _quickfix.new_NotifyBrokerOfCredit(*args))
    __swig_destroy__ = _quickfix.delete_NotifyBrokerOfCredit

# Register NotifyBrokerOfCredit in _quickfix:
_quickfix.NotifyBrokerOfCredit_swigregister(NotifyBrokerOfCredit)

class AllocHandlInst(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocHandlInst_swiginit(self, _quickfix.new_AllocHandlInst(*args))
    __swig_destroy__ = _quickfix.delete_AllocHandlInst

# Register AllocHandlInst in _quickfix:
_quickfix.AllocHandlInst_swigregister(AllocHandlInst)

class MaxShow(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaxShow_swiginit(self, _quickfix.new_MaxShow(*args))
    __swig_destroy__ = _quickfix.delete_MaxShow

# Register MaxShow in _quickfix:
_quickfix.MaxShow_swigregister(MaxShow)

class PegDifference(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegDifference_swiginit(self, _quickfix.new_PegDifference(*args))
    __swig_destroy__ = _quickfix.delete_PegDifference

# Register PegDifference in _quickfix:
_quickfix.PegDifference_swigregister(PegDifference)

class SendingDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SendingDate_swiginit(self, _quickfix.new_SendingDate(*args))
    __swig_destroy__ = _quickfix.delete_SendingDate

# Register SendingDate in _quickfix:
_quickfix.SendingDate_swigregister(SendingDate)

class TotNoOrders(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNoOrders_swiginit(self, _quickfix.new_TotNoOrders(*args))
    __swig_destroy__ = _quickfix.delete_TotNoOrders

# Register TotNoOrders in _quickfix:
_quickfix.TotNoOrders_swigregister(TotNoOrders)

class SettlInstRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlInstRefID_swiginit(self, _quickfix.new_SettlInstRefID(*args))
    __swig_destroy__ = _quickfix.delete_SettlInstRefID

# Register SettlInstRefID in _quickfix:
_quickfix.SettlInstRefID_swigregister(SettlInstRefID)

class NoRoutingIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoRoutingIDs_swiginit(self, _quickfix.new_NoRoutingIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoRoutingIDs

# Register NoRoutingIDs in _quickfix:
_quickfix.NoRoutingIDs_swigregister(NoRoutingIDs)

class RoutingType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RoutingType_swiginit(self, _quickfix.new_RoutingType(*args))
    __swig_destroy__ = _quickfix.delete_RoutingType

# Register RoutingType in _quickfix:
_quickfix.RoutingType_swigregister(RoutingType)

class RoutingID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RoutingID_swiginit(self, _quickfix.new_RoutingID(*args))
    __swig_destroy__ = _quickfix.delete_RoutingID

# Register RoutingID in _quickfix:
_quickfix.RoutingID_swigregister(RoutingID)

class SpreadToBenchmark(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SpreadToBenchmark_swiginit(self, _quickfix.new_SpreadToBenchmark(*args))
    __swig_destroy__ = _quickfix.delete_SpreadToBenchmark

# Register SpreadToBenchmark in _quickfix:
_quickfix.SpreadToBenchmark_swigregister(SpreadToBenchmark)

class Benchmark(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Benchmark_swiginit(self, _quickfix.new_Benchmark(*args))
    __swig_destroy__ = _quickfix.delete_Benchmark

# Register Benchmark in _quickfix:
_quickfix.Benchmark_swigregister(Benchmark)

class CouponRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CouponRate_swiginit(self, _quickfix.new_CouponRate(*args))
    __swig_destroy__ = _quickfix.delete_CouponRate

# Register CouponRate in _quickfix:
_quickfix.CouponRate_swigregister(CouponRate)

class ContractMultiplier(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContractMultiplier_swiginit(self, _quickfix.new_ContractMultiplier(*args))
    __swig_destroy__ = _quickfix.delete_ContractMultiplier

# Register ContractMultiplier in _quickfix:
_quickfix.ContractMultiplier_swigregister(ContractMultiplier)

class MDReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDReqID_swiginit(self, _quickfix.new_MDReqID(*args))
    __swig_destroy__ = _quickfix.delete_MDReqID

# Register MDReqID in _quickfix:
_quickfix.MDReqID_swigregister(MDReqID)

class SubscriptionRequestType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SubscriptionRequestType_swiginit(self, _quickfix.new_SubscriptionRequestType(*args))
    __swig_destroy__ = _quickfix.delete_SubscriptionRequestType

# Register SubscriptionRequestType in _quickfix:
_quickfix.SubscriptionRequestType_swigregister(SubscriptionRequestType)

class MarketDepth(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MarketDepth_swiginit(self, _quickfix.new_MarketDepth(*args))
    __swig_destroy__ = _quickfix.delete_MarketDepth

# Register MarketDepth in _quickfix:
_quickfix.MarketDepth_swigregister(MarketDepth)

class MDUpdateType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDUpdateType_swiginit(self, _quickfix.new_MDUpdateType(*args))
    __swig_destroy__ = _quickfix.delete_MDUpdateType

# Register MDUpdateType in _quickfix:
_quickfix.MDUpdateType_swigregister(MDUpdateType)

class AggregatedBook(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AggregatedBook_swiginit(self, _quickfix.new_AggregatedBook(*args))
    __swig_destroy__ = _quickfix.delete_AggregatedBook

# Register AggregatedBook in _quickfix:
_quickfix.AggregatedBook_swigregister(AggregatedBook)

class NoMDEntryTypes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoMDEntryTypes_swiginit(self, _quickfix.new_NoMDEntryTypes(*args))
    __swig_destroy__ = _quickfix.delete_NoMDEntryTypes

# Register NoMDEntryTypes in _quickfix:
_quickfix.NoMDEntryTypes_swigregister(NoMDEntryTypes)

class NoMDEntries(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoMDEntries_swiginit(self, _quickfix.new_NoMDEntries(*args))
    __swig_destroy__ = _quickfix.delete_NoMDEntries

# Register NoMDEntries in _quickfix:
_quickfix.NoMDEntries_swigregister(NoMDEntries)

class MDEntryType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntryType_swiginit(self, _quickfix.new_MDEntryType(*args))
    __swig_destroy__ = _quickfix.delete_MDEntryType

# Register MDEntryType in _quickfix:
_quickfix.MDEntryType_swigregister(MDEntryType)

class MDEntryPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntryPx_swiginit(self, _quickfix.new_MDEntryPx(*args))
    __swig_destroy__ = _quickfix.delete_MDEntryPx

# Register MDEntryPx in _quickfix:
_quickfix.MDEntryPx_swigregister(MDEntryPx)

class MDEntrySize(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntrySize_swiginit(self, _quickfix.new_MDEntrySize(*args))
    __swig_destroy__ = _quickfix.delete_MDEntrySize

# Register MDEntrySize in _quickfix:
_quickfix.MDEntrySize_swigregister(MDEntrySize)

class MDEntryDate(UtcDateField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntryDate_swiginit(self, _quickfix.new_MDEntryDate(*args))
    __swig_destroy__ = _quickfix.delete_MDEntryDate

# Register MDEntryDate in _quickfix:
_quickfix.MDEntryDate_swigregister(MDEntryDate)

class MDEntryTime(UtcTimeOnlyField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntryTime_swiginit(self, _quickfix.new_MDEntryTime(*args))
    __swig_destroy__ = _quickfix.delete_MDEntryTime

# Register MDEntryTime in _quickfix:
_quickfix.MDEntryTime_swigregister(MDEntryTime)

class TickDirection(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TickDirection_swiginit(self, _quickfix.new_TickDirection(*args))
    __swig_destroy__ = _quickfix.delete_TickDirection

# Register TickDirection in _quickfix:
_quickfix.TickDirection_swigregister(TickDirection)

class MDMkt(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDMkt_swiginit(self, _quickfix.new_MDMkt(*args))
    __swig_destroy__ = _quickfix.delete_MDMkt

# Register MDMkt in _quickfix:
_quickfix.MDMkt_swigregister(MDMkt)

class QuoteCondition(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteCondition_swiginit(self, _quickfix.new_QuoteCondition(*args))
    __swig_destroy__ = _quickfix.delete_QuoteCondition

# Register QuoteCondition in _quickfix:
_quickfix.QuoteCondition_swigregister(QuoteCondition)

class TradeCondition(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeCondition_swiginit(self, _quickfix.new_TradeCondition(*args))
    __swig_destroy__ = _quickfix.delete_TradeCondition

# Register TradeCondition in _quickfix:
_quickfix.TradeCondition_swigregister(TradeCondition)

class MDEntryID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntryID_swiginit(self, _quickfix.new_MDEntryID(*args))
    __swig_destroy__ = _quickfix.delete_MDEntryID

# Register MDEntryID in _quickfix:
_quickfix.MDEntryID_swigregister(MDEntryID)

class MDUpdateAction(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDUpdateAction_swiginit(self, _quickfix.new_MDUpdateAction(*args))
    __swig_destroy__ = _quickfix.delete_MDUpdateAction

# Register MDUpdateAction in _quickfix:
_quickfix.MDUpdateAction_swigregister(MDUpdateAction)

class MDEntryRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntryRefID_swiginit(self, _quickfix.new_MDEntryRefID(*args))
    __swig_destroy__ = _quickfix.delete_MDEntryRefID

# Register MDEntryRefID in _quickfix:
_quickfix.MDEntryRefID_swigregister(MDEntryRefID)

class MDReqRejReason(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDReqRejReason_swiginit(self, _quickfix.new_MDReqRejReason(*args))
    __swig_destroy__ = _quickfix.delete_MDReqRejReason

# Register MDReqRejReason in _quickfix:
_quickfix.MDReqRejReason_swigregister(MDReqRejReason)

class MDEntryOriginator(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntryOriginator_swiginit(self, _quickfix.new_MDEntryOriginator(*args))
    __swig_destroy__ = _quickfix.delete_MDEntryOriginator

# Register MDEntryOriginator in _quickfix:
_quickfix.MDEntryOriginator_swigregister(MDEntryOriginator)

class LocationID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LocationID_swiginit(self, _quickfix.new_LocationID(*args))
    __swig_destroy__ = _quickfix.delete_LocationID

# Register LocationID in _quickfix:
_quickfix.LocationID_swigregister(LocationID)

class DeskID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeskID_swiginit(self, _quickfix.new_DeskID(*args))
    __swig_destroy__ = _quickfix.delete_DeskID

# Register DeskID in _quickfix:
_quickfix.DeskID_swigregister(DeskID)

class DeleteReason(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeleteReason_swiginit(self, _quickfix.new_DeleteReason(*args))
    __swig_destroy__ = _quickfix.delete_DeleteReason

# Register DeleteReason in _quickfix:
_quickfix.DeleteReason_swigregister(DeleteReason)

class OpenCloseSettleFlag(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OpenCloseSettleFlag_swiginit(self, _quickfix.new_OpenCloseSettleFlag(*args))
    __swig_destroy__ = _quickfix.delete_OpenCloseSettleFlag

# Register OpenCloseSettleFlag in _quickfix:
_quickfix.OpenCloseSettleFlag_swigregister(OpenCloseSettleFlag)

class SellerDays(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SellerDays_swiginit(self, _quickfix.new_SellerDays(*args))
    __swig_destroy__ = _quickfix.delete_SellerDays

# Register SellerDays in _quickfix:
_quickfix.SellerDays_swigregister(SellerDays)

class MDEntryBuyer(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntryBuyer_swiginit(self, _quickfix.new_MDEntryBuyer(*args))
    __swig_destroy__ = _quickfix.delete_MDEntryBuyer

# Register MDEntryBuyer in _quickfix:
_quickfix.MDEntryBuyer_swigregister(MDEntryBuyer)

class MDEntrySeller(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntrySeller_swiginit(self, _quickfix.new_MDEntrySeller(*args))
    __swig_destroy__ = _quickfix.delete_MDEntrySeller

# Register MDEntrySeller in _quickfix:
_quickfix.MDEntrySeller_swigregister(MDEntrySeller)

class MDEntryPositionNo(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntryPositionNo_swiginit(self, _quickfix.new_MDEntryPositionNo(*args))
    __swig_destroy__ = _quickfix.delete_MDEntryPositionNo

# Register MDEntryPositionNo in _quickfix:
_quickfix.MDEntryPositionNo_swigregister(MDEntryPositionNo)

class FinancialStatus(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FinancialStatus_swiginit(self, _quickfix.new_FinancialStatus(*args))
    __swig_destroy__ = _quickfix.delete_FinancialStatus

# Register FinancialStatus in _quickfix:
_quickfix.FinancialStatus_swigregister(FinancialStatus)

class CorporateAction(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CorporateAction_swiginit(self, _quickfix.new_CorporateAction(*args))
    __swig_destroy__ = _quickfix.delete_CorporateAction

# Register CorporateAction in _quickfix:
_quickfix.CorporateAction_swigregister(CorporateAction)

class DefBidSize(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DefBidSize_swiginit(self, _quickfix.new_DefBidSize(*args))
    __swig_destroy__ = _quickfix.delete_DefBidSize

# Register DefBidSize in _quickfix:
_quickfix.DefBidSize_swigregister(DefBidSize)

class DefOfferSize(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DefOfferSize_swiginit(self, _quickfix.new_DefOfferSize(*args))
    __swig_destroy__ = _quickfix.delete_DefOfferSize

# Register DefOfferSize in _quickfix:
_quickfix.DefOfferSize_swigregister(DefOfferSize)

class NoQuoteEntries(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoQuoteEntries_swiginit(self, _quickfix.new_NoQuoteEntries(*args))
    __swig_destroy__ = _quickfix.delete_NoQuoteEntries

# Register NoQuoteEntries in _quickfix:
_quickfix.NoQuoteEntries_swigregister(NoQuoteEntries)

class NoQuoteSets(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoQuoteSets_swiginit(self, _quickfix.new_NoQuoteSets(*args))
    __swig_destroy__ = _quickfix.delete_NoQuoteSets

# Register NoQuoteSets in _quickfix:
_quickfix.NoQuoteSets_swigregister(NoQuoteSets)

class QuoteAckStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteAckStatus_swiginit(self, _quickfix.new_QuoteAckStatus(*args))
    __swig_destroy__ = _quickfix.delete_QuoteAckStatus

# Register QuoteAckStatus in _quickfix:
_quickfix.QuoteAckStatus_swigregister(QuoteAckStatus)

class QuoteCancelType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteCancelType_swiginit(self, _quickfix.new_QuoteCancelType(*args))
    __swig_destroy__ = _quickfix.delete_QuoteCancelType

# Register QuoteCancelType in _quickfix:
_quickfix.QuoteCancelType_swigregister(QuoteCancelType)

class QuoteEntryID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteEntryID_swiginit(self, _quickfix.new_QuoteEntryID(*args))
    __swig_destroy__ = _quickfix.delete_QuoteEntryID

# Register QuoteEntryID in _quickfix:
_quickfix.QuoteEntryID_swigregister(QuoteEntryID)

class QuoteRejectReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteRejectReason_swiginit(self, _quickfix.new_QuoteRejectReason(*args))
    __swig_destroy__ = _quickfix.delete_QuoteRejectReason

# Register QuoteRejectReason in _quickfix:
_quickfix.QuoteRejectReason_swigregister(QuoteRejectReason)

class QuoteResponseLevel(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteResponseLevel_swiginit(self, _quickfix.new_QuoteResponseLevel(*args))
    __swig_destroy__ = _quickfix.delete_QuoteResponseLevel

# Register QuoteResponseLevel in _quickfix:
_quickfix.QuoteResponseLevel_swigregister(QuoteResponseLevel)

class QuoteSetID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteSetID_swiginit(self, _quickfix.new_QuoteSetID(*args))
    __swig_destroy__ = _quickfix.delete_QuoteSetID

# Register QuoteSetID in _quickfix:
_quickfix.QuoteSetID_swigregister(QuoteSetID)

class QuoteRequestType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteRequestType_swiginit(self, _quickfix.new_QuoteRequestType(*args))
    __swig_destroy__ = _quickfix.delete_QuoteRequestType

# Register QuoteRequestType in _quickfix:
_quickfix.QuoteRequestType_swigregister(QuoteRequestType)

class TotQuoteEntries(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotQuoteEntries_swiginit(self, _quickfix.new_TotQuoteEntries(*args))
    __swig_destroy__ = _quickfix.delete_TotQuoteEntries

# Register TotQuoteEntries in _quickfix:
_quickfix.TotQuoteEntries_swigregister(TotQuoteEntries)

class UnderlyingIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingIDSource_swiginit(self, _quickfix.new_UnderlyingIDSource(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingIDSource

# Register UnderlyingIDSource in _quickfix:
_quickfix.UnderlyingIDSource_swigregister(UnderlyingIDSource)

class UnderlyingIssuer(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingIssuer_swiginit(self, _quickfix.new_UnderlyingIssuer(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingIssuer

# Register UnderlyingIssuer in _quickfix:
_quickfix.UnderlyingIssuer_swigregister(UnderlyingIssuer)

class UnderlyingSecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSecurityDesc_swiginit(self, _quickfix.new_UnderlyingSecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityDesc

# Register UnderlyingSecurityDesc in _quickfix:
_quickfix.UnderlyingSecurityDesc_swigregister(UnderlyingSecurityDesc)

class UnderlyingSecurityExchange(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSecurityExchange_swiginit(self, _quickfix.new_UnderlyingSecurityExchange(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityExchange

# Register UnderlyingSecurityExchange in _quickfix:
_quickfix.UnderlyingSecurityExchange_swigregister(UnderlyingSecurityExchange)

class UnderlyingSecurityID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSecurityID_swiginit(self, _quickfix.new_UnderlyingSecurityID(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityID

# Register UnderlyingSecurityID in _quickfix:
_quickfix.UnderlyingSecurityID_swigregister(UnderlyingSecurityID)

class UnderlyingSecurityType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSecurityType_swiginit(self, _quickfix.new_UnderlyingSecurityType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityType

# Register UnderlyingSecurityType in _quickfix:
_quickfix.UnderlyingSecurityType_swigregister(UnderlyingSecurityType)

class UnderlyingSymbol(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSymbol_swiginit(self, _quickfix.new_UnderlyingSymbol(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSymbol

# Register UnderlyingSymbol in _quickfix:
_quickfix.UnderlyingSymbol_swigregister(UnderlyingSymbol)

class UnderlyingSymbolSfx(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSymbolSfx_swiginit(self, _quickfix.new_UnderlyingSymbolSfx(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSymbolSfx

# Register UnderlyingSymbolSfx in _quickfix:
_quickfix.UnderlyingSymbolSfx_swigregister(UnderlyingSymbolSfx)

class UnderlyingMaturityMonthYear(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingMaturityMonthYear_swiginit(self, _quickfix.new_UnderlyingMaturityMonthYear(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingMaturityMonthYear

# Register UnderlyingMaturityMonthYear in _quickfix:
_quickfix.UnderlyingMaturityMonthYear_swigregister(UnderlyingMaturityMonthYear)

class UnderlyingMaturityDay(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingMaturityDay_swiginit(self, _quickfix.new_UnderlyingMaturityDay(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingMaturityDay

# Register UnderlyingMaturityDay in _quickfix:
_quickfix.UnderlyingMaturityDay_swigregister(UnderlyingMaturityDay)

class UnderlyingPutOrCall(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingPutOrCall_swiginit(self, _quickfix.new_UnderlyingPutOrCall(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingPutOrCall

# Register UnderlyingPutOrCall in _quickfix:
_quickfix.UnderlyingPutOrCall_swigregister(UnderlyingPutOrCall)

class UnderlyingStrikePrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingStrikePrice_swiginit(self, _quickfix.new_UnderlyingStrikePrice(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingStrikePrice

# Register UnderlyingStrikePrice in _quickfix:
_quickfix.UnderlyingStrikePrice_swigregister(UnderlyingStrikePrice)

class UnderlyingOptAttribute(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingOptAttribute_swiginit(self, _quickfix.new_UnderlyingOptAttribute(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingOptAttribute

# Register UnderlyingOptAttribute in _quickfix:
_quickfix.UnderlyingOptAttribute_swigregister(UnderlyingOptAttribute)

class UnderlyingCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCurrency_swiginit(self, _quickfix.new_UnderlyingCurrency(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCurrency

# Register UnderlyingCurrency in _quickfix:
_quickfix.UnderlyingCurrency_swigregister(UnderlyingCurrency)

class RatioQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RatioQty_swiginit(self, _quickfix.new_RatioQty(*args))
    __swig_destroy__ = _quickfix.delete_RatioQty

# Register RatioQty in _quickfix:
_quickfix.RatioQty_swigregister(RatioQty)

class SecurityReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityReqID_swiginit(self, _quickfix.new_SecurityReqID(*args))
    __swig_destroy__ = _quickfix.delete_SecurityReqID

# Register SecurityReqID in _quickfix:
_quickfix.SecurityReqID_swigregister(SecurityReqID)

class SecurityRequestType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityRequestType_swiginit(self, _quickfix.new_SecurityRequestType(*args))
    __swig_destroy__ = _quickfix.delete_SecurityRequestType

# Register SecurityRequestType in _quickfix:
_quickfix.SecurityRequestType_swigregister(SecurityRequestType)

class SecurityResponseID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityResponseID_swiginit(self, _quickfix.new_SecurityResponseID(*args))
    __swig_destroy__ = _quickfix.delete_SecurityResponseID

# Register SecurityResponseID in _quickfix:
_quickfix.SecurityResponseID_swigregister(SecurityResponseID)

class SecurityResponseType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityResponseType_swiginit(self, _quickfix.new_SecurityResponseType(*args))
    __swig_destroy__ = _quickfix.delete_SecurityResponseType

# Register SecurityResponseType in _quickfix:
_quickfix.SecurityResponseType_swigregister(SecurityResponseType)

class SecurityStatusReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityStatusReqID_swiginit(self, _quickfix.new_SecurityStatusReqID(*args))
    __swig_destroy__ = _quickfix.delete_SecurityStatusReqID

# Register SecurityStatusReqID in _quickfix:
_quickfix.SecurityStatusReqID_swigregister(SecurityStatusReqID)

class UnsolicitedIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnsolicitedIndicator_swiginit(self, _quickfix.new_UnsolicitedIndicator(*args))
    __swig_destroy__ = _quickfix.delete_UnsolicitedIndicator

# Register UnsolicitedIndicator in _quickfix:
_quickfix.UnsolicitedIndicator_swigregister(UnsolicitedIndicator)

class SecurityTradingStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityTradingStatus_swiginit(self, _quickfix.new_SecurityTradingStatus(*args))
    __swig_destroy__ = _quickfix.delete_SecurityTradingStatus

# Register SecurityTradingStatus in _quickfix:
_quickfix.SecurityTradingStatus_swigregister(SecurityTradingStatus)

class HaltReasonChar(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.HaltReasonChar_swiginit(self, _quickfix.new_HaltReasonChar(*args))
    __swig_destroy__ = _quickfix.delete_HaltReasonChar

# Register HaltReasonChar in _quickfix:
_quickfix.HaltReasonChar_swigregister(HaltReasonChar)

class InViewOfCommon(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InViewOfCommon_swiginit(self, _quickfix.new_InViewOfCommon(*args))
    __swig_destroy__ = _quickfix.delete_InViewOfCommon

# Register InViewOfCommon in _quickfix:
_quickfix.InViewOfCommon_swigregister(InViewOfCommon)

class DueToRelated(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DueToRelated_swiginit(self, _quickfix.new_DueToRelated(*args))
    __swig_destroy__ = _quickfix.delete_DueToRelated

# Register DueToRelated in _quickfix:
_quickfix.DueToRelated_swigregister(DueToRelated)

class BuyVolume(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BuyVolume_swiginit(self, _quickfix.new_BuyVolume(*args))
    __swig_destroy__ = _quickfix.delete_BuyVolume

# Register BuyVolume in _quickfix:
_quickfix.BuyVolume_swigregister(BuyVolume)

class SellVolume(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SellVolume_swiginit(self, _quickfix.new_SellVolume(*args))
    __swig_destroy__ = _quickfix.delete_SellVolume

# Register SellVolume in _quickfix:
_quickfix.SellVolume_swigregister(SellVolume)

class HighPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.HighPx_swiginit(self, _quickfix.new_HighPx(*args))
    __swig_destroy__ = _quickfix.delete_HighPx

# Register HighPx in _quickfix:
_quickfix.HighPx_swigregister(HighPx)

class LowPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LowPx_swiginit(self, _quickfix.new_LowPx(*args))
    __swig_destroy__ = _quickfix.delete_LowPx

# Register LowPx in _quickfix:
_quickfix.LowPx_swigregister(LowPx)

class Adjustment(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Adjustment_swiginit(self, _quickfix.new_Adjustment(*args))
    __swig_destroy__ = _quickfix.delete_Adjustment

# Register Adjustment in _quickfix:
_quickfix.Adjustment_swigregister(Adjustment)

class TradSesReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesReqID_swiginit(self, _quickfix.new_TradSesReqID(*args))
    __swig_destroy__ = _quickfix.delete_TradSesReqID

# Register TradSesReqID in _quickfix:
_quickfix.TradSesReqID_swigregister(TradSesReqID)

class TradingSessionID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradingSessionID_swiginit(self, _quickfix.new_TradingSessionID(*args))
    __swig_destroy__ = _quickfix.delete_TradingSessionID

# Register TradingSessionID in _quickfix:
_quickfix.TradingSessionID_swigregister(TradingSessionID)

class ContraTrader(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContraTrader_swiginit(self, _quickfix.new_ContraTrader(*args))
    __swig_destroy__ = _quickfix.delete_ContraTrader

# Register ContraTrader in _quickfix:
_quickfix.ContraTrader_swigregister(ContraTrader)

class TradSesMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesMethod_swiginit(self, _quickfix.new_TradSesMethod(*args))
    __swig_destroy__ = _quickfix.delete_TradSesMethod

# Register TradSesMethod in _quickfix:
_quickfix.TradSesMethod_swigregister(TradSesMethod)

class TradSesMode(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesMode_swiginit(self, _quickfix.new_TradSesMode(*args))
    __swig_destroy__ = _quickfix.delete_TradSesMode

# Register TradSesMode in _quickfix:
_quickfix.TradSesMode_swigregister(TradSesMode)

class TradSesStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesStatus_swiginit(self, _quickfix.new_TradSesStatus(*args))
    __swig_destroy__ = _quickfix.delete_TradSesStatus

# Register TradSesStatus in _quickfix:
_quickfix.TradSesStatus_swigregister(TradSesStatus)

class TradSesStartTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesStartTime_swiginit(self, _quickfix.new_TradSesStartTime(*args))
    __swig_destroy__ = _quickfix.delete_TradSesStartTime

# Register TradSesStartTime in _quickfix:
_quickfix.TradSesStartTime_swigregister(TradSesStartTime)

class TradSesOpenTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesOpenTime_swiginit(self, _quickfix.new_TradSesOpenTime(*args))
    __swig_destroy__ = _quickfix.delete_TradSesOpenTime

# Register TradSesOpenTime in _quickfix:
_quickfix.TradSesOpenTime_swigregister(TradSesOpenTime)

class TradSesPreCloseTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesPreCloseTime_swiginit(self, _quickfix.new_TradSesPreCloseTime(*args))
    __swig_destroy__ = _quickfix.delete_TradSesPreCloseTime

# Register TradSesPreCloseTime in _quickfix:
_quickfix.TradSesPreCloseTime_swigregister(TradSesPreCloseTime)

class TradSesCloseTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesCloseTime_swiginit(self, _quickfix.new_TradSesCloseTime(*args))
    __swig_destroy__ = _quickfix.delete_TradSesCloseTime

# Register TradSesCloseTime in _quickfix:
_quickfix.TradSesCloseTime_swigregister(TradSesCloseTime)

class TradSesEndTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesEndTime_swiginit(self, _quickfix.new_TradSesEndTime(*args))
    __swig_destroy__ = _quickfix.delete_TradSesEndTime

# Register TradSesEndTime in _quickfix:
_quickfix.TradSesEndTime_swigregister(TradSesEndTime)

class NumberOfOrders(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NumberOfOrders_swiginit(self, _quickfix.new_NumberOfOrders(*args))
    __swig_destroy__ = _quickfix.delete_NumberOfOrders

# Register NumberOfOrders in _quickfix:
_quickfix.NumberOfOrders_swigregister(NumberOfOrders)

class EncodedIssuerLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedIssuerLen_swiginit(self, _quickfix.new_EncodedIssuerLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedIssuerLen

# Register EncodedIssuerLen in _quickfix:
_quickfix.EncodedIssuerLen_swigregister(EncodedIssuerLen)

class EncodedIssuer(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedIssuer_swiginit(self, _quickfix.new_EncodedIssuer(*args))
    __swig_destroy__ = _quickfix.delete_EncodedIssuer

# Register EncodedIssuer in _quickfix:
_quickfix.EncodedIssuer_swigregister(EncodedIssuer)

class EncodedSecurityDescLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedSecurityDescLen_swiginit(self, _quickfix.new_EncodedSecurityDescLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedSecurityDescLen

# Register EncodedSecurityDescLen in _quickfix:
_quickfix.EncodedSecurityDescLen_swigregister(EncodedSecurityDescLen)

class EncodedSecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedSecurityDesc_swiginit(self, _quickfix.new_EncodedSecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_EncodedSecurityDesc

# Register EncodedSecurityDesc in _quickfix:
_quickfix.EncodedSecurityDesc_swigregister(EncodedSecurityDesc)

class EncodedListExecInstLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedListExecInstLen_swiginit(self, _quickfix.new_EncodedListExecInstLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedListExecInstLen

# Register EncodedListExecInstLen in _quickfix:
_quickfix.EncodedListExecInstLen_swigregister(EncodedListExecInstLen)

class EncodedListExecInst(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedListExecInst_swiginit(self, _quickfix.new_EncodedListExecInst(*args))
    __swig_destroy__ = _quickfix.delete_EncodedListExecInst

# Register EncodedListExecInst in _quickfix:
_quickfix.EncodedListExecInst_swigregister(EncodedListExecInst)

class EncodedSubjectLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedSubjectLen_swiginit(self, _quickfix.new_EncodedSubjectLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedSubjectLen

# Register EncodedSubjectLen in _quickfix:
_quickfix.EncodedSubjectLen_swigregister(EncodedSubjectLen)

class EncodedSubject(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedSubject_swiginit(self, _quickfix.new_EncodedSubject(*args))
    __swig_destroy__ = _quickfix.delete_EncodedSubject

# Register EncodedSubject in _quickfix:
_quickfix.EncodedSubject_swigregister(EncodedSubject)

class EncodedHeadlineLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedHeadlineLen_swiginit(self, _quickfix.new_EncodedHeadlineLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedHeadlineLen

# Register EncodedHeadlineLen in _quickfix:
_quickfix.EncodedHeadlineLen_swigregister(EncodedHeadlineLen)

class EncodedHeadline(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedHeadline_swiginit(self, _quickfix.new_EncodedHeadline(*args))
    __swig_destroy__ = _quickfix.delete_EncodedHeadline

# Register EncodedHeadline in _quickfix:
_quickfix.EncodedHeadline_swigregister(EncodedHeadline)

class EncodedAllocTextLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedAllocTextLen_swiginit(self, _quickfix.new_EncodedAllocTextLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedAllocTextLen

# Register EncodedAllocTextLen in _quickfix:
_quickfix.EncodedAllocTextLen_swigregister(EncodedAllocTextLen)

class EncodedAllocText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedAllocText_swiginit(self, _quickfix.new_EncodedAllocText(*args))
    __swig_destroy__ = _quickfix.delete_EncodedAllocText

# Register EncodedAllocText in _quickfix:
_quickfix.EncodedAllocText_swigregister(EncodedAllocText)

class EncodedUnderlyingIssuerLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedUnderlyingIssuerLen_swiginit(self, _quickfix.new_EncodedUnderlyingIssuerLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedUnderlyingIssuerLen

# Register EncodedUnderlyingIssuerLen in _quickfix:
_quickfix.EncodedUnderlyingIssuerLen_swigregister(EncodedUnderlyingIssuerLen)

class EncodedUnderlyingIssuer(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedUnderlyingIssuer_swiginit(self, _quickfix.new_EncodedUnderlyingIssuer(*args))
    __swig_destroy__ = _quickfix.delete_EncodedUnderlyingIssuer

# Register EncodedUnderlyingIssuer in _quickfix:
_quickfix.EncodedUnderlyingIssuer_swigregister(EncodedUnderlyingIssuer)

class EncodedUnderlyingSecurityDescLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedUnderlyingSecurityDescLen_swiginit(self, _quickfix.new_EncodedUnderlyingSecurityDescLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedUnderlyingSecurityDescLen

# Register EncodedUnderlyingSecurityDescLen in _quickfix:
_quickfix.EncodedUnderlyingSecurityDescLen_swigregister(EncodedUnderlyingSecurityDescLen)

class EncodedUnderlyingSecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedUnderlyingSecurityDesc_swiginit(self, _quickfix.new_EncodedUnderlyingSecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_EncodedUnderlyingSecurityDesc

# Register EncodedUnderlyingSecurityDesc in _quickfix:
_quickfix.EncodedUnderlyingSecurityDesc_swigregister(EncodedUnderlyingSecurityDesc)

class AllocPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocPrice_swiginit(self, _quickfix.new_AllocPrice(*args))
    __swig_destroy__ = _quickfix.delete_AllocPrice

# Register AllocPrice in _quickfix:
_quickfix.AllocPrice_swigregister(AllocPrice)

class QuoteSetValidUntilTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteSetValidUntilTime_swiginit(self, _quickfix.new_QuoteSetValidUntilTime(*args))
    __swig_destroy__ = _quickfix.delete_QuoteSetValidUntilTime

# Register QuoteSetValidUntilTime in _quickfix:
_quickfix.QuoteSetValidUntilTime_swigregister(QuoteSetValidUntilTime)

class QuoteEntryRejectReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteEntryRejectReason_swiginit(self, _quickfix.new_QuoteEntryRejectReason(*args))
    __swig_destroy__ = _quickfix.delete_QuoteEntryRejectReason

# Register QuoteEntryRejectReason in _quickfix:
_quickfix.QuoteEntryRejectReason_swigregister(QuoteEntryRejectReason)

class OnBehalfOfSendingTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OnBehalfOfSendingTime_swiginit(self, _quickfix.new_OnBehalfOfSendingTime(*args))
    __swig_destroy__ = _quickfix.delete_OnBehalfOfSendingTime

# Register OnBehalfOfSendingTime in _quickfix:
_quickfix.OnBehalfOfSendingTime_swigregister(OnBehalfOfSendingTime)

class BidRequestTransType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidRequestTransType_swiginit(self, _quickfix.new_BidRequestTransType(*args))
    __swig_destroy__ = _quickfix.delete_BidRequestTransType

# Register BidRequestTransType in _quickfix:
_quickfix.BidRequestTransType_swigregister(BidRequestTransType)

class ContraBroker(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContraBroker_swiginit(self, _quickfix.new_ContraBroker(*args))
    __swig_destroy__ = _quickfix.delete_ContraBroker

# Register ContraBroker in _quickfix:
_quickfix.ContraBroker_swigregister(ContraBroker)

class ComplianceID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplianceID_swiginit(self, _quickfix.new_ComplianceID(*args))
    __swig_destroy__ = _quickfix.delete_ComplianceID

# Register ComplianceID in _quickfix:
_quickfix.ComplianceID_swigregister(ComplianceID)

class SolicitedFlag(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SolicitedFlag_swiginit(self, _quickfix.new_SolicitedFlag(*args))
    __swig_destroy__ = _quickfix.delete_SolicitedFlag

# Register SolicitedFlag in _quickfix:
_quickfix.SolicitedFlag_swigregister(SolicitedFlag)

class ExecRestatementReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecRestatementReason_swiginit(self, _quickfix.new_ExecRestatementReason(*args))
    __swig_destroy__ = _quickfix.delete_ExecRestatementReason

# Register ExecRestatementReason in _quickfix:
_quickfix.ExecRestatementReason_swigregister(ExecRestatementReason)

class BusinessRejectRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BusinessRejectRefID_swiginit(self, _quickfix.new_BusinessRejectRefID(*args))
    __swig_destroy__ = _quickfix.delete_BusinessRejectRefID

# Register BusinessRejectRefID in _quickfix:
_quickfix.BusinessRejectRefID_swigregister(BusinessRejectRefID)

class BusinessRejectReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BusinessRejectReason_swiginit(self, _quickfix.new_BusinessRejectReason(*args))
    __swig_destroy__ = _quickfix.delete_BusinessRejectReason

# Register BusinessRejectReason in _quickfix:
_quickfix.BusinessRejectReason_swigregister(BusinessRejectReason)

class GrossTradeAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.GrossTradeAmt_swiginit(self, _quickfix.new_GrossTradeAmt(*args))
    __swig_destroy__ = _quickfix.delete_GrossTradeAmt

# Register GrossTradeAmt in _quickfix:
_quickfix.GrossTradeAmt_swigregister(GrossTradeAmt)

class NoContraBrokers(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoContraBrokers_swiginit(self, _quickfix.new_NoContraBrokers(*args))
    __swig_destroy__ = _quickfix.delete_NoContraBrokers

# Register NoContraBrokers in _quickfix:
_quickfix.NoContraBrokers_swigregister(NoContraBrokers)

class NoTradingSessions(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoTradingSessions_swiginit(self, _quickfix.new_NoTradingSessions(*args))
    __swig_destroy__ = _quickfix.delete_NoTradingSessions

# Register NoTradingSessions in _quickfix:
_quickfix.NoTradingSessions_swigregister(NoTradingSessions)

class TotalVolumeTraded(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotalVolumeTraded_swiginit(self, _quickfix.new_TotalVolumeTraded(*args))
    __swig_destroy__ = _quickfix.delete_TotalVolumeTraded

# Register TotalVolumeTraded in _quickfix:
_quickfix.TotalVolumeTraded_swigregister(TotalVolumeTraded)

class DiscretionInst(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DiscretionInst_swiginit(self, _quickfix.new_DiscretionInst(*args))
    __swig_destroy__ = _quickfix.delete_DiscretionInst

# Register DiscretionInst in _quickfix:
_quickfix.DiscretionInst_swigregister(DiscretionInst)

class DiscretionOffset(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DiscretionOffset_swiginit(self, _quickfix.new_DiscretionOffset(*args))
    __swig_destroy__ = _quickfix.delete_DiscretionOffset

# Register DiscretionOffset in _quickfix:
_quickfix.DiscretionOffset_swigregister(DiscretionOffset)

class BidID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidID_swiginit(self, _quickfix.new_BidID(*args))
    __swig_destroy__ = _quickfix.delete_BidID

# Register BidID in _quickfix:
_quickfix.BidID_swigregister(BidID)

class ClientBidID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ClientBidID_swiginit(self, _quickfix.new_ClientBidID(*args))
    __swig_destroy__ = _quickfix.delete_ClientBidID

# Register ClientBidID in _quickfix:
_quickfix.ClientBidID_swigregister(ClientBidID)

class ListName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListName_swiginit(self, _quickfix.new_ListName(*args))
    __swig_destroy__ = _quickfix.delete_ListName

# Register ListName in _quickfix:
_quickfix.ListName_swigregister(ListName)

class TotalNumSecurities(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotalNumSecurities_swiginit(self, _quickfix.new_TotalNumSecurities(*args))
    __swig_destroy__ = _quickfix.delete_TotalNumSecurities

# Register TotalNumSecurities in _quickfix:
_quickfix.TotalNumSecurities_swigregister(TotalNumSecurities)

class BidType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidType_swiginit(self, _quickfix.new_BidType(*args))
    __swig_destroy__ = _quickfix.delete_BidType

# Register BidType in _quickfix:
_quickfix.BidType_swigregister(BidType)

class NumTickets(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NumTickets_swiginit(self, _quickfix.new_NumTickets(*args))
    __swig_destroy__ = _quickfix.delete_NumTickets

# Register NumTickets in _quickfix:
_quickfix.NumTickets_swigregister(NumTickets)

class SideValue1(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideValue1_swiginit(self, _quickfix.new_SideValue1(*args))
    __swig_destroy__ = _quickfix.delete_SideValue1

# Register SideValue1 in _quickfix:
_quickfix.SideValue1_swigregister(SideValue1)

class SideValue2(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideValue2_swiginit(self, _quickfix.new_SideValue2(*args))
    __swig_destroy__ = _quickfix.delete_SideValue2

# Register SideValue2 in _quickfix:
_quickfix.SideValue2_swigregister(SideValue2)

class NoBidDescriptors(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoBidDescriptors_swiginit(self, _quickfix.new_NoBidDescriptors(*args))
    __swig_destroy__ = _quickfix.delete_NoBidDescriptors

# Register NoBidDescriptors in _quickfix:
_quickfix.NoBidDescriptors_swigregister(NoBidDescriptors)

class BidDescriptorType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidDescriptorType_swiginit(self, _quickfix.new_BidDescriptorType(*args))
    __swig_destroy__ = _quickfix.delete_BidDescriptorType

# Register BidDescriptorType in _quickfix:
_quickfix.BidDescriptorType_swigregister(BidDescriptorType)

class BidDescriptor(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidDescriptor_swiginit(self, _quickfix.new_BidDescriptor(*args))
    __swig_destroy__ = _quickfix.delete_BidDescriptor

# Register BidDescriptor in _quickfix:
_quickfix.BidDescriptor_swigregister(BidDescriptor)

class SideValueInd(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideValueInd_swiginit(self, _quickfix.new_SideValueInd(*args))
    __swig_destroy__ = _quickfix.delete_SideValueInd

# Register SideValueInd in _quickfix:
_quickfix.SideValueInd_swigregister(SideValueInd)

class LiquidityPctLow(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LiquidityPctLow_swiginit(self, _quickfix.new_LiquidityPctLow(*args))
    __swig_destroy__ = _quickfix.delete_LiquidityPctLow

# Register LiquidityPctLow in _quickfix:
_quickfix.LiquidityPctLow_swigregister(LiquidityPctLow)

class LiquidityPctHigh(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LiquidityPctHigh_swiginit(self, _quickfix.new_LiquidityPctHigh(*args))
    __swig_destroy__ = _quickfix.delete_LiquidityPctHigh

# Register LiquidityPctHigh in _quickfix:
_quickfix.LiquidityPctHigh_swigregister(LiquidityPctHigh)

class LiquidityValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LiquidityValue_swiginit(self, _quickfix.new_LiquidityValue(*args))
    __swig_destroy__ = _quickfix.delete_LiquidityValue

# Register LiquidityValue in _quickfix:
_quickfix.LiquidityValue_swigregister(LiquidityValue)

class EFPTrackingError(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EFPTrackingError_swiginit(self, _quickfix.new_EFPTrackingError(*args))
    __swig_destroy__ = _quickfix.delete_EFPTrackingError

# Register EFPTrackingError in _quickfix:
_quickfix.EFPTrackingError_swigregister(EFPTrackingError)

class FairValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FairValue_swiginit(self, _quickfix.new_FairValue(*args))
    __swig_destroy__ = _quickfix.delete_FairValue

# Register FairValue in _quickfix:
_quickfix.FairValue_swigregister(FairValue)

class OutsideIndexPct(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OutsideIndexPct_swiginit(self, _quickfix.new_OutsideIndexPct(*args))
    __swig_destroy__ = _quickfix.delete_OutsideIndexPct

# Register OutsideIndexPct in _quickfix:
_quickfix.OutsideIndexPct_swigregister(OutsideIndexPct)

class ValueOfFutures(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ValueOfFutures_swiginit(self, _quickfix.new_ValueOfFutures(*args))
    __swig_destroy__ = _quickfix.delete_ValueOfFutures

# Register ValueOfFutures in _quickfix:
_quickfix.ValueOfFutures_swigregister(ValueOfFutures)

class LiquidityIndType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LiquidityIndType_swiginit(self, _quickfix.new_LiquidityIndType(*args))
    __swig_destroy__ = _quickfix.delete_LiquidityIndType

# Register LiquidityIndType in _quickfix:
_quickfix.LiquidityIndType_swigregister(LiquidityIndType)

class WtAverageLiquidity(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.WtAverageLiquidity_swiginit(self, _quickfix.new_WtAverageLiquidity(*args))
    __swig_destroy__ = _quickfix.delete_WtAverageLiquidity

# Register WtAverageLiquidity in _quickfix:
_quickfix.WtAverageLiquidity_swigregister(WtAverageLiquidity)

class ExchangeForPhysical(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExchangeForPhysical_swiginit(self, _quickfix.new_ExchangeForPhysical(*args))
    __swig_destroy__ = _quickfix.delete_ExchangeForPhysical

# Register ExchangeForPhysical in _quickfix:
_quickfix.ExchangeForPhysical_swigregister(ExchangeForPhysical)

class OutMainCntryUIndex(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OutMainCntryUIndex_swiginit(self, _quickfix.new_OutMainCntryUIndex(*args))
    __swig_destroy__ = _quickfix.delete_OutMainCntryUIndex

# Register OutMainCntryUIndex in _quickfix:
_quickfix.OutMainCntryUIndex_swigregister(OutMainCntryUIndex)

class CrossPercent(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CrossPercent_swiginit(self, _quickfix.new_CrossPercent(*args))
    __swig_destroy__ = _quickfix.delete_CrossPercent

# Register CrossPercent in _quickfix:
_quickfix.CrossPercent_swigregister(CrossPercent)

class ProgRptReqs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ProgRptReqs_swiginit(self, _quickfix.new_ProgRptReqs(*args))
    __swig_destroy__ = _quickfix.delete_ProgRptReqs

# Register ProgRptReqs in _quickfix:
_quickfix.ProgRptReqs_swigregister(ProgRptReqs)

class ProgPeriodInterval(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ProgPeriodInterval_swiginit(self, _quickfix.new_ProgPeriodInterval(*args))
    __swig_destroy__ = _quickfix.delete_ProgPeriodInterval

# Register ProgPeriodInterval in _quickfix:
_quickfix.ProgPeriodInterval_swigregister(ProgPeriodInterval)

class IncTaxInd(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IncTaxInd_swiginit(self, _quickfix.new_IncTaxInd(*args))
    __swig_destroy__ = _quickfix.delete_IncTaxInd

# Register IncTaxInd in _quickfix:
_quickfix.IncTaxInd_swigregister(IncTaxInd)

class NumBidders(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NumBidders_swiginit(self, _quickfix.new_NumBidders(*args))
    __swig_destroy__ = _quickfix.delete_NumBidders

# Register NumBidders in _quickfix:
_quickfix.NumBidders_swigregister(NumBidders)

class TradeType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeType_swiginit(self, _quickfix.new_TradeType(*args))
    __swig_destroy__ = _quickfix.delete_TradeType

# Register TradeType in _quickfix:
_quickfix.TradeType_swigregister(TradeType)

class BasisPxType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BasisPxType_swiginit(self, _quickfix.new_BasisPxType(*args))
    __swig_destroy__ = _quickfix.delete_BasisPxType

# Register BasisPxType in _quickfix:
_quickfix.BasisPxType_swigregister(BasisPxType)

class NoBidComponents(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoBidComponents_swiginit(self, _quickfix.new_NoBidComponents(*args))
    __swig_destroy__ = _quickfix.delete_NoBidComponents

# Register NoBidComponents in _quickfix:
_quickfix.NoBidComponents_swigregister(NoBidComponents)

class Country(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Country_swiginit(self, _quickfix.new_Country(*args))
    __swig_destroy__ = _quickfix.delete_Country

# Register Country in _quickfix:
_quickfix.Country_swigregister(Country)

class TotNoStrikes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNoStrikes_swiginit(self, _quickfix.new_TotNoStrikes(*args))
    __swig_destroy__ = _quickfix.delete_TotNoStrikes

# Register TotNoStrikes in _quickfix:
_quickfix.TotNoStrikes_swigregister(TotNoStrikes)

class PriceType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriceType_swiginit(self, _quickfix.new_PriceType(*args))
    __swig_destroy__ = _quickfix.delete_PriceType

# Register PriceType in _quickfix:
_quickfix.PriceType_swigregister(PriceType)

class DayOrderQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DayOrderQty_swiginit(self, _quickfix.new_DayOrderQty(*args))
    __swig_destroy__ = _quickfix.delete_DayOrderQty

# Register DayOrderQty in _quickfix:
_quickfix.DayOrderQty_swigregister(DayOrderQty)

class DayCumQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DayCumQty_swiginit(self, _quickfix.new_DayCumQty(*args))
    __swig_destroy__ = _quickfix.delete_DayCumQty

# Register DayCumQty in _quickfix:
_quickfix.DayCumQty_swigregister(DayCumQty)

class DayAvgPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DayAvgPx_swiginit(self, _quickfix.new_DayAvgPx(*args))
    __swig_destroy__ = _quickfix.delete_DayAvgPx

# Register DayAvgPx in _quickfix:
_quickfix.DayAvgPx_swigregister(DayAvgPx)

class GTBookingInst(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.GTBookingInst_swiginit(self, _quickfix.new_GTBookingInst(*args))
    __swig_destroy__ = _quickfix.delete_GTBookingInst

# Register GTBookingInst in _quickfix:
_quickfix.GTBookingInst_swigregister(GTBookingInst)

class NoStrikes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoStrikes_swiginit(self, _quickfix.new_NoStrikes(*args))
    __swig_destroy__ = _quickfix.delete_NoStrikes

# Register NoStrikes in _quickfix:
_quickfix.NoStrikes_swigregister(NoStrikes)

class ListStatusType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListStatusType_swiginit(self, _quickfix.new_ListStatusType(*args))
    __swig_destroy__ = _quickfix.delete_ListStatusType

# Register ListStatusType in _quickfix:
_quickfix.ListStatusType_swigregister(ListStatusType)

class NetGrossInd(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NetGrossInd_swiginit(self, _quickfix.new_NetGrossInd(*args))
    __swig_destroy__ = _quickfix.delete_NetGrossInd

# Register NetGrossInd in _quickfix:
_quickfix.NetGrossInd_swigregister(NetGrossInd)

class ListOrderStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListOrderStatus_swiginit(self, _quickfix.new_ListOrderStatus(*args))
    __swig_destroy__ = _quickfix.delete_ListOrderStatus

# Register ListOrderStatus in _quickfix:
_quickfix.ListOrderStatus_swigregister(ListOrderStatus)

class ExpireDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExpireDate_swiginit(self, _quickfix.new_ExpireDate(*args))
    __swig_destroy__ = _quickfix.delete_ExpireDate

# Register ExpireDate in _quickfix:
_quickfix.ExpireDate_swigregister(ExpireDate)

class ListExecInstType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListExecInstType_swiginit(self, _quickfix.new_ListExecInstType(*args))
    __swig_destroy__ = _quickfix.delete_ListExecInstType

# Register ListExecInstType in _quickfix:
_quickfix.ListExecInstType_swigregister(ListExecInstType)

class CxlRejResponseTo(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CxlRejResponseTo_swiginit(self, _quickfix.new_CxlRejResponseTo(*args))
    __swig_destroy__ = _quickfix.delete_CxlRejResponseTo

# Register CxlRejResponseTo in _quickfix:
_quickfix.CxlRejResponseTo_swigregister(CxlRejResponseTo)

class UnderlyingCouponRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCouponRate_swiginit(self, _quickfix.new_UnderlyingCouponRate(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCouponRate

# Register UnderlyingCouponRate in _quickfix:
_quickfix.UnderlyingCouponRate_swigregister(UnderlyingCouponRate)

class UnderlyingContractMultiplier(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingContractMultiplier_swiginit(self, _quickfix.new_UnderlyingContractMultiplier(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingContractMultiplier

# Register UnderlyingContractMultiplier in _quickfix:
_quickfix.UnderlyingContractMultiplier_swigregister(UnderlyingContractMultiplier)

class ContraTradeQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContraTradeQty_swiginit(self, _quickfix.new_ContraTradeQty(*args))
    __swig_destroy__ = _quickfix.delete_ContraTradeQty

# Register ContraTradeQty in _quickfix:
_quickfix.ContraTradeQty_swigregister(ContraTradeQty)

class ContraTradeTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContraTradeTime_swiginit(self, _quickfix.new_ContraTradeTime(*args))
    __swig_destroy__ = _quickfix.delete_ContraTradeTime

# Register ContraTradeTime in _quickfix:
_quickfix.ContraTradeTime_swigregister(ContraTradeTime)

class ClearingFirm(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ClearingFirm_swiginit(self, _quickfix.new_ClearingFirm(*args))
    __swig_destroy__ = _quickfix.delete_ClearingFirm

# Register ClearingFirm in _quickfix:
_quickfix.ClearingFirm_swigregister(ClearingFirm)

class ClearingAccount(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ClearingAccount_swiginit(self, _quickfix.new_ClearingAccount(*args))
    __swig_destroy__ = _quickfix.delete_ClearingAccount

# Register ClearingAccount in _quickfix:
_quickfix.ClearingAccount_swigregister(ClearingAccount)

class LiquidityNumSecurities(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LiquidityNumSecurities_swiginit(self, _quickfix.new_LiquidityNumSecurities(*args))
    __swig_destroy__ = _quickfix.delete_LiquidityNumSecurities

# Register LiquidityNumSecurities in _quickfix:
_quickfix.LiquidityNumSecurities_swigregister(LiquidityNumSecurities)

class MultiLegReportingType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MultiLegReportingType_swiginit(self, _quickfix.new_MultiLegReportingType(*args))
    __swig_destroy__ = _quickfix.delete_MultiLegReportingType

# Register MultiLegReportingType in _quickfix:
_quickfix.MultiLegReportingType_swigregister(MultiLegReportingType)

class StrikeTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikeTime_swiginit(self, _quickfix.new_StrikeTime(*args))
    __swig_destroy__ = _quickfix.delete_StrikeTime

# Register StrikeTime in _quickfix:
_quickfix.StrikeTime_swigregister(StrikeTime)

class ListStatusText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListStatusText_swiginit(self, _quickfix.new_ListStatusText(*args))
    __swig_destroy__ = _quickfix.delete_ListStatusText

# Register ListStatusText in _quickfix:
_quickfix.ListStatusText_swigregister(ListStatusText)

class EncodedListStatusTextLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedListStatusTextLen_swiginit(self, _quickfix.new_EncodedListStatusTextLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedListStatusTextLen

# Register EncodedListStatusTextLen in _quickfix:
_quickfix.EncodedListStatusTextLen_swigregister(EncodedListStatusTextLen)

class EncodedListStatusText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedListStatusText_swiginit(self, _quickfix.new_EncodedListStatusText(*args))
    __swig_destroy__ = _quickfix.delete_EncodedListStatusText

# Register EncodedListStatusText in _quickfix:
_quickfix.EncodedListStatusText_swigregister(EncodedListStatusText)

class SecurityIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityIDSource_swiginit(self, _quickfix.new_SecurityIDSource(*args))
    __swig_destroy__ = _quickfix.delete_SecurityIDSource

# Register SecurityIDSource in _quickfix:
_quickfix.SecurityIDSource_swigregister(SecurityIDSource)

class IOIQty(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOIQty_swiginit(self, _quickfix.new_IOIQty(*args))
    __swig_destroy__ = _quickfix.delete_IOIQty

# Register IOIQty in _quickfix:
_quickfix.IOIQty_swigregister(IOIQty)

class LastQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastQty_swiginit(self, _quickfix.new_LastQty(*args))
    __swig_destroy__ = _quickfix.delete_LastQty

# Register LastQty in _quickfix:
_quickfix.LastQty_swigregister(LastQty)

class Quantity(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Quantity_swiginit(self, _quickfix.new_Quantity(*args))
    __swig_destroy__ = _quickfix.delete_Quantity

# Register Quantity in _quickfix:
_quickfix.Quantity_swigregister(Quantity)

class PositionEffect(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PositionEffect_swiginit(self, _quickfix.new_PositionEffect(*args))
    __swig_destroy__ = _quickfix.delete_PositionEffect

# Register PositionEffect in _quickfix:
_quickfix.PositionEffect_swigregister(PositionEffect)

class AllocQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocQty_swiginit(self, _quickfix.new_AllocQty(*args))
    __swig_destroy__ = _quickfix.delete_AllocQty

# Register AllocQty in _quickfix:
_quickfix.AllocQty_swigregister(AllocQty)

class Spread(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Spread_swiginit(self, _quickfix.new_Spread(*args))
    __swig_destroy__ = _quickfix.delete_Spread

# Register Spread in _quickfix:
_quickfix.Spread_swigregister(Spread)

class BenchmarkCurveCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BenchmarkCurveCurrency_swiginit(self, _quickfix.new_BenchmarkCurveCurrency(*args))
    __swig_destroy__ = _quickfix.delete_BenchmarkCurveCurrency

# Register BenchmarkCurveCurrency in _quickfix:
_quickfix.BenchmarkCurveCurrency_swigregister(BenchmarkCurveCurrency)

class BenchmarkCurveName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BenchmarkCurveName_swiginit(self, _quickfix.new_BenchmarkCurveName(*args))
    __swig_destroy__ = _quickfix.delete_BenchmarkCurveName

# Register BenchmarkCurveName in _quickfix:
_quickfix.BenchmarkCurveName_swigregister(BenchmarkCurveName)

class BenchmarkCurvePoint(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BenchmarkCurvePoint_swiginit(self, _quickfix.new_BenchmarkCurvePoint(*args))
    __swig_destroy__ = _quickfix.delete_BenchmarkCurvePoint

# Register BenchmarkCurvePoint in _quickfix:
_quickfix.BenchmarkCurvePoint_swigregister(BenchmarkCurvePoint)

class CouponPaymentDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CouponPaymentDate_swiginit(self, _quickfix.new_CouponPaymentDate(*args))
    __swig_destroy__ = _quickfix.delete_CouponPaymentDate

# Register CouponPaymentDate in _quickfix:
_quickfix.CouponPaymentDate_swigregister(CouponPaymentDate)

class IssueDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IssueDate_swiginit(self, _quickfix.new_IssueDate(*args))
    __swig_destroy__ = _quickfix.delete_IssueDate

# Register IssueDate in _quickfix:
_quickfix.IssueDate_swigregister(IssueDate)

class RepurchaseTerm(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RepurchaseTerm_swiginit(self, _quickfix.new_RepurchaseTerm(*args))
    __swig_destroy__ = _quickfix.delete_RepurchaseTerm

# Register RepurchaseTerm in _quickfix:
_quickfix.RepurchaseTerm_swigregister(RepurchaseTerm)

class RepurchaseRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RepurchaseRate_swiginit(self, _quickfix.new_RepurchaseRate(*args))
    __swig_destroy__ = _quickfix.delete_RepurchaseRate

# Register RepurchaseRate in _quickfix:
_quickfix.RepurchaseRate_swigregister(RepurchaseRate)

class Factor(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Factor_swiginit(self, _quickfix.new_Factor(*args))
    __swig_destroy__ = _quickfix.delete_Factor

# Register Factor in _quickfix:
_quickfix.Factor_swigregister(Factor)

class TradeOriginationDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeOriginationDate_swiginit(self, _quickfix.new_TradeOriginationDate(*args))
    __swig_destroy__ = _quickfix.delete_TradeOriginationDate

# Register TradeOriginationDate in _quickfix:
_quickfix.TradeOriginationDate_swigregister(TradeOriginationDate)

class ExDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExDate_swiginit(self, _quickfix.new_ExDate(*args))
    __swig_destroy__ = _quickfix.delete_ExDate

# Register ExDate in _quickfix:
_quickfix.ExDate_swigregister(ExDate)

class NoStipulations(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoStipulations_swiginit(self, _quickfix.new_NoStipulations(*args))
    __swig_destroy__ = _quickfix.delete_NoStipulations

# Register NoStipulations in _quickfix:
_quickfix.NoStipulations_swigregister(NoStipulations)

class StipulationType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StipulationType_swiginit(self, _quickfix.new_StipulationType(*args))
    __swig_destroy__ = _quickfix.delete_StipulationType

# Register StipulationType in _quickfix:
_quickfix.StipulationType_swigregister(StipulationType)

class StipulationValue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StipulationValue_swiginit(self, _quickfix.new_StipulationValue(*args))
    __swig_destroy__ = _quickfix.delete_StipulationValue

# Register StipulationValue in _quickfix:
_quickfix.StipulationValue_swigregister(StipulationValue)

class YieldType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.YieldType_swiginit(self, _quickfix.new_YieldType(*args))
    __swig_destroy__ = _quickfix.delete_YieldType

# Register YieldType in _quickfix:
_quickfix.YieldType_swigregister(YieldType)

class Yield(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Yield_swiginit(self, _quickfix.new_Yield(*args))
    __swig_destroy__ = _quickfix.delete_Yield

# Register Yield in _quickfix:
_quickfix.Yield_swigregister(Yield)

class TotalTakedown(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotalTakedown_swiginit(self, _quickfix.new_TotalTakedown(*args))
    __swig_destroy__ = _quickfix.delete_TotalTakedown

# Register TotalTakedown in _quickfix:
_quickfix.TotalTakedown_swigregister(TotalTakedown)

class Concession(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Concession_swiginit(self, _quickfix.new_Concession(*args))
    __swig_destroy__ = _quickfix.delete_Concession

# Register Concession in _quickfix:
_quickfix.Concession_swigregister(Concession)

class RepoCollateralSecurityType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RepoCollateralSecurityType_swiginit(self, _quickfix.new_RepoCollateralSecurityType(*args))
    __swig_destroy__ = _quickfix.delete_RepoCollateralSecurityType

# Register RepoCollateralSecurityType in _quickfix:
_quickfix.RepoCollateralSecurityType_swigregister(RepoCollateralSecurityType)

class RedemptionDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RedemptionDate_swiginit(self, _quickfix.new_RedemptionDate(*args))
    __swig_destroy__ = _quickfix.delete_RedemptionDate

# Register RedemptionDate in _quickfix:
_quickfix.RedemptionDate_swigregister(RedemptionDate)

class UnderlyingCouponPaymentDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCouponPaymentDate_swiginit(self, _quickfix.new_UnderlyingCouponPaymentDate(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCouponPaymentDate

# Register UnderlyingCouponPaymentDate in _quickfix:
_quickfix.UnderlyingCouponPaymentDate_swigregister(UnderlyingCouponPaymentDate)

class UnderlyingIssueDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingIssueDate_swiginit(self, _quickfix.new_UnderlyingIssueDate(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingIssueDate

# Register UnderlyingIssueDate in _quickfix:
_quickfix.UnderlyingIssueDate_swigregister(UnderlyingIssueDate)

class UnderlyingRepoCollateralSecurityType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingRepoCollateralSecurityType_swiginit(self, _quickfix.new_UnderlyingRepoCollateralSecurityType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingRepoCollateralSecurityType

# Register UnderlyingRepoCollateralSecurityType in _quickfix:
_quickfix.UnderlyingRepoCollateralSecurityType_swigregister(UnderlyingRepoCollateralSecurityType)

class UnderlyingRepurchaseTerm(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingRepurchaseTerm_swiginit(self, _quickfix.new_UnderlyingRepurchaseTerm(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingRepurchaseTerm

# Register UnderlyingRepurchaseTerm in _quickfix:
_quickfix.UnderlyingRepurchaseTerm_swigregister(UnderlyingRepurchaseTerm)

class UnderlyingRepurchaseRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingRepurchaseRate_swiginit(self, _quickfix.new_UnderlyingRepurchaseRate(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingRepurchaseRate

# Register UnderlyingRepurchaseRate in _quickfix:
_quickfix.UnderlyingRepurchaseRate_swigregister(UnderlyingRepurchaseRate)

class UnderlyingFactor(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingFactor_swiginit(self, _quickfix.new_UnderlyingFactor(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingFactor

# Register UnderlyingFactor in _quickfix:
_quickfix.UnderlyingFactor_swigregister(UnderlyingFactor)

class UnderlyingRedemptionDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingRedemptionDate_swiginit(self, _quickfix.new_UnderlyingRedemptionDate(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingRedemptionDate

# Register UnderlyingRedemptionDate in _quickfix:
_quickfix.UnderlyingRedemptionDate_swigregister(UnderlyingRedemptionDate)

class LegCouponPaymentDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegCouponPaymentDate_swiginit(self, _quickfix.new_LegCouponPaymentDate(*args))
    __swig_destroy__ = _quickfix.delete_LegCouponPaymentDate

# Register LegCouponPaymentDate in _quickfix:
_quickfix.LegCouponPaymentDate_swigregister(LegCouponPaymentDate)

class LegIssueDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegIssueDate_swiginit(self, _quickfix.new_LegIssueDate(*args))
    __swig_destroy__ = _quickfix.delete_LegIssueDate

# Register LegIssueDate in _quickfix:
_quickfix.LegIssueDate_swigregister(LegIssueDate)

class LegRepoCollateralSecurityType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegRepoCollateralSecurityType_swiginit(self, _quickfix.new_LegRepoCollateralSecurityType(*args))
    __swig_destroy__ = _quickfix.delete_LegRepoCollateralSecurityType

# Register LegRepoCollateralSecurityType in _quickfix:
_quickfix.LegRepoCollateralSecurityType_swigregister(LegRepoCollateralSecurityType)

class LegRepurchaseTerm(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegRepurchaseTerm_swiginit(self, _quickfix.new_LegRepurchaseTerm(*args))
    __swig_destroy__ = _quickfix.delete_LegRepurchaseTerm

# Register LegRepurchaseTerm in _quickfix:
_quickfix.LegRepurchaseTerm_swigregister(LegRepurchaseTerm)

class LegRepurchaseRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegRepurchaseRate_swiginit(self, _quickfix.new_LegRepurchaseRate(*args))
    __swig_destroy__ = _quickfix.delete_LegRepurchaseRate

# Register LegRepurchaseRate in _quickfix:
_quickfix.LegRepurchaseRate_swigregister(LegRepurchaseRate)

class LegFactor(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegFactor_swiginit(self, _quickfix.new_LegFactor(*args))
    __swig_destroy__ = _quickfix.delete_LegFactor

# Register LegFactor in _quickfix:
_quickfix.LegFactor_swigregister(LegFactor)

class LegRedemptionDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegRedemptionDate_swiginit(self, _quickfix.new_LegRedemptionDate(*args))
    __swig_destroy__ = _quickfix.delete_LegRedemptionDate

# Register LegRedemptionDate in _quickfix:
_quickfix.LegRedemptionDate_swigregister(LegRedemptionDate)

class CreditRating(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CreditRating_swiginit(self, _quickfix.new_CreditRating(*args))
    __swig_destroy__ = _quickfix.delete_CreditRating

# Register CreditRating in _quickfix:
_quickfix.CreditRating_swigregister(CreditRating)

class UnderlyingCreditRating(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCreditRating_swiginit(self, _quickfix.new_UnderlyingCreditRating(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCreditRating

# Register UnderlyingCreditRating in _quickfix:
_quickfix.UnderlyingCreditRating_swigregister(UnderlyingCreditRating)

class LegCreditRating(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegCreditRating_swiginit(self, _quickfix.new_LegCreditRating(*args))
    __swig_destroy__ = _quickfix.delete_LegCreditRating

# Register LegCreditRating in _quickfix:
_quickfix.LegCreditRating_swigregister(LegCreditRating)

class TradedFlatSwitch(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradedFlatSwitch_swiginit(self, _quickfix.new_TradedFlatSwitch(*args))
    __swig_destroy__ = _quickfix.delete_TradedFlatSwitch

# Register TradedFlatSwitch in _quickfix:
_quickfix.TradedFlatSwitch_swigregister(TradedFlatSwitch)

class BasisFeatureDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BasisFeatureDate_swiginit(self, _quickfix.new_BasisFeatureDate(*args))
    __swig_destroy__ = _quickfix.delete_BasisFeatureDate

# Register BasisFeatureDate in _quickfix:
_quickfix.BasisFeatureDate_swigregister(BasisFeatureDate)

class BasisFeaturePrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BasisFeaturePrice_swiginit(self, _quickfix.new_BasisFeaturePrice(*args))
    __swig_destroy__ = _quickfix.delete_BasisFeaturePrice

# Register BasisFeaturePrice in _quickfix:
_quickfix.BasisFeaturePrice_swigregister(BasisFeaturePrice)

class QuoteStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteStatus_swiginit(self, _quickfix.new_QuoteStatus(*args))
    __swig_destroy__ = _quickfix.delete_QuoteStatus

# Register QuoteStatus in _quickfix:
_quickfix.QuoteStatus_swigregister(QuoteStatus)

class UnderlyingSecurityIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSecurityIDSource_swiginit(self, _quickfix.new_UnderlyingSecurityIDSource(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityIDSource

# Register UnderlyingSecurityIDSource in _quickfix:
_quickfix.UnderlyingSecurityIDSource_swigregister(UnderlyingSecurityIDSource)

class PartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PartyIDSource_swiginit(self, _quickfix.new_PartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_PartyIDSource

# Register PartyIDSource in _quickfix:
_quickfix.PartyIDSource_swigregister(PartyIDSource)

class PartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PartyID_swiginit(self, _quickfix.new_PartyID(*args))
    __swig_destroy__ = _quickfix.delete_PartyID

# Register PartyID in _quickfix:
_quickfix.PartyID_swigregister(PartyID)

class TotalVolumeTradedDate(UtcDateField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotalVolumeTradedDate_swiginit(self, _quickfix.new_TotalVolumeTradedDate(*args))
    __swig_destroy__ = _quickfix.delete_TotalVolumeTradedDate

# Register TotalVolumeTradedDate in _quickfix:
_quickfix.TotalVolumeTradedDate_swigregister(TotalVolumeTradedDate)

class TotalVolumeTradedTime(UtcTimeOnlyField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotalVolumeTradedTime_swiginit(self, _quickfix.new_TotalVolumeTradedTime(*args))
    __swig_destroy__ = _quickfix.delete_TotalVolumeTradedTime

# Register TotalVolumeTradedTime in _quickfix:
_quickfix.TotalVolumeTradedTime_swigregister(TotalVolumeTradedTime)

class NetChgPrevDay(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NetChgPrevDay_swiginit(self, _quickfix.new_NetChgPrevDay(*args))
    __swig_destroy__ = _quickfix.delete_NetChgPrevDay

# Register NetChgPrevDay in _quickfix:
_quickfix.NetChgPrevDay_swigregister(NetChgPrevDay)

class PartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PartyRole_swiginit(self, _quickfix.new_PartyRole(*args))
    __swig_destroy__ = _quickfix.delete_PartyRole

# Register PartyRole in _quickfix:
_quickfix.PartyRole_swigregister(PartyRole)

class NoPartyIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoPartyIDs_swiginit(self, _quickfix.new_NoPartyIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoPartyIDs

# Register NoPartyIDs in _quickfix:
_quickfix.NoPartyIDs_swigregister(NoPartyIDs)

class NoSecurityAltID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoSecurityAltID_swiginit(self, _quickfix.new_NoSecurityAltID(*args))
    __swig_destroy__ = _quickfix.delete_NoSecurityAltID

# Register NoSecurityAltID in _quickfix:
_quickfix.NoSecurityAltID_swigregister(NoSecurityAltID)

class SecurityAltID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityAltID_swiginit(self, _quickfix.new_SecurityAltID(*args))
    __swig_destroy__ = _quickfix.delete_SecurityAltID

# Register SecurityAltID in _quickfix:
_quickfix.SecurityAltID_swigregister(SecurityAltID)

class SecurityAltIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityAltIDSource_swiginit(self, _quickfix.new_SecurityAltIDSource(*args))
    __swig_destroy__ = _quickfix.delete_SecurityAltIDSource

# Register SecurityAltIDSource in _quickfix:
_quickfix.SecurityAltIDSource_swigregister(SecurityAltIDSource)

class NoUnderlyingSecurityAltID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoUnderlyingSecurityAltID_swiginit(self, _quickfix.new_NoUnderlyingSecurityAltID(*args))
    __swig_destroy__ = _quickfix.delete_NoUnderlyingSecurityAltID

# Register NoUnderlyingSecurityAltID in _quickfix:
_quickfix.NoUnderlyingSecurityAltID_swigregister(NoUnderlyingSecurityAltID)

class UnderlyingSecurityAltID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSecurityAltID_swiginit(self, _quickfix.new_UnderlyingSecurityAltID(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityAltID

# Register UnderlyingSecurityAltID in _quickfix:
_quickfix.UnderlyingSecurityAltID_swigregister(UnderlyingSecurityAltID)

class UnderlyingSecurityAltIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSecurityAltIDSource_swiginit(self, _quickfix.new_UnderlyingSecurityAltIDSource(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSecurityAltIDSource

# Register UnderlyingSecurityAltIDSource in _quickfix:
_quickfix.UnderlyingSecurityAltIDSource_swigregister(UnderlyingSecurityAltIDSource)

class Product(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Product_swiginit(self, _quickfix.new_Product(*args))
    __swig_destroy__ = _quickfix.delete_Product

# Register Product in _quickfix:
_quickfix.Product_swigregister(Product)

class CFICode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CFICode_swiginit(self, _quickfix.new_CFICode(*args))
    __swig_destroy__ = _quickfix.delete_CFICode

# Register CFICode in _quickfix:
_quickfix.CFICode_swigregister(CFICode)

class UnderlyingProduct(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingProduct_swiginit(self, _quickfix.new_UnderlyingProduct(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingProduct

# Register UnderlyingProduct in _quickfix:
_quickfix.UnderlyingProduct_swigregister(UnderlyingProduct)

class UnderlyingCFICode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCFICode_swiginit(self, _quickfix.new_UnderlyingCFICode(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCFICode

# Register UnderlyingCFICode in _quickfix:
_quickfix.UnderlyingCFICode_swigregister(UnderlyingCFICode)

class QuantityType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuantityType_swiginit(self, _quickfix.new_QuantityType(*args))
    __swig_destroy__ = _quickfix.delete_QuantityType

# Register QuantityType in _quickfix:
_quickfix.QuantityType_swigregister(QuantityType)

class BookingRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BookingRefID_swiginit(self, _quickfix.new_BookingRefID(*args))
    __swig_destroy__ = _quickfix.delete_BookingRefID

# Register BookingRefID in _quickfix:
_quickfix.BookingRefID_swigregister(BookingRefID)

class IndividualAllocID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IndividualAllocID_swiginit(self, _quickfix.new_IndividualAllocID(*args))
    __swig_destroy__ = _quickfix.delete_IndividualAllocID

# Register IndividualAllocID in _quickfix:
_quickfix.IndividualAllocID_swigregister(IndividualAllocID)

class RoundingDirection(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RoundingDirection_swiginit(self, _quickfix.new_RoundingDirection(*args))
    __swig_destroy__ = _quickfix.delete_RoundingDirection

# Register RoundingDirection in _quickfix:
_quickfix.RoundingDirection_swigregister(RoundingDirection)

class RoundingModulus(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RoundingModulus_swiginit(self, _quickfix.new_RoundingModulus(*args))
    __swig_destroy__ = _quickfix.delete_RoundingModulus

# Register RoundingModulus in _quickfix:
_quickfix.RoundingModulus_swigregister(RoundingModulus)

class CountryOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CountryOfIssue_swiginit(self, _quickfix.new_CountryOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_CountryOfIssue

# Register CountryOfIssue in _quickfix:
_quickfix.CountryOfIssue_swigregister(CountryOfIssue)

class StateOrProvinceOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StateOrProvinceOfIssue_swiginit(self, _quickfix.new_StateOrProvinceOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_StateOrProvinceOfIssue

# Register StateOrProvinceOfIssue in _quickfix:
_quickfix.StateOrProvinceOfIssue_swigregister(StateOrProvinceOfIssue)

class LocaleOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LocaleOfIssue_swiginit(self, _quickfix.new_LocaleOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_LocaleOfIssue

# Register LocaleOfIssue in _quickfix:
_quickfix.LocaleOfIssue_swigregister(LocaleOfIssue)

class NoRegistDtls(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoRegistDtls_swiginit(self, _quickfix.new_NoRegistDtls(*args))
    __swig_destroy__ = _quickfix.delete_NoRegistDtls

# Register NoRegistDtls in _quickfix:
_quickfix.NoRegistDtls_swigregister(NoRegistDtls)

class MailingDtls(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MailingDtls_swiginit(self, _quickfix.new_MailingDtls(*args))
    __swig_destroy__ = _quickfix.delete_MailingDtls

# Register MailingDtls in _quickfix:
_quickfix.MailingDtls_swigregister(MailingDtls)

class InvestorCountryOfResidence(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InvestorCountryOfResidence_swiginit(self, _quickfix.new_InvestorCountryOfResidence(*args))
    __swig_destroy__ = _quickfix.delete_InvestorCountryOfResidence

# Register InvestorCountryOfResidence in _quickfix:
_quickfix.InvestorCountryOfResidence_swigregister(InvestorCountryOfResidence)

class PaymentRef(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PaymentRef_swiginit(self, _quickfix.new_PaymentRef(*args))
    __swig_destroy__ = _quickfix.delete_PaymentRef

# Register PaymentRef in _quickfix:
_quickfix.PaymentRef_swigregister(PaymentRef)

class DistribPaymentMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DistribPaymentMethod_swiginit(self, _quickfix.new_DistribPaymentMethod(*args))
    __swig_destroy__ = _quickfix.delete_DistribPaymentMethod

# Register DistribPaymentMethod in _quickfix:
_quickfix.DistribPaymentMethod_swigregister(DistribPaymentMethod)

class CashDistribCurr(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashDistribCurr_swiginit(self, _quickfix.new_CashDistribCurr(*args))
    __swig_destroy__ = _quickfix.delete_CashDistribCurr

# Register CashDistribCurr in _quickfix:
_quickfix.CashDistribCurr_swigregister(CashDistribCurr)

class CommCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CommCurrency_swiginit(self, _quickfix.new_CommCurrency(*args))
    __swig_destroy__ = _quickfix.delete_CommCurrency

# Register CommCurrency in _quickfix:
_quickfix.CommCurrency_swigregister(CommCurrency)

class CancellationRights(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CancellationRights_swiginit(self, _quickfix.new_CancellationRights(*args))
    __swig_destroy__ = _quickfix.delete_CancellationRights

# Register CancellationRights in _quickfix:
_quickfix.CancellationRights_swigregister(CancellationRights)

class MoneyLaunderingStatus(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MoneyLaunderingStatus_swiginit(self, _quickfix.new_MoneyLaunderingStatus(*args))
    __swig_destroy__ = _quickfix.delete_MoneyLaunderingStatus

# Register MoneyLaunderingStatus in _quickfix:
_quickfix.MoneyLaunderingStatus_swigregister(MoneyLaunderingStatus)

class MailingInst(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MailingInst_swiginit(self, _quickfix.new_MailingInst(*args))
    __swig_destroy__ = _quickfix.delete_MailingInst

# Register MailingInst in _quickfix:
_quickfix.MailingInst_swigregister(MailingInst)

class TransBkdTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TransBkdTime_swiginit(self, _quickfix.new_TransBkdTime(*args))
    __swig_destroy__ = _quickfix.delete_TransBkdTime

# Register TransBkdTime in _quickfix:
_quickfix.TransBkdTime_swigregister(TransBkdTime)

class ExecPriceType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecPriceType_swiginit(self, _quickfix.new_ExecPriceType(*args))
    __swig_destroy__ = _quickfix.delete_ExecPriceType

# Register ExecPriceType in _quickfix:
_quickfix.ExecPriceType_swigregister(ExecPriceType)

class ExecPriceAdjustment(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecPriceAdjustment_swiginit(self, _quickfix.new_ExecPriceAdjustment(*args))
    __swig_destroy__ = _quickfix.delete_ExecPriceAdjustment

# Register ExecPriceAdjustment in _quickfix:
_quickfix.ExecPriceAdjustment_swigregister(ExecPriceAdjustment)

class DateOfBirth(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DateOfBirth_swiginit(self, _quickfix.new_DateOfBirth(*args))
    __swig_destroy__ = _quickfix.delete_DateOfBirth

# Register DateOfBirth in _quickfix:
_quickfix.DateOfBirth_swigregister(DateOfBirth)

class TradeReportTransType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeReportTransType_swiginit(self, _quickfix.new_TradeReportTransType(*args))
    __swig_destroy__ = _quickfix.delete_TradeReportTransType

# Register TradeReportTransType in _quickfix:
_quickfix.TradeReportTransType_swigregister(TradeReportTransType)

class CardHolderName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CardHolderName_swiginit(self, _quickfix.new_CardHolderName(*args))
    __swig_destroy__ = _quickfix.delete_CardHolderName

# Register CardHolderName in _quickfix:
_quickfix.CardHolderName_swigregister(CardHolderName)

class CardNumber(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CardNumber_swiginit(self, _quickfix.new_CardNumber(*args))
    __swig_destroy__ = _quickfix.delete_CardNumber

# Register CardNumber in _quickfix:
_quickfix.CardNumber_swigregister(CardNumber)

class CardExpDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CardExpDate_swiginit(self, _quickfix.new_CardExpDate(*args))
    __swig_destroy__ = _quickfix.delete_CardExpDate

# Register CardExpDate in _quickfix:
_quickfix.CardExpDate_swigregister(CardExpDate)

class CardIssNo(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CardIssNo_swiginit(self, _quickfix.new_CardIssNo(*args))
    __swig_destroy__ = _quickfix.delete_CardIssNo

# Register CardIssNo in _quickfix:
_quickfix.CardIssNo_swigregister(CardIssNo)

class PaymentMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PaymentMethod_swiginit(self, _quickfix.new_PaymentMethod(*args))
    __swig_destroy__ = _quickfix.delete_PaymentMethod

# Register PaymentMethod in _quickfix:
_quickfix.PaymentMethod_swigregister(PaymentMethod)

class RegistAcctType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RegistAcctType_swiginit(self, _quickfix.new_RegistAcctType(*args))
    __swig_destroy__ = _quickfix.delete_RegistAcctType

# Register RegistAcctType in _quickfix:
_quickfix.RegistAcctType_swigregister(RegistAcctType)

class Designation(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Designation_swiginit(self, _quickfix.new_Designation(*args))
    __swig_destroy__ = _quickfix.delete_Designation

# Register Designation in _quickfix:
_quickfix.Designation_swigregister(Designation)

class TaxAdvantageType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TaxAdvantageType_swiginit(self, _quickfix.new_TaxAdvantageType(*args))
    __swig_destroy__ = _quickfix.delete_TaxAdvantageType

# Register TaxAdvantageType in _quickfix:
_quickfix.TaxAdvantageType_swigregister(TaxAdvantageType)

class RegistRejReasonText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RegistRejReasonText_swiginit(self, _quickfix.new_RegistRejReasonText(*args))
    __swig_destroy__ = _quickfix.delete_RegistRejReasonText

# Register RegistRejReasonText in _quickfix:
_quickfix.RegistRejReasonText_swigregister(RegistRejReasonText)

class FundRenewWaiv(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FundRenewWaiv_swiginit(self, _quickfix.new_FundRenewWaiv(*args))
    __swig_destroy__ = _quickfix.delete_FundRenewWaiv

# Register FundRenewWaiv in _quickfix:
_quickfix.FundRenewWaiv_swigregister(FundRenewWaiv)

class CashDistribAgentName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashDistribAgentName_swiginit(self, _quickfix.new_CashDistribAgentName(*args))
    __swig_destroy__ = _quickfix.delete_CashDistribAgentName

# Register CashDistribAgentName in _quickfix:
_quickfix.CashDistribAgentName_swigregister(CashDistribAgentName)

class CashDistribAgentCode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashDistribAgentCode_swiginit(self, _quickfix.new_CashDistribAgentCode(*args))
    __swig_destroy__ = _quickfix.delete_CashDistribAgentCode

# Register CashDistribAgentCode in _quickfix:
_quickfix.CashDistribAgentCode_swigregister(CashDistribAgentCode)

class CashDistribAgentAcctNumber(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashDistribAgentAcctNumber_swiginit(self, _quickfix.new_CashDistribAgentAcctNumber(*args))
    __swig_destroy__ = _quickfix.delete_CashDistribAgentAcctNumber

# Register CashDistribAgentAcctNumber in _quickfix:
_quickfix.CashDistribAgentAcctNumber_swigregister(CashDistribAgentAcctNumber)

class CashDistribPayRef(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashDistribPayRef_swiginit(self, _quickfix.new_CashDistribPayRef(*args))
    __swig_destroy__ = _quickfix.delete_CashDistribPayRef

# Register CashDistribPayRef in _quickfix:
_quickfix.CashDistribPayRef_swigregister(CashDistribPayRef)

class CardStartDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CardStartDate_swiginit(self, _quickfix.new_CardStartDate(*args))
    __swig_destroy__ = _quickfix.delete_CardStartDate

# Register CardStartDate in _quickfix:
_quickfix.CardStartDate_swigregister(CardStartDate)

class PaymentDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PaymentDate_swiginit(self, _quickfix.new_PaymentDate(*args))
    __swig_destroy__ = _quickfix.delete_PaymentDate

# Register PaymentDate in _quickfix:
_quickfix.PaymentDate_swigregister(PaymentDate)

class PaymentRemitterID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PaymentRemitterID_swiginit(self, _quickfix.new_PaymentRemitterID(*args))
    __swig_destroy__ = _quickfix.delete_PaymentRemitterID

# Register PaymentRemitterID in _quickfix:
_quickfix.PaymentRemitterID_swigregister(PaymentRemitterID)

class RegistStatus(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RegistStatus_swiginit(self, _quickfix.new_RegistStatus(*args))
    __swig_destroy__ = _quickfix.delete_RegistStatus

# Register RegistStatus in _quickfix:
_quickfix.RegistStatus_swigregister(RegistStatus)

class RegistRejReasonCode(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RegistRejReasonCode_swiginit(self, _quickfix.new_RegistRejReasonCode(*args))
    __swig_destroy__ = _quickfix.delete_RegistRejReasonCode

# Register RegistRejReasonCode in _quickfix:
_quickfix.RegistRejReasonCode_swigregister(RegistRejReasonCode)

class RegistRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RegistRefID_swiginit(self, _quickfix.new_RegistRefID(*args))
    __swig_destroy__ = _quickfix.delete_RegistRefID

# Register RegistRefID in _quickfix:
_quickfix.RegistRefID_swigregister(RegistRefID)

class RegistDetls(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RegistDetls_swiginit(self, _quickfix.new_RegistDetls(*args))
    __swig_destroy__ = _quickfix.delete_RegistDetls

# Register RegistDetls in _quickfix:
_quickfix.RegistDetls_swigregister(RegistDetls)

class NoDistribInsts(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoDistribInsts_swiginit(self, _quickfix.new_NoDistribInsts(*args))
    __swig_destroy__ = _quickfix.delete_NoDistribInsts

# Register NoDistribInsts in _quickfix:
_quickfix.NoDistribInsts_swigregister(NoDistribInsts)

class RegistEmail(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RegistEmail_swiginit(self, _quickfix.new_RegistEmail(*args))
    __swig_destroy__ = _quickfix.delete_RegistEmail

# Register RegistEmail in _quickfix:
_quickfix.RegistEmail_swigregister(RegistEmail)

class DistribPercentage(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DistribPercentage_swiginit(self, _quickfix.new_DistribPercentage(*args))
    __swig_destroy__ = _quickfix.delete_DistribPercentage

# Register DistribPercentage in _quickfix:
_quickfix.DistribPercentage_swigregister(DistribPercentage)

class RegistID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RegistID_swiginit(self, _quickfix.new_RegistID(*args))
    __swig_destroy__ = _quickfix.delete_RegistID

# Register RegistID in _quickfix:
_quickfix.RegistID_swigregister(RegistID)

class RegistTransType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RegistTransType_swiginit(self, _quickfix.new_RegistTransType(*args))
    __swig_destroy__ = _quickfix.delete_RegistTransType

# Register RegistTransType in _quickfix:
_quickfix.RegistTransType_swigregister(RegistTransType)

class ExecValuationPoint(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecValuationPoint_swiginit(self, _quickfix.new_ExecValuationPoint(*args))
    __swig_destroy__ = _quickfix.delete_ExecValuationPoint

# Register ExecValuationPoint in _quickfix:
_quickfix.ExecValuationPoint_swigregister(ExecValuationPoint)

class OrderPercent(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderPercent_swiginit(self, _quickfix.new_OrderPercent(*args))
    __swig_destroy__ = _quickfix.delete_OrderPercent

# Register OrderPercent in _quickfix:
_quickfix.OrderPercent_swigregister(OrderPercent)

class OwnershipType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OwnershipType_swiginit(self, _quickfix.new_OwnershipType(*args))
    __swig_destroy__ = _quickfix.delete_OwnershipType

# Register OwnershipType in _quickfix:
_quickfix.OwnershipType_swigregister(OwnershipType)

class NoContAmts(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoContAmts_swiginit(self, _quickfix.new_NoContAmts(*args))
    __swig_destroy__ = _quickfix.delete_NoContAmts

# Register NoContAmts in _quickfix:
_quickfix.NoContAmts_swigregister(NoContAmts)

class ContAmtType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContAmtType_swiginit(self, _quickfix.new_ContAmtType(*args))
    __swig_destroy__ = _quickfix.delete_ContAmtType

# Register ContAmtType in _quickfix:
_quickfix.ContAmtType_swigregister(ContAmtType)

class ContAmtValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContAmtValue_swiginit(self, _quickfix.new_ContAmtValue(*args))
    __swig_destroy__ = _quickfix.delete_ContAmtValue

# Register ContAmtValue in _quickfix:
_quickfix.ContAmtValue_swigregister(ContAmtValue)

class ContAmtCurr(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContAmtCurr_swiginit(self, _quickfix.new_ContAmtCurr(*args))
    __swig_destroy__ = _quickfix.delete_ContAmtCurr

# Register ContAmtCurr in _quickfix:
_quickfix.ContAmtCurr_swigregister(ContAmtCurr)

class OwnerType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OwnerType_swiginit(self, _quickfix.new_OwnerType(*args))
    __swig_destroy__ = _quickfix.delete_OwnerType

# Register OwnerType in _quickfix:
_quickfix.OwnerType_swigregister(OwnerType)

class PartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PartySubID_swiginit(self, _quickfix.new_PartySubID(*args))
    __swig_destroy__ = _quickfix.delete_PartySubID

# Register PartySubID in _quickfix:
_quickfix.PartySubID_swigregister(PartySubID)

class NestedPartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NestedPartyID_swiginit(self, _quickfix.new_NestedPartyID(*args))
    __swig_destroy__ = _quickfix.delete_NestedPartyID

# Register NestedPartyID in _quickfix:
_quickfix.NestedPartyID_swigregister(NestedPartyID)

class NestedPartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NestedPartyIDSource_swiginit(self, _quickfix.new_NestedPartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_NestedPartyIDSource

# Register NestedPartyIDSource in _quickfix:
_quickfix.NestedPartyIDSource_swigregister(NestedPartyIDSource)

class SecondaryClOrdID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryClOrdID_swiginit(self, _quickfix.new_SecondaryClOrdID(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryClOrdID

# Register SecondaryClOrdID in _quickfix:
_quickfix.SecondaryClOrdID_swigregister(SecondaryClOrdID)

class SecondaryExecID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryExecID_swiginit(self, _quickfix.new_SecondaryExecID(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryExecID

# Register SecondaryExecID in _quickfix:
_quickfix.SecondaryExecID_swigregister(SecondaryExecID)

class OrderCapacity(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderCapacity_swiginit(self, _quickfix.new_OrderCapacity(*args))
    __swig_destroy__ = _quickfix.delete_OrderCapacity

# Register OrderCapacity in _quickfix:
_quickfix.OrderCapacity_swigregister(OrderCapacity)

class OrderRestrictions(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderRestrictions_swiginit(self, _quickfix.new_OrderRestrictions(*args))
    __swig_destroy__ = _quickfix.delete_OrderRestrictions

# Register OrderRestrictions in _quickfix:
_quickfix.OrderRestrictions_swigregister(OrderRestrictions)

class MassCancelRequestType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MassCancelRequestType_swiginit(self, _quickfix.new_MassCancelRequestType(*args))
    __swig_destroy__ = _quickfix.delete_MassCancelRequestType

# Register MassCancelRequestType in _quickfix:
_quickfix.MassCancelRequestType_swigregister(MassCancelRequestType)

class MassCancelResponse(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MassCancelResponse_swiginit(self, _quickfix.new_MassCancelResponse(*args))
    __swig_destroy__ = _quickfix.delete_MassCancelResponse

# Register MassCancelResponse in _quickfix:
_quickfix.MassCancelResponse_swigregister(MassCancelResponse)

class MassCancelRejectReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MassCancelRejectReason_swiginit(self, _quickfix.new_MassCancelRejectReason(*args))
    __swig_destroy__ = _quickfix.delete_MassCancelRejectReason

# Register MassCancelRejectReason in _quickfix:
_quickfix.MassCancelRejectReason_swigregister(MassCancelRejectReason)

class TotalAffectedOrders(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotalAffectedOrders_swiginit(self, _quickfix.new_TotalAffectedOrders(*args))
    __swig_destroy__ = _quickfix.delete_TotalAffectedOrders

# Register TotalAffectedOrders in _quickfix:
_quickfix.TotalAffectedOrders_swigregister(TotalAffectedOrders)

class NoAffectedOrders(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoAffectedOrders_swiginit(self, _quickfix.new_NoAffectedOrders(*args))
    __swig_destroy__ = _quickfix.delete_NoAffectedOrders

# Register NoAffectedOrders in _quickfix:
_quickfix.NoAffectedOrders_swigregister(NoAffectedOrders)

class AffectedOrderID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AffectedOrderID_swiginit(self, _quickfix.new_AffectedOrderID(*args))
    __swig_destroy__ = _quickfix.delete_AffectedOrderID

# Register AffectedOrderID in _quickfix:
_quickfix.AffectedOrderID_swigregister(AffectedOrderID)

class AffectedSecondaryOrderID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AffectedSecondaryOrderID_swiginit(self, _quickfix.new_AffectedSecondaryOrderID(*args))
    __swig_destroy__ = _quickfix.delete_AffectedSecondaryOrderID

# Register AffectedSecondaryOrderID in _quickfix:
_quickfix.AffectedSecondaryOrderID_swigregister(AffectedSecondaryOrderID)

class QuoteType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteType_swiginit(self, _quickfix.new_QuoteType(*args))
    __swig_destroy__ = _quickfix.delete_QuoteType

# Register QuoteType in _quickfix:
_quickfix.QuoteType_swigregister(QuoteType)

class NestedPartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NestedPartyRole_swiginit(self, _quickfix.new_NestedPartyRole(*args))
    __swig_destroy__ = _quickfix.delete_NestedPartyRole

# Register NestedPartyRole in _quickfix:
_quickfix.NestedPartyRole_swigregister(NestedPartyRole)

class NoNestedPartyIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNestedPartyIDs_swiginit(self, _quickfix.new_NoNestedPartyIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoNestedPartyIDs

# Register NoNestedPartyIDs in _quickfix:
_quickfix.NoNestedPartyIDs_swigregister(NoNestedPartyIDs)

class TotalAccruedInterestAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotalAccruedInterestAmt_swiginit(self, _quickfix.new_TotalAccruedInterestAmt(*args))
    __swig_destroy__ = _quickfix.delete_TotalAccruedInterestAmt

# Register TotalAccruedInterestAmt in _quickfix:
_quickfix.TotalAccruedInterestAmt_swigregister(TotalAccruedInterestAmt)

class MaturityDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaturityDate_swiginit(self, _quickfix.new_MaturityDate(*args))
    __swig_destroy__ = _quickfix.delete_MaturityDate

# Register MaturityDate in _quickfix:
_quickfix.MaturityDate_swigregister(MaturityDate)

class UnderlyingMaturityDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingMaturityDate_swiginit(self, _quickfix.new_UnderlyingMaturityDate(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingMaturityDate

# Register UnderlyingMaturityDate in _quickfix:
_quickfix.UnderlyingMaturityDate_swigregister(UnderlyingMaturityDate)

class InstrRegistry(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InstrRegistry_swiginit(self, _quickfix.new_InstrRegistry(*args))
    __swig_destroy__ = _quickfix.delete_InstrRegistry

# Register InstrRegistry in _quickfix:
_quickfix.InstrRegistry_swigregister(InstrRegistry)

class CashMargin(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashMargin_swiginit(self, _quickfix.new_CashMargin(*args))
    __swig_destroy__ = _quickfix.delete_CashMargin

# Register CashMargin in _quickfix:
_quickfix.CashMargin_swigregister(CashMargin)

class NestedPartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NestedPartySubID_swiginit(self, _quickfix.new_NestedPartySubID(*args))
    __swig_destroy__ = _quickfix.delete_NestedPartySubID

# Register NestedPartySubID in _quickfix:
_quickfix.NestedPartySubID_swigregister(NestedPartySubID)

class Scope(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Scope_swiginit(self, _quickfix.new_Scope(*args))
    __swig_destroy__ = _quickfix.delete_Scope

# Register Scope in _quickfix:
_quickfix.Scope_swigregister(Scope)

class MDImplicitDelete(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDImplicitDelete_swiginit(self, _quickfix.new_MDImplicitDelete(*args))
    __swig_destroy__ = _quickfix.delete_MDImplicitDelete

# Register MDImplicitDelete in _quickfix:
_quickfix.MDImplicitDelete_swigregister(MDImplicitDelete)

class CrossID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CrossID_swiginit(self, _quickfix.new_CrossID(*args))
    __swig_destroy__ = _quickfix.delete_CrossID

# Register CrossID in _quickfix:
_quickfix.CrossID_swigregister(CrossID)

class CrossType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CrossType_swiginit(self, _quickfix.new_CrossType(*args))
    __swig_destroy__ = _quickfix.delete_CrossType

# Register CrossType in _quickfix:
_quickfix.CrossType_swigregister(CrossType)

class CrossPrioritization(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CrossPrioritization_swiginit(self, _quickfix.new_CrossPrioritization(*args))
    __swig_destroy__ = _quickfix.delete_CrossPrioritization

# Register CrossPrioritization in _quickfix:
_quickfix.CrossPrioritization_swigregister(CrossPrioritization)

class OrigCrossID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigCrossID_swiginit(self, _quickfix.new_OrigCrossID(*args))
    __swig_destroy__ = _quickfix.delete_OrigCrossID

# Register OrigCrossID in _quickfix:
_quickfix.OrigCrossID_swigregister(OrigCrossID)

class NoSides(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoSides_swiginit(self, _quickfix.new_NoSides(*args))
    __swig_destroy__ = _quickfix.delete_NoSides

# Register NoSides in _quickfix:
_quickfix.NoSides_swigregister(NoSides)

class NoLegs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoLegs_swiginit(self, _quickfix.new_NoLegs(*args))
    __swig_destroy__ = _quickfix.delete_NoLegs

# Register NoLegs in _quickfix:
_quickfix.NoLegs_swigregister(NoLegs)

class LegCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegCurrency_swiginit(self, _quickfix.new_LegCurrency(*args))
    __swig_destroy__ = _quickfix.delete_LegCurrency

# Register LegCurrency in _quickfix:
_quickfix.LegCurrency_swigregister(LegCurrency)

class TotalNumSecurityTypes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotalNumSecurityTypes_swiginit(self, _quickfix.new_TotalNumSecurityTypes(*args))
    __swig_destroy__ = _quickfix.delete_TotalNumSecurityTypes

# Register TotalNumSecurityTypes in _quickfix:
_quickfix.TotalNumSecurityTypes_swigregister(TotalNumSecurityTypes)

class NoSecurityTypes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoSecurityTypes_swiginit(self, _quickfix.new_NoSecurityTypes(*args))
    __swig_destroy__ = _quickfix.delete_NoSecurityTypes

# Register NoSecurityTypes in _quickfix:
_quickfix.NoSecurityTypes_swigregister(NoSecurityTypes)

class SecurityListRequestType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityListRequestType_swiginit(self, _quickfix.new_SecurityListRequestType(*args))
    __swig_destroy__ = _quickfix.delete_SecurityListRequestType

# Register SecurityListRequestType in _quickfix:
_quickfix.SecurityListRequestType_swigregister(SecurityListRequestType)

class SecurityRequestResult(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityRequestResult_swiginit(self, _quickfix.new_SecurityRequestResult(*args))
    __swig_destroy__ = _quickfix.delete_SecurityRequestResult

# Register SecurityRequestResult in _quickfix:
_quickfix.SecurityRequestResult_swigregister(SecurityRequestResult)

class RoundLot(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RoundLot_swiginit(self, _quickfix.new_RoundLot(*args))
    __swig_destroy__ = _quickfix.delete_RoundLot

# Register RoundLot in _quickfix:
_quickfix.RoundLot_swigregister(RoundLot)

class MinTradeVol(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MinTradeVol_swiginit(self, _quickfix.new_MinTradeVol(*args))
    __swig_destroy__ = _quickfix.delete_MinTradeVol

# Register MinTradeVol in _quickfix:
_quickfix.MinTradeVol_swigregister(MinTradeVol)

class MultiLegRptTypeReq(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MultiLegRptTypeReq_swiginit(self, _quickfix.new_MultiLegRptTypeReq(*args))
    __swig_destroy__ = _quickfix.delete_MultiLegRptTypeReq

# Register MultiLegRptTypeReq in _quickfix:
_quickfix.MultiLegRptTypeReq_swigregister(MultiLegRptTypeReq)

class LegPositionEffect(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegPositionEffect_swiginit(self, _quickfix.new_LegPositionEffect(*args))
    __swig_destroy__ = _quickfix.delete_LegPositionEffect

# Register LegPositionEffect in _quickfix:
_quickfix.LegPositionEffect_swigregister(LegPositionEffect)

class LegCoveredOrUncovered(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegCoveredOrUncovered_swiginit(self, _quickfix.new_LegCoveredOrUncovered(*args))
    __swig_destroy__ = _quickfix.delete_LegCoveredOrUncovered

# Register LegCoveredOrUncovered in _quickfix:
_quickfix.LegCoveredOrUncovered_swigregister(LegCoveredOrUncovered)

class LegPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegPrice_swiginit(self, _quickfix.new_LegPrice(*args))
    __swig_destroy__ = _quickfix.delete_LegPrice

# Register LegPrice in _quickfix:
_quickfix.LegPrice_swigregister(LegPrice)

class TradSesStatusRejReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesStatusRejReason_swiginit(self, _quickfix.new_TradSesStatusRejReason(*args))
    __swig_destroy__ = _quickfix.delete_TradSesStatusRejReason

# Register TradSesStatusRejReason in _quickfix:
_quickfix.TradSesStatusRejReason_swigregister(TradSesStatusRejReason)

class TradeRequestID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeRequestID_swiginit(self, _quickfix.new_TradeRequestID(*args))
    __swig_destroy__ = _quickfix.delete_TradeRequestID

# Register TradeRequestID in _quickfix:
_quickfix.TradeRequestID_swigregister(TradeRequestID)

class TradeRequestType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeRequestType_swiginit(self, _quickfix.new_TradeRequestType(*args))
    __swig_destroy__ = _quickfix.delete_TradeRequestType

# Register TradeRequestType in _quickfix:
_quickfix.TradeRequestType_swigregister(TradeRequestType)

class PreviouslyReported(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PreviouslyReported_swiginit(self, _quickfix.new_PreviouslyReported(*args))
    __swig_destroy__ = _quickfix.delete_PreviouslyReported

# Register PreviouslyReported in _quickfix:
_quickfix.PreviouslyReported_swigregister(PreviouslyReported)

class TradeReportID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeReportID_swiginit(self, _quickfix.new_TradeReportID(*args))
    __swig_destroy__ = _quickfix.delete_TradeReportID

# Register TradeReportID in _quickfix:
_quickfix.TradeReportID_swigregister(TradeReportID)

class TradeReportRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeReportRefID_swiginit(self, _quickfix.new_TradeReportRefID(*args))
    __swig_destroy__ = _quickfix.delete_TradeReportRefID

# Register TradeReportRefID in _quickfix:
_quickfix.TradeReportRefID_swigregister(TradeReportRefID)

class MatchStatus(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MatchStatus_swiginit(self, _quickfix.new_MatchStatus(*args))
    __swig_destroy__ = _quickfix.delete_MatchStatus

# Register MatchStatus in _quickfix:
_quickfix.MatchStatus_swigregister(MatchStatus)

class MatchType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MatchType_swiginit(self, _quickfix.new_MatchType(*args))
    __swig_destroy__ = _quickfix.delete_MatchType

# Register MatchType in _quickfix:
_quickfix.MatchType_swigregister(MatchType)

class OddLot(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OddLot_swiginit(self, _quickfix.new_OddLot(*args))
    __swig_destroy__ = _quickfix.delete_OddLot

# Register OddLot in _quickfix:
_quickfix.OddLot_swigregister(OddLot)

class NoClearingInstructions(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoClearingInstructions_swiginit(self, _quickfix.new_NoClearingInstructions(*args))
    __swig_destroy__ = _quickfix.delete_NoClearingInstructions

# Register NoClearingInstructions in _quickfix:
_quickfix.NoClearingInstructions_swigregister(NoClearingInstructions)

class ClearingInstruction(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ClearingInstruction_swiginit(self, _quickfix.new_ClearingInstruction(*args))
    __swig_destroy__ = _quickfix.delete_ClearingInstruction

# Register ClearingInstruction in _quickfix:
_quickfix.ClearingInstruction_swigregister(ClearingInstruction)

class TradeInputSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeInputSource_swiginit(self, _quickfix.new_TradeInputSource(*args))
    __swig_destroy__ = _quickfix.delete_TradeInputSource

# Register TradeInputSource in _quickfix:
_quickfix.TradeInputSource_swigregister(TradeInputSource)

class TradeInputDevice(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeInputDevice_swiginit(self, _quickfix.new_TradeInputDevice(*args))
    __swig_destroy__ = _quickfix.delete_TradeInputDevice

# Register TradeInputDevice in _quickfix:
_quickfix.TradeInputDevice_swigregister(TradeInputDevice)

class NoDates(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoDates_swiginit(self, _quickfix.new_NoDates(*args))
    __swig_destroy__ = _quickfix.delete_NoDates

# Register NoDates in _quickfix:
_quickfix.NoDates_swigregister(NoDates)

class AccountType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AccountType_swiginit(self, _quickfix.new_AccountType(*args))
    __swig_destroy__ = _quickfix.delete_AccountType

# Register AccountType in _quickfix:
_quickfix.AccountType_swigregister(AccountType)

class CustOrderCapacity(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CustOrderCapacity_swiginit(self, _quickfix.new_CustOrderCapacity(*args))
    __swig_destroy__ = _quickfix.delete_CustOrderCapacity

# Register CustOrderCapacity in _quickfix:
_quickfix.CustOrderCapacity_swigregister(CustOrderCapacity)

class ClOrdLinkID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ClOrdLinkID_swiginit(self, _quickfix.new_ClOrdLinkID(*args))
    __swig_destroy__ = _quickfix.delete_ClOrdLinkID

# Register ClOrdLinkID in _quickfix:
_quickfix.ClOrdLinkID_swigregister(ClOrdLinkID)

class MassStatusReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MassStatusReqID_swiginit(self, _quickfix.new_MassStatusReqID(*args))
    __swig_destroy__ = _quickfix.delete_MassStatusReqID

# Register MassStatusReqID in _quickfix:
_quickfix.MassStatusReqID_swigregister(MassStatusReqID)

class MassStatusReqType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MassStatusReqType_swiginit(self, _quickfix.new_MassStatusReqType(*args))
    __swig_destroy__ = _quickfix.delete_MassStatusReqType

# Register MassStatusReqType in _quickfix:
_quickfix.MassStatusReqType_swigregister(MassStatusReqType)

class OrigOrdModTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigOrdModTime_swiginit(self, _quickfix.new_OrigOrdModTime(*args))
    __swig_destroy__ = _quickfix.delete_OrigOrdModTime

# Register OrigOrdModTime in _quickfix:
_quickfix.OrigOrdModTime_swigregister(OrigOrdModTime)

class LegSettlmntTyp(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSettlmntTyp_swiginit(self, _quickfix.new_LegSettlmntTyp(*args))
    __swig_destroy__ = _quickfix.delete_LegSettlmntTyp

# Register LegSettlmntTyp in _quickfix:
_quickfix.LegSettlmntTyp_swigregister(LegSettlmntTyp)

class LegFutSettDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegFutSettDate_swiginit(self, _quickfix.new_LegFutSettDate(*args))
    __swig_destroy__ = _quickfix.delete_LegFutSettDate

# Register LegFutSettDate in _quickfix:
_quickfix.LegFutSettDate_swigregister(LegFutSettDate)

class DayBookingInst(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DayBookingInst_swiginit(self, _quickfix.new_DayBookingInst(*args))
    __swig_destroy__ = _quickfix.delete_DayBookingInst

# Register DayBookingInst in _quickfix:
_quickfix.DayBookingInst_swigregister(DayBookingInst)

class BookingUnit(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BookingUnit_swiginit(self, _quickfix.new_BookingUnit(*args))
    __swig_destroy__ = _quickfix.delete_BookingUnit

# Register BookingUnit in _quickfix:
_quickfix.BookingUnit_swigregister(BookingUnit)

class PreallocMethod(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PreallocMethod_swiginit(self, _quickfix.new_PreallocMethod(*args))
    __swig_destroy__ = _quickfix.delete_PreallocMethod

# Register PreallocMethod in _quickfix:
_quickfix.PreallocMethod_swigregister(PreallocMethod)

class UnderlyingCountryOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCountryOfIssue_swiginit(self, _quickfix.new_UnderlyingCountryOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCountryOfIssue

# Register UnderlyingCountryOfIssue in _quickfix:
_quickfix.UnderlyingCountryOfIssue_swigregister(UnderlyingCountryOfIssue)

class UnderlyingStateOrProvinceOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingStateOrProvinceOfIssue_swiginit(self, _quickfix.new_UnderlyingStateOrProvinceOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingStateOrProvinceOfIssue

# Register UnderlyingStateOrProvinceOfIssue in _quickfix:
_quickfix.UnderlyingStateOrProvinceOfIssue_swigregister(UnderlyingStateOrProvinceOfIssue)

class UnderlyingLocaleOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLocaleOfIssue_swiginit(self, _quickfix.new_UnderlyingLocaleOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLocaleOfIssue

# Register UnderlyingLocaleOfIssue in _quickfix:
_quickfix.UnderlyingLocaleOfIssue_swigregister(UnderlyingLocaleOfIssue)

class UnderlyingInstrRegistry(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingInstrRegistry_swiginit(self, _quickfix.new_UnderlyingInstrRegistry(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrRegistry

# Register UnderlyingInstrRegistry in _quickfix:
_quickfix.UnderlyingInstrRegistry_swigregister(UnderlyingInstrRegistry)

class LegCountryOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegCountryOfIssue_swiginit(self, _quickfix.new_LegCountryOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_LegCountryOfIssue

# Register LegCountryOfIssue in _quickfix:
_quickfix.LegCountryOfIssue_swigregister(LegCountryOfIssue)

class LegStateOrProvinceOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegStateOrProvinceOfIssue_swiginit(self, _quickfix.new_LegStateOrProvinceOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_LegStateOrProvinceOfIssue

# Register LegStateOrProvinceOfIssue in _quickfix:
_quickfix.LegStateOrProvinceOfIssue_swigregister(LegStateOrProvinceOfIssue)

class LegLocaleOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegLocaleOfIssue_swiginit(self, _quickfix.new_LegLocaleOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_LegLocaleOfIssue

# Register LegLocaleOfIssue in _quickfix:
_quickfix.LegLocaleOfIssue_swigregister(LegLocaleOfIssue)

class LegInstrRegistry(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegInstrRegistry_swiginit(self, _quickfix.new_LegInstrRegistry(*args))
    __swig_destroy__ = _quickfix.delete_LegInstrRegistry

# Register LegInstrRegistry in _quickfix:
_quickfix.LegInstrRegistry_swigregister(LegInstrRegistry)

class LegSymbol(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSymbol_swiginit(self, _quickfix.new_LegSymbol(*args))
    __swig_destroy__ = _quickfix.delete_LegSymbol

# Register LegSymbol in _quickfix:
_quickfix.LegSymbol_swigregister(LegSymbol)

class LegSymbolSfx(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSymbolSfx_swiginit(self, _quickfix.new_LegSymbolSfx(*args))
    __swig_destroy__ = _quickfix.delete_LegSymbolSfx

# Register LegSymbolSfx in _quickfix:
_quickfix.LegSymbolSfx_swigregister(LegSymbolSfx)

class LegSecurityID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSecurityID_swiginit(self, _quickfix.new_LegSecurityID(*args))
    __swig_destroy__ = _quickfix.delete_LegSecurityID

# Register LegSecurityID in _quickfix:
_quickfix.LegSecurityID_swigregister(LegSecurityID)

class LegSecurityIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSecurityIDSource_swiginit(self, _quickfix.new_LegSecurityIDSource(*args))
    __swig_destroy__ = _quickfix.delete_LegSecurityIDSource

# Register LegSecurityIDSource in _quickfix:
_quickfix.LegSecurityIDSource_swigregister(LegSecurityIDSource)

class NoLegSecurityAltID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoLegSecurityAltID_swiginit(self, _quickfix.new_NoLegSecurityAltID(*args))
    __swig_destroy__ = _quickfix.delete_NoLegSecurityAltID

# Register NoLegSecurityAltID in _quickfix:
_quickfix.NoLegSecurityAltID_swigregister(NoLegSecurityAltID)

class LegSecurityAltID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSecurityAltID_swiginit(self, _quickfix.new_LegSecurityAltID(*args))
    __swig_destroy__ = _quickfix.delete_LegSecurityAltID

# Register LegSecurityAltID in _quickfix:
_quickfix.LegSecurityAltID_swigregister(LegSecurityAltID)

class LegSecurityAltIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSecurityAltIDSource_swiginit(self, _quickfix.new_LegSecurityAltIDSource(*args))
    __swig_destroy__ = _quickfix.delete_LegSecurityAltIDSource

# Register LegSecurityAltIDSource in _quickfix:
_quickfix.LegSecurityAltIDSource_swigregister(LegSecurityAltIDSource)

class LegProduct(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegProduct_swiginit(self, _quickfix.new_LegProduct(*args))
    __swig_destroy__ = _quickfix.delete_LegProduct

# Register LegProduct in _quickfix:
_quickfix.LegProduct_swigregister(LegProduct)

class LegCFICode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegCFICode_swiginit(self, _quickfix.new_LegCFICode(*args))
    __swig_destroy__ = _quickfix.delete_LegCFICode

# Register LegCFICode in _quickfix:
_quickfix.LegCFICode_swigregister(LegCFICode)

class LegSecurityType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSecurityType_swiginit(self, _quickfix.new_LegSecurityType(*args))
    __swig_destroy__ = _quickfix.delete_LegSecurityType

# Register LegSecurityType in _quickfix:
_quickfix.LegSecurityType_swigregister(LegSecurityType)

class LegMaturityMonthYear(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegMaturityMonthYear_swiginit(self, _quickfix.new_LegMaturityMonthYear(*args))
    __swig_destroy__ = _quickfix.delete_LegMaturityMonthYear

# Register LegMaturityMonthYear in _quickfix:
_quickfix.LegMaturityMonthYear_swigregister(LegMaturityMonthYear)

class LegMaturityDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegMaturityDate_swiginit(self, _quickfix.new_LegMaturityDate(*args))
    __swig_destroy__ = _quickfix.delete_LegMaturityDate

# Register LegMaturityDate in _quickfix:
_quickfix.LegMaturityDate_swigregister(LegMaturityDate)

class LegStrikePrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegStrikePrice_swiginit(self, _quickfix.new_LegStrikePrice(*args))
    __swig_destroy__ = _quickfix.delete_LegStrikePrice

# Register LegStrikePrice in _quickfix:
_quickfix.LegStrikePrice_swigregister(LegStrikePrice)

class LegOptAttribute(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegOptAttribute_swiginit(self, _quickfix.new_LegOptAttribute(*args))
    __swig_destroy__ = _quickfix.delete_LegOptAttribute

# Register LegOptAttribute in _quickfix:
_quickfix.LegOptAttribute_swigregister(LegOptAttribute)

class LegContractMultiplier(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegContractMultiplier_swiginit(self, _quickfix.new_LegContractMultiplier(*args))
    __swig_destroy__ = _quickfix.delete_LegContractMultiplier

# Register LegContractMultiplier in _quickfix:
_quickfix.LegContractMultiplier_swigregister(LegContractMultiplier)

class LegCouponRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegCouponRate_swiginit(self, _quickfix.new_LegCouponRate(*args))
    __swig_destroy__ = _quickfix.delete_LegCouponRate

# Register LegCouponRate in _quickfix:
_quickfix.LegCouponRate_swigregister(LegCouponRate)

class LegSecurityExchange(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSecurityExchange_swiginit(self, _quickfix.new_LegSecurityExchange(*args))
    __swig_destroy__ = _quickfix.delete_LegSecurityExchange

# Register LegSecurityExchange in _quickfix:
_quickfix.LegSecurityExchange_swigregister(LegSecurityExchange)

class LegIssuer(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegIssuer_swiginit(self, _quickfix.new_LegIssuer(*args))
    __swig_destroy__ = _quickfix.delete_LegIssuer

# Register LegIssuer in _quickfix:
_quickfix.LegIssuer_swigregister(LegIssuer)

class EncodedLegIssuerLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedLegIssuerLen_swiginit(self, _quickfix.new_EncodedLegIssuerLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedLegIssuerLen

# Register EncodedLegIssuerLen in _quickfix:
_quickfix.EncodedLegIssuerLen_swigregister(EncodedLegIssuerLen)

class EncodedLegIssuer(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedLegIssuer_swiginit(self, _quickfix.new_EncodedLegIssuer(*args))
    __swig_destroy__ = _quickfix.delete_EncodedLegIssuer

# Register EncodedLegIssuer in _quickfix:
_quickfix.EncodedLegIssuer_swigregister(EncodedLegIssuer)

class LegSecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSecurityDesc_swiginit(self, _quickfix.new_LegSecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_LegSecurityDesc

# Register LegSecurityDesc in _quickfix:
_quickfix.LegSecurityDesc_swigregister(LegSecurityDesc)

class EncodedLegSecurityDescLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedLegSecurityDescLen_swiginit(self, _quickfix.new_EncodedLegSecurityDescLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedLegSecurityDescLen

# Register EncodedLegSecurityDescLen in _quickfix:
_quickfix.EncodedLegSecurityDescLen_swigregister(EncodedLegSecurityDescLen)

class EncodedLegSecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedLegSecurityDesc_swiginit(self, _quickfix.new_EncodedLegSecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_EncodedLegSecurityDesc

# Register EncodedLegSecurityDesc in _quickfix:
_quickfix.EncodedLegSecurityDesc_swigregister(EncodedLegSecurityDesc)

class LegRatioQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegRatioQty_swiginit(self, _quickfix.new_LegRatioQty(*args))
    __swig_destroy__ = _quickfix.delete_LegRatioQty

# Register LegRatioQty in _quickfix:
_quickfix.LegRatioQty_swigregister(LegRatioQty)

class LegSide(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSide_swiginit(self, _quickfix.new_LegSide(*args))
    __swig_destroy__ = _quickfix.delete_LegSide

# Register LegSide in _quickfix:
_quickfix.LegSide_swigregister(LegSide)

class TradingSessionSubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradingSessionSubID_swiginit(self, _quickfix.new_TradingSessionSubID(*args))
    __swig_destroy__ = _quickfix.delete_TradingSessionSubID

# Register TradingSessionSubID in _quickfix:
_quickfix.TradingSessionSubID_swigregister(TradingSessionSubID)

class AllocType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocType_swiginit(self, _quickfix.new_AllocType(*args))
    __swig_destroy__ = _quickfix.delete_AllocType

# Register AllocType in _quickfix:
_quickfix.AllocType_swigregister(AllocType)

class MidPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MidPx_swiginit(self, _quickfix.new_MidPx(*args))
    __swig_destroy__ = _quickfix.delete_MidPx

# Register MidPx in _quickfix:
_quickfix.MidPx_swigregister(MidPx)

class BidYield(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidYield_swiginit(self, _quickfix.new_BidYield(*args))
    __swig_destroy__ = _quickfix.delete_BidYield

# Register BidYield in _quickfix:
_quickfix.BidYield_swigregister(BidYield)

class MidYield(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MidYield_swiginit(self, _quickfix.new_MidYield(*args))
    __swig_destroy__ = _quickfix.delete_MidYield

# Register MidYield in _quickfix:
_quickfix.MidYield_swigregister(MidYield)

class OfferYield(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OfferYield_swiginit(self, _quickfix.new_OfferYield(*args))
    __swig_destroy__ = _quickfix.delete_OfferYield

# Register OfferYield in _quickfix:
_quickfix.OfferYield_swigregister(OfferYield)

class ClearingFeeIndicator(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ClearingFeeIndicator_swiginit(self, _quickfix.new_ClearingFeeIndicator(*args))
    __swig_destroy__ = _quickfix.delete_ClearingFeeIndicator

# Register ClearingFeeIndicator in _quickfix:
_quickfix.ClearingFeeIndicator_swigregister(ClearingFeeIndicator)

class WorkingIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.WorkingIndicator_swiginit(self, _quickfix.new_WorkingIndicator(*args))
    __swig_destroy__ = _quickfix.delete_WorkingIndicator

# Register WorkingIndicator in _quickfix:
_quickfix.WorkingIndicator_swigregister(WorkingIndicator)

class LegLastPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegLastPx_swiginit(self, _quickfix.new_LegLastPx(*args))
    __swig_destroy__ = _quickfix.delete_LegLastPx

# Register LegLastPx in _quickfix:
_quickfix.LegLastPx_swigregister(LegLastPx)

class PriorityIndicator(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriorityIndicator_swiginit(self, _quickfix.new_PriorityIndicator(*args))
    __swig_destroy__ = _quickfix.delete_PriorityIndicator

# Register PriorityIndicator in _quickfix:
_quickfix.PriorityIndicator_swigregister(PriorityIndicator)

class PriceImprovement(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriceImprovement_swiginit(self, _quickfix.new_PriceImprovement(*args))
    __swig_destroy__ = _quickfix.delete_PriceImprovement

# Register PriceImprovement in _quickfix:
_quickfix.PriceImprovement_swigregister(PriceImprovement)

class Price2(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Price2_swiginit(self, _quickfix.new_Price2(*args))
    __swig_destroy__ = _quickfix.delete_Price2

# Register Price2 in _quickfix:
_quickfix.Price2_swigregister(Price2)

class LastForwardPoints2(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastForwardPoints2_swiginit(self, _quickfix.new_LastForwardPoints2(*args))
    __swig_destroy__ = _quickfix.delete_LastForwardPoints2

# Register LastForwardPoints2 in _quickfix:
_quickfix.LastForwardPoints2_swigregister(LastForwardPoints2)

class BidForwardPoints2(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidForwardPoints2_swiginit(self, _quickfix.new_BidForwardPoints2(*args))
    __swig_destroy__ = _quickfix.delete_BidForwardPoints2

# Register BidForwardPoints2 in _quickfix:
_quickfix.BidForwardPoints2_swigregister(BidForwardPoints2)

class OfferForwardPoints2(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OfferForwardPoints2_swiginit(self, _quickfix.new_OfferForwardPoints2(*args))
    __swig_destroy__ = _quickfix.delete_OfferForwardPoints2

# Register OfferForwardPoints2 in _quickfix:
_quickfix.OfferForwardPoints2_swigregister(OfferForwardPoints2)

class RFQReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RFQReqID_swiginit(self, _quickfix.new_RFQReqID(*args))
    __swig_destroy__ = _quickfix.delete_RFQReqID

# Register RFQReqID in _quickfix:
_quickfix.RFQReqID_swigregister(RFQReqID)

class MktBidPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MktBidPx_swiginit(self, _quickfix.new_MktBidPx(*args))
    __swig_destroy__ = _quickfix.delete_MktBidPx

# Register MktBidPx in _quickfix:
_quickfix.MktBidPx_swigregister(MktBidPx)

class MktOfferPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MktOfferPx_swiginit(self, _quickfix.new_MktOfferPx(*args))
    __swig_destroy__ = _quickfix.delete_MktOfferPx

# Register MktOfferPx in _quickfix:
_quickfix.MktOfferPx_swigregister(MktOfferPx)

class MinBidSize(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MinBidSize_swiginit(self, _quickfix.new_MinBidSize(*args))
    __swig_destroy__ = _quickfix.delete_MinBidSize

# Register MinBidSize in _quickfix:
_quickfix.MinBidSize_swigregister(MinBidSize)

class MinOfferSize(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MinOfferSize_swiginit(self, _quickfix.new_MinOfferSize(*args))
    __swig_destroy__ = _quickfix.delete_MinOfferSize

# Register MinOfferSize in _quickfix:
_quickfix.MinOfferSize_swigregister(MinOfferSize)

class QuoteStatusReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteStatusReqID_swiginit(self, _quickfix.new_QuoteStatusReqID(*args))
    __swig_destroy__ = _quickfix.delete_QuoteStatusReqID

# Register QuoteStatusReqID in _quickfix:
_quickfix.QuoteStatusReqID_swigregister(QuoteStatusReqID)

class LegalConfirm(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegalConfirm_swiginit(self, _quickfix.new_LegalConfirm(*args))
    __swig_destroy__ = _quickfix.delete_LegalConfirm

# Register LegalConfirm in _quickfix:
_quickfix.LegalConfirm_swigregister(LegalConfirm)

class UnderlyingLastPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLastPx_swiginit(self, _quickfix.new_UnderlyingLastPx(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLastPx

# Register UnderlyingLastPx in _quickfix:
_quickfix.UnderlyingLastPx_swigregister(UnderlyingLastPx)

class UnderlyingLastQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLastQty_swiginit(self, _quickfix.new_UnderlyingLastQty(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLastQty

# Register UnderlyingLastQty in _quickfix:
_quickfix.UnderlyingLastQty_swigregister(UnderlyingLastQty)

class LegRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegRefID_swiginit(self, _quickfix.new_LegRefID(*args))
    __swig_destroy__ = _quickfix.delete_LegRefID

# Register LegRefID in _quickfix:
_quickfix.LegRefID_swigregister(LegRefID)

class ContraLegRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContraLegRefID_swiginit(self, _quickfix.new_ContraLegRefID(*args))
    __swig_destroy__ = _quickfix.delete_ContraLegRefID

# Register ContraLegRefID in _quickfix:
_quickfix.ContraLegRefID_swigregister(ContraLegRefID)

class SettlCurrBidFxRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlCurrBidFxRate_swiginit(self, _quickfix.new_SettlCurrBidFxRate(*args))
    __swig_destroy__ = _quickfix.delete_SettlCurrBidFxRate

# Register SettlCurrBidFxRate in _quickfix:
_quickfix.SettlCurrBidFxRate_swigregister(SettlCurrBidFxRate)

class SettlCurrOfferFxRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlCurrOfferFxRate_swiginit(self, _quickfix.new_SettlCurrOfferFxRate(*args))
    __swig_destroy__ = _quickfix.delete_SettlCurrOfferFxRate

# Register SettlCurrOfferFxRate in _quickfix:
_quickfix.SettlCurrOfferFxRate_swigregister(SettlCurrOfferFxRate)

class QuoteRequestRejectReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteRequestRejectReason_swiginit(self, _quickfix.new_QuoteRequestRejectReason(*args))
    __swig_destroy__ = _quickfix.delete_QuoteRequestRejectReason

# Register QuoteRequestRejectReason in _quickfix:
_quickfix.QuoteRequestRejectReason_swigregister(QuoteRequestRejectReason)

class SideComplianceID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideComplianceID_swiginit(self, _quickfix.new_SideComplianceID(*args))
    __swig_destroy__ = _quickfix.delete_SideComplianceID

# Register SideComplianceID in _quickfix:
_quickfix.SideComplianceID_swigregister(SideComplianceID)

class IOIID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IOIID_swiginit(self, _quickfix.new_IOIID(*args))
    __swig_destroy__ = _quickfix.delete_IOIID

# Register IOIID in _quickfix:
_quickfix.IOIID_swigregister(IOIID)

class NoLinesOfText(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoLinesOfText_swiginit(self, _quickfix.new_NoLinesOfText(*args))
    __swig_destroy__ = _quickfix.delete_NoLinesOfText

# Register NoLinesOfText in _quickfix:
_quickfix.NoLinesOfText_swigregister(NoLinesOfText)

class SettlType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlType_swiginit(self, _quickfix.new_SettlType(*args))
    __swig_destroy__ = _quickfix.delete_SettlType

# Register SettlType in _quickfix:
_quickfix.SettlType_swigregister(SettlType)

class SettlDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlDate_swiginit(self, _quickfix.new_SettlDate(*args))
    __swig_destroy__ = _quickfix.delete_SettlDate

# Register SettlDate in _quickfix:
_quickfix.SettlDate_swigregister(SettlDate)

class AvgPxPrecision(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AvgPxPrecision_swiginit(self, _quickfix.new_AvgPxPrecision(*args))
    __swig_destroy__ = _quickfix.delete_AvgPxPrecision

# Register AvgPxPrecision in _quickfix:
_quickfix.AvgPxPrecision_swigregister(AvgPxPrecision)

class SettlDate2(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlDate2_swiginit(self, _quickfix.new_SettlDate2(*args))
    __swig_destroy__ = _quickfix.delete_SettlDate2

# Register SettlDate2 in _quickfix:
_quickfix.SettlDate2_swigregister(SettlDate2)

class PegOffsetValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegOffsetValue_swiginit(self, _quickfix.new_PegOffsetValue(*args))
    __swig_destroy__ = _quickfix.delete_PegOffsetValue

# Register PegOffsetValue in _quickfix:
_quickfix.PegOffsetValue_swigregister(PegOffsetValue)

class OpenCloseSettlFlag(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OpenCloseSettlFlag_swiginit(self, _quickfix.new_OpenCloseSettlFlag(*args))
    __swig_destroy__ = _quickfix.delete_OpenCloseSettlFlag

# Register OpenCloseSettlFlag in _quickfix:
_quickfix.OpenCloseSettlFlag_swigregister(OpenCloseSettlFlag)

class TotNoQuoteEntries(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNoQuoteEntries_swiginit(self, _quickfix.new_TotNoQuoteEntries(*args))
    __swig_destroy__ = _quickfix.delete_TotNoQuoteEntries

# Register TotNoQuoteEntries in _quickfix:
_quickfix.TotNoQuoteEntries_swigregister(TotNoQuoteEntries)

class DiscretionOffsetValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DiscretionOffsetValue_swiginit(self, _quickfix.new_DiscretionOffsetValue(*args))
    __swig_destroy__ = _quickfix.delete_DiscretionOffsetValue

# Register DiscretionOffsetValue in _quickfix:
_quickfix.DiscretionOffsetValue_swigregister(DiscretionOffsetValue)

class TotNoRelatedSym(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNoRelatedSym_swiginit(self, _quickfix.new_TotNoRelatedSym(*args))
    __swig_destroy__ = _quickfix.delete_TotNoRelatedSym

# Register TotNoRelatedSym in _quickfix:
_quickfix.TotNoRelatedSym_swigregister(TotNoRelatedSym)

class BidTradeType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidTradeType_swiginit(self, _quickfix.new_BidTradeType(*args))
    __swig_destroy__ = _quickfix.delete_BidTradeType

# Register BidTradeType in _quickfix:
_quickfix.BidTradeType_swigregister(BidTradeType)

class CardIssNum(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CardIssNum_swiginit(self, _quickfix.new_CardIssNum(*args))
    __swig_destroy__ = _quickfix.delete_CardIssNum

# Register CardIssNum in _quickfix:
_quickfix.CardIssNum_swigregister(CardIssNum)

class CashDistribAgentAcctName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashDistribAgentAcctName_swiginit(self, _quickfix.new_CashDistribAgentAcctName(*args))
    __swig_destroy__ = _quickfix.delete_CashDistribAgentAcctName

# Register CashDistribAgentAcctName in _quickfix:
_quickfix.CashDistribAgentAcctName_swigregister(CashDistribAgentAcctName)

class RegistDtls(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RegistDtls_swiginit(self, _quickfix.new_RegistDtls(*args))
    __swig_destroy__ = _quickfix.delete_RegistDtls

# Register RegistDtls in _quickfix:
_quickfix.RegistDtls_swigregister(RegistDtls)

class TotNoSecurityTypes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNoSecurityTypes_swiginit(self, _quickfix.new_TotNoSecurityTypes(*args))
    __swig_destroy__ = _quickfix.delete_TotNoSecurityTypes

# Register TotNoSecurityTypes in _quickfix:
_quickfix.TotNoSecurityTypes_swigregister(TotNoSecurityTypes)

class LegSettlType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSettlType_swiginit(self, _quickfix.new_LegSettlType(*args))
    __swig_destroy__ = _quickfix.delete_LegSettlType

# Register LegSettlType in _quickfix:
_quickfix.LegSettlType_swigregister(LegSettlType)

class LegSettlDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSettlDate_swiginit(self, _quickfix.new_LegSettlDate(*args))
    __swig_destroy__ = _quickfix.delete_LegSettlDate

# Register LegSettlDate in _quickfix:
_quickfix.LegSettlDate_swigregister(LegSettlDate)

class AcctIDSource(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AcctIDSource_swiginit(self, _quickfix.new_AcctIDSource(*args))
    __swig_destroy__ = _quickfix.delete_AcctIDSource

# Register AcctIDSource in _quickfix:
_quickfix.AcctIDSource_swigregister(AcctIDSource)

class AllocAcctIDSource(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocAcctIDSource_swiginit(self, _quickfix.new_AllocAcctIDSource(*args))
    __swig_destroy__ = _quickfix.delete_AllocAcctIDSource

# Register AllocAcctIDSource in _quickfix:
_quickfix.AllocAcctIDSource_swigregister(AllocAcctIDSource)

class BenchmarkPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BenchmarkPrice_swiginit(self, _quickfix.new_BenchmarkPrice(*args))
    __swig_destroy__ = _quickfix.delete_BenchmarkPrice

# Register BenchmarkPrice in _quickfix:
_quickfix.BenchmarkPrice_swigregister(BenchmarkPrice)

class BenchmarkPriceType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BenchmarkPriceType_swiginit(self, _quickfix.new_BenchmarkPriceType(*args))
    __swig_destroy__ = _quickfix.delete_BenchmarkPriceType

# Register BenchmarkPriceType in _quickfix:
_quickfix.BenchmarkPriceType_swigregister(BenchmarkPriceType)

class ConfirmID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ConfirmID_swiginit(self, _quickfix.new_ConfirmID(*args))
    __swig_destroy__ = _quickfix.delete_ConfirmID

# Register ConfirmID in _quickfix:
_quickfix.ConfirmID_swigregister(ConfirmID)

class ConfirmStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ConfirmStatus_swiginit(self, _quickfix.new_ConfirmStatus(*args))
    __swig_destroy__ = _quickfix.delete_ConfirmStatus

# Register ConfirmStatus in _quickfix:
_quickfix.ConfirmStatus_swigregister(ConfirmStatus)

class ConfirmTransType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ConfirmTransType_swiginit(self, _quickfix.new_ConfirmTransType(*args))
    __swig_destroy__ = _quickfix.delete_ConfirmTransType

# Register ConfirmTransType in _quickfix:
_quickfix.ConfirmTransType_swigregister(ConfirmTransType)

class ContractSettlMonth(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContractSettlMonth_swiginit(self, _quickfix.new_ContractSettlMonth(*args))
    __swig_destroy__ = _quickfix.delete_ContractSettlMonth

# Register ContractSettlMonth in _quickfix:
_quickfix.ContractSettlMonth_swigregister(ContractSettlMonth)

class DeliveryForm(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeliveryForm_swiginit(self, _quickfix.new_DeliveryForm(*args))
    __swig_destroy__ = _quickfix.delete_DeliveryForm

# Register DeliveryForm in _quickfix:
_quickfix.DeliveryForm_swigregister(DeliveryForm)

class LastParPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastParPx_swiginit(self, _quickfix.new_LastParPx(*args))
    __swig_destroy__ = _quickfix.delete_LastParPx

# Register LastParPx in _quickfix:
_quickfix.LastParPx_swigregister(LastParPx)

class NoLegAllocs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoLegAllocs_swiginit(self, _quickfix.new_NoLegAllocs(*args))
    __swig_destroy__ = _quickfix.delete_NoLegAllocs

# Register NoLegAllocs in _quickfix:
_quickfix.NoLegAllocs_swigregister(NoLegAllocs)

class LegAllocAccount(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegAllocAccount_swiginit(self, _quickfix.new_LegAllocAccount(*args))
    __swig_destroy__ = _quickfix.delete_LegAllocAccount

# Register LegAllocAccount in _quickfix:
_quickfix.LegAllocAccount_swigregister(LegAllocAccount)

class LegIndividualAllocID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegIndividualAllocID_swiginit(self, _quickfix.new_LegIndividualAllocID(*args))
    __swig_destroy__ = _quickfix.delete_LegIndividualAllocID

# Register LegIndividualAllocID in _quickfix:
_quickfix.LegIndividualAllocID_swigregister(LegIndividualAllocID)

class LegAllocQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegAllocQty_swiginit(self, _quickfix.new_LegAllocQty(*args))
    __swig_destroy__ = _quickfix.delete_LegAllocQty

# Register LegAllocQty in _quickfix:
_quickfix.LegAllocQty_swigregister(LegAllocQty)

class LegAllocAcctIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegAllocAcctIDSource_swiginit(self, _quickfix.new_LegAllocAcctIDSource(*args))
    __swig_destroy__ = _quickfix.delete_LegAllocAcctIDSource

# Register LegAllocAcctIDSource in _quickfix:
_quickfix.LegAllocAcctIDSource_swigregister(LegAllocAcctIDSource)

class LegSettlCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSettlCurrency_swiginit(self, _quickfix.new_LegSettlCurrency(*args))
    __swig_destroy__ = _quickfix.delete_LegSettlCurrency

# Register LegSettlCurrency in _quickfix:
_quickfix.LegSettlCurrency_swigregister(LegSettlCurrency)

class LegBenchmarkCurveCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegBenchmarkCurveCurrency_swiginit(self, _quickfix.new_LegBenchmarkCurveCurrency(*args))
    __swig_destroy__ = _quickfix.delete_LegBenchmarkCurveCurrency

# Register LegBenchmarkCurveCurrency in _quickfix:
_quickfix.LegBenchmarkCurveCurrency_swigregister(LegBenchmarkCurveCurrency)

class LegBenchmarkCurveName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegBenchmarkCurveName_swiginit(self, _quickfix.new_LegBenchmarkCurveName(*args))
    __swig_destroy__ = _quickfix.delete_LegBenchmarkCurveName

# Register LegBenchmarkCurveName in _quickfix:
_quickfix.LegBenchmarkCurveName_swigregister(LegBenchmarkCurveName)

class LegBenchmarkCurvePoint(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegBenchmarkCurvePoint_swiginit(self, _quickfix.new_LegBenchmarkCurvePoint(*args))
    __swig_destroy__ = _quickfix.delete_LegBenchmarkCurvePoint

# Register LegBenchmarkCurvePoint in _quickfix:
_quickfix.LegBenchmarkCurvePoint_swigregister(LegBenchmarkCurvePoint)

class LegBenchmarkPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegBenchmarkPrice_swiginit(self, _quickfix.new_LegBenchmarkPrice(*args))
    __swig_destroy__ = _quickfix.delete_LegBenchmarkPrice

# Register LegBenchmarkPrice in _quickfix:
_quickfix.LegBenchmarkPrice_swigregister(LegBenchmarkPrice)

class LegBenchmarkPriceType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegBenchmarkPriceType_swiginit(self, _quickfix.new_LegBenchmarkPriceType(*args))
    __swig_destroy__ = _quickfix.delete_LegBenchmarkPriceType

# Register LegBenchmarkPriceType in _quickfix:
_quickfix.LegBenchmarkPriceType_swigregister(LegBenchmarkPriceType)

class LegBidPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegBidPx_swiginit(self, _quickfix.new_LegBidPx(*args))
    __swig_destroy__ = _quickfix.delete_LegBidPx

# Register LegBidPx in _quickfix:
_quickfix.LegBidPx_swigregister(LegBidPx)

class LegIOIQty(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegIOIQty_swiginit(self, _quickfix.new_LegIOIQty(*args))
    __swig_destroy__ = _quickfix.delete_LegIOIQty

# Register LegIOIQty in _quickfix:
_quickfix.LegIOIQty_swigregister(LegIOIQty)

class NoLegStipulations(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoLegStipulations_swiginit(self, _quickfix.new_NoLegStipulations(*args))
    __swig_destroy__ = _quickfix.delete_NoLegStipulations

# Register NoLegStipulations in _quickfix:
_quickfix.NoLegStipulations_swigregister(NoLegStipulations)

class LegOfferPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegOfferPx_swiginit(self, _quickfix.new_LegOfferPx(*args))
    __swig_destroy__ = _quickfix.delete_LegOfferPx

# Register LegOfferPx in _quickfix:
_quickfix.LegOfferPx_swigregister(LegOfferPx)

class LegPriceType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegPriceType_swiginit(self, _quickfix.new_LegPriceType(*args))
    __swig_destroy__ = _quickfix.delete_LegPriceType

# Register LegPriceType in _quickfix:
_quickfix.LegPriceType_swigregister(LegPriceType)

class LegQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegQty_swiginit(self, _quickfix.new_LegQty(*args))
    __swig_destroy__ = _quickfix.delete_LegQty

# Register LegQty in _quickfix:
_quickfix.LegQty_swigregister(LegQty)

class LegStipulationType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegStipulationType_swiginit(self, _quickfix.new_LegStipulationType(*args))
    __swig_destroy__ = _quickfix.delete_LegStipulationType

# Register LegStipulationType in _quickfix:
_quickfix.LegStipulationType_swigregister(LegStipulationType)

class LegStipulationValue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegStipulationValue_swiginit(self, _quickfix.new_LegStipulationValue(*args))
    __swig_destroy__ = _quickfix.delete_LegStipulationValue

# Register LegStipulationValue in _quickfix:
_quickfix.LegStipulationValue_swigregister(LegStipulationValue)

class LegSwapType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSwapType_swiginit(self, _quickfix.new_LegSwapType(*args))
    __swig_destroy__ = _quickfix.delete_LegSwapType

# Register LegSwapType in _quickfix:
_quickfix.LegSwapType_swigregister(LegSwapType)

class Pool(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Pool_swiginit(self, _quickfix.new_Pool(*args))
    __swig_destroy__ = _quickfix.delete_Pool

# Register Pool in _quickfix:
_quickfix.Pool_swigregister(Pool)

class QuotePriceType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuotePriceType_swiginit(self, _quickfix.new_QuotePriceType(*args))
    __swig_destroy__ = _quickfix.delete_QuotePriceType

# Register QuotePriceType in _quickfix:
_quickfix.QuotePriceType_swigregister(QuotePriceType)

class QuoteRespID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteRespID_swiginit(self, _quickfix.new_QuoteRespID(*args))
    __swig_destroy__ = _quickfix.delete_QuoteRespID

# Register QuoteRespID in _quickfix:
_quickfix.QuoteRespID_swigregister(QuoteRespID)

class QuoteRespType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteRespType_swiginit(self, _quickfix.new_QuoteRespType(*args))
    __swig_destroy__ = _quickfix.delete_QuoteRespType

# Register QuoteRespType in _quickfix:
_quickfix.QuoteRespType_swigregister(QuoteRespType)

class QuoteQualifier(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteQualifier_swiginit(self, _quickfix.new_QuoteQualifier(*args))
    __swig_destroy__ = _quickfix.delete_QuoteQualifier

# Register QuoteQualifier in _quickfix:
_quickfix.QuoteQualifier_swigregister(QuoteQualifier)

class YieldRedemptionDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.YieldRedemptionDate_swiginit(self, _quickfix.new_YieldRedemptionDate(*args))
    __swig_destroy__ = _quickfix.delete_YieldRedemptionDate

# Register YieldRedemptionDate in _quickfix:
_quickfix.YieldRedemptionDate_swigregister(YieldRedemptionDate)

class YieldRedemptionPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.YieldRedemptionPrice_swiginit(self, _quickfix.new_YieldRedemptionPrice(*args))
    __swig_destroy__ = _quickfix.delete_YieldRedemptionPrice

# Register YieldRedemptionPrice in _quickfix:
_quickfix.YieldRedemptionPrice_swigregister(YieldRedemptionPrice)

class YieldRedemptionPriceType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.YieldRedemptionPriceType_swiginit(self, _quickfix.new_YieldRedemptionPriceType(*args))
    __swig_destroy__ = _quickfix.delete_YieldRedemptionPriceType

# Register YieldRedemptionPriceType in _quickfix:
_quickfix.YieldRedemptionPriceType_swigregister(YieldRedemptionPriceType)

class BenchmarkSecurityID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BenchmarkSecurityID_swiginit(self, _quickfix.new_BenchmarkSecurityID(*args))
    __swig_destroy__ = _quickfix.delete_BenchmarkSecurityID

# Register BenchmarkSecurityID in _quickfix:
_quickfix.BenchmarkSecurityID_swigregister(BenchmarkSecurityID)

class ReversalIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ReversalIndicator_swiginit(self, _quickfix.new_ReversalIndicator(*args))
    __swig_destroy__ = _quickfix.delete_ReversalIndicator

# Register ReversalIndicator in _quickfix:
_quickfix.ReversalIndicator_swigregister(ReversalIndicator)

class YieldCalcDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.YieldCalcDate_swiginit(self, _quickfix.new_YieldCalcDate(*args))
    __swig_destroy__ = _quickfix.delete_YieldCalcDate

# Register YieldCalcDate in _quickfix:
_quickfix.YieldCalcDate_swigregister(YieldCalcDate)

class NoPositions(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoPositions_swiginit(self, _quickfix.new_NoPositions(*args))
    __swig_destroy__ = _quickfix.delete_NoPositions

# Register NoPositions in _quickfix:
_quickfix.NoPositions_swigregister(NoPositions)

class PosType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosType_swiginit(self, _quickfix.new_PosType(*args))
    __swig_destroy__ = _quickfix.delete_PosType

# Register PosType in _quickfix:
_quickfix.PosType_swigregister(PosType)

class LongQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LongQty_swiginit(self, _quickfix.new_LongQty(*args))
    __swig_destroy__ = _quickfix.delete_LongQty

# Register LongQty in _quickfix:
_quickfix.LongQty_swigregister(LongQty)

class ShortQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ShortQty_swiginit(self, _quickfix.new_ShortQty(*args))
    __swig_destroy__ = _quickfix.delete_ShortQty

# Register ShortQty in _quickfix:
_quickfix.ShortQty_swigregister(ShortQty)

class PosQtyStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosQtyStatus_swiginit(self, _quickfix.new_PosQtyStatus(*args))
    __swig_destroy__ = _quickfix.delete_PosQtyStatus

# Register PosQtyStatus in _quickfix:
_quickfix.PosQtyStatus_swigregister(PosQtyStatus)

class PosAmtType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosAmtType_swiginit(self, _quickfix.new_PosAmtType(*args))
    __swig_destroy__ = _quickfix.delete_PosAmtType

# Register PosAmtType in _quickfix:
_quickfix.PosAmtType_swigregister(PosAmtType)

class PosAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosAmt_swiginit(self, _quickfix.new_PosAmt(*args))
    __swig_destroy__ = _quickfix.delete_PosAmt

# Register PosAmt in _quickfix:
_quickfix.PosAmt_swigregister(PosAmt)

class PosTransType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosTransType_swiginit(self, _quickfix.new_PosTransType(*args))
    __swig_destroy__ = _quickfix.delete_PosTransType

# Register PosTransType in _quickfix:
_quickfix.PosTransType_swigregister(PosTransType)

class PosReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosReqID_swiginit(self, _quickfix.new_PosReqID(*args))
    __swig_destroy__ = _quickfix.delete_PosReqID

# Register PosReqID in _quickfix:
_quickfix.PosReqID_swigregister(PosReqID)

class NoUnderlyings(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoUnderlyings_swiginit(self, _quickfix.new_NoUnderlyings(*args))
    __swig_destroy__ = _quickfix.delete_NoUnderlyings

# Register NoUnderlyings in _quickfix:
_quickfix.NoUnderlyings_swigregister(NoUnderlyings)

class PosMaintAction(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosMaintAction_swiginit(self, _quickfix.new_PosMaintAction(*args))
    __swig_destroy__ = _quickfix.delete_PosMaintAction

# Register PosMaintAction in _quickfix:
_quickfix.PosMaintAction_swigregister(PosMaintAction)

class OrigPosReqRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigPosReqRefID_swiginit(self, _quickfix.new_OrigPosReqRefID(*args))
    __swig_destroy__ = _quickfix.delete_OrigPosReqRefID

# Register OrigPosReqRefID in _quickfix:
_quickfix.OrigPosReqRefID_swigregister(OrigPosReqRefID)

class PosMaintRptRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosMaintRptRefID_swiginit(self, _quickfix.new_PosMaintRptRefID(*args))
    __swig_destroy__ = _quickfix.delete_PosMaintRptRefID

# Register PosMaintRptRefID in _quickfix:
_quickfix.PosMaintRptRefID_swigregister(PosMaintRptRefID)

class ClearingBusinessDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ClearingBusinessDate_swiginit(self, _quickfix.new_ClearingBusinessDate(*args))
    __swig_destroy__ = _quickfix.delete_ClearingBusinessDate

# Register ClearingBusinessDate in _quickfix:
_quickfix.ClearingBusinessDate_swigregister(ClearingBusinessDate)

class SettlSessID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlSessID_swiginit(self, _quickfix.new_SettlSessID(*args))
    __swig_destroy__ = _quickfix.delete_SettlSessID

# Register SettlSessID in _quickfix:
_quickfix.SettlSessID_swigregister(SettlSessID)

class SettlSessSubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlSessSubID_swiginit(self, _quickfix.new_SettlSessSubID(*args))
    __swig_destroy__ = _quickfix.delete_SettlSessSubID

# Register SettlSessSubID in _quickfix:
_quickfix.SettlSessSubID_swigregister(SettlSessSubID)

class AdjustmentType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AdjustmentType_swiginit(self, _quickfix.new_AdjustmentType(*args))
    __swig_destroy__ = _quickfix.delete_AdjustmentType

# Register AdjustmentType in _quickfix:
_quickfix.AdjustmentType_swigregister(AdjustmentType)

class ContraryInstructionIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContraryInstructionIndicator_swiginit(self, _quickfix.new_ContraryInstructionIndicator(*args))
    __swig_destroy__ = _quickfix.delete_ContraryInstructionIndicator

# Register ContraryInstructionIndicator in _quickfix:
_quickfix.ContraryInstructionIndicator_swigregister(ContraryInstructionIndicator)

class PriorSpreadIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriorSpreadIndicator_swiginit(self, _quickfix.new_PriorSpreadIndicator(*args))
    __swig_destroy__ = _quickfix.delete_PriorSpreadIndicator

# Register PriorSpreadIndicator in _quickfix:
_quickfix.PriorSpreadIndicator_swigregister(PriorSpreadIndicator)

class PosMaintRptID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosMaintRptID_swiginit(self, _quickfix.new_PosMaintRptID(*args))
    __swig_destroy__ = _quickfix.delete_PosMaintRptID

# Register PosMaintRptID in _quickfix:
_quickfix.PosMaintRptID_swigregister(PosMaintRptID)

class PosMaintStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosMaintStatus_swiginit(self, _quickfix.new_PosMaintStatus(*args))
    __swig_destroy__ = _quickfix.delete_PosMaintStatus

# Register PosMaintStatus in _quickfix:
_quickfix.PosMaintStatus_swigregister(PosMaintStatus)

class PosMaintResult(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosMaintResult_swiginit(self, _quickfix.new_PosMaintResult(*args))
    __swig_destroy__ = _quickfix.delete_PosMaintResult

# Register PosMaintResult in _quickfix:
_quickfix.PosMaintResult_swigregister(PosMaintResult)

class PosReqType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosReqType_swiginit(self, _quickfix.new_PosReqType(*args))
    __swig_destroy__ = _quickfix.delete_PosReqType

# Register PosReqType in _quickfix:
_quickfix.PosReqType_swigregister(PosReqType)

class ResponseTransportType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ResponseTransportType_swiginit(self, _quickfix.new_ResponseTransportType(*args))
    __swig_destroy__ = _quickfix.delete_ResponseTransportType

# Register ResponseTransportType in _quickfix:
_quickfix.ResponseTransportType_swigregister(ResponseTransportType)

class ResponseDestination(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ResponseDestination_swiginit(self, _quickfix.new_ResponseDestination(*args))
    __swig_destroy__ = _quickfix.delete_ResponseDestination

# Register ResponseDestination in _quickfix:
_quickfix.ResponseDestination_swigregister(ResponseDestination)

class TotalNumPosReports(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotalNumPosReports_swiginit(self, _quickfix.new_TotalNumPosReports(*args))
    __swig_destroy__ = _quickfix.delete_TotalNumPosReports

# Register TotalNumPosReports in _quickfix:
_quickfix.TotalNumPosReports_swigregister(TotalNumPosReports)

class PosReqResult(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosReqResult_swiginit(self, _quickfix.new_PosReqResult(*args))
    __swig_destroy__ = _quickfix.delete_PosReqResult

# Register PosReqResult in _quickfix:
_quickfix.PosReqResult_swigregister(PosReqResult)

class PosReqStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PosReqStatus_swiginit(self, _quickfix.new_PosReqStatus(*args))
    __swig_destroy__ = _quickfix.delete_PosReqStatus

# Register PosReqStatus in _quickfix:
_quickfix.PosReqStatus_swigregister(PosReqStatus)

class SettlPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlPrice_swiginit(self, _quickfix.new_SettlPrice(*args))
    __swig_destroy__ = _quickfix.delete_SettlPrice

# Register SettlPrice in _quickfix:
_quickfix.SettlPrice_swigregister(SettlPrice)

class SettlPriceType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlPriceType_swiginit(self, _quickfix.new_SettlPriceType(*args))
    __swig_destroy__ = _quickfix.delete_SettlPriceType

# Register SettlPriceType in _quickfix:
_quickfix.SettlPriceType_swigregister(SettlPriceType)

class UnderlyingSettlPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSettlPrice_swiginit(self, _quickfix.new_UnderlyingSettlPrice(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlPrice

# Register UnderlyingSettlPrice in _quickfix:
_quickfix.UnderlyingSettlPrice_swigregister(UnderlyingSettlPrice)

class UnderlyingSettlPriceType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSettlPriceType_swiginit(self, _quickfix.new_UnderlyingSettlPriceType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlPriceType

# Register UnderlyingSettlPriceType in _quickfix:
_quickfix.UnderlyingSettlPriceType_swigregister(UnderlyingSettlPriceType)

class PriorSettlPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriorSettlPrice_swiginit(self, _quickfix.new_PriorSettlPrice(*args))
    __swig_destroy__ = _quickfix.delete_PriorSettlPrice

# Register PriorSettlPrice in _quickfix:
_quickfix.PriorSettlPrice_swigregister(PriorSettlPrice)

class NoQuoteQualifiers(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoQuoteQualifiers_swiginit(self, _quickfix.new_NoQuoteQualifiers(*args))
    __swig_destroy__ = _quickfix.delete_NoQuoteQualifiers

# Register NoQuoteQualifiers in _quickfix:
_quickfix.NoQuoteQualifiers_swigregister(NoQuoteQualifiers)

class AllocSettlCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocSettlCurrency_swiginit(self, _quickfix.new_AllocSettlCurrency(*args))
    __swig_destroy__ = _quickfix.delete_AllocSettlCurrency

# Register AllocSettlCurrency in _quickfix:
_quickfix.AllocSettlCurrency_swigregister(AllocSettlCurrency)

class AllocSettlCurrAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocSettlCurrAmt_swiginit(self, _quickfix.new_AllocSettlCurrAmt(*args))
    __swig_destroy__ = _quickfix.delete_AllocSettlCurrAmt

# Register AllocSettlCurrAmt in _quickfix:
_quickfix.AllocSettlCurrAmt_swigregister(AllocSettlCurrAmt)

class InterestAtMaturity(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InterestAtMaturity_swiginit(self, _quickfix.new_InterestAtMaturity(*args))
    __swig_destroy__ = _quickfix.delete_InterestAtMaturity

# Register InterestAtMaturity in _quickfix:
_quickfix.InterestAtMaturity_swigregister(InterestAtMaturity)

class LegDatedDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegDatedDate_swiginit(self, _quickfix.new_LegDatedDate(*args))
    __swig_destroy__ = _quickfix.delete_LegDatedDate

# Register LegDatedDate in _quickfix:
_quickfix.LegDatedDate_swigregister(LegDatedDate)

class LegPool(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegPool_swiginit(self, _quickfix.new_LegPool(*args))
    __swig_destroy__ = _quickfix.delete_LegPool

# Register LegPool in _quickfix:
_quickfix.LegPool_swigregister(LegPool)

class AllocInterestAtMaturity(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocInterestAtMaturity_swiginit(self, _quickfix.new_AllocInterestAtMaturity(*args))
    __swig_destroy__ = _quickfix.delete_AllocInterestAtMaturity

# Register AllocInterestAtMaturity in _quickfix:
_quickfix.AllocInterestAtMaturity_swigregister(AllocInterestAtMaturity)

class AllocAccruedInterestAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocAccruedInterestAmt_swiginit(self, _quickfix.new_AllocAccruedInterestAmt(*args))
    __swig_destroy__ = _quickfix.delete_AllocAccruedInterestAmt

# Register AllocAccruedInterestAmt in _quickfix:
_quickfix.AllocAccruedInterestAmt_swigregister(AllocAccruedInterestAmt)

class DeliveryDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeliveryDate_swiginit(self, _quickfix.new_DeliveryDate(*args))
    __swig_destroy__ = _quickfix.delete_DeliveryDate

# Register DeliveryDate in _quickfix:
_quickfix.DeliveryDate_swigregister(DeliveryDate)

class AssignmentMethod(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AssignmentMethod_swiginit(self, _quickfix.new_AssignmentMethod(*args))
    __swig_destroy__ = _quickfix.delete_AssignmentMethod

# Register AssignmentMethod in _quickfix:
_quickfix.AssignmentMethod_swigregister(AssignmentMethod)

class AssignmentUnit(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AssignmentUnit_swiginit(self, _quickfix.new_AssignmentUnit(*args))
    __swig_destroy__ = _quickfix.delete_AssignmentUnit

# Register AssignmentUnit in _quickfix:
_quickfix.AssignmentUnit_swigregister(AssignmentUnit)

class OpenInterest(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OpenInterest_swiginit(self, _quickfix.new_OpenInterest(*args))
    __swig_destroy__ = _quickfix.delete_OpenInterest

# Register OpenInterest in _quickfix:
_quickfix.OpenInterest_swigregister(OpenInterest)

class ExerciseMethod(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExerciseMethod_swiginit(self, _quickfix.new_ExerciseMethod(*args))
    __swig_destroy__ = _quickfix.delete_ExerciseMethod

# Register ExerciseMethod in _quickfix:
_quickfix.ExerciseMethod_swigregister(ExerciseMethod)

class TotNumTradeReports(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNumTradeReports_swiginit(self, _quickfix.new_TotNumTradeReports(*args))
    __swig_destroy__ = _quickfix.delete_TotNumTradeReports

# Register TotNumTradeReports in _quickfix:
_quickfix.TotNumTradeReports_swigregister(TotNumTradeReports)

class TradeRequestResult(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeRequestResult_swiginit(self, _quickfix.new_TradeRequestResult(*args))
    __swig_destroy__ = _quickfix.delete_TradeRequestResult

# Register TradeRequestResult in _quickfix:
_quickfix.TradeRequestResult_swigregister(TradeRequestResult)

class TradeRequestStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeRequestStatus_swiginit(self, _quickfix.new_TradeRequestStatus(*args))
    __swig_destroy__ = _quickfix.delete_TradeRequestStatus

# Register TradeRequestStatus in _quickfix:
_quickfix.TradeRequestStatus_swigregister(TradeRequestStatus)

class TradeReportRejectReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeReportRejectReason_swiginit(self, _quickfix.new_TradeReportRejectReason(*args))
    __swig_destroy__ = _quickfix.delete_TradeReportRejectReason

# Register TradeReportRejectReason in _quickfix:
_quickfix.TradeReportRejectReason_swigregister(TradeReportRejectReason)

class SideMultiLegReportingType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideMultiLegReportingType_swiginit(self, _quickfix.new_SideMultiLegReportingType(*args))
    __swig_destroy__ = _quickfix.delete_SideMultiLegReportingType

# Register SideMultiLegReportingType in _quickfix:
_quickfix.SideMultiLegReportingType_swigregister(SideMultiLegReportingType)

class NoPosAmt(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoPosAmt_swiginit(self, _quickfix.new_NoPosAmt(*args))
    __swig_destroy__ = _quickfix.delete_NoPosAmt

# Register NoPosAmt in _quickfix:
_quickfix.NoPosAmt_swigregister(NoPosAmt)

class AutoAcceptIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AutoAcceptIndicator_swiginit(self, _quickfix.new_AutoAcceptIndicator(*args))
    __swig_destroy__ = _quickfix.delete_AutoAcceptIndicator

# Register AutoAcceptIndicator in _quickfix:
_quickfix.AutoAcceptIndicator_swigregister(AutoAcceptIndicator)

class AllocReportID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocReportID_swiginit(self, _quickfix.new_AllocReportID(*args))
    __swig_destroy__ = _quickfix.delete_AllocReportID

# Register AllocReportID in _quickfix:
_quickfix.AllocReportID_swigregister(AllocReportID)

class NoNested2PartyIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNested2PartyIDs_swiginit(self, _quickfix.new_NoNested2PartyIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoNested2PartyIDs

# Register NoNested2PartyIDs in _quickfix:
_quickfix.NoNested2PartyIDs_swigregister(NoNested2PartyIDs)

class Nested2PartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested2PartyID_swiginit(self, _quickfix.new_Nested2PartyID(*args))
    __swig_destroy__ = _quickfix.delete_Nested2PartyID

# Register Nested2PartyID in _quickfix:
_quickfix.Nested2PartyID_swigregister(Nested2PartyID)

class Nested2PartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested2PartyIDSource_swiginit(self, _quickfix.new_Nested2PartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_Nested2PartyIDSource

# Register Nested2PartyIDSource in _quickfix:
_quickfix.Nested2PartyIDSource_swigregister(Nested2PartyIDSource)

class Nested2PartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested2PartyRole_swiginit(self, _quickfix.new_Nested2PartyRole(*args))
    __swig_destroy__ = _quickfix.delete_Nested2PartyRole

# Register Nested2PartyRole in _quickfix:
_quickfix.Nested2PartyRole_swigregister(Nested2PartyRole)

class Nested2PartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested2PartySubID_swiginit(self, _quickfix.new_Nested2PartySubID(*args))
    __swig_destroy__ = _quickfix.delete_Nested2PartySubID

# Register Nested2PartySubID in _quickfix:
_quickfix.Nested2PartySubID_swigregister(Nested2PartySubID)

class BenchmarkSecurityIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BenchmarkSecurityIDSource_swiginit(self, _quickfix.new_BenchmarkSecurityIDSource(*args))
    __swig_destroy__ = _quickfix.delete_BenchmarkSecurityIDSource

# Register BenchmarkSecurityIDSource in _quickfix:
_quickfix.BenchmarkSecurityIDSource_swigregister(BenchmarkSecurityIDSource)

class SecuritySubType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecuritySubType_swiginit(self, _quickfix.new_SecuritySubType(*args))
    __swig_destroy__ = _quickfix.delete_SecuritySubType

# Register SecuritySubType in _quickfix:
_quickfix.SecuritySubType_swigregister(SecuritySubType)

class UnderlyingSecuritySubType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSecuritySubType_swiginit(self, _quickfix.new_UnderlyingSecuritySubType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSecuritySubType

# Register UnderlyingSecuritySubType in _quickfix:
_quickfix.UnderlyingSecuritySubType_swigregister(UnderlyingSecuritySubType)

class LegSecuritySubType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegSecuritySubType_swiginit(self, _quickfix.new_LegSecuritySubType(*args))
    __swig_destroy__ = _quickfix.delete_LegSecuritySubType

# Register LegSecuritySubType in _quickfix:
_quickfix.LegSecuritySubType_swigregister(LegSecuritySubType)

class AllowableOneSidednessPct(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllowableOneSidednessPct_swiginit(self, _quickfix.new_AllowableOneSidednessPct(*args))
    __swig_destroy__ = _quickfix.delete_AllowableOneSidednessPct

# Register AllowableOneSidednessPct in _quickfix:
_quickfix.AllowableOneSidednessPct_swigregister(AllowableOneSidednessPct)

class AllowableOneSidednessValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllowableOneSidednessValue_swiginit(self, _quickfix.new_AllowableOneSidednessValue(*args))
    __swig_destroy__ = _quickfix.delete_AllowableOneSidednessValue

# Register AllowableOneSidednessValue in _quickfix:
_quickfix.AllowableOneSidednessValue_swigregister(AllowableOneSidednessValue)

class AllowableOneSidednessCurr(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllowableOneSidednessCurr_swiginit(self, _quickfix.new_AllowableOneSidednessCurr(*args))
    __swig_destroy__ = _quickfix.delete_AllowableOneSidednessCurr

# Register AllowableOneSidednessCurr in _quickfix:
_quickfix.AllowableOneSidednessCurr_swigregister(AllowableOneSidednessCurr)

class NoTrdRegTimestamps(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoTrdRegTimestamps_swiginit(self, _quickfix.new_NoTrdRegTimestamps(*args))
    __swig_destroy__ = _quickfix.delete_NoTrdRegTimestamps

# Register NoTrdRegTimestamps in _quickfix:
_quickfix.NoTrdRegTimestamps_swigregister(NoTrdRegTimestamps)

class TrdRegTimestamp(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TrdRegTimestamp_swiginit(self, _quickfix.new_TrdRegTimestamp(*args))
    __swig_destroy__ = _quickfix.delete_TrdRegTimestamp

# Register TrdRegTimestamp in _quickfix:
_quickfix.TrdRegTimestamp_swigregister(TrdRegTimestamp)

class TrdRegTimestampType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TrdRegTimestampType_swiginit(self, _quickfix.new_TrdRegTimestampType(*args))
    __swig_destroy__ = _quickfix.delete_TrdRegTimestampType

# Register TrdRegTimestampType in _quickfix:
_quickfix.TrdRegTimestampType_swigregister(TrdRegTimestampType)

class TrdRegTimestampOrigin(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TrdRegTimestampOrigin_swiginit(self, _quickfix.new_TrdRegTimestampOrigin(*args))
    __swig_destroy__ = _quickfix.delete_TrdRegTimestampOrigin

# Register TrdRegTimestampOrigin in _quickfix:
_quickfix.TrdRegTimestampOrigin_swigregister(TrdRegTimestampOrigin)

class ConfirmRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ConfirmRefID_swiginit(self, _quickfix.new_ConfirmRefID(*args))
    __swig_destroy__ = _quickfix.delete_ConfirmRefID

# Register ConfirmRefID in _quickfix:
_quickfix.ConfirmRefID_swigregister(ConfirmRefID)

class ConfirmType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ConfirmType_swiginit(self, _quickfix.new_ConfirmType(*args))
    __swig_destroy__ = _quickfix.delete_ConfirmType

# Register ConfirmType in _quickfix:
_quickfix.ConfirmType_swigregister(ConfirmType)

class ConfirmRejReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ConfirmRejReason_swiginit(self, _quickfix.new_ConfirmRejReason(*args))
    __swig_destroy__ = _quickfix.delete_ConfirmRejReason

# Register ConfirmRejReason in _quickfix:
_quickfix.ConfirmRejReason_swigregister(ConfirmRejReason)

class BookingType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BookingType_swiginit(self, _quickfix.new_BookingType(*args))
    __swig_destroy__ = _quickfix.delete_BookingType

# Register BookingType in _quickfix:
_quickfix.BookingType_swigregister(BookingType)

class IndividualAllocRejCode(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IndividualAllocRejCode_swiginit(self, _quickfix.new_IndividualAllocRejCode(*args))
    __swig_destroy__ = _quickfix.delete_IndividualAllocRejCode

# Register IndividualAllocRejCode in _quickfix:
_quickfix.IndividualAllocRejCode_swigregister(IndividualAllocRejCode)

class SettlInstMsgID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlInstMsgID_swiginit(self, _quickfix.new_SettlInstMsgID(*args))
    __swig_destroy__ = _quickfix.delete_SettlInstMsgID

# Register SettlInstMsgID in _quickfix:
_quickfix.SettlInstMsgID_swigregister(SettlInstMsgID)

class NoSettlInst(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoSettlInst_swiginit(self, _quickfix.new_NoSettlInst(*args))
    __swig_destroy__ = _quickfix.delete_NoSettlInst

# Register NoSettlInst in _quickfix:
_quickfix.NoSettlInst_swigregister(NoSettlInst)

class LastUpdateTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastUpdateTime_swiginit(self, _quickfix.new_LastUpdateTime(*args))
    __swig_destroy__ = _quickfix.delete_LastUpdateTime

# Register LastUpdateTime in _quickfix:
_quickfix.LastUpdateTime_swigregister(LastUpdateTime)

class AllocSettlInstType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocSettlInstType_swiginit(self, _quickfix.new_AllocSettlInstType(*args))
    __swig_destroy__ = _quickfix.delete_AllocSettlInstType

# Register AllocSettlInstType in _quickfix:
_quickfix.AllocSettlInstType_swigregister(AllocSettlInstType)

class NoSettlPartyIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoSettlPartyIDs_swiginit(self, _quickfix.new_NoSettlPartyIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoSettlPartyIDs

# Register NoSettlPartyIDs in _quickfix:
_quickfix.NoSettlPartyIDs_swigregister(NoSettlPartyIDs)

class SettlPartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlPartyID_swiginit(self, _quickfix.new_SettlPartyID(*args))
    __swig_destroy__ = _quickfix.delete_SettlPartyID

# Register SettlPartyID in _quickfix:
_quickfix.SettlPartyID_swigregister(SettlPartyID)

class SettlPartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlPartyIDSource_swiginit(self, _quickfix.new_SettlPartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_SettlPartyIDSource

# Register SettlPartyIDSource in _quickfix:
_quickfix.SettlPartyIDSource_swigregister(SettlPartyIDSource)

class SettlPartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlPartyRole_swiginit(self, _quickfix.new_SettlPartyRole(*args))
    __swig_destroy__ = _quickfix.delete_SettlPartyRole

# Register SettlPartyRole in _quickfix:
_quickfix.SettlPartyRole_swigregister(SettlPartyRole)

class SettlPartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlPartySubID_swiginit(self, _quickfix.new_SettlPartySubID(*args))
    __swig_destroy__ = _quickfix.delete_SettlPartySubID

# Register SettlPartySubID in _quickfix:
_quickfix.SettlPartySubID_swigregister(SettlPartySubID)

class SettlPartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlPartySubIDType_swiginit(self, _quickfix.new_SettlPartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_SettlPartySubIDType

# Register SettlPartySubIDType in _quickfix:
_quickfix.SettlPartySubIDType_swigregister(SettlPartySubIDType)

class DlvyInstType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DlvyInstType_swiginit(self, _quickfix.new_DlvyInstType(*args))
    __swig_destroy__ = _quickfix.delete_DlvyInstType

# Register DlvyInstType in _quickfix:
_quickfix.DlvyInstType_swigregister(DlvyInstType)

class TerminationType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TerminationType_swiginit(self, _quickfix.new_TerminationType(*args))
    __swig_destroy__ = _quickfix.delete_TerminationType

# Register TerminationType in _quickfix:
_quickfix.TerminationType_swigregister(TerminationType)

class OrdStatusReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrdStatusReqID_swiginit(self, _quickfix.new_OrdStatusReqID(*args))
    __swig_destroy__ = _quickfix.delete_OrdStatusReqID

# Register OrdStatusReqID in _quickfix:
_quickfix.OrdStatusReqID_swigregister(OrdStatusReqID)

class SettlInstReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlInstReqID_swiginit(self, _quickfix.new_SettlInstReqID(*args))
    __swig_destroy__ = _quickfix.delete_SettlInstReqID

# Register SettlInstReqID in _quickfix:
_quickfix.SettlInstReqID_swigregister(SettlInstReqID)

class SettlInstReqRejCode(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlInstReqRejCode_swiginit(self, _quickfix.new_SettlInstReqRejCode(*args))
    __swig_destroy__ = _quickfix.delete_SettlInstReqRejCode

# Register SettlInstReqRejCode in _quickfix:
_quickfix.SettlInstReqRejCode_swigregister(SettlInstReqRejCode)

class SecondaryAllocID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryAllocID_swiginit(self, _quickfix.new_SecondaryAllocID(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryAllocID

# Register SecondaryAllocID in _quickfix:
_quickfix.SecondaryAllocID_swigregister(SecondaryAllocID)

class AllocReportType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocReportType_swiginit(self, _quickfix.new_AllocReportType(*args))
    __swig_destroy__ = _quickfix.delete_AllocReportType

# Register AllocReportType in _quickfix:
_quickfix.AllocReportType_swigregister(AllocReportType)

class AllocReportRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocReportRefID_swiginit(self, _quickfix.new_AllocReportRefID(*args))
    __swig_destroy__ = _quickfix.delete_AllocReportRefID

# Register AllocReportRefID in _quickfix:
_quickfix.AllocReportRefID_swigregister(AllocReportRefID)

class AllocCancReplaceReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocCancReplaceReason_swiginit(self, _quickfix.new_AllocCancReplaceReason(*args))
    __swig_destroy__ = _quickfix.delete_AllocCancReplaceReason

# Register AllocCancReplaceReason in _quickfix:
_quickfix.AllocCancReplaceReason_swigregister(AllocCancReplaceReason)

class CopyMsgIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CopyMsgIndicator_swiginit(self, _quickfix.new_CopyMsgIndicator(*args))
    __swig_destroy__ = _quickfix.delete_CopyMsgIndicator

# Register CopyMsgIndicator in _quickfix:
_quickfix.CopyMsgIndicator_swigregister(CopyMsgIndicator)

class AllocAccountType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocAccountType_swiginit(self, _quickfix.new_AllocAccountType(*args))
    __swig_destroy__ = _quickfix.delete_AllocAccountType

# Register AllocAccountType in _quickfix:
_quickfix.AllocAccountType_swigregister(AllocAccountType)

class OrderAvgPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderAvgPx_swiginit(self, _quickfix.new_OrderAvgPx(*args))
    __swig_destroy__ = _quickfix.delete_OrderAvgPx

# Register OrderAvgPx in _quickfix:
_quickfix.OrderAvgPx_swigregister(OrderAvgPx)

class OrderBookingQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderBookingQty_swiginit(self, _quickfix.new_OrderBookingQty(*args))
    __swig_destroy__ = _quickfix.delete_OrderBookingQty

# Register OrderBookingQty in _quickfix:
_quickfix.OrderBookingQty_swigregister(OrderBookingQty)

class NoSettlPartySubIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoSettlPartySubIDs_swiginit(self, _quickfix.new_NoSettlPartySubIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoSettlPartySubIDs

# Register NoSettlPartySubIDs in _quickfix:
_quickfix.NoSettlPartySubIDs_swigregister(NoSettlPartySubIDs)

class NoPartySubIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoPartySubIDs_swiginit(self, _quickfix.new_NoPartySubIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoPartySubIDs

# Register NoPartySubIDs in _quickfix:
_quickfix.NoPartySubIDs_swigregister(NoPartySubIDs)

class PartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PartySubIDType_swiginit(self, _quickfix.new_PartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_PartySubIDType

# Register PartySubIDType in _quickfix:
_quickfix.PartySubIDType_swigregister(PartySubIDType)

class NoNestedPartySubIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNestedPartySubIDs_swiginit(self, _quickfix.new_NoNestedPartySubIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoNestedPartySubIDs

# Register NoNestedPartySubIDs in _quickfix:
_quickfix.NoNestedPartySubIDs_swigregister(NoNestedPartySubIDs)

class NestedPartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NestedPartySubIDType_swiginit(self, _quickfix.new_NestedPartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_NestedPartySubIDType

# Register NestedPartySubIDType in _quickfix:
_quickfix.NestedPartySubIDType_swigregister(NestedPartySubIDType)

class NoNested2PartySubIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNested2PartySubIDs_swiginit(self, _quickfix.new_NoNested2PartySubIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoNested2PartySubIDs

# Register NoNested2PartySubIDs in _quickfix:
_quickfix.NoNested2PartySubIDs_swigregister(NoNested2PartySubIDs)

class Nested2PartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested2PartySubIDType_swiginit(self, _quickfix.new_Nested2PartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_Nested2PartySubIDType

# Register Nested2PartySubIDType in _quickfix:
_quickfix.Nested2PartySubIDType_swigregister(Nested2PartySubIDType)

class AllocIntermedReqType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocIntermedReqType_swiginit(self, _quickfix.new_AllocIntermedReqType(*args))
    __swig_destroy__ = _quickfix.delete_AllocIntermedReqType

# Register AllocIntermedReqType in _quickfix:
_quickfix.AllocIntermedReqType_swigregister(AllocIntermedReqType)

class UnderlyingPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingPx_swiginit(self, _quickfix.new_UnderlyingPx(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingPx

# Register UnderlyingPx in _quickfix:
_quickfix.UnderlyingPx_swigregister(UnderlyingPx)

class PriceDelta(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriceDelta_swiginit(self, _quickfix.new_PriceDelta(*args))
    __swig_destroy__ = _quickfix.delete_PriceDelta

# Register PriceDelta in _quickfix:
_quickfix.PriceDelta_swigregister(PriceDelta)

class ApplQueueMax(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplQueueMax_swiginit(self, _quickfix.new_ApplQueueMax(*args))
    __swig_destroy__ = _quickfix.delete_ApplQueueMax

# Register ApplQueueMax in _quickfix:
_quickfix.ApplQueueMax_swigregister(ApplQueueMax)

class ApplQueueDepth(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplQueueDepth_swiginit(self, _quickfix.new_ApplQueueDepth(*args))
    __swig_destroy__ = _quickfix.delete_ApplQueueDepth

# Register ApplQueueDepth in _quickfix:
_quickfix.ApplQueueDepth_swigregister(ApplQueueDepth)

class ApplQueueResolution(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplQueueResolution_swiginit(self, _quickfix.new_ApplQueueResolution(*args))
    __swig_destroy__ = _quickfix.delete_ApplQueueResolution

# Register ApplQueueResolution in _quickfix:
_quickfix.ApplQueueResolution_swigregister(ApplQueueResolution)

class ApplQueueAction(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplQueueAction_swiginit(self, _quickfix.new_ApplQueueAction(*args))
    __swig_destroy__ = _quickfix.delete_ApplQueueAction

# Register ApplQueueAction in _quickfix:
_quickfix.ApplQueueAction_swigregister(ApplQueueAction)

class NoAltMDSource(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoAltMDSource_swiginit(self, _quickfix.new_NoAltMDSource(*args))
    __swig_destroy__ = _quickfix.delete_NoAltMDSource

# Register NoAltMDSource in _quickfix:
_quickfix.NoAltMDSource_swigregister(NoAltMDSource)

class AltMDSourceID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AltMDSourceID_swiginit(self, _quickfix.new_AltMDSourceID(*args))
    __swig_destroy__ = _quickfix.delete_AltMDSourceID

# Register AltMDSourceID in _quickfix:
_quickfix.AltMDSourceID_swigregister(AltMDSourceID)

class SecondaryTradeReportID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryTradeReportID_swiginit(self, _quickfix.new_SecondaryTradeReportID(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryTradeReportID

# Register SecondaryTradeReportID in _quickfix:
_quickfix.SecondaryTradeReportID_swigregister(SecondaryTradeReportID)

class AvgPxIndicator(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AvgPxIndicator_swiginit(self, _quickfix.new_AvgPxIndicator(*args))
    __swig_destroy__ = _quickfix.delete_AvgPxIndicator

# Register AvgPxIndicator in _quickfix:
_quickfix.AvgPxIndicator_swigregister(AvgPxIndicator)

class TradeLinkID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeLinkID_swiginit(self, _quickfix.new_TradeLinkID(*args))
    __swig_destroy__ = _quickfix.delete_TradeLinkID

# Register TradeLinkID in _quickfix:
_quickfix.TradeLinkID_swigregister(TradeLinkID)

class OrderInputDevice(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderInputDevice_swiginit(self, _quickfix.new_OrderInputDevice(*args))
    __swig_destroy__ = _quickfix.delete_OrderInputDevice

# Register OrderInputDevice in _quickfix:
_quickfix.OrderInputDevice_swigregister(OrderInputDevice)

class UnderlyingTradingSessionID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingTradingSessionID_swiginit(self, _quickfix.new_UnderlyingTradingSessionID(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingTradingSessionID

# Register UnderlyingTradingSessionID in _quickfix:
_quickfix.UnderlyingTradingSessionID_swigregister(UnderlyingTradingSessionID)

class UnderlyingTradingSessionSubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingTradingSessionSubID_swiginit(self, _quickfix.new_UnderlyingTradingSessionSubID(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingTradingSessionSubID

# Register UnderlyingTradingSessionSubID in _quickfix:
_quickfix.UnderlyingTradingSessionSubID_swigregister(UnderlyingTradingSessionSubID)

class TradeLegRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeLegRefID_swiginit(self, _quickfix.new_TradeLegRefID(*args))
    __swig_destroy__ = _quickfix.delete_TradeLegRefID

# Register TradeLegRefID in _quickfix:
_quickfix.TradeLegRefID_swigregister(TradeLegRefID)

class ExchangeRule(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExchangeRule_swiginit(self, _quickfix.new_ExchangeRule(*args))
    __swig_destroy__ = _quickfix.delete_ExchangeRule

# Register ExchangeRule in _quickfix:
_quickfix.ExchangeRule_swigregister(ExchangeRule)

class TradeAllocIndicator(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeAllocIndicator_swiginit(self, _quickfix.new_TradeAllocIndicator(*args))
    __swig_destroy__ = _quickfix.delete_TradeAllocIndicator

# Register TradeAllocIndicator in _quickfix:
_quickfix.TradeAllocIndicator_swigregister(TradeAllocIndicator)

class ExpirationCycle(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExpirationCycle_swiginit(self, _quickfix.new_ExpirationCycle(*args))
    __swig_destroy__ = _quickfix.delete_ExpirationCycle

# Register ExpirationCycle in _quickfix:
_quickfix.ExpirationCycle_swigregister(ExpirationCycle)

class TrdType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TrdType_swiginit(self, _quickfix.new_TrdType(*args))
    __swig_destroy__ = _quickfix.delete_TrdType

# Register TrdType in _quickfix:
_quickfix.TrdType_swigregister(TrdType)

class TrdSubType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TrdSubType_swiginit(self, _quickfix.new_TrdSubType(*args))
    __swig_destroy__ = _quickfix.delete_TrdSubType

# Register TrdSubType in _quickfix:
_quickfix.TrdSubType_swigregister(TrdSubType)

class TransferReason(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TransferReason_swiginit(self, _quickfix.new_TransferReason(*args))
    __swig_destroy__ = _quickfix.delete_TransferReason

# Register TransferReason in _quickfix:
_quickfix.TransferReason_swigregister(TransferReason)

class TotNumAssignmentReports(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNumAssignmentReports_swiginit(self, _quickfix.new_TotNumAssignmentReports(*args))
    __swig_destroy__ = _quickfix.delete_TotNumAssignmentReports

# Register TotNumAssignmentReports in _quickfix:
_quickfix.TotNumAssignmentReports_swigregister(TotNumAssignmentReports)

class AsgnRptID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AsgnRptID_swiginit(self, _quickfix.new_AsgnRptID(*args))
    __swig_destroy__ = _quickfix.delete_AsgnRptID

# Register AsgnRptID in _quickfix:
_quickfix.AsgnRptID_swigregister(AsgnRptID)

class ThresholdAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ThresholdAmount_swiginit(self, _quickfix.new_ThresholdAmount(*args))
    __swig_destroy__ = _quickfix.delete_ThresholdAmount

# Register ThresholdAmount in _quickfix:
_quickfix.ThresholdAmount_swigregister(ThresholdAmount)

class PegMoveType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegMoveType_swiginit(self, _quickfix.new_PegMoveType(*args))
    __swig_destroy__ = _quickfix.delete_PegMoveType

# Register PegMoveType in _quickfix:
_quickfix.PegMoveType_swigregister(PegMoveType)

class PegOffsetType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegOffsetType_swiginit(self, _quickfix.new_PegOffsetType(*args))
    __swig_destroy__ = _quickfix.delete_PegOffsetType

# Register PegOffsetType in _quickfix:
_quickfix.PegOffsetType_swigregister(PegOffsetType)

class PegLimitType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegLimitType_swiginit(self, _quickfix.new_PegLimitType(*args))
    __swig_destroy__ = _quickfix.delete_PegLimitType

# Register PegLimitType in _quickfix:
_quickfix.PegLimitType_swigregister(PegLimitType)

class PegRoundDirection(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegRoundDirection_swiginit(self, _quickfix.new_PegRoundDirection(*args))
    __swig_destroy__ = _quickfix.delete_PegRoundDirection

# Register PegRoundDirection in _quickfix:
_quickfix.PegRoundDirection_swigregister(PegRoundDirection)

class PeggedPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PeggedPrice_swiginit(self, _quickfix.new_PeggedPrice(*args))
    __swig_destroy__ = _quickfix.delete_PeggedPrice

# Register PeggedPrice in _quickfix:
_quickfix.PeggedPrice_swigregister(PeggedPrice)

class PegScope(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegScope_swiginit(self, _quickfix.new_PegScope(*args))
    __swig_destroy__ = _quickfix.delete_PegScope

# Register PegScope in _quickfix:
_quickfix.PegScope_swigregister(PegScope)

class DiscretionMoveType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DiscretionMoveType_swiginit(self, _quickfix.new_DiscretionMoveType(*args))
    __swig_destroy__ = _quickfix.delete_DiscretionMoveType

# Register DiscretionMoveType in _quickfix:
_quickfix.DiscretionMoveType_swigregister(DiscretionMoveType)

class DiscretionOffsetType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DiscretionOffsetType_swiginit(self, _quickfix.new_DiscretionOffsetType(*args))
    __swig_destroy__ = _quickfix.delete_DiscretionOffsetType

# Register DiscretionOffsetType in _quickfix:
_quickfix.DiscretionOffsetType_swigregister(DiscretionOffsetType)

class DiscretionLimitType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DiscretionLimitType_swiginit(self, _quickfix.new_DiscretionLimitType(*args))
    __swig_destroy__ = _quickfix.delete_DiscretionLimitType

# Register DiscretionLimitType in _quickfix:
_quickfix.DiscretionLimitType_swigregister(DiscretionLimitType)

class DiscretionRoundDirection(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DiscretionRoundDirection_swiginit(self, _quickfix.new_DiscretionRoundDirection(*args))
    __swig_destroy__ = _quickfix.delete_DiscretionRoundDirection

# Register DiscretionRoundDirection in _quickfix:
_quickfix.DiscretionRoundDirection_swigregister(DiscretionRoundDirection)

class DiscretionPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DiscretionPrice_swiginit(self, _quickfix.new_DiscretionPrice(*args))
    __swig_destroy__ = _quickfix.delete_DiscretionPrice

# Register DiscretionPrice in _quickfix:
_quickfix.DiscretionPrice_swigregister(DiscretionPrice)

class DiscretionScope(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DiscretionScope_swiginit(self, _quickfix.new_DiscretionScope(*args))
    __swig_destroy__ = _quickfix.delete_DiscretionScope

# Register DiscretionScope in _quickfix:
_quickfix.DiscretionScope_swigregister(DiscretionScope)

class TargetStrategy(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TargetStrategy_swiginit(self, _quickfix.new_TargetStrategy(*args))
    __swig_destroy__ = _quickfix.delete_TargetStrategy

# Register TargetStrategy in _quickfix:
_quickfix.TargetStrategy_swigregister(TargetStrategy)

class TargetStrategyParameters(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TargetStrategyParameters_swiginit(self, _quickfix.new_TargetStrategyParameters(*args))
    __swig_destroy__ = _quickfix.delete_TargetStrategyParameters

# Register TargetStrategyParameters in _quickfix:
_quickfix.TargetStrategyParameters_swigregister(TargetStrategyParameters)

class ParticipationRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ParticipationRate_swiginit(self, _quickfix.new_ParticipationRate(*args))
    __swig_destroy__ = _quickfix.delete_ParticipationRate

# Register ParticipationRate in _quickfix:
_quickfix.ParticipationRate_swigregister(ParticipationRate)

class TargetStrategyPerformance(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TargetStrategyPerformance_swiginit(self, _quickfix.new_TargetStrategyPerformance(*args))
    __swig_destroy__ = _quickfix.delete_TargetStrategyPerformance

# Register TargetStrategyPerformance in _quickfix:
_quickfix.TargetStrategyPerformance_swigregister(TargetStrategyPerformance)

class LastLiquidityInd(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastLiquidityInd_swiginit(self, _quickfix.new_LastLiquidityInd(*args))
    __swig_destroy__ = _quickfix.delete_LastLiquidityInd

# Register LastLiquidityInd in _quickfix:
_quickfix.LastLiquidityInd_swigregister(LastLiquidityInd)

class PublishTrdIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PublishTrdIndicator_swiginit(self, _quickfix.new_PublishTrdIndicator(*args))
    __swig_destroy__ = _quickfix.delete_PublishTrdIndicator

# Register PublishTrdIndicator in _quickfix:
_quickfix.PublishTrdIndicator_swigregister(PublishTrdIndicator)

class ShortSaleReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ShortSaleReason_swiginit(self, _quickfix.new_ShortSaleReason(*args))
    __swig_destroy__ = _quickfix.delete_ShortSaleReason

# Register ShortSaleReason in _quickfix:
_quickfix.ShortSaleReason_swigregister(ShortSaleReason)

class QtyType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QtyType_swiginit(self, _quickfix.new_QtyType(*args))
    __swig_destroy__ = _quickfix.delete_QtyType

# Register QtyType in _quickfix:
_quickfix.QtyType_swigregister(QtyType)

class SecondaryTrdType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryTrdType_swiginit(self, _quickfix.new_SecondaryTrdType(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryTrdType

# Register SecondaryTrdType in _quickfix:
_quickfix.SecondaryTrdType_swigregister(SecondaryTrdType)

class TradeReportType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeReportType_swiginit(self, _quickfix.new_TradeReportType(*args))
    __swig_destroy__ = _quickfix.delete_TradeReportType

# Register TradeReportType in _quickfix:
_quickfix.TradeReportType_swigregister(TradeReportType)

class AllocNoOrdersType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocNoOrdersType_swiginit(self, _quickfix.new_AllocNoOrdersType(*args))
    __swig_destroy__ = _quickfix.delete_AllocNoOrdersType

# Register AllocNoOrdersType in _quickfix:
_quickfix.AllocNoOrdersType_swigregister(AllocNoOrdersType)

class SharedCommission(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SharedCommission_swiginit(self, _quickfix.new_SharedCommission(*args))
    __swig_destroy__ = _quickfix.delete_SharedCommission

# Register SharedCommission in _quickfix:
_quickfix.SharedCommission_swigregister(SharedCommission)

class ConfirmReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ConfirmReqID_swiginit(self, _quickfix.new_ConfirmReqID(*args))
    __swig_destroy__ = _quickfix.delete_ConfirmReqID

# Register ConfirmReqID in _quickfix:
_quickfix.ConfirmReqID_swigregister(ConfirmReqID)

class AvgParPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AvgParPx_swiginit(self, _quickfix.new_AvgParPx(*args))
    __swig_destroy__ = _quickfix.delete_AvgParPx

# Register AvgParPx in _quickfix:
_quickfix.AvgParPx_swigregister(AvgParPx)

class ReportedPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ReportedPx_swiginit(self, _quickfix.new_ReportedPx(*args))
    __swig_destroy__ = _quickfix.delete_ReportedPx

# Register ReportedPx in _quickfix:
_quickfix.ReportedPx_swigregister(ReportedPx)

class NoCapacities(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoCapacities_swiginit(self, _quickfix.new_NoCapacities(*args))
    __swig_destroy__ = _quickfix.delete_NoCapacities

# Register NoCapacities in _quickfix:
_quickfix.NoCapacities_swigregister(NoCapacities)

class OrderCapacityQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderCapacityQty_swiginit(self, _quickfix.new_OrderCapacityQty(*args))
    __swig_destroy__ = _quickfix.delete_OrderCapacityQty

# Register OrderCapacityQty in _quickfix:
_quickfix.OrderCapacityQty_swigregister(OrderCapacityQty)

class NoEvents(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoEvents_swiginit(self, _quickfix.new_NoEvents(*args))
    __swig_destroy__ = _quickfix.delete_NoEvents

# Register NoEvents in _quickfix:
_quickfix.NoEvents_swigregister(NoEvents)

class EventType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EventType_swiginit(self, _quickfix.new_EventType(*args))
    __swig_destroy__ = _quickfix.delete_EventType

# Register EventType in _quickfix:
_quickfix.EventType_swigregister(EventType)

class EventDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EventDate_swiginit(self, _quickfix.new_EventDate(*args))
    __swig_destroy__ = _quickfix.delete_EventDate

# Register EventDate in _quickfix:
_quickfix.EventDate_swigregister(EventDate)

class EventPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EventPx_swiginit(self, _quickfix.new_EventPx(*args))
    __swig_destroy__ = _quickfix.delete_EventPx

# Register EventPx in _quickfix:
_quickfix.EventPx_swigregister(EventPx)

class EventText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EventText_swiginit(self, _quickfix.new_EventText(*args))
    __swig_destroy__ = _quickfix.delete_EventText

# Register EventText in _quickfix:
_quickfix.EventText_swigregister(EventText)

class PctAtRisk(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PctAtRisk_swiginit(self, _quickfix.new_PctAtRisk(*args))
    __swig_destroy__ = _quickfix.delete_PctAtRisk

# Register PctAtRisk in _quickfix:
_quickfix.PctAtRisk_swigregister(PctAtRisk)

class NoInstrAttrib(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoInstrAttrib_swiginit(self, _quickfix.new_NoInstrAttrib(*args))
    __swig_destroy__ = _quickfix.delete_NoInstrAttrib

# Register NoInstrAttrib in _quickfix:
_quickfix.NoInstrAttrib_swigregister(NoInstrAttrib)

class InstrAttribType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InstrAttribType_swiginit(self, _quickfix.new_InstrAttribType(*args))
    __swig_destroy__ = _quickfix.delete_InstrAttribType

# Register InstrAttribType in _quickfix:
_quickfix.InstrAttribType_swigregister(InstrAttribType)

class InstrAttribValue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InstrAttribValue_swiginit(self, _quickfix.new_InstrAttribValue(*args))
    __swig_destroy__ = _quickfix.delete_InstrAttribValue

# Register InstrAttribValue in _quickfix:
_quickfix.InstrAttribValue_swigregister(InstrAttribValue)

class DatedDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DatedDate_swiginit(self, _quickfix.new_DatedDate(*args))
    __swig_destroy__ = _quickfix.delete_DatedDate

# Register DatedDate in _quickfix:
_quickfix.DatedDate_swigregister(DatedDate)

class InterestAccrualDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InterestAccrualDate_swiginit(self, _quickfix.new_InterestAccrualDate(*args))
    __swig_destroy__ = _quickfix.delete_InterestAccrualDate

# Register InterestAccrualDate in _quickfix:
_quickfix.InterestAccrualDate_swigregister(InterestAccrualDate)

class CPProgram(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CPProgram_swiginit(self, _quickfix.new_CPProgram(*args))
    __swig_destroy__ = _quickfix.delete_CPProgram

# Register CPProgram in _quickfix:
_quickfix.CPProgram_swigregister(CPProgram)

class CPRegType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CPRegType_swiginit(self, _quickfix.new_CPRegType(*args))
    __swig_destroy__ = _quickfix.delete_CPRegType

# Register CPRegType in _quickfix:
_quickfix.CPRegType_swigregister(CPRegType)

class UnderlyingCPProgram(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCPProgram_swiginit(self, _quickfix.new_UnderlyingCPProgram(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCPProgram

# Register UnderlyingCPProgram in _quickfix:
_quickfix.UnderlyingCPProgram_swigregister(UnderlyingCPProgram)

class UnderlyingCPRegType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCPRegType_swiginit(self, _quickfix.new_UnderlyingCPRegType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCPRegType

# Register UnderlyingCPRegType in _quickfix:
_quickfix.UnderlyingCPRegType_swigregister(UnderlyingCPRegType)

class UnderlyingQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingQty_swiginit(self, _quickfix.new_UnderlyingQty(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingQty

# Register UnderlyingQty in _quickfix:
_quickfix.UnderlyingQty_swigregister(UnderlyingQty)

class TrdMatchID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TrdMatchID_swiginit(self, _quickfix.new_TrdMatchID(*args))
    __swig_destroy__ = _quickfix.delete_TrdMatchID

# Register TrdMatchID in _quickfix:
_quickfix.TrdMatchID_swigregister(TrdMatchID)

class SecondaryTradeReportRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryTradeReportRefID_swiginit(self, _quickfix.new_SecondaryTradeReportRefID(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryTradeReportRefID

# Register SecondaryTradeReportRefID in _quickfix:
_quickfix.SecondaryTradeReportRefID_swigregister(SecondaryTradeReportRefID)

class UnderlyingDirtyPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingDirtyPrice_swiginit(self, _quickfix.new_UnderlyingDirtyPrice(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingDirtyPrice

# Register UnderlyingDirtyPrice in _quickfix:
_quickfix.UnderlyingDirtyPrice_swigregister(UnderlyingDirtyPrice)

class UnderlyingEndPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingEndPrice_swiginit(self, _quickfix.new_UnderlyingEndPrice(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingEndPrice

# Register UnderlyingEndPrice in _quickfix:
_quickfix.UnderlyingEndPrice_swigregister(UnderlyingEndPrice)

class UnderlyingStartValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingStartValue_swiginit(self, _quickfix.new_UnderlyingStartValue(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingStartValue

# Register UnderlyingStartValue in _quickfix:
_quickfix.UnderlyingStartValue_swigregister(UnderlyingStartValue)

class UnderlyingCurrentValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCurrentValue_swiginit(self, _quickfix.new_UnderlyingCurrentValue(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCurrentValue

# Register UnderlyingCurrentValue in _quickfix:
_quickfix.UnderlyingCurrentValue_swigregister(UnderlyingCurrentValue)

class UnderlyingEndValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingEndValue_swiginit(self, _quickfix.new_UnderlyingEndValue(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingEndValue

# Register UnderlyingEndValue in _quickfix:
_quickfix.UnderlyingEndValue_swigregister(UnderlyingEndValue)

class NoUnderlyingStips(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoUnderlyingStips_swiginit(self, _quickfix.new_NoUnderlyingStips(*args))
    __swig_destroy__ = _quickfix.delete_NoUnderlyingStips

# Register NoUnderlyingStips in _quickfix:
_quickfix.NoUnderlyingStips_swigregister(NoUnderlyingStips)

class UnderlyingStipType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingStipType_swiginit(self, _quickfix.new_UnderlyingStipType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingStipType

# Register UnderlyingStipType in _quickfix:
_quickfix.UnderlyingStipType_swigregister(UnderlyingStipType)

class UnderlyingStipValue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingStipValue_swiginit(self, _quickfix.new_UnderlyingStipValue(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingStipValue

# Register UnderlyingStipValue in _quickfix:
_quickfix.UnderlyingStipValue_swigregister(UnderlyingStipValue)

class MaturityNetMoney(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaturityNetMoney_swiginit(self, _quickfix.new_MaturityNetMoney(*args))
    __swig_destroy__ = _quickfix.delete_MaturityNetMoney

# Register MaturityNetMoney in _quickfix:
_quickfix.MaturityNetMoney_swigregister(MaturityNetMoney)

class MiscFeeBasis(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MiscFeeBasis_swiginit(self, _quickfix.new_MiscFeeBasis(*args))
    __swig_destroy__ = _quickfix.delete_MiscFeeBasis

# Register MiscFeeBasis in _quickfix:
_quickfix.MiscFeeBasis_swigregister(MiscFeeBasis)

class TotNoAllocs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNoAllocs_swiginit(self, _quickfix.new_TotNoAllocs(*args))
    __swig_destroy__ = _quickfix.delete_TotNoAllocs

# Register TotNoAllocs in _quickfix:
_quickfix.TotNoAllocs_swigregister(TotNoAllocs)

class LastFragment(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastFragment_swiginit(self, _quickfix.new_LastFragment(*args))
    __swig_destroy__ = _quickfix.delete_LastFragment

# Register LastFragment in _quickfix:
_quickfix.LastFragment_swigregister(LastFragment)

class CollReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollReqID_swiginit(self, _quickfix.new_CollReqID(*args))
    __swig_destroy__ = _quickfix.delete_CollReqID

# Register CollReqID in _quickfix:
_quickfix.CollReqID_swigregister(CollReqID)

class CollAsgnReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollAsgnReason_swiginit(self, _quickfix.new_CollAsgnReason(*args))
    __swig_destroy__ = _quickfix.delete_CollAsgnReason

# Register CollAsgnReason in _quickfix:
_quickfix.CollAsgnReason_swigregister(CollAsgnReason)

class CollInquiryQualifier(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollInquiryQualifier_swiginit(self, _quickfix.new_CollInquiryQualifier(*args))
    __swig_destroy__ = _quickfix.delete_CollInquiryQualifier

# Register CollInquiryQualifier in _quickfix:
_quickfix.CollInquiryQualifier_swigregister(CollInquiryQualifier)

class NoTrades(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoTrades_swiginit(self, _quickfix.new_NoTrades(*args))
    __swig_destroy__ = _quickfix.delete_NoTrades

# Register NoTrades in _quickfix:
_quickfix.NoTrades_swigregister(NoTrades)

class MarginRatio(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MarginRatio_swiginit(self, _quickfix.new_MarginRatio(*args))
    __swig_destroy__ = _quickfix.delete_MarginRatio

# Register MarginRatio in _quickfix:
_quickfix.MarginRatio_swigregister(MarginRatio)

class MarginExcess(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MarginExcess_swiginit(self, _quickfix.new_MarginExcess(*args))
    __swig_destroy__ = _quickfix.delete_MarginExcess

# Register MarginExcess in _quickfix:
_quickfix.MarginExcess_swigregister(MarginExcess)

class TotalNetValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotalNetValue_swiginit(self, _quickfix.new_TotalNetValue(*args))
    __swig_destroy__ = _quickfix.delete_TotalNetValue

# Register TotalNetValue in _quickfix:
_quickfix.TotalNetValue_swigregister(TotalNetValue)

class CashOutstanding(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CashOutstanding_swiginit(self, _quickfix.new_CashOutstanding(*args))
    __swig_destroy__ = _quickfix.delete_CashOutstanding

# Register CashOutstanding in _quickfix:
_quickfix.CashOutstanding_swigregister(CashOutstanding)

class CollAsgnID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollAsgnID_swiginit(self, _quickfix.new_CollAsgnID(*args))
    __swig_destroy__ = _quickfix.delete_CollAsgnID

# Register CollAsgnID in _quickfix:
_quickfix.CollAsgnID_swigregister(CollAsgnID)

class CollAsgnTransType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollAsgnTransType_swiginit(self, _quickfix.new_CollAsgnTransType(*args))
    __swig_destroy__ = _quickfix.delete_CollAsgnTransType

# Register CollAsgnTransType in _quickfix:
_quickfix.CollAsgnTransType_swigregister(CollAsgnTransType)

class CollRespID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollRespID_swiginit(self, _quickfix.new_CollRespID(*args))
    __swig_destroy__ = _quickfix.delete_CollRespID

# Register CollRespID in _quickfix:
_quickfix.CollRespID_swigregister(CollRespID)

class CollAsgnRespType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollAsgnRespType_swiginit(self, _quickfix.new_CollAsgnRespType(*args))
    __swig_destroy__ = _quickfix.delete_CollAsgnRespType

# Register CollAsgnRespType in _quickfix:
_quickfix.CollAsgnRespType_swigregister(CollAsgnRespType)

class CollAsgnRejectReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollAsgnRejectReason_swiginit(self, _quickfix.new_CollAsgnRejectReason(*args))
    __swig_destroy__ = _quickfix.delete_CollAsgnRejectReason

# Register CollAsgnRejectReason in _quickfix:
_quickfix.CollAsgnRejectReason_swigregister(CollAsgnRejectReason)

class CollAsgnRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollAsgnRefID_swiginit(self, _quickfix.new_CollAsgnRefID(*args))
    __swig_destroy__ = _quickfix.delete_CollAsgnRefID

# Register CollAsgnRefID in _quickfix:
_quickfix.CollAsgnRefID_swigregister(CollAsgnRefID)

class CollRptID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollRptID_swiginit(self, _quickfix.new_CollRptID(*args))
    __swig_destroy__ = _quickfix.delete_CollRptID

# Register CollRptID in _quickfix:
_quickfix.CollRptID_swigregister(CollRptID)

class CollInquiryID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollInquiryID_swiginit(self, _quickfix.new_CollInquiryID(*args))
    __swig_destroy__ = _quickfix.delete_CollInquiryID

# Register CollInquiryID in _quickfix:
_quickfix.CollInquiryID_swigregister(CollInquiryID)

class CollStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollStatus_swiginit(self, _quickfix.new_CollStatus(*args))
    __swig_destroy__ = _quickfix.delete_CollStatus

# Register CollStatus in _quickfix:
_quickfix.CollStatus_swigregister(CollStatus)

class TotNumReports(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNumReports_swiginit(self, _quickfix.new_TotNumReports(*args))
    __swig_destroy__ = _quickfix.delete_TotNumReports

# Register TotNumReports in _quickfix:
_quickfix.TotNumReports_swigregister(TotNumReports)

class LastRptRequested(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastRptRequested_swiginit(self, _quickfix.new_LastRptRequested(*args))
    __swig_destroy__ = _quickfix.delete_LastRptRequested

# Register LastRptRequested in _quickfix:
_quickfix.LastRptRequested_swigregister(LastRptRequested)

class AgreementDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AgreementDesc_swiginit(self, _quickfix.new_AgreementDesc(*args))
    __swig_destroy__ = _quickfix.delete_AgreementDesc

# Register AgreementDesc in _quickfix:
_quickfix.AgreementDesc_swigregister(AgreementDesc)

class AgreementID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AgreementID_swiginit(self, _quickfix.new_AgreementID(*args))
    __swig_destroy__ = _quickfix.delete_AgreementID

# Register AgreementID in _quickfix:
_quickfix.AgreementID_swigregister(AgreementID)

class AgreementDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AgreementDate_swiginit(self, _quickfix.new_AgreementDate(*args))
    __swig_destroy__ = _quickfix.delete_AgreementDate

# Register AgreementDate in _quickfix:
_quickfix.AgreementDate_swigregister(AgreementDate)

class StartDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StartDate_swiginit(self, _quickfix.new_StartDate(*args))
    __swig_destroy__ = _quickfix.delete_StartDate

# Register StartDate in _quickfix:
_quickfix.StartDate_swigregister(StartDate)

class EndDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EndDate_swiginit(self, _quickfix.new_EndDate(*args))
    __swig_destroy__ = _quickfix.delete_EndDate

# Register EndDate in _quickfix:
_quickfix.EndDate_swigregister(EndDate)

class AgreementCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AgreementCurrency_swiginit(self, _quickfix.new_AgreementCurrency(*args))
    __swig_destroy__ = _quickfix.delete_AgreementCurrency

# Register AgreementCurrency in _quickfix:
_quickfix.AgreementCurrency_swigregister(AgreementCurrency)

class DeliveryType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeliveryType_swiginit(self, _quickfix.new_DeliveryType(*args))
    __swig_destroy__ = _quickfix.delete_DeliveryType

# Register DeliveryType in _quickfix:
_quickfix.DeliveryType_swigregister(DeliveryType)

class EndAccruedInterestAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EndAccruedInterestAmt_swiginit(self, _quickfix.new_EndAccruedInterestAmt(*args))
    __swig_destroy__ = _quickfix.delete_EndAccruedInterestAmt

# Register EndAccruedInterestAmt in _quickfix:
_quickfix.EndAccruedInterestAmt_swigregister(EndAccruedInterestAmt)

class StartCash(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StartCash_swiginit(self, _quickfix.new_StartCash(*args))
    __swig_destroy__ = _quickfix.delete_StartCash

# Register StartCash in _quickfix:
_quickfix.StartCash_swigregister(StartCash)

class EndCash(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EndCash_swiginit(self, _quickfix.new_EndCash(*args))
    __swig_destroy__ = _quickfix.delete_EndCash

# Register EndCash in _quickfix:
_quickfix.EndCash_swigregister(EndCash)

class UserRequestID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UserRequestID_swiginit(self, _quickfix.new_UserRequestID(*args))
    __swig_destroy__ = _quickfix.delete_UserRequestID

# Register UserRequestID in _quickfix:
_quickfix.UserRequestID_swigregister(UserRequestID)

class UserRequestType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UserRequestType_swiginit(self, _quickfix.new_UserRequestType(*args))
    __swig_destroy__ = _quickfix.delete_UserRequestType

# Register UserRequestType in _quickfix:
_quickfix.UserRequestType_swigregister(UserRequestType)

class NewPassword(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NewPassword_swiginit(self, _quickfix.new_NewPassword(*args))
    __swig_destroy__ = _quickfix.delete_NewPassword

# Register NewPassword in _quickfix:
_quickfix.NewPassword_swigregister(NewPassword)

class UserStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UserStatus_swiginit(self, _quickfix.new_UserStatus(*args))
    __swig_destroy__ = _quickfix.delete_UserStatus

# Register UserStatus in _quickfix:
_quickfix.UserStatus_swigregister(UserStatus)

class UserStatusText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UserStatusText_swiginit(self, _quickfix.new_UserStatusText(*args))
    __swig_destroy__ = _quickfix.delete_UserStatusText

# Register UserStatusText in _quickfix:
_quickfix.UserStatusText_swigregister(UserStatusText)

class StatusValue(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StatusValue_swiginit(self, _quickfix.new_StatusValue(*args))
    __swig_destroy__ = _quickfix.delete_StatusValue

# Register StatusValue in _quickfix:
_quickfix.StatusValue_swigregister(StatusValue)

class StatusText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StatusText_swiginit(self, _quickfix.new_StatusText(*args))
    __swig_destroy__ = _quickfix.delete_StatusText

# Register StatusText in _quickfix:
_quickfix.StatusText_swigregister(StatusText)

class RefCompID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefCompID_swiginit(self, _quickfix.new_RefCompID(*args))
    __swig_destroy__ = _quickfix.delete_RefCompID

# Register RefCompID in _quickfix:
_quickfix.RefCompID_swigregister(RefCompID)

class RefSubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefSubID_swiginit(self, _quickfix.new_RefSubID(*args))
    __swig_destroy__ = _quickfix.delete_RefSubID

# Register RefSubID in _quickfix:
_quickfix.RefSubID_swigregister(RefSubID)

class NetworkResponseID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NetworkResponseID_swiginit(self, _quickfix.new_NetworkResponseID(*args))
    __swig_destroy__ = _quickfix.delete_NetworkResponseID

# Register NetworkResponseID in _quickfix:
_quickfix.NetworkResponseID_swigregister(NetworkResponseID)

class NetworkRequestID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NetworkRequestID_swiginit(self, _quickfix.new_NetworkRequestID(*args))
    __swig_destroy__ = _quickfix.delete_NetworkRequestID

# Register NetworkRequestID in _quickfix:
_quickfix.NetworkRequestID_swigregister(NetworkRequestID)

class LastNetworkResponseID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastNetworkResponseID_swiginit(self, _quickfix.new_LastNetworkResponseID(*args))
    __swig_destroy__ = _quickfix.delete_LastNetworkResponseID

# Register LastNetworkResponseID in _quickfix:
_quickfix.LastNetworkResponseID_swigregister(LastNetworkResponseID)

class NetworkRequestType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NetworkRequestType_swiginit(self, _quickfix.new_NetworkRequestType(*args))
    __swig_destroy__ = _quickfix.delete_NetworkRequestType

# Register NetworkRequestType in _quickfix:
_quickfix.NetworkRequestType_swigregister(NetworkRequestType)

class NoCompIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoCompIDs_swiginit(self, _quickfix.new_NoCompIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoCompIDs

# Register NoCompIDs in _quickfix:
_quickfix.NoCompIDs_swigregister(NoCompIDs)

class NetworkStatusResponseType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NetworkStatusResponseType_swiginit(self, _quickfix.new_NetworkStatusResponseType(*args))
    __swig_destroy__ = _quickfix.delete_NetworkStatusResponseType

# Register NetworkStatusResponseType in _quickfix:
_quickfix.NetworkStatusResponseType_swigregister(NetworkStatusResponseType)

class NoCollInquiryQualifier(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoCollInquiryQualifier_swiginit(self, _quickfix.new_NoCollInquiryQualifier(*args))
    __swig_destroy__ = _quickfix.delete_NoCollInquiryQualifier

# Register NoCollInquiryQualifier in _quickfix:
_quickfix.NoCollInquiryQualifier_swigregister(NoCollInquiryQualifier)

class TrdRptStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TrdRptStatus_swiginit(self, _quickfix.new_TrdRptStatus(*args))
    __swig_destroy__ = _quickfix.delete_TrdRptStatus

# Register TrdRptStatus in _quickfix:
_quickfix.TrdRptStatus_swigregister(TrdRptStatus)

class AffirmStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AffirmStatus_swiginit(self, _quickfix.new_AffirmStatus(*args))
    __swig_destroy__ = _quickfix.delete_AffirmStatus

# Register AffirmStatus in _quickfix:
_quickfix.AffirmStatus_swigregister(AffirmStatus)

class UnderlyingStrikeCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingStrikeCurrency_swiginit(self, _quickfix.new_UnderlyingStrikeCurrency(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingStrikeCurrency

# Register UnderlyingStrikeCurrency in _quickfix:
_quickfix.UnderlyingStrikeCurrency_swigregister(UnderlyingStrikeCurrency)

class LegStrikeCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegStrikeCurrency_swiginit(self, _quickfix.new_LegStrikeCurrency(*args))
    __swig_destroy__ = _quickfix.delete_LegStrikeCurrency

# Register LegStrikeCurrency in _quickfix:
_quickfix.LegStrikeCurrency_swigregister(LegStrikeCurrency)

class TimeBracket(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TimeBracket_swiginit(self, _quickfix.new_TimeBracket(*args))
    __swig_destroy__ = _quickfix.delete_TimeBracket

# Register TimeBracket in _quickfix:
_quickfix.TimeBracket_swigregister(TimeBracket)

class CollAction(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollAction_swiginit(self, _quickfix.new_CollAction(*args))
    __swig_destroy__ = _quickfix.delete_CollAction

# Register CollAction in _quickfix:
_quickfix.CollAction_swigregister(CollAction)

class CollInquiryStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollInquiryStatus_swiginit(self, _quickfix.new_CollInquiryStatus(*args))
    __swig_destroy__ = _quickfix.delete_CollInquiryStatus

# Register CollInquiryStatus in _quickfix:
_quickfix.CollInquiryStatus_swigregister(CollInquiryStatus)

class CollInquiryResult(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollInquiryResult_swiginit(self, _quickfix.new_CollInquiryResult(*args))
    __swig_destroy__ = _quickfix.delete_CollInquiryResult

# Register CollInquiryResult in _quickfix:
_quickfix.CollInquiryResult_swigregister(CollInquiryResult)

class StrikeCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikeCurrency_swiginit(self, _quickfix.new_StrikeCurrency(*args))
    __swig_destroy__ = _quickfix.delete_StrikeCurrency

# Register StrikeCurrency in _quickfix:
_quickfix.StrikeCurrency_swigregister(StrikeCurrency)

class NoNested3PartyIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNested3PartyIDs_swiginit(self, _quickfix.new_NoNested3PartyIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoNested3PartyIDs

# Register NoNested3PartyIDs in _quickfix:
_quickfix.NoNested3PartyIDs_swigregister(NoNested3PartyIDs)

class Nested3PartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested3PartyID_swiginit(self, _quickfix.new_Nested3PartyID(*args))
    __swig_destroy__ = _quickfix.delete_Nested3PartyID

# Register Nested3PartyID in _quickfix:
_quickfix.Nested3PartyID_swigregister(Nested3PartyID)

class Nested3PartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested3PartyIDSource_swiginit(self, _quickfix.new_Nested3PartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_Nested3PartyIDSource

# Register Nested3PartyIDSource in _quickfix:
_quickfix.Nested3PartyIDSource_swigregister(Nested3PartyIDSource)

class Nested3PartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested3PartyRole_swiginit(self, _quickfix.new_Nested3PartyRole(*args))
    __swig_destroy__ = _quickfix.delete_Nested3PartyRole

# Register Nested3PartyRole in _quickfix:
_quickfix.Nested3PartyRole_swigregister(Nested3PartyRole)

class NoNested3PartySubIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNested3PartySubIDs_swiginit(self, _quickfix.new_NoNested3PartySubIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoNested3PartySubIDs

# Register NoNested3PartySubIDs in _quickfix:
_quickfix.NoNested3PartySubIDs_swigregister(NoNested3PartySubIDs)

class Nested3PartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested3PartySubID_swiginit(self, _quickfix.new_Nested3PartySubID(*args))
    __swig_destroy__ = _quickfix.delete_Nested3PartySubID

# Register Nested3PartySubID in _quickfix:
_quickfix.Nested3PartySubID_swigregister(Nested3PartySubID)

class Nested3PartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested3PartySubIDType_swiginit(self, _quickfix.new_Nested3PartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_Nested3PartySubIDType

# Register Nested3PartySubIDType in _quickfix:
_quickfix.Nested3PartySubIDType_swigregister(Nested3PartySubIDType)

class LegContractSettlMonth(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegContractSettlMonth_swiginit(self, _quickfix.new_LegContractSettlMonth(*args))
    __swig_destroy__ = _quickfix.delete_LegContractSettlMonth

# Register LegContractSettlMonth in _quickfix:
_quickfix.LegContractSettlMonth_swigregister(LegContractSettlMonth)

class LegInterestAccrualDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegInterestAccrualDate_swiginit(self, _quickfix.new_LegInterestAccrualDate(*args))
    __swig_destroy__ = _quickfix.delete_LegInterestAccrualDate

# Register LegInterestAccrualDate in _quickfix:
_quickfix.LegInterestAccrualDate_swigregister(LegInterestAccrualDate)

class LegOrderQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegOrderQty_swiginit(self, _quickfix.new_LegOrderQty(*args))
    __swig_destroy__ = _quickfix.delete_LegOrderQty

# Register LegOrderQty in _quickfix:
_quickfix.LegOrderQty_swigregister(LegOrderQty)

class NoStrategyParameters(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoStrategyParameters_swiginit(self, _quickfix.new_NoStrategyParameters(*args))
    __swig_destroy__ = _quickfix.delete_NoStrategyParameters

# Register NoStrategyParameters in _quickfix:
_quickfix.NoStrategyParameters_swigregister(NoStrategyParameters)

class StrategyParameterName(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrategyParameterName_swiginit(self, _quickfix.new_StrategyParameterName(*args))
    __swig_destroy__ = _quickfix.delete_StrategyParameterName

# Register StrategyParameterName in _quickfix:
_quickfix.StrategyParameterName_swigregister(StrategyParameterName)

class StrategyParameterType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrategyParameterType_swiginit(self, _quickfix.new_StrategyParameterType(*args))
    __swig_destroy__ = _quickfix.delete_StrategyParameterType

# Register StrategyParameterType in _quickfix:
_quickfix.StrategyParameterType_swigregister(StrategyParameterType)

class StrategyParameterValue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrategyParameterValue_swiginit(self, _quickfix.new_StrategyParameterValue(*args))
    __swig_destroy__ = _quickfix.delete_StrategyParameterValue

# Register StrategyParameterValue in _quickfix:
_quickfix.StrategyParameterValue_swigregister(StrategyParameterValue)

class HostCrossID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.HostCrossID_swiginit(self, _quickfix.new_HostCrossID(*args))
    __swig_destroy__ = _quickfix.delete_HostCrossID

# Register HostCrossID in _quickfix:
_quickfix.HostCrossID_swigregister(HostCrossID)

class SideTimeInForce(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideTimeInForce_swiginit(self, _quickfix.new_SideTimeInForce(*args))
    __swig_destroy__ = _quickfix.delete_SideTimeInForce

# Register SideTimeInForce in _quickfix:
_quickfix.SideTimeInForce_swigregister(SideTimeInForce)

class MDReportID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDReportID_swiginit(self, _quickfix.new_MDReportID(*args))
    __swig_destroy__ = _quickfix.delete_MDReportID

# Register MDReportID in _quickfix:
_quickfix.MDReportID_swigregister(MDReportID)

class SecurityReportID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityReportID_swiginit(self, _quickfix.new_SecurityReportID(*args))
    __swig_destroy__ = _quickfix.delete_SecurityReportID

# Register SecurityReportID in _quickfix:
_quickfix.SecurityReportID_swigregister(SecurityReportID)

class SecurityStatus(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityStatus_swiginit(self, _quickfix.new_SecurityStatus(*args))
    __swig_destroy__ = _quickfix.delete_SecurityStatus

# Register SecurityStatus in _quickfix:
_quickfix.SecurityStatus_swigregister(SecurityStatus)

class SettleOnOpenFlag(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettleOnOpenFlag_swiginit(self, _quickfix.new_SettleOnOpenFlag(*args))
    __swig_destroy__ = _quickfix.delete_SettleOnOpenFlag

# Register SettleOnOpenFlag in _quickfix:
_quickfix.SettleOnOpenFlag_swigregister(SettleOnOpenFlag)

class StrikeMultiplier(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikeMultiplier_swiginit(self, _quickfix.new_StrikeMultiplier(*args))
    __swig_destroy__ = _quickfix.delete_StrikeMultiplier

# Register StrikeMultiplier in _quickfix:
_quickfix.StrikeMultiplier_swigregister(StrikeMultiplier)

class StrikeValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikeValue_swiginit(self, _quickfix.new_StrikeValue(*args))
    __swig_destroy__ = _quickfix.delete_StrikeValue

# Register StrikeValue in _quickfix:
_quickfix.StrikeValue_swigregister(StrikeValue)

class MinPriceIncrement(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MinPriceIncrement_swiginit(self, _quickfix.new_MinPriceIncrement(*args))
    __swig_destroy__ = _quickfix.delete_MinPriceIncrement

# Register MinPriceIncrement in _quickfix:
_quickfix.MinPriceIncrement_swigregister(MinPriceIncrement)

class PositionLimit(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PositionLimit_swiginit(self, _quickfix.new_PositionLimit(*args))
    __swig_destroy__ = _quickfix.delete_PositionLimit

# Register PositionLimit in _quickfix:
_quickfix.PositionLimit_swigregister(PositionLimit)

class NTPositionLimit(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NTPositionLimit_swiginit(self, _quickfix.new_NTPositionLimit(*args))
    __swig_destroy__ = _quickfix.delete_NTPositionLimit

# Register NTPositionLimit in _quickfix:
_quickfix.NTPositionLimit_swigregister(NTPositionLimit)

class UnderlyingAllocationPercent(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingAllocationPercent_swiginit(self, _quickfix.new_UnderlyingAllocationPercent(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingAllocationPercent

# Register UnderlyingAllocationPercent in _quickfix:
_quickfix.UnderlyingAllocationPercent_swigregister(UnderlyingAllocationPercent)

class UnderlyingCashAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCashAmount_swiginit(self, _quickfix.new_UnderlyingCashAmount(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCashAmount

# Register UnderlyingCashAmount in _quickfix:
_quickfix.UnderlyingCashAmount_swigregister(UnderlyingCashAmount)

class UnderlyingCashType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCashType_swiginit(self, _quickfix.new_UnderlyingCashType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCashType

# Register UnderlyingCashType in _quickfix:
_quickfix.UnderlyingCashType_swigregister(UnderlyingCashType)

class UnderlyingSettlementType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSettlementType_swiginit(self, _quickfix.new_UnderlyingSettlementType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlementType

# Register UnderlyingSettlementType in _quickfix:
_quickfix.UnderlyingSettlementType_swigregister(UnderlyingSettlementType)

class QuantityDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuantityDate_swiginit(self, _quickfix.new_QuantityDate(*args))
    __swig_destroy__ = _quickfix.delete_QuantityDate

# Register QuantityDate in _quickfix:
_quickfix.QuantityDate_swigregister(QuantityDate)

class ContIntRptID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContIntRptID_swiginit(self, _quickfix.new_ContIntRptID(*args))
    __swig_destroy__ = _quickfix.delete_ContIntRptID

# Register ContIntRptID in _quickfix:
_quickfix.ContIntRptID_swigregister(ContIntRptID)

class LateIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LateIndicator_swiginit(self, _quickfix.new_LateIndicator(*args))
    __swig_destroy__ = _quickfix.delete_LateIndicator

# Register LateIndicator in _quickfix:
_quickfix.LateIndicator_swigregister(LateIndicator)

class InputSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InputSource_swiginit(self, _quickfix.new_InputSource(*args))
    __swig_destroy__ = _quickfix.delete_InputSource

# Register InputSource in _quickfix:
_quickfix.InputSource_swigregister(InputSource)

class SecurityUpdateAction(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityUpdateAction_swiginit(self, _quickfix.new_SecurityUpdateAction(*args))
    __swig_destroy__ = _quickfix.delete_SecurityUpdateAction

# Register SecurityUpdateAction in _quickfix:
_quickfix.SecurityUpdateAction_swigregister(SecurityUpdateAction)

class NoExpiration(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoExpiration_swiginit(self, _quickfix.new_NoExpiration(*args))
    __swig_destroy__ = _quickfix.delete_NoExpiration

# Register NoExpiration in _quickfix:
_quickfix.NoExpiration_swigregister(NoExpiration)

class ExpType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExpType_swiginit(self, _quickfix.new_ExpType(*args))
    __swig_destroy__ = _quickfix.delete_ExpType

# Register ExpType in _quickfix:
_quickfix.ExpType_swigregister(ExpType)

class ExpQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExpQty_swiginit(self, _quickfix.new_ExpQty(*args))
    __swig_destroy__ = _quickfix.delete_ExpQty

# Register ExpQty in _quickfix:
_quickfix.ExpQty_swigregister(ExpQty)

class NoUnderlyingAmounts(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoUnderlyingAmounts_swiginit(self, _quickfix.new_NoUnderlyingAmounts(*args))
    __swig_destroy__ = _quickfix.delete_NoUnderlyingAmounts

# Register NoUnderlyingAmounts in _quickfix:
_quickfix.NoUnderlyingAmounts_swigregister(NoUnderlyingAmounts)

class UnderlyingPayAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingPayAmount_swiginit(self, _quickfix.new_UnderlyingPayAmount(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingPayAmount

# Register UnderlyingPayAmount in _quickfix:
_quickfix.UnderlyingPayAmount_swigregister(UnderlyingPayAmount)

class UnderlyingCollectAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCollectAmount_swiginit(self, _quickfix.new_UnderlyingCollectAmount(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCollectAmount

# Register UnderlyingCollectAmount in _quickfix:
_quickfix.UnderlyingCollectAmount_swigregister(UnderlyingCollectAmount)

class UnderlyingSettlementDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSettlementDate_swiginit(self, _quickfix.new_UnderlyingSettlementDate(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlementDate

# Register UnderlyingSettlementDate in _quickfix:
_quickfix.UnderlyingSettlementDate_swigregister(UnderlyingSettlementDate)

class UnderlyingSettlementStatus(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSettlementStatus_swiginit(self, _quickfix.new_UnderlyingSettlementStatus(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlementStatus

# Register UnderlyingSettlementStatus in _quickfix:
_quickfix.UnderlyingSettlementStatus_swigregister(UnderlyingSettlementStatus)

class SecondaryIndividualAllocID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryIndividualAllocID_swiginit(self, _quickfix.new_SecondaryIndividualAllocID(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryIndividualAllocID

# Register SecondaryIndividualAllocID in _quickfix:
_quickfix.SecondaryIndividualAllocID_swigregister(SecondaryIndividualAllocID)

class LegReportID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegReportID_swiginit(self, _quickfix.new_LegReportID(*args))
    __swig_destroy__ = _quickfix.delete_LegReportID

# Register LegReportID in _quickfix:
_quickfix.LegReportID_swigregister(LegReportID)

class RndPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RndPx_swiginit(self, _quickfix.new_RndPx(*args))
    __swig_destroy__ = _quickfix.delete_RndPx

# Register RndPx in _quickfix:
_quickfix.RndPx_swigregister(RndPx)

class IndividualAllocType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.IndividualAllocType_swiginit(self, _quickfix.new_IndividualAllocType(*args))
    __swig_destroy__ = _quickfix.delete_IndividualAllocType

# Register IndividualAllocType in _quickfix:
_quickfix.IndividualAllocType_swigregister(IndividualAllocType)

class AllocCustomerCapacity(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocCustomerCapacity_swiginit(self, _quickfix.new_AllocCustomerCapacity(*args))
    __swig_destroy__ = _quickfix.delete_AllocCustomerCapacity

# Register AllocCustomerCapacity in _quickfix:
_quickfix.AllocCustomerCapacity_swigregister(AllocCustomerCapacity)

class TierCode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TierCode_swiginit(self, _quickfix.new_TierCode(*args))
    __swig_destroy__ = _quickfix.delete_TierCode

# Register TierCode in _quickfix:
_quickfix.TierCode_swigregister(TierCode)

class UnitOfMeasure(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnitOfMeasure_swiginit(self, _quickfix.new_UnitOfMeasure(*args))
    __swig_destroy__ = _quickfix.delete_UnitOfMeasure

# Register UnitOfMeasure in _quickfix:
_quickfix.UnitOfMeasure_swigregister(UnitOfMeasure)

class TimeUnit(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TimeUnit_swiginit(self, _quickfix.new_TimeUnit(*args))
    __swig_destroy__ = _quickfix.delete_TimeUnit

# Register TimeUnit in _quickfix:
_quickfix.TimeUnit_swigregister(TimeUnit)

class UnderlyingUnitOfMeasure(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingUnitOfMeasure_swiginit(self, _quickfix.new_UnderlyingUnitOfMeasure(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingUnitOfMeasure

# Register UnderlyingUnitOfMeasure in _quickfix:
_quickfix.UnderlyingUnitOfMeasure_swigregister(UnderlyingUnitOfMeasure)

class LegUnitOfMeasure(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegUnitOfMeasure_swiginit(self, _quickfix.new_LegUnitOfMeasure(*args))
    __swig_destroy__ = _quickfix.delete_LegUnitOfMeasure

# Register LegUnitOfMeasure in _quickfix:
_quickfix.LegUnitOfMeasure_swigregister(LegUnitOfMeasure)

class UnderlyingTimeUnit(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingTimeUnit_swiginit(self, _quickfix.new_UnderlyingTimeUnit(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingTimeUnit

# Register UnderlyingTimeUnit in _quickfix:
_quickfix.UnderlyingTimeUnit_swigregister(UnderlyingTimeUnit)

class LegTimeUnit(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegTimeUnit_swiginit(self, _quickfix.new_LegTimeUnit(*args))
    __swig_destroy__ = _quickfix.delete_LegTimeUnit

# Register LegTimeUnit in _quickfix:
_quickfix.LegTimeUnit_swigregister(LegTimeUnit)

class AllocMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocMethod_swiginit(self, _quickfix.new_AllocMethod(*args))
    __swig_destroy__ = _quickfix.delete_AllocMethod

# Register AllocMethod in _quickfix:
_quickfix.AllocMethod_swigregister(AllocMethod)

class TradeID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeID_swiginit(self, _quickfix.new_TradeID(*args))
    __swig_destroy__ = _quickfix.delete_TradeID

# Register TradeID in _quickfix:
_quickfix.TradeID_swigregister(TradeID)

class SideTradeReportID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideTradeReportID_swiginit(self, _quickfix.new_SideTradeReportID(*args))
    __swig_destroy__ = _quickfix.delete_SideTradeReportID

# Register SideTradeReportID in _quickfix:
_quickfix.SideTradeReportID_swigregister(SideTradeReportID)

class SideFillStationCd(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideFillStationCd_swiginit(self, _quickfix.new_SideFillStationCd(*args))
    __swig_destroy__ = _quickfix.delete_SideFillStationCd

# Register SideFillStationCd in _quickfix:
_quickfix.SideFillStationCd_swigregister(SideFillStationCd)

class SideReasonCd(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideReasonCd_swiginit(self, _quickfix.new_SideReasonCd(*args))
    __swig_destroy__ = _quickfix.delete_SideReasonCd

# Register SideReasonCd in _quickfix:
_quickfix.SideReasonCd_swigregister(SideReasonCd)

class SideTrdSubTyp(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideTrdSubTyp_swiginit(self, _quickfix.new_SideTrdSubTyp(*args))
    __swig_destroy__ = _quickfix.delete_SideTrdSubTyp

# Register SideTrdSubTyp in _quickfix:
_quickfix.SideTrdSubTyp_swigregister(SideTrdSubTyp)

class SideQty(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideQty_swiginit(self, _quickfix.new_SideQty(*args))
    __swig_destroy__ = _quickfix.delete_SideQty

# Register SideQty in _quickfix:
_quickfix.SideQty_swigregister(SideQty)

class MessageEventSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MessageEventSource_swiginit(self, _quickfix.new_MessageEventSource(*args))
    __swig_destroy__ = _quickfix.delete_MessageEventSource

# Register MessageEventSource in _quickfix:
_quickfix.MessageEventSource_swigregister(MessageEventSource)

class SideTrdRegTimestamp(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideTrdRegTimestamp_swiginit(self, _quickfix.new_SideTrdRegTimestamp(*args))
    __swig_destroy__ = _quickfix.delete_SideTrdRegTimestamp

# Register SideTrdRegTimestamp in _quickfix:
_quickfix.SideTrdRegTimestamp_swigregister(SideTrdRegTimestamp)

class SideTrdRegTimestampType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideTrdRegTimestampType_swiginit(self, _quickfix.new_SideTrdRegTimestampType(*args))
    __swig_destroy__ = _quickfix.delete_SideTrdRegTimestampType

# Register SideTrdRegTimestampType in _quickfix:
_quickfix.SideTrdRegTimestampType_swigregister(SideTrdRegTimestampType)

class SideTrdRegTimestampSrc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideTrdRegTimestampSrc_swiginit(self, _quickfix.new_SideTrdRegTimestampSrc(*args))
    __swig_destroy__ = _quickfix.delete_SideTrdRegTimestampSrc

# Register SideTrdRegTimestampSrc in _quickfix:
_quickfix.SideTrdRegTimestampSrc_swigregister(SideTrdRegTimestampSrc)

class AsOfIndicator(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AsOfIndicator_swiginit(self, _quickfix.new_AsOfIndicator(*args))
    __swig_destroy__ = _quickfix.delete_AsOfIndicator

# Register AsOfIndicator in _quickfix:
_quickfix.AsOfIndicator_swigregister(AsOfIndicator)

class NoSideTrdRegTS(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoSideTrdRegTS_swiginit(self, _quickfix.new_NoSideTrdRegTS(*args))
    __swig_destroy__ = _quickfix.delete_NoSideTrdRegTS

# Register NoSideTrdRegTS in _quickfix:
_quickfix.NoSideTrdRegTS_swigregister(NoSideTrdRegTS)

class LegOptionRatio(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegOptionRatio_swiginit(self, _quickfix.new_LegOptionRatio(*args))
    __swig_destroy__ = _quickfix.delete_LegOptionRatio

# Register LegOptionRatio in _quickfix:
_quickfix.LegOptionRatio_swigregister(LegOptionRatio)

class NoInstrumentParties(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoInstrumentParties_swiginit(self, _quickfix.new_NoInstrumentParties(*args))
    __swig_destroy__ = _quickfix.delete_NoInstrumentParties

# Register NoInstrumentParties in _quickfix:
_quickfix.NoInstrumentParties_swigregister(NoInstrumentParties)

class InstrumentPartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InstrumentPartyID_swiginit(self, _quickfix.new_InstrumentPartyID(*args))
    __swig_destroy__ = _quickfix.delete_InstrumentPartyID

# Register InstrumentPartyID in _quickfix:
_quickfix.InstrumentPartyID_swigregister(InstrumentPartyID)

class TradeVolume(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeVolume_swiginit(self, _quickfix.new_TradeVolume(*args))
    __swig_destroy__ = _quickfix.delete_TradeVolume

# Register TradeVolume in _quickfix:
_quickfix.TradeVolume_swigregister(TradeVolume)

class MDBookType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDBookType_swiginit(self, _quickfix.new_MDBookType(*args))
    __swig_destroy__ = _quickfix.delete_MDBookType

# Register MDBookType in _quickfix:
_quickfix.MDBookType_swigregister(MDBookType)

class MDFeedType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDFeedType_swiginit(self, _quickfix.new_MDFeedType(*args))
    __swig_destroy__ = _quickfix.delete_MDFeedType

# Register MDFeedType in _quickfix:
_quickfix.MDFeedType_swigregister(MDFeedType)

class MDPriceLevel(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDPriceLevel_swiginit(self, _quickfix.new_MDPriceLevel(*args))
    __swig_destroy__ = _quickfix.delete_MDPriceLevel

# Register MDPriceLevel in _quickfix:
_quickfix.MDPriceLevel_swigregister(MDPriceLevel)

class MDOriginType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDOriginType_swiginit(self, _quickfix.new_MDOriginType(*args))
    __swig_destroy__ = _quickfix.delete_MDOriginType

# Register MDOriginType in _quickfix:
_quickfix.MDOriginType_swigregister(MDOriginType)

class FirstPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FirstPx_swiginit(self, _quickfix.new_FirstPx(*args))
    __swig_destroy__ = _quickfix.delete_FirstPx

# Register FirstPx in _quickfix:
_quickfix.FirstPx_swigregister(FirstPx)

class MDEntrySpotRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntrySpotRate_swiginit(self, _quickfix.new_MDEntrySpotRate(*args))
    __swig_destroy__ = _quickfix.delete_MDEntrySpotRate

# Register MDEntrySpotRate in _quickfix:
_quickfix.MDEntrySpotRate_swigregister(MDEntrySpotRate)

class MDEntryForwardPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDEntryForwardPoints_swiginit(self, _quickfix.new_MDEntryForwardPoints(*args))
    __swig_destroy__ = _quickfix.delete_MDEntryForwardPoints

# Register MDEntryForwardPoints in _quickfix:
_quickfix.MDEntryForwardPoints_swigregister(MDEntryForwardPoints)

class ManualOrderIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ManualOrderIndicator_swiginit(self, _quickfix.new_ManualOrderIndicator(*args))
    __swig_destroy__ = _quickfix.delete_ManualOrderIndicator

# Register ManualOrderIndicator in _quickfix:
_quickfix.ManualOrderIndicator_swigregister(ManualOrderIndicator)

class CustDirectedOrder(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CustDirectedOrder_swiginit(self, _quickfix.new_CustDirectedOrder(*args))
    __swig_destroy__ = _quickfix.delete_CustDirectedOrder

# Register CustDirectedOrder in _quickfix:
_quickfix.CustDirectedOrder_swigregister(CustDirectedOrder)

class ReceivedDeptID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ReceivedDeptID_swiginit(self, _quickfix.new_ReceivedDeptID(*args))
    __swig_destroy__ = _quickfix.delete_ReceivedDeptID

# Register ReceivedDeptID in _quickfix:
_quickfix.ReceivedDeptID_swigregister(ReceivedDeptID)

class CustOrderHandlingInst(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CustOrderHandlingInst_swiginit(self, _quickfix.new_CustOrderHandlingInst(*args))
    __swig_destroy__ = _quickfix.delete_CustOrderHandlingInst

# Register CustOrderHandlingInst in _quickfix:
_quickfix.CustOrderHandlingInst_swigregister(CustOrderHandlingInst)

class OrderHandlingInstSource(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderHandlingInstSource_swiginit(self, _quickfix.new_OrderHandlingInstSource(*args))
    __swig_destroy__ = _quickfix.delete_OrderHandlingInstSource

# Register OrderHandlingInstSource in _quickfix:
_quickfix.OrderHandlingInstSource_swigregister(OrderHandlingInstSource)

class DeskType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeskType_swiginit(self, _quickfix.new_DeskType(*args))
    __swig_destroy__ = _quickfix.delete_DeskType

# Register DeskType in _quickfix:
_quickfix.DeskType_swigregister(DeskType)

class DeskTypeSource(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeskTypeSource_swiginit(self, _quickfix.new_DeskTypeSource(*args))
    __swig_destroy__ = _quickfix.delete_DeskTypeSource

# Register DeskTypeSource in _quickfix:
_quickfix.DeskTypeSource_swigregister(DeskTypeSource)

class DeskOrderHandlingInst(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DeskOrderHandlingInst_swiginit(self, _quickfix.new_DeskOrderHandlingInst(*args))
    __swig_destroy__ = _quickfix.delete_DeskOrderHandlingInst

# Register DeskOrderHandlingInst in _quickfix:
_quickfix.DeskOrderHandlingInst_swigregister(DeskOrderHandlingInst)

class ExecAckStatus(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecAckStatus_swiginit(self, _quickfix.new_ExecAckStatus(*args))
    __swig_destroy__ = _quickfix.delete_ExecAckStatus

# Register ExecAckStatus in _quickfix:
_quickfix.ExecAckStatus_swigregister(ExecAckStatus)

class UnderlyingDeliveryAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingDeliveryAmount_swiginit(self, _quickfix.new_UnderlyingDeliveryAmount(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingDeliveryAmount

# Register UnderlyingDeliveryAmount in _quickfix:
_quickfix.UnderlyingDeliveryAmount_swigregister(UnderlyingDeliveryAmount)

class UnderlyingCapValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingCapValue_swiginit(self, _quickfix.new_UnderlyingCapValue(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingCapValue

# Register UnderlyingCapValue in _quickfix:
_quickfix.UnderlyingCapValue_swigregister(UnderlyingCapValue)

class UnderlyingSettlMethod(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSettlMethod_swiginit(self, _quickfix.new_UnderlyingSettlMethod(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSettlMethod

# Register UnderlyingSettlMethod in _quickfix:
_quickfix.UnderlyingSettlMethod_swigregister(UnderlyingSettlMethod)

class SecondaryTradeID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryTradeID_swiginit(self, _quickfix.new_SecondaryTradeID(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryTradeID

# Register SecondaryTradeID in _quickfix:
_quickfix.SecondaryTradeID_swigregister(SecondaryTradeID)

class FirmTradeID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FirmTradeID_swiginit(self, _quickfix.new_FirmTradeID(*args))
    __swig_destroy__ = _quickfix.delete_FirmTradeID

# Register FirmTradeID in _quickfix:
_quickfix.FirmTradeID_swigregister(FirmTradeID)

class SecondaryFirmTradeID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryFirmTradeID_swiginit(self, _quickfix.new_SecondaryFirmTradeID(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryFirmTradeID

# Register SecondaryFirmTradeID in _quickfix:
_quickfix.SecondaryFirmTradeID_swigregister(SecondaryFirmTradeID)

class CollApplType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CollApplType_swiginit(self, _quickfix.new_CollApplType(*args))
    __swig_destroy__ = _quickfix.delete_CollApplType

# Register CollApplType in _quickfix:
_quickfix.CollApplType_swigregister(CollApplType)

class UnderlyingAdjustedQuantity(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingAdjustedQuantity_swiginit(self, _quickfix.new_UnderlyingAdjustedQuantity(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingAdjustedQuantity

# Register UnderlyingAdjustedQuantity in _quickfix:
_quickfix.UnderlyingAdjustedQuantity_swigregister(UnderlyingAdjustedQuantity)

class UnderlyingFXRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingFXRate_swiginit(self, _quickfix.new_UnderlyingFXRate(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingFXRate

# Register UnderlyingFXRate in _quickfix:
_quickfix.UnderlyingFXRate_swigregister(UnderlyingFXRate)

class UnderlyingFXRateCalc(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingFXRateCalc_swiginit(self, _quickfix.new_UnderlyingFXRateCalc(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingFXRateCalc

# Register UnderlyingFXRateCalc in _quickfix:
_quickfix.UnderlyingFXRateCalc_swigregister(UnderlyingFXRateCalc)

class AllocPositionEffect(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocPositionEffect_swiginit(self, _quickfix.new_AllocPositionEffect(*args))
    __swig_destroy__ = _quickfix.delete_AllocPositionEffect

# Register AllocPositionEffect in _quickfix:
_quickfix.AllocPositionEffect_swigregister(AllocPositionEffect)

class DealingCapacity(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DealingCapacity_swiginit(self, _quickfix.new_DealingCapacity(*args))
    __swig_destroy__ = _quickfix.delete_DealingCapacity

# Register DealingCapacity in _quickfix:
_quickfix.DealingCapacity_swigregister(DealingCapacity)

class InstrmtAssignmentMethod(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InstrmtAssignmentMethod_swiginit(self, _quickfix.new_InstrmtAssignmentMethod(*args))
    __swig_destroy__ = _quickfix.delete_InstrmtAssignmentMethod

# Register InstrmtAssignmentMethod in _quickfix:
_quickfix.InstrmtAssignmentMethod_swigregister(InstrmtAssignmentMethod)

class InstrumentPartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InstrumentPartyIDSource_swiginit(self, _quickfix.new_InstrumentPartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_InstrumentPartyIDSource

# Register InstrumentPartyIDSource in _quickfix:
_quickfix.InstrumentPartyIDSource_swigregister(InstrumentPartyIDSource)

class InstrumentPartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InstrumentPartyRole_swiginit(self, _quickfix.new_InstrumentPartyRole(*args))
    __swig_destroy__ = _quickfix.delete_InstrumentPartyRole

# Register InstrumentPartyRole in _quickfix:
_quickfix.InstrumentPartyRole_swigregister(InstrumentPartyRole)

class NoInstrumentPartySubIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoInstrumentPartySubIDs_swiginit(self, _quickfix.new_NoInstrumentPartySubIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoInstrumentPartySubIDs

# Register NoInstrumentPartySubIDs in _quickfix:
_quickfix.NoInstrumentPartySubIDs_swigregister(NoInstrumentPartySubIDs)

class InstrumentPartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InstrumentPartySubID_swiginit(self, _quickfix.new_InstrumentPartySubID(*args))
    __swig_destroy__ = _quickfix.delete_InstrumentPartySubID

# Register InstrumentPartySubID in _quickfix:
_quickfix.InstrumentPartySubID_swigregister(InstrumentPartySubID)

class InstrumentPartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.InstrumentPartySubIDType_swiginit(self, _quickfix.new_InstrumentPartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_InstrumentPartySubIDType

# Register InstrumentPartySubIDType in _quickfix:
_quickfix.InstrumentPartySubIDType_swigregister(InstrumentPartySubIDType)

class PositionCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PositionCurrency_swiginit(self, _quickfix.new_PositionCurrency(*args))
    __swig_destroy__ = _quickfix.delete_PositionCurrency

# Register PositionCurrency in _quickfix:
_quickfix.PositionCurrency_swigregister(PositionCurrency)

class CalculatedCcyLastQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CalculatedCcyLastQty_swiginit(self, _quickfix.new_CalculatedCcyLastQty(*args))
    __swig_destroy__ = _quickfix.delete_CalculatedCcyLastQty

# Register CalculatedCcyLastQty in _quickfix:
_quickfix.CalculatedCcyLastQty_swigregister(CalculatedCcyLastQty)

class AggressorIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AggressorIndicator_swiginit(self, _quickfix.new_AggressorIndicator(*args))
    __swig_destroy__ = _quickfix.delete_AggressorIndicator

# Register AggressorIndicator in _quickfix:
_quickfix.AggressorIndicator_swigregister(AggressorIndicator)

class NoUndlyInstrumentParties(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoUndlyInstrumentParties_swiginit(self, _quickfix.new_NoUndlyInstrumentParties(*args))
    __swig_destroy__ = _quickfix.delete_NoUndlyInstrumentParties

# Register NoUndlyInstrumentParties in _quickfix:
_quickfix.NoUndlyInstrumentParties_swigregister(NoUndlyInstrumentParties)

class UndlyInstrumentPartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UndlyInstrumentPartyID_swiginit(self, _quickfix.new_UndlyInstrumentPartyID(*args))
    __swig_destroy__ = _quickfix.delete_UndlyInstrumentPartyID

# Register UndlyInstrumentPartyID in _quickfix:
_quickfix.UndlyInstrumentPartyID_swigregister(UndlyInstrumentPartyID)

class UndlyInstrumentPartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UndlyInstrumentPartyIDSource_swiginit(self, _quickfix.new_UndlyInstrumentPartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_UndlyInstrumentPartyIDSource

# Register UndlyInstrumentPartyIDSource in _quickfix:
_quickfix.UndlyInstrumentPartyIDSource_swigregister(UndlyInstrumentPartyIDSource)

class UndlyInstrumentPartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UndlyInstrumentPartyRole_swiginit(self, _quickfix.new_UndlyInstrumentPartyRole(*args))
    __swig_destroy__ = _quickfix.delete_UndlyInstrumentPartyRole

# Register UndlyInstrumentPartyRole in _quickfix:
_quickfix.UndlyInstrumentPartyRole_swigregister(UndlyInstrumentPartyRole)

class NoUndlyInstrumentPartySubIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoUndlyInstrumentPartySubIDs_swiginit(self, _quickfix.new_NoUndlyInstrumentPartySubIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoUndlyInstrumentPartySubIDs

# Register NoUndlyInstrumentPartySubIDs in _quickfix:
_quickfix.NoUndlyInstrumentPartySubIDs_swigregister(NoUndlyInstrumentPartySubIDs)

class UndlyInstrumentPartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UndlyInstrumentPartySubID_swiginit(self, _quickfix.new_UndlyInstrumentPartySubID(*args))
    __swig_destroy__ = _quickfix.delete_UndlyInstrumentPartySubID

# Register UndlyInstrumentPartySubID in _quickfix:
_quickfix.UndlyInstrumentPartySubID_swigregister(UndlyInstrumentPartySubID)

class UndlyInstrumentPartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UndlyInstrumentPartySubIDType_swiginit(self, _quickfix.new_UndlyInstrumentPartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_UndlyInstrumentPartySubIDType

# Register UndlyInstrumentPartySubIDType in _quickfix:
_quickfix.UndlyInstrumentPartySubIDType_swigregister(UndlyInstrumentPartySubIDType)

class BidSwapPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.BidSwapPoints_swiginit(self, _quickfix.new_BidSwapPoints(*args))
    __swig_destroy__ = _quickfix.delete_BidSwapPoints

# Register BidSwapPoints in _quickfix:
_quickfix.BidSwapPoints_swigregister(BidSwapPoints)

class OfferSwapPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OfferSwapPoints_swiginit(self, _quickfix.new_OfferSwapPoints(*args))
    __swig_destroy__ = _quickfix.delete_OfferSwapPoints

# Register OfferSwapPoints in _quickfix:
_quickfix.OfferSwapPoints_swigregister(OfferSwapPoints)

class LegBidForwardPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegBidForwardPoints_swiginit(self, _quickfix.new_LegBidForwardPoints(*args))
    __swig_destroy__ = _quickfix.delete_LegBidForwardPoints

# Register LegBidForwardPoints in _quickfix:
_quickfix.LegBidForwardPoints_swigregister(LegBidForwardPoints)

class LegOfferForwardPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegOfferForwardPoints_swiginit(self, _quickfix.new_LegOfferForwardPoints(*args))
    __swig_destroy__ = _quickfix.delete_LegOfferForwardPoints

# Register LegOfferForwardPoints in _quickfix:
_quickfix.LegOfferForwardPoints_swigregister(LegOfferForwardPoints)

class SwapPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SwapPoints_swiginit(self, _quickfix.new_SwapPoints(*args))
    __swig_destroy__ = _quickfix.delete_SwapPoints

# Register SwapPoints in _quickfix:
_quickfix.SwapPoints_swigregister(SwapPoints)

class MDQuoteType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDQuoteType_swiginit(self, _quickfix.new_MDQuoteType(*args))
    __swig_destroy__ = _quickfix.delete_MDQuoteType

# Register MDQuoteType in _quickfix:
_quickfix.MDQuoteType_swigregister(MDQuoteType)

class LastSwapPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LastSwapPoints_swiginit(self, _quickfix.new_LastSwapPoints(*args))
    __swig_destroy__ = _quickfix.delete_LastSwapPoints

# Register LastSwapPoints in _quickfix:
_quickfix.LastSwapPoints_swigregister(LastSwapPoints)

class SideGrossTradeAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideGrossTradeAmt_swiginit(self, _quickfix.new_SideGrossTradeAmt(*args))
    __swig_destroy__ = _quickfix.delete_SideGrossTradeAmt

# Register SideGrossTradeAmt in _quickfix:
_quickfix.SideGrossTradeAmt_swigregister(SideGrossTradeAmt)

class LegLastForwardPoints(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegLastForwardPoints_swiginit(self, _quickfix.new_LegLastForwardPoints(*args))
    __swig_destroy__ = _quickfix.delete_LegLastForwardPoints

# Register LegLastForwardPoints in _quickfix:
_quickfix.LegLastForwardPoints_swigregister(LegLastForwardPoints)

class LegCalculatedCcyLastQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegCalculatedCcyLastQty_swiginit(self, _quickfix.new_LegCalculatedCcyLastQty(*args))
    __swig_destroy__ = _quickfix.delete_LegCalculatedCcyLastQty

# Register LegCalculatedCcyLastQty in _quickfix:
_quickfix.LegCalculatedCcyLastQty_swigregister(LegCalculatedCcyLastQty)

class LegGrossTradeAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegGrossTradeAmt_swiginit(self, _quickfix.new_LegGrossTradeAmt(*args))
    __swig_destroy__ = _quickfix.delete_LegGrossTradeAmt

# Register LegGrossTradeAmt in _quickfix:
_quickfix.LegGrossTradeAmt_swigregister(LegGrossTradeAmt)

class MaturityTime(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaturityTime_swiginit(self, _quickfix.new_MaturityTime(*args))
    __swig_destroy__ = _quickfix.delete_MaturityTime

# Register MaturityTime in _quickfix:
_quickfix.MaturityTime_swigregister(MaturityTime)

class RefOrderID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefOrderID_swiginit(self, _quickfix.new_RefOrderID(*args))
    __swig_destroy__ = _quickfix.delete_RefOrderID

# Register RefOrderID in _quickfix:
_quickfix.RefOrderID_swigregister(RefOrderID)

class RefOrderIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefOrderIDSource_swiginit(self, _quickfix.new_RefOrderIDSource(*args))
    __swig_destroy__ = _quickfix.delete_RefOrderIDSource

# Register RefOrderIDSource in _quickfix:
_quickfix.RefOrderIDSource_swigregister(RefOrderIDSource)

class SecondaryDisplayQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryDisplayQty_swiginit(self, _quickfix.new_SecondaryDisplayQty(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryDisplayQty

# Register SecondaryDisplayQty in _quickfix:
_quickfix.SecondaryDisplayQty_swigregister(SecondaryDisplayQty)

class DisplayWhen(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DisplayWhen_swiginit(self, _quickfix.new_DisplayWhen(*args))
    __swig_destroy__ = _quickfix.delete_DisplayWhen

# Register DisplayWhen in _quickfix:
_quickfix.DisplayWhen_swigregister(DisplayWhen)

class DisplayMethod(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DisplayMethod_swiginit(self, _quickfix.new_DisplayMethod(*args))
    __swig_destroy__ = _quickfix.delete_DisplayMethod

# Register DisplayMethod in _quickfix:
_quickfix.DisplayMethod_swigregister(DisplayMethod)

class DisplayLowQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DisplayLowQty_swiginit(self, _quickfix.new_DisplayLowQty(*args))
    __swig_destroy__ = _quickfix.delete_DisplayLowQty

# Register DisplayLowQty in _quickfix:
_quickfix.DisplayLowQty_swigregister(DisplayLowQty)

class DisplayHighQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DisplayHighQty_swiginit(self, _quickfix.new_DisplayHighQty(*args))
    __swig_destroy__ = _quickfix.delete_DisplayHighQty

# Register DisplayHighQty in _quickfix:
_quickfix.DisplayHighQty_swigregister(DisplayHighQty)

class DisplayMinIncr(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DisplayMinIncr_swiginit(self, _quickfix.new_DisplayMinIncr(*args))
    __swig_destroy__ = _quickfix.delete_DisplayMinIncr

# Register DisplayMinIncr in _quickfix:
_quickfix.DisplayMinIncr_swigregister(DisplayMinIncr)

class RefreshQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefreshQty_swiginit(self, _quickfix.new_RefreshQty(*args))
    __swig_destroy__ = _quickfix.delete_RefreshQty

# Register RefreshQty in _quickfix:
_quickfix.RefreshQty_swigregister(RefreshQty)

class MatchIncrement(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MatchIncrement_swiginit(self, _quickfix.new_MatchIncrement(*args))
    __swig_destroy__ = _quickfix.delete_MatchIncrement

# Register MatchIncrement in _quickfix:
_quickfix.MatchIncrement_swigregister(MatchIncrement)

class MaxPriceLevels(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaxPriceLevels_swiginit(self, _quickfix.new_MaxPriceLevels(*args))
    __swig_destroy__ = _quickfix.delete_MaxPriceLevels

# Register MaxPriceLevels in _quickfix:
_quickfix.MaxPriceLevels_swigregister(MaxPriceLevels)

class PreTradeAnonymity(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PreTradeAnonymity_swiginit(self, _quickfix.new_PreTradeAnonymity(*args))
    __swig_destroy__ = _quickfix.delete_PreTradeAnonymity

# Register PreTradeAnonymity in _quickfix:
_quickfix.PreTradeAnonymity_swigregister(PreTradeAnonymity)

class PriceProtectionScope(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriceProtectionScope_swiginit(self, _quickfix.new_PriceProtectionScope(*args))
    __swig_destroy__ = _quickfix.delete_PriceProtectionScope

# Register PriceProtectionScope in _quickfix:
_quickfix.PriceProtectionScope_swigregister(PriceProtectionScope)

class LotType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LotType_swiginit(self, _quickfix.new_LotType(*args))
    __swig_destroy__ = _quickfix.delete_LotType

# Register LotType in _quickfix:
_quickfix.LotType_swigregister(LotType)

class PegPriceType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegPriceType_swiginit(self, _quickfix.new_PegPriceType(*args))
    __swig_destroy__ = _quickfix.delete_PegPriceType

# Register PegPriceType in _quickfix:
_quickfix.PegPriceType_swigregister(PegPriceType)

class PeggedRefPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PeggedRefPrice_swiginit(self, _quickfix.new_PeggedRefPrice(*args))
    __swig_destroy__ = _quickfix.delete_PeggedRefPrice

# Register PeggedRefPrice in _quickfix:
_quickfix.PeggedRefPrice_swigregister(PeggedRefPrice)

class PegSecurityIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegSecurityIDSource_swiginit(self, _quickfix.new_PegSecurityIDSource(*args))
    __swig_destroy__ = _quickfix.delete_PegSecurityIDSource

# Register PegSecurityIDSource in _quickfix:
_quickfix.PegSecurityIDSource_swigregister(PegSecurityIDSource)

class PegSecurityID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegSecurityID_swiginit(self, _quickfix.new_PegSecurityID(*args))
    __swig_destroy__ = _quickfix.delete_PegSecurityID

# Register PegSecurityID in _quickfix:
_quickfix.PegSecurityID_swigregister(PegSecurityID)

class PegSymbol(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegSymbol_swiginit(self, _quickfix.new_PegSymbol(*args))
    __swig_destroy__ = _quickfix.delete_PegSymbol

# Register PegSymbol in _quickfix:
_quickfix.PegSymbol_swigregister(PegSymbol)

class PegSecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PegSecurityDesc_swiginit(self, _quickfix.new_PegSecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_PegSecurityDesc

# Register PegSecurityDesc in _quickfix:
_quickfix.PegSecurityDesc_swigregister(PegSecurityDesc)

class TriggerType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerType_swiginit(self, _quickfix.new_TriggerType(*args))
    __swig_destroy__ = _quickfix.delete_TriggerType

# Register TriggerType in _quickfix:
_quickfix.TriggerType_swigregister(TriggerType)

class TriggerAction(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerAction_swiginit(self, _quickfix.new_TriggerAction(*args))
    __swig_destroy__ = _quickfix.delete_TriggerAction

# Register TriggerAction in _quickfix:
_quickfix.TriggerAction_swigregister(TriggerAction)

class TriggerPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerPrice_swiginit(self, _quickfix.new_TriggerPrice(*args))
    __swig_destroy__ = _quickfix.delete_TriggerPrice

# Register TriggerPrice in _quickfix:
_quickfix.TriggerPrice_swigregister(TriggerPrice)

class TriggerSymbol(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerSymbol_swiginit(self, _quickfix.new_TriggerSymbol(*args))
    __swig_destroy__ = _quickfix.delete_TriggerSymbol

# Register TriggerSymbol in _quickfix:
_quickfix.TriggerSymbol_swigregister(TriggerSymbol)

class TriggerSecurityID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerSecurityID_swiginit(self, _quickfix.new_TriggerSecurityID(*args))
    __swig_destroy__ = _quickfix.delete_TriggerSecurityID

# Register TriggerSecurityID in _quickfix:
_quickfix.TriggerSecurityID_swigregister(TriggerSecurityID)

class TriggerSecurityIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerSecurityIDSource_swiginit(self, _quickfix.new_TriggerSecurityIDSource(*args))
    __swig_destroy__ = _quickfix.delete_TriggerSecurityIDSource

# Register TriggerSecurityIDSource in _quickfix:
_quickfix.TriggerSecurityIDSource_swigregister(TriggerSecurityIDSource)

class TriggerSecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerSecurityDesc_swiginit(self, _quickfix.new_TriggerSecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_TriggerSecurityDesc

# Register TriggerSecurityDesc in _quickfix:
_quickfix.TriggerSecurityDesc_swigregister(TriggerSecurityDesc)

class TriggerPriceType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerPriceType_swiginit(self, _quickfix.new_TriggerPriceType(*args))
    __swig_destroy__ = _quickfix.delete_TriggerPriceType

# Register TriggerPriceType in _quickfix:
_quickfix.TriggerPriceType_swigregister(TriggerPriceType)

class TriggerPriceTypeScope(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerPriceTypeScope_swiginit(self, _quickfix.new_TriggerPriceTypeScope(*args))
    __swig_destroy__ = _quickfix.delete_TriggerPriceTypeScope

# Register TriggerPriceTypeScope in _quickfix:
_quickfix.TriggerPriceTypeScope_swigregister(TriggerPriceTypeScope)

class TriggerPriceDirection(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerPriceDirection_swiginit(self, _quickfix.new_TriggerPriceDirection(*args))
    __swig_destroy__ = _quickfix.delete_TriggerPriceDirection

# Register TriggerPriceDirection in _quickfix:
_quickfix.TriggerPriceDirection_swigregister(TriggerPriceDirection)

class TriggerNewPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerNewPrice_swiginit(self, _quickfix.new_TriggerNewPrice(*args))
    __swig_destroy__ = _quickfix.delete_TriggerNewPrice

# Register TriggerNewPrice in _quickfix:
_quickfix.TriggerNewPrice_swigregister(TriggerNewPrice)

class TriggerOrderType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerOrderType_swiginit(self, _quickfix.new_TriggerOrderType(*args))
    __swig_destroy__ = _quickfix.delete_TriggerOrderType

# Register TriggerOrderType in _quickfix:
_quickfix.TriggerOrderType_swigregister(TriggerOrderType)

class TriggerNewQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerNewQty_swiginit(self, _quickfix.new_TriggerNewQty(*args))
    __swig_destroy__ = _quickfix.delete_TriggerNewQty

# Register TriggerNewQty in _quickfix:
_quickfix.TriggerNewQty_swigregister(TriggerNewQty)

class TriggerTradingSessionID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerTradingSessionID_swiginit(self, _quickfix.new_TriggerTradingSessionID(*args))
    __swig_destroy__ = _quickfix.delete_TriggerTradingSessionID

# Register TriggerTradingSessionID in _quickfix:
_quickfix.TriggerTradingSessionID_swigregister(TriggerTradingSessionID)

class TriggerTradingSessionSubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TriggerTradingSessionSubID_swiginit(self, _quickfix.new_TriggerTradingSessionSubID(*args))
    __swig_destroy__ = _quickfix.delete_TriggerTradingSessionSubID

# Register TriggerTradingSessionSubID in _quickfix:
_quickfix.TriggerTradingSessionSubID_swigregister(TriggerTradingSessionSubID)

class OrderCategory(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderCategory_swiginit(self, _quickfix.new_OrderCategory(*args))
    __swig_destroy__ = _quickfix.delete_OrderCategory

# Register OrderCategory in _quickfix:
_quickfix.OrderCategory_swigregister(OrderCategory)

class NoRootPartyIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoRootPartyIDs_swiginit(self, _quickfix.new_NoRootPartyIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoRootPartyIDs

# Register NoRootPartyIDs in _quickfix:
_quickfix.NoRootPartyIDs_swigregister(NoRootPartyIDs)

class RootPartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RootPartyID_swiginit(self, _quickfix.new_RootPartyID(*args))
    __swig_destroy__ = _quickfix.delete_RootPartyID

# Register RootPartyID in _quickfix:
_quickfix.RootPartyID_swigregister(RootPartyID)

class RootPartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RootPartyIDSource_swiginit(self, _quickfix.new_RootPartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_RootPartyIDSource

# Register RootPartyIDSource in _quickfix:
_quickfix.RootPartyIDSource_swigregister(RootPartyIDSource)

class RootPartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RootPartyRole_swiginit(self, _quickfix.new_RootPartyRole(*args))
    __swig_destroy__ = _quickfix.delete_RootPartyRole

# Register RootPartyRole in _quickfix:
_quickfix.RootPartyRole_swigregister(RootPartyRole)

class NoRootPartySubIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoRootPartySubIDs_swiginit(self, _quickfix.new_NoRootPartySubIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoRootPartySubIDs

# Register NoRootPartySubIDs in _quickfix:
_quickfix.NoRootPartySubIDs_swigregister(NoRootPartySubIDs)

class RootPartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RootPartySubID_swiginit(self, _quickfix.new_RootPartySubID(*args))
    __swig_destroy__ = _quickfix.delete_RootPartySubID

# Register RootPartySubID in _quickfix:
_quickfix.RootPartySubID_swigregister(RootPartySubID)

class RootPartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RootPartySubIDType_swiginit(self, _quickfix.new_RootPartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_RootPartySubIDType

# Register RootPartySubIDType in _quickfix:
_quickfix.RootPartySubIDType_swigregister(RootPartySubIDType)

class TradeHandlingInstr(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradeHandlingInstr_swiginit(self, _quickfix.new_TradeHandlingInstr(*args))
    __swig_destroy__ = _quickfix.delete_TradeHandlingInstr

# Register TradeHandlingInstr in _quickfix:
_quickfix.TradeHandlingInstr_swigregister(TradeHandlingInstr)

class OrigTradeHandlingInstr(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigTradeHandlingInstr_swiginit(self, _quickfix.new_OrigTradeHandlingInstr(*args))
    __swig_destroy__ = _quickfix.delete_OrigTradeHandlingInstr

# Register OrigTradeHandlingInstr in _quickfix:
_quickfix.OrigTradeHandlingInstr_swigregister(OrigTradeHandlingInstr)

class OrigTradeDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigTradeDate_swiginit(self, _quickfix.new_OrigTradeDate(*args))
    __swig_destroy__ = _quickfix.delete_OrigTradeDate

# Register OrigTradeDate in _quickfix:
_quickfix.OrigTradeDate_swigregister(OrigTradeDate)

class OrigTradeID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigTradeID_swiginit(self, _quickfix.new_OrigTradeID(*args))
    __swig_destroy__ = _quickfix.delete_OrigTradeID

# Register OrigTradeID in _quickfix:
_quickfix.OrigTradeID_swigregister(OrigTradeID)

class OrigSecondaryTradeID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigSecondaryTradeID_swiginit(self, _quickfix.new_OrigSecondaryTradeID(*args))
    __swig_destroy__ = _quickfix.delete_OrigSecondaryTradeID

# Register OrigSecondaryTradeID in _quickfix:
_quickfix.OrigSecondaryTradeID_swigregister(OrigSecondaryTradeID)

class TZTransactTime(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TZTransactTime_swiginit(self, _quickfix.new_TZTransactTime(*args))
    __swig_destroy__ = _quickfix.delete_TZTransactTime

# Register TZTransactTime in _quickfix:
_quickfix.TZTransactTime_swigregister(TZTransactTime)

class ExDestinationIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExDestinationIDSource_swiginit(self, _quickfix.new_ExDestinationIDSource(*args))
    __swig_destroy__ = _quickfix.delete_ExDestinationIDSource

# Register ExDestinationIDSource in _quickfix:
_quickfix.ExDestinationIDSource_swigregister(ExDestinationIDSource)

class ReportedPxDiff(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ReportedPxDiff_swiginit(self, _quickfix.new_ReportedPxDiff(*args))
    __swig_destroy__ = _quickfix.delete_ReportedPxDiff

# Register ReportedPxDiff in _quickfix:
_quickfix.ReportedPxDiff_swigregister(ReportedPxDiff)

class RptSys(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RptSys_swiginit(self, _quickfix.new_RptSys(*args))
    __swig_destroy__ = _quickfix.delete_RptSys

# Register RptSys in _quickfix:
_quickfix.RptSys_swigregister(RptSys)

class AllocClearingFeeIndicator(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AllocClearingFeeIndicator_swiginit(self, _quickfix.new_AllocClearingFeeIndicator(*args))
    __swig_destroy__ = _quickfix.delete_AllocClearingFeeIndicator

# Register AllocClearingFeeIndicator in _quickfix:
_quickfix.AllocClearingFeeIndicator_swigregister(AllocClearingFeeIndicator)

class DisplayQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DisplayQty_swiginit(self, _quickfix.new_DisplayQty(*args))
    __swig_destroy__ = _quickfix.delete_DisplayQty

# Register DisplayQty in _quickfix:
_quickfix.DisplayQty_swigregister(DisplayQty)

class ExchangeSpecialInstructions(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExchangeSpecialInstructions_swiginit(self, _quickfix.new_ExchangeSpecialInstructions(*args))
    __swig_destroy__ = _quickfix.delete_ExchangeSpecialInstructions

# Register ExchangeSpecialInstructions in _quickfix:
_quickfix.ExchangeSpecialInstructions_swigregister(ExchangeSpecialInstructions)

class NoUsernames(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoUsernames_swiginit(self, _quickfix.new_NoUsernames(*args))
    __swig_destroy__ = _quickfix.delete_NoUsernames

# Register NoUsernames in _quickfix:
_quickfix.NoUsernames_swigregister(NoUsernames)

class ExpirationQtyType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExpirationQtyType_swiginit(self, _quickfix.new_ExpirationQtyType(*args))
    __swig_destroy__ = _quickfix.delete_ExpirationQtyType

# Register ExpirationQtyType in _quickfix:
_quickfix.ExpirationQtyType_swigregister(ExpirationQtyType)

class MaxTradeVol(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaxTradeVol_swiginit(self, _quickfix.new_MaxTradeVol(*args))
    __swig_destroy__ = _quickfix.delete_MaxTradeVol

# Register MaxTradeVol in _quickfix:
_quickfix.MaxTradeVol_swigregister(MaxTradeVol)

class NoMDFeedTypes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoMDFeedTypes_swiginit(self, _quickfix.new_NoMDFeedTypes(*args))
    __swig_destroy__ = _quickfix.delete_NoMDFeedTypes

# Register NoMDFeedTypes in _quickfix:
_quickfix.NoMDFeedTypes_swigregister(NoMDFeedTypes)

class MatchAlgorithm(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MatchAlgorithm_swiginit(self, _quickfix.new_MatchAlgorithm(*args))
    __swig_destroy__ = _quickfix.delete_MatchAlgorithm

# Register MatchAlgorithm in _quickfix:
_quickfix.MatchAlgorithm_swigregister(MatchAlgorithm)

class MaxPriceVariation(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaxPriceVariation_swiginit(self, _quickfix.new_MaxPriceVariation(*args))
    __swig_destroy__ = _quickfix.delete_MaxPriceVariation

# Register MaxPriceVariation in _quickfix:
_quickfix.MaxPriceVariation_swigregister(MaxPriceVariation)

class ImpliedMarketIndicator(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ImpliedMarketIndicator_swiginit(self, _quickfix.new_ImpliedMarketIndicator(*args))
    __swig_destroy__ = _quickfix.delete_ImpliedMarketIndicator

# Register ImpliedMarketIndicator in _quickfix:
_quickfix.ImpliedMarketIndicator_swigregister(ImpliedMarketIndicator)

class EventTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EventTime_swiginit(self, _quickfix.new_EventTime(*args))
    __swig_destroy__ = _quickfix.delete_EventTime

# Register EventTime in _quickfix:
_quickfix.EventTime_swigregister(EventTime)

class MinPriceIncrementAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MinPriceIncrementAmount_swiginit(self, _quickfix.new_MinPriceIncrementAmount(*args))
    __swig_destroy__ = _quickfix.delete_MinPriceIncrementAmount

# Register MinPriceIncrementAmount in _quickfix:
_quickfix.MinPriceIncrementAmount_swigregister(MinPriceIncrementAmount)

class UnitOfMeasureQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnitOfMeasureQty_swiginit(self, _quickfix.new_UnitOfMeasureQty(*args))
    __swig_destroy__ = _quickfix.delete_UnitOfMeasureQty

# Register UnitOfMeasureQty in _quickfix:
_quickfix.UnitOfMeasureQty_swigregister(UnitOfMeasureQty)

class LowLimitPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LowLimitPrice_swiginit(self, _quickfix.new_LowLimitPrice(*args))
    __swig_destroy__ = _quickfix.delete_LowLimitPrice

# Register LowLimitPrice in _quickfix:
_quickfix.LowLimitPrice_swigregister(LowLimitPrice)

class HighLimitPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.HighLimitPrice_swiginit(self, _quickfix.new_HighLimitPrice(*args))
    __swig_destroy__ = _quickfix.delete_HighLimitPrice

# Register HighLimitPrice in _quickfix:
_quickfix.HighLimitPrice_swigregister(HighLimitPrice)

class TradingReferencePrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradingReferencePrice_swiginit(self, _quickfix.new_TradingReferencePrice(*args))
    __swig_destroy__ = _quickfix.delete_TradingReferencePrice

# Register TradingReferencePrice in _quickfix:
_quickfix.TradingReferencePrice_swigregister(TradingReferencePrice)

class SecurityGroup(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityGroup_swiginit(self, _quickfix.new_SecurityGroup(*args))
    __swig_destroy__ = _quickfix.delete_SecurityGroup

# Register SecurityGroup in _quickfix:
_quickfix.SecurityGroup_swigregister(SecurityGroup)

class LegNumber(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegNumber_swiginit(self, _quickfix.new_LegNumber(*args))
    __swig_destroy__ = _quickfix.delete_LegNumber

# Register LegNumber in _quickfix:
_quickfix.LegNumber_swigregister(LegNumber)

class SettlementCycleNo(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlementCycleNo_swiginit(self, _quickfix.new_SettlementCycleNo(*args))
    __swig_destroy__ = _quickfix.delete_SettlementCycleNo

# Register SettlementCycleNo in _quickfix:
_quickfix.SettlementCycleNo_swigregister(SettlementCycleNo)

class SideCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideCurrency_swiginit(self, _quickfix.new_SideCurrency(*args))
    __swig_destroy__ = _quickfix.delete_SideCurrency

# Register SideCurrency in _quickfix:
_quickfix.SideCurrency_swigregister(SideCurrency)

class SideSettlCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideSettlCurrency_swiginit(self, _quickfix.new_SideSettlCurrency(*args))
    __swig_destroy__ = _quickfix.delete_SideSettlCurrency

# Register SideSettlCurrency in _quickfix:
_quickfix.SideSettlCurrency_swigregister(SideSettlCurrency)

class ApplExtID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplExtID_swiginit(self, _quickfix.new_ApplExtID(*args))
    __swig_destroy__ = _quickfix.delete_ApplExtID

# Register ApplExtID in _quickfix:
_quickfix.ApplExtID_swigregister(ApplExtID)

class CcyAmt(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CcyAmt_swiginit(self, _quickfix.new_CcyAmt(*args))
    __swig_destroy__ = _quickfix.delete_CcyAmt

# Register CcyAmt in _quickfix:
_quickfix.CcyAmt_swigregister(CcyAmt)

class NoSettlDetails(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoSettlDetails_swiginit(self, _quickfix.new_NoSettlDetails(*args))
    __swig_destroy__ = _quickfix.delete_NoSettlDetails

# Register NoSettlDetails in _quickfix:
_quickfix.NoSettlDetails_swigregister(NoSettlDetails)

class SettlObligMode(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlObligMode_swiginit(self, _quickfix.new_SettlObligMode(*args))
    __swig_destroy__ = _quickfix.delete_SettlObligMode

# Register SettlObligMode in _quickfix:
_quickfix.SettlObligMode_swigregister(SettlObligMode)

class SettlObligMsgID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlObligMsgID_swiginit(self, _quickfix.new_SettlObligMsgID(*args))
    __swig_destroy__ = _quickfix.delete_SettlObligMsgID

# Register SettlObligMsgID in _quickfix:
_quickfix.SettlObligMsgID_swigregister(SettlObligMsgID)

class SettlObligID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlObligID_swiginit(self, _quickfix.new_SettlObligID(*args))
    __swig_destroy__ = _quickfix.delete_SettlObligID

# Register SettlObligID in _quickfix:
_quickfix.SettlObligID_swigregister(SettlObligID)

class SettlObligTransType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlObligTransType_swiginit(self, _quickfix.new_SettlObligTransType(*args))
    __swig_destroy__ = _quickfix.delete_SettlObligTransType

# Register SettlObligTransType in _quickfix:
_quickfix.SettlObligTransType_swigregister(SettlObligTransType)

class SettlObligRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlObligRefID_swiginit(self, _quickfix.new_SettlObligRefID(*args))
    __swig_destroy__ = _quickfix.delete_SettlObligRefID

# Register SettlObligRefID in _quickfix:
_quickfix.SettlObligRefID_swigregister(SettlObligRefID)

class SettlObligSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlObligSource_swiginit(self, _quickfix.new_SettlObligSource(*args))
    __swig_destroy__ = _quickfix.delete_SettlObligSource

# Register SettlObligSource in _quickfix:
_quickfix.SettlObligSource_swigregister(SettlObligSource)

class NoSettlOblig(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoSettlOblig_swiginit(self, _quickfix.new_NoSettlOblig(*args))
    __swig_destroy__ = _quickfix.delete_NoSettlOblig

# Register NoSettlOblig in _quickfix:
_quickfix.NoSettlOblig_swigregister(NoSettlOblig)

class QuoteMsgID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteMsgID_swiginit(self, _quickfix.new_QuoteMsgID(*args))
    __swig_destroy__ = _quickfix.delete_QuoteMsgID

# Register QuoteMsgID in _quickfix:
_quickfix.QuoteMsgID_swigregister(QuoteMsgID)

class QuoteEntryStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.QuoteEntryStatus_swiginit(self, _quickfix.new_QuoteEntryStatus(*args))
    __swig_destroy__ = _quickfix.delete_QuoteEntryStatus

# Register QuoteEntryStatus in _quickfix:
_quickfix.QuoteEntryStatus_swigregister(QuoteEntryStatus)

class TotNoCxldQuotes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNoCxldQuotes_swiginit(self, _quickfix.new_TotNoCxldQuotes(*args))
    __swig_destroy__ = _quickfix.delete_TotNoCxldQuotes

# Register TotNoCxldQuotes in _quickfix:
_quickfix.TotNoCxldQuotes_swigregister(TotNoCxldQuotes)

class TotNoAccQuotes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNoAccQuotes_swiginit(self, _quickfix.new_TotNoAccQuotes(*args))
    __swig_destroy__ = _quickfix.delete_TotNoAccQuotes

# Register TotNoAccQuotes in _quickfix:
_quickfix.TotNoAccQuotes_swigregister(TotNoAccQuotes)

class TotNoRejQuotes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNoRejQuotes_swiginit(self, _quickfix.new_TotNoRejQuotes(*args))
    __swig_destroy__ = _quickfix.delete_TotNoRejQuotes

# Register TotNoRejQuotes in _quickfix:
_quickfix.TotNoRejQuotes_swigregister(TotNoRejQuotes)

class PrivateQuote(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PrivateQuote_swiginit(self, _quickfix.new_PrivateQuote(*args))
    __swig_destroy__ = _quickfix.delete_PrivateQuote

# Register PrivateQuote in _quickfix:
_quickfix.PrivateQuote_swigregister(PrivateQuote)

class RespondentType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RespondentType_swiginit(self, _quickfix.new_RespondentType(*args))
    __swig_destroy__ = _quickfix.delete_RespondentType

# Register RespondentType in _quickfix:
_quickfix.RespondentType_swigregister(RespondentType)

class MDSubBookType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDSubBookType_swiginit(self, _quickfix.new_MDSubBookType(*args))
    __swig_destroy__ = _quickfix.delete_MDSubBookType

# Register MDSubBookType in _quickfix:
_quickfix.MDSubBookType_swigregister(MDSubBookType)

class SecurityTradingEvent(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityTradingEvent_swiginit(self, _quickfix.new_SecurityTradingEvent(*args))
    __swig_destroy__ = _quickfix.delete_SecurityTradingEvent

# Register SecurityTradingEvent in _quickfix:
_quickfix.SecurityTradingEvent_swigregister(SecurityTradingEvent)

class NoStatsIndicators(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoStatsIndicators_swiginit(self, _quickfix.new_NoStatsIndicators(*args))
    __swig_destroy__ = _quickfix.delete_NoStatsIndicators

# Register NoStatsIndicators in _quickfix:
_quickfix.NoStatsIndicators_swigregister(NoStatsIndicators)

class StatsType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StatsType_swiginit(self, _quickfix.new_StatsType(*args))
    __swig_destroy__ = _quickfix.delete_StatsType

# Register StatsType in _quickfix:
_quickfix.StatsType_swigregister(StatsType)

class NoOfSecSizes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoOfSecSizes_swiginit(self, _quickfix.new_NoOfSecSizes(*args))
    __swig_destroy__ = _quickfix.delete_NoOfSecSizes

# Register NoOfSecSizes in _quickfix:
_quickfix.NoOfSecSizes_swigregister(NoOfSecSizes)

class MDSecSizeType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDSecSizeType_swiginit(self, _quickfix.new_MDSecSizeType(*args))
    __swig_destroy__ = _quickfix.delete_MDSecSizeType

# Register MDSecSizeType in _quickfix:
_quickfix.MDSecSizeType_swigregister(MDSecSizeType)

class MDSecSize(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDSecSize_swiginit(self, _quickfix.new_MDSecSize(*args))
    __swig_destroy__ = _quickfix.delete_MDSecSize

# Register MDSecSize in _quickfix:
_quickfix.MDSecSize_swigregister(MDSecSize)

class ApplID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplID_swiginit(self, _quickfix.new_ApplID(*args))
    __swig_destroy__ = _quickfix.delete_ApplID

# Register ApplID in _quickfix:
_quickfix.ApplID_swigregister(ApplID)

class ApplSeqNum(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplSeqNum_swiginit(self, _quickfix.new_ApplSeqNum(*args))
    __swig_destroy__ = _quickfix.delete_ApplSeqNum

# Register ApplSeqNum in _quickfix:
_quickfix.ApplSeqNum_swigregister(ApplSeqNum)

class ApplBegSeqNum(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplBegSeqNum_swiginit(self, _quickfix.new_ApplBegSeqNum(*args))
    __swig_destroy__ = _quickfix.delete_ApplBegSeqNum

# Register ApplBegSeqNum in _quickfix:
_quickfix.ApplBegSeqNum_swigregister(ApplBegSeqNum)

class ApplEndSeqNum(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplEndSeqNum_swiginit(self, _quickfix.new_ApplEndSeqNum(*args))
    __swig_destroy__ = _quickfix.delete_ApplEndSeqNum

# Register ApplEndSeqNum in _quickfix:
_quickfix.ApplEndSeqNum_swigregister(ApplEndSeqNum)

class SecurityXMLLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityXMLLen_swiginit(self, _quickfix.new_SecurityXMLLen(*args))
    __swig_destroy__ = _quickfix.delete_SecurityXMLLen

# Register SecurityXMLLen in _quickfix:
_quickfix.SecurityXMLLen_swigregister(SecurityXMLLen)

class SecurityXML(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityXML_swiginit(self, _quickfix.new_SecurityXML(*args))
    __swig_destroy__ = _quickfix.delete_SecurityXML

# Register SecurityXML in _quickfix:
_quickfix.SecurityXML_swigregister(SecurityXML)

class SecurityXMLSchema(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityXMLSchema_swiginit(self, _quickfix.new_SecurityXMLSchema(*args))
    __swig_destroy__ = _quickfix.delete_SecurityXMLSchema

# Register SecurityXMLSchema in _quickfix:
_quickfix.SecurityXMLSchema_swigregister(SecurityXMLSchema)

class RefreshIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefreshIndicator_swiginit(self, _quickfix.new_RefreshIndicator(*args))
    __swig_destroy__ = _quickfix.delete_RefreshIndicator

# Register RefreshIndicator in _quickfix:
_quickfix.RefreshIndicator_swigregister(RefreshIndicator)

class Volatility(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Volatility_swiginit(self, _quickfix.new_Volatility(*args))
    __swig_destroy__ = _quickfix.delete_Volatility

# Register Volatility in _quickfix:
_quickfix.Volatility_swigregister(Volatility)

class TimeToExpiration(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TimeToExpiration_swiginit(self, _quickfix.new_TimeToExpiration(*args))
    __swig_destroy__ = _quickfix.delete_TimeToExpiration

# Register TimeToExpiration in _quickfix:
_quickfix.TimeToExpiration_swigregister(TimeToExpiration)

class RiskFreeRate(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RiskFreeRate_swiginit(self, _quickfix.new_RiskFreeRate(*args))
    __swig_destroy__ = _quickfix.delete_RiskFreeRate

# Register RiskFreeRate in _quickfix:
_quickfix.RiskFreeRate_swigregister(RiskFreeRate)

class PriceUnitOfMeasure(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriceUnitOfMeasure_swiginit(self, _quickfix.new_PriceUnitOfMeasure(*args))
    __swig_destroy__ = _quickfix.delete_PriceUnitOfMeasure

# Register PriceUnitOfMeasure in _quickfix:
_quickfix.PriceUnitOfMeasure_swigregister(PriceUnitOfMeasure)

class PriceUnitOfMeasureQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriceUnitOfMeasureQty_swiginit(self, _quickfix.new_PriceUnitOfMeasureQty(*args))
    __swig_destroy__ = _quickfix.delete_PriceUnitOfMeasureQty

# Register PriceUnitOfMeasureQty in _quickfix:
_quickfix.PriceUnitOfMeasureQty_swigregister(PriceUnitOfMeasureQty)

class SettlMethod(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SettlMethod_swiginit(self, _quickfix.new_SettlMethod(*args))
    __swig_destroy__ = _quickfix.delete_SettlMethod

# Register SettlMethod in _quickfix:
_quickfix.SettlMethod_swigregister(SettlMethod)

class ExerciseStyle(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExerciseStyle_swiginit(self, _quickfix.new_ExerciseStyle(*args))
    __swig_destroy__ = _quickfix.delete_ExerciseStyle

# Register ExerciseStyle in _quickfix:
_quickfix.ExerciseStyle_swigregister(ExerciseStyle)

class OptPayAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OptPayAmount_swiginit(self, _quickfix.new_OptPayAmount(*args))
    __swig_destroy__ = _quickfix.delete_OptPayAmount

# Register OptPayAmount in _quickfix:
_quickfix.OptPayAmount_swigregister(OptPayAmount)

class PriceQuoteMethod(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriceQuoteMethod_swiginit(self, _quickfix.new_PriceQuoteMethod(*args))
    __swig_destroy__ = _quickfix.delete_PriceQuoteMethod

# Register PriceQuoteMethod in _quickfix:
_quickfix.PriceQuoteMethod_swigregister(PriceQuoteMethod)

class FuturesValuationMethod(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FuturesValuationMethod_swiginit(self, _quickfix.new_FuturesValuationMethod(*args))
    __swig_destroy__ = _quickfix.delete_FuturesValuationMethod

# Register FuturesValuationMethod in _quickfix:
_quickfix.FuturesValuationMethod_swigregister(FuturesValuationMethod)

class ListMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListMethod_swiginit(self, _quickfix.new_ListMethod(*args))
    __swig_destroy__ = _quickfix.delete_ListMethod

# Register ListMethod in _quickfix:
_quickfix.ListMethod_swigregister(ListMethod)

class CapPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CapPrice_swiginit(self, _quickfix.new_CapPrice(*args))
    __swig_destroy__ = _quickfix.delete_CapPrice

# Register CapPrice in _quickfix:
_quickfix.CapPrice_swigregister(CapPrice)

class FloorPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FloorPrice_swiginit(self, _quickfix.new_FloorPrice(*args))
    __swig_destroy__ = _quickfix.delete_FloorPrice

# Register FloorPrice in _quickfix:
_quickfix.FloorPrice_swigregister(FloorPrice)

class NoStrikeRules(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoStrikeRules_swiginit(self, _quickfix.new_NoStrikeRules(*args))
    __swig_destroy__ = _quickfix.delete_NoStrikeRules

# Register NoStrikeRules in _quickfix:
_quickfix.NoStrikeRules_swigregister(NoStrikeRules)

class StartStrikePxRange(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StartStrikePxRange_swiginit(self, _quickfix.new_StartStrikePxRange(*args))
    __swig_destroy__ = _quickfix.delete_StartStrikePxRange

# Register StartStrikePxRange in _quickfix:
_quickfix.StartStrikePxRange_swigregister(StartStrikePxRange)

class EndStrikePxRange(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EndStrikePxRange_swiginit(self, _quickfix.new_EndStrikePxRange(*args))
    __swig_destroy__ = _quickfix.delete_EndStrikePxRange

# Register EndStrikePxRange in _quickfix:
_quickfix.EndStrikePxRange_swigregister(EndStrikePxRange)

class StrikeIncrement(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikeIncrement_swiginit(self, _quickfix.new_StrikeIncrement(*args))
    __swig_destroy__ = _quickfix.delete_StrikeIncrement

# Register StrikeIncrement in _quickfix:
_quickfix.StrikeIncrement_swigregister(StrikeIncrement)

class NoTickRules(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoTickRules_swiginit(self, _quickfix.new_NoTickRules(*args))
    __swig_destroy__ = _quickfix.delete_NoTickRules

# Register NoTickRules in _quickfix:
_quickfix.NoTickRules_swigregister(NoTickRules)

class StartTickPriceRange(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StartTickPriceRange_swiginit(self, _quickfix.new_StartTickPriceRange(*args))
    __swig_destroy__ = _quickfix.delete_StartTickPriceRange

# Register StartTickPriceRange in _quickfix:
_quickfix.StartTickPriceRange_swigregister(StartTickPriceRange)

class EndTickPriceRange(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EndTickPriceRange_swiginit(self, _quickfix.new_EndTickPriceRange(*args))
    __swig_destroy__ = _quickfix.delete_EndTickPriceRange

# Register EndTickPriceRange in _quickfix:
_quickfix.EndTickPriceRange_swigregister(EndTickPriceRange)

class TickIncrement(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TickIncrement_swiginit(self, _quickfix.new_TickIncrement(*args))
    __swig_destroy__ = _quickfix.delete_TickIncrement

# Register TickIncrement in _quickfix:
_quickfix.TickIncrement_swigregister(TickIncrement)

class TickRuleType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TickRuleType_swiginit(self, _quickfix.new_TickRuleType(*args))
    __swig_destroy__ = _quickfix.delete_TickRuleType

# Register TickRuleType in _quickfix:
_quickfix.TickRuleType_swigregister(TickRuleType)

class NestedInstrAttribType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NestedInstrAttribType_swiginit(self, _quickfix.new_NestedInstrAttribType(*args))
    __swig_destroy__ = _quickfix.delete_NestedInstrAttribType

# Register NestedInstrAttribType in _quickfix:
_quickfix.NestedInstrAttribType_swigregister(NestedInstrAttribType)

class NestedInstrAttribValue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NestedInstrAttribValue_swiginit(self, _quickfix.new_NestedInstrAttribValue(*args))
    __swig_destroy__ = _quickfix.delete_NestedInstrAttribValue

# Register NestedInstrAttribValue in _quickfix:
_quickfix.NestedInstrAttribValue_swigregister(NestedInstrAttribValue)

class LegMaturityTime(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegMaturityTime_swiginit(self, _quickfix.new_LegMaturityTime(*args))
    __swig_destroy__ = _quickfix.delete_LegMaturityTime

# Register LegMaturityTime in _quickfix:
_quickfix.LegMaturityTime_swigregister(LegMaturityTime)

class UnderlyingMaturityTime(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingMaturityTime_swiginit(self, _quickfix.new_UnderlyingMaturityTime(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingMaturityTime

# Register UnderlyingMaturityTime in _quickfix:
_quickfix.UnderlyingMaturityTime_swigregister(UnderlyingMaturityTime)

class DerivativeSymbol(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSymbol_swiginit(self, _quickfix.new_DerivativeSymbol(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSymbol

# Register DerivativeSymbol in _quickfix:
_quickfix.DerivativeSymbol_swigregister(DerivativeSymbol)

class DerivativeSymbolSfx(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSymbolSfx_swiginit(self, _quickfix.new_DerivativeSymbolSfx(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSymbolSfx

# Register DerivativeSymbolSfx in _quickfix:
_quickfix.DerivativeSymbolSfx_swigregister(DerivativeSymbolSfx)

class DerivativeSecurityID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityID_swiginit(self, _quickfix.new_DerivativeSecurityID(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityID

# Register DerivativeSecurityID in _quickfix:
_quickfix.DerivativeSecurityID_swigregister(DerivativeSecurityID)

class DerivativeSecurityIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityIDSource_swiginit(self, _quickfix.new_DerivativeSecurityIDSource(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityIDSource

# Register DerivativeSecurityIDSource in _quickfix:
_quickfix.DerivativeSecurityIDSource_swigregister(DerivativeSecurityIDSource)

class NoDerivativeSecurityAltID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoDerivativeSecurityAltID_swiginit(self, _quickfix.new_NoDerivativeSecurityAltID(*args))
    __swig_destroy__ = _quickfix.delete_NoDerivativeSecurityAltID

# Register NoDerivativeSecurityAltID in _quickfix:
_quickfix.NoDerivativeSecurityAltID_swigregister(NoDerivativeSecurityAltID)

class DerivativeSecurityAltID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityAltID_swiginit(self, _quickfix.new_DerivativeSecurityAltID(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityAltID

# Register DerivativeSecurityAltID in _quickfix:
_quickfix.DerivativeSecurityAltID_swigregister(DerivativeSecurityAltID)

class DerivativeSecurityAltIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityAltIDSource_swiginit(self, _quickfix.new_DerivativeSecurityAltIDSource(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityAltIDSource

# Register DerivativeSecurityAltIDSource in _quickfix:
_quickfix.DerivativeSecurityAltIDSource_swigregister(DerivativeSecurityAltIDSource)

class SecondaryLowLimitPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryLowLimitPrice_swiginit(self, _quickfix.new_SecondaryLowLimitPrice(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryLowLimitPrice

# Register SecondaryLowLimitPrice in _quickfix:
_quickfix.SecondaryLowLimitPrice_swigregister(SecondaryLowLimitPrice)

class MaturityRuleID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaturityRuleID_swiginit(self, _quickfix.new_MaturityRuleID(*args))
    __swig_destroy__ = _quickfix.delete_MaturityRuleID

# Register MaturityRuleID in _quickfix:
_quickfix.MaturityRuleID_swigregister(MaturityRuleID)

class StrikeRuleID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikeRuleID_swiginit(self, _quickfix.new_StrikeRuleID(*args))
    __swig_destroy__ = _quickfix.delete_StrikeRuleID

# Register StrikeRuleID in _quickfix:
_quickfix.StrikeRuleID_swigregister(StrikeRuleID)

class LegUnitOfMeasureQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegUnitOfMeasureQty_swiginit(self, _quickfix.new_LegUnitOfMeasureQty(*args))
    __swig_destroy__ = _quickfix.delete_LegUnitOfMeasureQty

# Register LegUnitOfMeasureQty in _quickfix:
_quickfix.LegUnitOfMeasureQty_swigregister(LegUnitOfMeasureQty)

class DerivativeOptPayAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeOptPayAmount_swiginit(self, _quickfix.new_DerivativeOptPayAmount(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeOptPayAmount

# Register DerivativeOptPayAmount in _quickfix:
_quickfix.DerivativeOptPayAmount_swigregister(DerivativeOptPayAmount)

class EndMaturityMonthYear(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EndMaturityMonthYear_swiginit(self, _quickfix.new_EndMaturityMonthYear(*args))
    __swig_destroy__ = _quickfix.delete_EndMaturityMonthYear

# Register EndMaturityMonthYear in _quickfix:
_quickfix.EndMaturityMonthYear_swigregister(EndMaturityMonthYear)

class ProductComplex(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ProductComplex_swiginit(self, _quickfix.new_ProductComplex(*args))
    __swig_destroy__ = _quickfix.delete_ProductComplex

# Register ProductComplex in _quickfix:
_quickfix.ProductComplex_swigregister(ProductComplex)

class DerivativeProductComplex(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeProductComplex_swiginit(self, _quickfix.new_DerivativeProductComplex(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeProductComplex

# Register DerivativeProductComplex in _quickfix:
_quickfix.DerivativeProductComplex_swigregister(DerivativeProductComplex)

class MaturityMonthYearIncrement(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaturityMonthYearIncrement_swiginit(self, _quickfix.new_MaturityMonthYearIncrement(*args))
    __swig_destroy__ = _quickfix.delete_MaturityMonthYearIncrement

# Register MaturityMonthYearIncrement in _quickfix:
_quickfix.MaturityMonthYearIncrement_swigregister(MaturityMonthYearIncrement)

class SecondaryHighLimitPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryHighLimitPrice_swiginit(self, _quickfix.new_SecondaryHighLimitPrice(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryHighLimitPrice

# Register SecondaryHighLimitPrice in _quickfix:
_quickfix.SecondaryHighLimitPrice_swigregister(SecondaryHighLimitPrice)

class MinLotSize(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MinLotSize_swiginit(self, _quickfix.new_MinLotSize(*args))
    __swig_destroy__ = _quickfix.delete_MinLotSize

# Register MinLotSize in _quickfix:
_quickfix.MinLotSize_swigregister(MinLotSize)

class NoExecInstRules(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoExecInstRules_swiginit(self, _quickfix.new_NoExecInstRules(*args))
    __swig_destroy__ = _quickfix.delete_NoExecInstRules

# Register NoExecInstRules in _quickfix:
_quickfix.NoExecInstRules_swigregister(NoExecInstRules)

class NoLotTypeRules(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoLotTypeRules_swiginit(self, _quickfix.new_NoLotTypeRules(*args))
    __swig_destroy__ = _quickfix.delete_NoLotTypeRules

# Register NoLotTypeRules in _quickfix:
_quickfix.NoLotTypeRules_swigregister(NoLotTypeRules)

class NoMatchRules(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoMatchRules_swiginit(self, _quickfix.new_NoMatchRules(*args))
    __swig_destroy__ = _quickfix.delete_NoMatchRules

# Register NoMatchRules in _quickfix:
_quickfix.NoMatchRules_swigregister(NoMatchRules)

class NoMaturityRules(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoMaturityRules_swiginit(self, _quickfix.new_NoMaturityRules(*args))
    __swig_destroy__ = _quickfix.delete_NoMaturityRules

# Register NoMaturityRules in _quickfix:
_quickfix.NoMaturityRules_swigregister(NoMaturityRules)

class NoOrdTypeRules(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoOrdTypeRules_swiginit(self, _quickfix.new_NoOrdTypeRules(*args))
    __swig_destroy__ = _quickfix.delete_NoOrdTypeRules

# Register NoOrdTypeRules in _quickfix:
_quickfix.NoOrdTypeRules_swigregister(NoOrdTypeRules)

class NoTimeInForceRules(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoTimeInForceRules_swiginit(self, _quickfix.new_NoTimeInForceRules(*args))
    __swig_destroy__ = _quickfix.delete_NoTimeInForceRules

# Register NoTimeInForceRules in _quickfix:
_quickfix.NoTimeInForceRules_swigregister(NoTimeInForceRules)

class SecondaryTradingReferencePrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryTradingReferencePrice_swiginit(self, _quickfix.new_SecondaryTradingReferencePrice(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryTradingReferencePrice

# Register SecondaryTradingReferencePrice in _quickfix:
_quickfix.SecondaryTradingReferencePrice_swigregister(SecondaryTradingReferencePrice)

class StartMaturityMonthYear(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StartMaturityMonthYear_swiginit(self, _quickfix.new_StartMaturityMonthYear(*args))
    __swig_destroy__ = _quickfix.delete_StartMaturityMonthYear

# Register StartMaturityMonthYear in _quickfix:
_quickfix.StartMaturityMonthYear_swigregister(StartMaturityMonthYear)

class FlexProductEligibilityIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FlexProductEligibilityIndicator_swiginit(self, _quickfix.new_FlexProductEligibilityIndicator(*args))
    __swig_destroy__ = _quickfix.delete_FlexProductEligibilityIndicator

# Register FlexProductEligibilityIndicator in _quickfix:
_quickfix.FlexProductEligibilityIndicator_swigregister(FlexProductEligibilityIndicator)

class DerivFlexProductEligibilityIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivFlexProductEligibilityIndicator_swiginit(self, _quickfix.new_DerivFlexProductEligibilityIndicator(*args))
    __swig_destroy__ = _quickfix.delete_DerivFlexProductEligibilityIndicator

# Register DerivFlexProductEligibilityIndicator in _quickfix:
_quickfix.DerivFlexProductEligibilityIndicator_swigregister(DerivFlexProductEligibilityIndicator)

class FlexibleIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FlexibleIndicator_swiginit(self, _quickfix.new_FlexibleIndicator(*args))
    __swig_destroy__ = _quickfix.delete_FlexibleIndicator

# Register FlexibleIndicator in _quickfix:
_quickfix.FlexibleIndicator_swigregister(FlexibleIndicator)

class TradingCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradingCurrency_swiginit(self, _quickfix.new_TradingCurrency(*args))
    __swig_destroy__ = _quickfix.delete_TradingCurrency

# Register TradingCurrency in _quickfix:
_quickfix.TradingCurrency_swigregister(TradingCurrency)

class DerivativeProduct(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeProduct_swiginit(self, _quickfix.new_DerivativeProduct(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeProduct

# Register DerivativeProduct in _quickfix:
_quickfix.DerivativeProduct_swigregister(DerivativeProduct)

class DerivativeSecurityGroup(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityGroup_swiginit(self, _quickfix.new_DerivativeSecurityGroup(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityGroup

# Register DerivativeSecurityGroup in _quickfix:
_quickfix.DerivativeSecurityGroup_swigregister(DerivativeSecurityGroup)

class DerivativeCFICode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeCFICode_swiginit(self, _quickfix.new_DerivativeCFICode(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeCFICode

# Register DerivativeCFICode in _quickfix:
_quickfix.DerivativeCFICode_swigregister(DerivativeCFICode)

class DerivativeSecurityType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityType_swiginit(self, _quickfix.new_DerivativeSecurityType(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityType

# Register DerivativeSecurityType in _quickfix:
_quickfix.DerivativeSecurityType_swigregister(DerivativeSecurityType)

class DerivativeSecuritySubType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecuritySubType_swiginit(self, _quickfix.new_DerivativeSecuritySubType(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecuritySubType

# Register DerivativeSecuritySubType in _quickfix:
_quickfix.DerivativeSecuritySubType_swigregister(DerivativeSecuritySubType)

class DerivativeMaturityMonthYear(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeMaturityMonthYear_swiginit(self, _quickfix.new_DerivativeMaturityMonthYear(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeMaturityMonthYear

# Register DerivativeMaturityMonthYear in _quickfix:
_quickfix.DerivativeMaturityMonthYear_swigregister(DerivativeMaturityMonthYear)

class DerivativeMaturityDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeMaturityDate_swiginit(self, _quickfix.new_DerivativeMaturityDate(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeMaturityDate

# Register DerivativeMaturityDate in _quickfix:
_quickfix.DerivativeMaturityDate_swigregister(DerivativeMaturityDate)

class DerivativeMaturityTime(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeMaturityTime_swiginit(self, _quickfix.new_DerivativeMaturityTime(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeMaturityTime

# Register DerivativeMaturityTime in _quickfix:
_quickfix.DerivativeMaturityTime_swigregister(DerivativeMaturityTime)

class DerivativeSettleOnOpenFlag(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSettleOnOpenFlag_swiginit(self, _quickfix.new_DerivativeSettleOnOpenFlag(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSettleOnOpenFlag

# Register DerivativeSettleOnOpenFlag in _quickfix:
_quickfix.DerivativeSettleOnOpenFlag_swigregister(DerivativeSettleOnOpenFlag)

class DerivativeInstrmtAssignmentMethod(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeInstrmtAssignmentMethod_swiginit(self, _quickfix.new_DerivativeInstrmtAssignmentMethod(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeInstrmtAssignmentMethod

# Register DerivativeInstrmtAssignmentMethod in _quickfix:
_quickfix.DerivativeInstrmtAssignmentMethod_swigregister(DerivativeInstrmtAssignmentMethod)

class DerivativeSecurityStatus(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityStatus_swiginit(self, _quickfix.new_DerivativeSecurityStatus(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityStatus

# Register DerivativeSecurityStatus in _quickfix:
_quickfix.DerivativeSecurityStatus_swigregister(DerivativeSecurityStatus)

class DerivativeInstrRegistry(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeInstrRegistry_swiginit(self, _quickfix.new_DerivativeInstrRegistry(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeInstrRegistry

# Register DerivativeInstrRegistry in _quickfix:
_quickfix.DerivativeInstrRegistry_swigregister(DerivativeInstrRegistry)

class DerivativeCountryOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeCountryOfIssue_swiginit(self, _quickfix.new_DerivativeCountryOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeCountryOfIssue

# Register DerivativeCountryOfIssue in _quickfix:
_quickfix.DerivativeCountryOfIssue_swigregister(DerivativeCountryOfIssue)

class DerivativeStateOrProvinceOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeStateOrProvinceOfIssue_swiginit(self, _quickfix.new_DerivativeStateOrProvinceOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeStateOrProvinceOfIssue

# Register DerivativeStateOrProvinceOfIssue in _quickfix:
_quickfix.DerivativeStateOrProvinceOfIssue_swigregister(DerivativeStateOrProvinceOfIssue)

class DerivativeLocaleOfIssue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeLocaleOfIssue_swiginit(self, _quickfix.new_DerivativeLocaleOfIssue(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeLocaleOfIssue

# Register DerivativeLocaleOfIssue in _quickfix:
_quickfix.DerivativeLocaleOfIssue_swigregister(DerivativeLocaleOfIssue)

class DerivativeStrikePrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeStrikePrice_swiginit(self, _quickfix.new_DerivativeStrikePrice(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeStrikePrice

# Register DerivativeStrikePrice in _quickfix:
_quickfix.DerivativeStrikePrice_swigregister(DerivativeStrikePrice)

class DerivativeStrikeCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeStrikeCurrency_swiginit(self, _quickfix.new_DerivativeStrikeCurrency(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeStrikeCurrency

# Register DerivativeStrikeCurrency in _quickfix:
_quickfix.DerivativeStrikeCurrency_swigregister(DerivativeStrikeCurrency)

class DerivativeStrikeMultiplier(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeStrikeMultiplier_swiginit(self, _quickfix.new_DerivativeStrikeMultiplier(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeStrikeMultiplier

# Register DerivativeStrikeMultiplier in _quickfix:
_quickfix.DerivativeStrikeMultiplier_swigregister(DerivativeStrikeMultiplier)

class DerivativeStrikeValue(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeStrikeValue_swiginit(self, _quickfix.new_DerivativeStrikeValue(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeStrikeValue

# Register DerivativeStrikeValue in _quickfix:
_quickfix.DerivativeStrikeValue_swigregister(DerivativeStrikeValue)

class DerivativeOptAttribute(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeOptAttribute_swiginit(self, _quickfix.new_DerivativeOptAttribute(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeOptAttribute

# Register DerivativeOptAttribute in _quickfix:
_quickfix.DerivativeOptAttribute_swigregister(DerivativeOptAttribute)

class DerivativeContractMultiplier(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeContractMultiplier_swiginit(self, _quickfix.new_DerivativeContractMultiplier(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeContractMultiplier

# Register DerivativeContractMultiplier in _quickfix:
_quickfix.DerivativeContractMultiplier_swigregister(DerivativeContractMultiplier)

class DerivativeMinPriceIncrement(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeMinPriceIncrement_swiginit(self, _quickfix.new_DerivativeMinPriceIncrement(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeMinPriceIncrement

# Register DerivativeMinPriceIncrement in _quickfix:
_quickfix.DerivativeMinPriceIncrement_swigregister(DerivativeMinPriceIncrement)

class DerivativeMinPriceIncrementAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeMinPriceIncrementAmount_swiginit(self, _quickfix.new_DerivativeMinPriceIncrementAmount(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeMinPriceIncrementAmount

# Register DerivativeMinPriceIncrementAmount in _quickfix:
_quickfix.DerivativeMinPriceIncrementAmount_swigregister(DerivativeMinPriceIncrementAmount)

class DerivativeUnitOfMeasure(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeUnitOfMeasure_swiginit(self, _quickfix.new_DerivativeUnitOfMeasure(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeUnitOfMeasure

# Register DerivativeUnitOfMeasure in _quickfix:
_quickfix.DerivativeUnitOfMeasure_swigregister(DerivativeUnitOfMeasure)

class DerivativeUnitOfMeasureQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeUnitOfMeasureQty_swiginit(self, _quickfix.new_DerivativeUnitOfMeasureQty(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeUnitOfMeasureQty

# Register DerivativeUnitOfMeasureQty in _quickfix:
_quickfix.DerivativeUnitOfMeasureQty_swigregister(DerivativeUnitOfMeasureQty)

class DerivativeTimeUnit(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeTimeUnit_swiginit(self, _quickfix.new_DerivativeTimeUnit(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeTimeUnit

# Register DerivativeTimeUnit in _quickfix:
_quickfix.DerivativeTimeUnit_swigregister(DerivativeTimeUnit)

class DerivativeSecurityExchange(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityExchange_swiginit(self, _quickfix.new_DerivativeSecurityExchange(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityExchange

# Register DerivativeSecurityExchange in _quickfix:
_quickfix.DerivativeSecurityExchange_swigregister(DerivativeSecurityExchange)

class DerivativePositionLimit(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativePositionLimit_swiginit(self, _quickfix.new_DerivativePositionLimit(*args))
    __swig_destroy__ = _quickfix.delete_DerivativePositionLimit

# Register DerivativePositionLimit in _quickfix:
_quickfix.DerivativePositionLimit_swigregister(DerivativePositionLimit)

class DerivativeNTPositionLimit(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeNTPositionLimit_swiginit(self, _quickfix.new_DerivativeNTPositionLimit(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeNTPositionLimit

# Register DerivativeNTPositionLimit in _quickfix:
_quickfix.DerivativeNTPositionLimit_swigregister(DerivativeNTPositionLimit)

class DerivativeIssuer(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeIssuer_swiginit(self, _quickfix.new_DerivativeIssuer(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeIssuer

# Register DerivativeIssuer in _quickfix:
_quickfix.DerivativeIssuer_swigregister(DerivativeIssuer)

class DerivativeIssueDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeIssueDate_swiginit(self, _quickfix.new_DerivativeIssueDate(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeIssueDate

# Register DerivativeIssueDate in _quickfix:
_quickfix.DerivativeIssueDate_swigregister(DerivativeIssueDate)

class DerivativeEncodedIssuerLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeEncodedIssuerLen_swiginit(self, _quickfix.new_DerivativeEncodedIssuerLen(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeEncodedIssuerLen

# Register DerivativeEncodedIssuerLen in _quickfix:
_quickfix.DerivativeEncodedIssuerLen_swigregister(DerivativeEncodedIssuerLen)

class DerivativeEncodedIssuer(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeEncodedIssuer_swiginit(self, _quickfix.new_DerivativeEncodedIssuer(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeEncodedIssuer

# Register DerivativeEncodedIssuer in _quickfix:
_quickfix.DerivativeEncodedIssuer_swigregister(DerivativeEncodedIssuer)

class DerivativeSecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityDesc_swiginit(self, _quickfix.new_DerivativeSecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityDesc

# Register DerivativeSecurityDesc in _quickfix:
_quickfix.DerivativeSecurityDesc_swigregister(DerivativeSecurityDesc)

class DerivativeEncodedSecurityDescLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeEncodedSecurityDescLen_swiginit(self, _quickfix.new_DerivativeEncodedSecurityDescLen(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeEncodedSecurityDescLen

# Register DerivativeEncodedSecurityDescLen in _quickfix:
_quickfix.DerivativeEncodedSecurityDescLen_swigregister(DerivativeEncodedSecurityDescLen)

class DerivativeEncodedSecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeEncodedSecurityDesc_swiginit(self, _quickfix.new_DerivativeEncodedSecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeEncodedSecurityDesc

# Register DerivativeEncodedSecurityDesc in _quickfix:
_quickfix.DerivativeEncodedSecurityDesc_swigregister(DerivativeEncodedSecurityDesc)

class DerivativeSecurityXMLLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityXMLLen_swiginit(self, _quickfix.new_DerivativeSecurityXMLLen(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityXMLLen

# Register DerivativeSecurityXMLLen in _quickfix:
_quickfix.DerivativeSecurityXMLLen_swigregister(DerivativeSecurityXMLLen)

class DerivativeSecurityXML(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityXML_swiginit(self, _quickfix.new_DerivativeSecurityXML(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityXML

# Register DerivativeSecurityXML in _quickfix:
_quickfix.DerivativeSecurityXML_swigregister(DerivativeSecurityXML)

class DerivativeSecurityXMLSchema(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSecurityXMLSchema_swiginit(self, _quickfix.new_DerivativeSecurityXMLSchema(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSecurityXMLSchema

# Register DerivativeSecurityXMLSchema in _quickfix:
_quickfix.DerivativeSecurityXMLSchema_swigregister(DerivativeSecurityXMLSchema)

class DerivativeContractSettlMonth(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeContractSettlMonth_swiginit(self, _quickfix.new_DerivativeContractSettlMonth(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeContractSettlMonth

# Register DerivativeContractSettlMonth in _quickfix:
_quickfix.DerivativeContractSettlMonth_swigregister(DerivativeContractSettlMonth)

class NoDerivativeEvents(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoDerivativeEvents_swiginit(self, _quickfix.new_NoDerivativeEvents(*args))
    __swig_destroy__ = _quickfix.delete_NoDerivativeEvents

# Register NoDerivativeEvents in _quickfix:
_quickfix.NoDerivativeEvents_swigregister(NoDerivativeEvents)

class DerivativeEventType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeEventType_swiginit(self, _quickfix.new_DerivativeEventType(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeEventType

# Register DerivativeEventType in _quickfix:
_quickfix.DerivativeEventType_swigregister(DerivativeEventType)

class DerivativeEventDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeEventDate_swiginit(self, _quickfix.new_DerivativeEventDate(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeEventDate

# Register DerivativeEventDate in _quickfix:
_quickfix.DerivativeEventDate_swigregister(DerivativeEventDate)

class DerivativeEventTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeEventTime_swiginit(self, _quickfix.new_DerivativeEventTime(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeEventTime

# Register DerivativeEventTime in _quickfix:
_quickfix.DerivativeEventTime_swigregister(DerivativeEventTime)

class DerivativeEventPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeEventPx_swiginit(self, _quickfix.new_DerivativeEventPx(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeEventPx

# Register DerivativeEventPx in _quickfix:
_quickfix.DerivativeEventPx_swigregister(DerivativeEventPx)

class DerivativeEventText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeEventText_swiginit(self, _quickfix.new_DerivativeEventText(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeEventText

# Register DerivativeEventText in _quickfix:
_quickfix.DerivativeEventText_swigregister(DerivativeEventText)

class NoDerivativeInstrumentParties(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoDerivativeInstrumentParties_swiginit(self, _quickfix.new_NoDerivativeInstrumentParties(*args))
    __swig_destroy__ = _quickfix.delete_NoDerivativeInstrumentParties

# Register NoDerivativeInstrumentParties in _quickfix:
_quickfix.NoDerivativeInstrumentParties_swigregister(NoDerivativeInstrumentParties)

class DerivativeInstrumentPartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeInstrumentPartyID_swiginit(self, _quickfix.new_DerivativeInstrumentPartyID(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeInstrumentPartyID

# Register DerivativeInstrumentPartyID in _quickfix:
_quickfix.DerivativeInstrumentPartyID_swigregister(DerivativeInstrumentPartyID)

class DerivativeInstrumentPartyIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeInstrumentPartyIDSource_swiginit(self, _quickfix.new_DerivativeInstrumentPartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeInstrumentPartyIDSource

# Register DerivativeInstrumentPartyIDSource in _quickfix:
_quickfix.DerivativeInstrumentPartyIDSource_swigregister(DerivativeInstrumentPartyIDSource)

class DerivativeInstrumentPartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeInstrumentPartyRole_swiginit(self, _quickfix.new_DerivativeInstrumentPartyRole(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeInstrumentPartyRole

# Register DerivativeInstrumentPartyRole in _quickfix:
_quickfix.DerivativeInstrumentPartyRole_swigregister(DerivativeInstrumentPartyRole)

class NoDerivativeInstrumentPartySubIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoDerivativeInstrumentPartySubIDs_swiginit(self, _quickfix.new_NoDerivativeInstrumentPartySubIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoDerivativeInstrumentPartySubIDs

# Register NoDerivativeInstrumentPartySubIDs in _quickfix:
_quickfix.NoDerivativeInstrumentPartySubIDs_swigregister(NoDerivativeInstrumentPartySubIDs)

class DerivativeInstrumentPartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeInstrumentPartySubID_swiginit(self, _quickfix.new_DerivativeInstrumentPartySubID(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeInstrumentPartySubID

# Register DerivativeInstrumentPartySubID in _quickfix:
_quickfix.DerivativeInstrumentPartySubID_swigregister(DerivativeInstrumentPartySubID)

class DerivativeInstrumentPartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeInstrumentPartySubIDType_swiginit(self, _quickfix.new_DerivativeInstrumentPartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeInstrumentPartySubIDType

# Register DerivativeInstrumentPartySubIDType in _quickfix:
_quickfix.DerivativeInstrumentPartySubIDType_swigregister(DerivativeInstrumentPartySubIDType)

class DerivativeExerciseStyle(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeExerciseStyle_swiginit(self, _quickfix.new_DerivativeExerciseStyle(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeExerciseStyle

# Register DerivativeExerciseStyle in _quickfix:
_quickfix.DerivativeExerciseStyle_swigregister(DerivativeExerciseStyle)

class MarketSegmentID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MarketSegmentID_swiginit(self, _quickfix.new_MarketSegmentID(*args))
    __swig_destroy__ = _quickfix.delete_MarketSegmentID

# Register MarketSegmentID in _quickfix:
_quickfix.MarketSegmentID_swigregister(MarketSegmentID)

class MarketID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MarketID_swiginit(self, _quickfix.new_MarketID(*args))
    __swig_destroy__ = _quickfix.delete_MarketID

# Register MarketID in _quickfix:
_quickfix.MarketID_swigregister(MarketID)

class MaturityMonthYearIncrementUnits(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaturityMonthYearIncrementUnits_swiginit(self, _quickfix.new_MaturityMonthYearIncrementUnits(*args))
    __swig_destroy__ = _quickfix.delete_MaturityMonthYearIncrementUnits

# Register MaturityMonthYearIncrementUnits in _quickfix:
_quickfix.MaturityMonthYearIncrementUnits_swigregister(MaturityMonthYearIncrementUnits)

class MaturityMonthYearFormat(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MaturityMonthYearFormat_swiginit(self, _quickfix.new_MaturityMonthYearFormat(*args))
    __swig_destroy__ = _quickfix.delete_MaturityMonthYearFormat

# Register MaturityMonthYearFormat in _quickfix:
_quickfix.MaturityMonthYearFormat_swigregister(MaturityMonthYearFormat)

class StrikeExerciseStyle(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikeExerciseStyle_swiginit(self, _quickfix.new_StrikeExerciseStyle(*args))
    __swig_destroy__ = _quickfix.delete_StrikeExerciseStyle

# Register StrikeExerciseStyle in _quickfix:
_quickfix.StrikeExerciseStyle_swigregister(StrikeExerciseStyle)

class SecondaryPriceLimitType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecondaryPriceLimitType_swiginit(self, _quickfix.new_SecondaryPriceLimitType(*args))
    __swig_destroy__ = _quickfix.delete_SecondaryPriceLimitType

# Register SecondaryPriceLimitType in _quickfix:
_quickfix.SecondaryPriceLimitType_swigregister(SecondaryPriceLimitType)

class PriceLimitType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.PriceLimitType_swiginit(self, _quickfix.new_PriceLimitType(*args))
    __swig_destroy__ = _quickfix.delete_PriceLimitType

# Register PriceLimitType in _quickfix:
_quickfix.PriceLimitType_swigregister(PriceLimitType)

class ExecInstValue(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ExecInstValue_swiginit(self, _quickfix.new_ExecInstValue(*args))
    __swig_destroy__ = _quickfix.delete_ExecInstValue

# Register ExecInstValue in _quickfix:
_quickfix.ExecInstValue_swigregister(ExecInstValue)

class NoTradingSessionRules(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoTradingSessionRules_swiginit(self, _quickfix.new_NoTradingSessionRules(*args))
    __swig_destroy__ = _quickfix.delete_NoTradingSessionRules

# Register NoTradingSessionRules in _quickfix:
_quickfix.NoTradingSessionRules_swigregister(NoTradingSessionRules)

class NoMarketSegments(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoMarketSegments_swiginit(self, _quickfix.new_NoMarketSegments(*args))
    __swig_destroy__ = _quickfix.delete_NoMarketSegments

# Register NoMarketSegments in _quickfix:
_quickfix.NoMarketSegments_swigregister(NoMarketSegments)

class NoDerivativeInstrAttrib(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoDerivativeInstrAttrib_swiginit(self, _quickfix.new_NoDerivativeInstrAttrib(*args))
    __swig_destroy__ = _quickfix.delete_NoDerivativeInstrAttrib

# Register NoDerivativeInstrAttrib in _quickfix:
_quickfix.NoDerivativeInstrAttrib_swigregister(NoDerivativeInstrAttrib)

class NoNestedInstrAttrib(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNestedInstrAttrib_swiginit(self, _quickfix.new_NoNestedInstrAttrib(*args))
    __swig_destroy__ = _quickfix.delete_NoNestedInstrAttrib

# Register NoNestedInstrAttrib in _quickfix:
_quickfix.NoNestedInstrAttrib_swigregister(NoNestedInstrAttrib)

class DerivativeInstrAttribType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeInstrAttribType_swiginit(self, _quickfix.new_DerivativeInstrAttribType(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeInstrAttribType

# Register DerivativeInstrAttribType in _quickfix:
_quickfix.DerivativeInstrAttribType_swigregister(DerivativeInstrAttribType)

class DerivativeInstrAttribValue(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeInstrAttribValue_swiginit(self, _quickfix.new_DerivativeInstrAttribValue(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeInstrAttribValue

# Register DerivativeInstrAttribValue in _quickfix:
_quickfix.DerivativeInstrAttribValue_swigregister(DerivativeInstrAttribValue)

class DerivativePriceUnitOfMeasure(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativePriceUnitOfMeasure_swiginit(self, _quickfix.new_DerivativePriceUnitOfMeasure(*args))
    __swig_destroy__ = _quickfix.delete_DerivativePriceUnitOfMeasure

# Register DerivativePriceUnitOfMeasure in _quickfix:
_quickfix.DerivativePriceUnitOfMeasure_swigregister(DerivativePriceUnitOfMeasure)

class DerivativePriceUnitOfMeasureQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativePriceUnitOfMeasureQty_swiginit(self, _quickfix.new_DerivativePriceUnitOfMeasureQty(*args))
    __swig_destroy__ = _quickfix.delete_DerivativePriceUnitOfMeasureQty

# Register DerivativePriceUnitOfMeasureQty in _quickfix:
_quickfix.DerivativePriceUnitOfMeasureQty_swigregister(DerivativePriceUnitOfMeasureQty)

class DerivativeSettlMethod(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeSettlMethod_swiginit(self, _quickfix.new_DerivativeSettlMethod(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeSettlMethod

# Register DerivativeSettlMethod in _quickfix:
_quickfix.DerivativeSettlMethod_swigregister(DerivativeSettlMethod)

class DerivativePriceQuoteMethod(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativePriceQuoteMethod_swiginit(self, _quickfix.new_DerivativePriceQuoteMethod(*args))
    __swig_destroy__ = _quickfix.delete_DerivativePriceQuoteMethod

# Register DerivativePriceQuoteMethod in _quickfix:
_quickfix.DerivativePriceQuoteMethod_swigregister(DerivativePriceQuoteMethod)

class DerivativeFuturesValuationMethod(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeFuturesValuationMethod_swiginit(self, _quickfix.new_DerivativeFuturesValuationMethod(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeFuturesValuationMethod

# Register DerivativeFuturesValuationMethod in _quickfix:
_quickfix.DerivativeFuturesValuationMethod_swigregister(DerivativeFuturesValuationMethod)

class DerivativeListMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeListMethod_swiginit(self, _quickfix.new_DerivativeListMethod(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeListMethod

# Register DerivativeListMethod in _quickfix:
_quickfix.DerivativeListMethod_swigregister(DerivativeListMethod)

class DerivativeCapPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeCapPrice_swiginit(self, _quickfix.new_DerivativeCapPrice(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeCapPrice

# Register DerivativeCapPrice in _quickfix:
_quickfix.DerivativeCapPrice_swigregister(DerivativeCapPrice)

class DerivativeFloorPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeFloorPrice_swiginit(self, _quickfix.new_DerivativeFloorPrice(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeFloorPrice

# Register DerivativeFloorPrice in _quickfix:
_quickfix.DerivativeFloorPrice_swigregister(DerivativeFloorPrice)

class DerivativePutOrCall(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativePutOrCall_swiginit(self, _quickfix.new_DerivativePutOrCall(*args))
    __swig_destroy__ = _quickfix.delete_DerivativePutOrCall

# Register DerivativePutOrCall in _quickfix:
_quickfix.DerivativePutOrCall_swigregister(DerivativePutOrCall)

class ListUpdateAction(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListUpdateAction_swiginit(self, _quickfix.new_ListUpdateAction(*args))
    __swig_destroy__ = _quickfix.delete_ListUpdateAction

# Register ListUpdateAction in _quickfix:
_quickfix.ListUpdateAction_swigregister(ListUpdateAction)

class ParentMktSegmID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ParentMktSegmID_swiginit(self, _quickfix.new_ParentMktSegmID(*args))
    __swig_destroy__ = _quickfix.delete_ParentMktSegmID

# Register ParentMktSegmID in _quickfix:
_quickfix.ParentMktSegmID_swigregister(ParentMktSegmID)

class TradingSessionDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradingSessionDesc_swiginit(self, _quickfix.new_TradingSessionDesc(*args))
    __swig_destroy__ = _quickfix.delete_TradingSessionDesc

# Register TradingSessionDesc in _quickfix:
_quickfix.TradingSessionDesc_swigregister(TradingSessionDesc)

class TradSesUpdateAction(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesUpdateAction_swiginit(self, _quickfix.new_TradSesUpdateAction(*args))
    __swig_destroy__ = _quickfix.delete_TradSesUpdateAction

# Register TradSesUpdateAction in _quickfix:
_quickfix.TradSesUpdateAction_swigregister(TradSesUpdateAction)

class RejectText(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RejectText_swiginit(self, _quickfix.new_RejectText(*args))
    __swig_destroy__ = _quickfix.delete_RejectText

# Register RejectText in _quickfix:
_quickfix.RejectText_swigregister(RejectText)

class FeeMultiplier(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FeeMultiplier_swiginit(self, _quickfix.new_FeeMultiplier(*args))
    __swig_destroy__ = _quickfix.delete_FeeMultiplier

# Register FeeMultiplier in _quickfix:
_quickfix.FeeMultiplier_swigregister(FeeMultiplier)

class UnderlyingLegSymbol(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegSymbol_swiginit(self, _quickfix.new_UnderlyingLegSymbol(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSymbol

# Register UnderlyingLegSymbol in _quickfix:
_quickfix.UnderlyingLegSymbol_swigregister(UnderlyingLegSymbol)

class UnderlyingLegSymbolSfx(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegSymbolSfx_swiginit(self, _quickfix.new_UnderlyingLegSymbolSfx(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSymbolSfx

# Register UnderlyingLegSymbolSfx in _quickfix:
_quickfix.UnderlyingLegSymbolSfx_swigregister(UnderlyingLegSymbolSfx)

class UnderlyingLegSecurityID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegSecurityID_swiginit(self, _quickfix.new_UnderlyingLegSecurityID(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityID

# Register UnderlyingLegSecurityID in _quickfix:
_quickfix.UnderlyingLegSecurityID_swigregister(UnderlyingLegSecurityID)

class UnderlyingLegSecurityIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegSecurityIDSource_swiginit(self, _quickfix.new_UnderlyingLegSecurityIDSource(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityIDSource

# Register UnderlyingLegSecurityIDSource in _quickfix:
_quickfix.UnderlyingLegSecurityIDSource_swigregister(UnderlyingLegSecurityIDSource)

class NoUnderlyingLegSecurityAltID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoUnderlyingLegSecurityAltID_swiginit(self, _quickfix.new_NoUnderlyingLegSecurityAltID(*args))
    __swig_destroy__ = _quickfix.delete_NoUnderlyingLegSecurityAltID

# Register NoUnderlyingLegSecurityAltID in _quickfix:
_quickfix.NoUnderlyingLegSecurityAltID_swigregister(NoUnderlyingLegSecurityAltID)

class UnderlyingLegSecurityAltID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegSecurityAltID_swiginit(self, _quickfix.new_UnderlyingLegSecurityAltID(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityAltID

# Register UnderlyingLegSecurityAltID in _quickfix:
_quickfix.UnderlyingLegSecurityAltID_swigregister(UnderlyingLegSecurityAltID)

class UnderlyingLegSecurityAltIDSource(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegSecurityAltIDSource_swiginit(self, _quickfix.new_UnderlyingLegSecurityAltIDSource(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityAltIDSource

# Register UnderlyingLegSecurityAltIDSource in _quickfix:
_quickfix.UnderlyingLegSecurityAltIDSource_swigregister(UnderlyingLegSecurityAltIDSource)

class UnderlyingLegSecurityType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegSecurityType_swiginit(self, _quickfix.new_UnderlyingLegSecurityType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityType

# Register UnderlyingLegSecurityType in _quickfix:
_quickfix.UnderlyingLegSecurityType_swigregister(UnderlyingLegSecurityType)

class UnderlyingLegSecuritySubType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegSecuritySubType_swiginit(self, _quickfix.new_UnderlyingLegSecuritySubType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecuritySubType

# Register UnderlyingLegSecuritySubType in _quickfix:
_quickfix.UnderlyingLegSecuritySubType_swigregister(UnderlyingLegSecuritySubType)

class UnderlyingLegMaturityMonthYear(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegMaturityMonthYear_swiginit(self, _quickfix.new_UnderlyingLegMaturityMonthYear(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegMaturityMonthYear

# Register UnderlyingLegMaturityMonthYear in _quickfix:
_quickfix.UnderlyingLegMaturityMonthYear_swigregister(UnderlyingLegMaturityMonthYear)

class UnderlyingLegStrikePrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegStrikePrice_swiginit(self, _quickfix.new_UnderlyingLegStrikePrice(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegStrikePrice

# Register UnderlyingLegStrikePrice in _quickfix:
_quickfix.UnderlyingLegStrikePrice_swigregister(UnderlyingLegStrikePrice)

class UnderlyingLegSecurityExchange(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegSecurityExchange_swiginit(self, _quickfix.new_UnderlyingLegSecurityExchange(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityExchange

# Register UnderlyingLegSecurityExchange in _quickfix:
_quickfix.UnderlyingLegSecurityExchange_swigregister(UnderlyingLegSecurityExchange)

class NoOfLegUnderlyings(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoOfLegUnderlyings_swiginit(self, _quickfix.new_NoOfLegUnderlyings(*args))
    __swig_destroy__ = _quickfix.delete_NoOfLegUnderlyings

# Register NoOfLegUnderlyings in _quickfix:
_quickfix.NoOfLegUnderlyings_swigregister(NoOfLegUnderlyings)

class UnderlyingLegPutOrCall(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegPutOrCall_swiginit(self, _quickfix.new_UnderlyingLegPutOrCall(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegPutOrCall

# Register UnderlyingLegPutOrCall in _quickfix:
_quickfix.UnderlyingLegPutOrCall_swigregister(UnderlyingLegPutOrCall)

class UnderlyingLegCFICode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegCFICode_swiginit(self, _quickfix.new_UnderlyingLegCFICode(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegCFICode

# Register UnderlyingLegCFICode in _quickfix:
_quickfix.UnderlyingLegCFICode_swigregister(UnderlyingLegCFICode)

class UnderlyingLegMaturityDate(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegMaturityDate_swiginit(self, _quickfix.new_UnderlyingLegMaturityDate(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegMaturityDate

# Register UnderlyingLegMaturityDate in _quickfix:
_quickfix.UnderlyingLegMaturityDate_swigregister(UnderlyingLegMaturityDate)

class ApplReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplReqID_swiginit(self, _quickfix.new_ApplReqID(*args))
    __swig_destroy__ = _quickfix.delete_ApplReqID

# Register ApplReqID in _quickfix:
_quickfix.ApplReqID_swigregister(ApplReqID)

class ApplReqType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplReqType_swiginit(self, _quickfix.new_ApplReqType(*args))
    __swig_destroy__ = _quickfix.delete_ApplReqType

# Register ApplReqType in _quickfix:
_quickfix.ApplReqType_swigregister(ApplReqType)

class ApplResponseType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplResponseType_swiginit(self, _quickfix.new_ApplResponseType(*args))
    __swig_destroy__ = _quickfix.delete_ApplResponseType

# Register ApplResponseType in _quickfix:
_quickfix.ApplResponseType_swigregister(ApplResponseType)

class ApplTotalMessageCount(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplTotalMessageCount_swiginit(self, _quickfix.new_ApplTotalMessageCount(*args))
    __swig_destroy__ = _quickfix.delete_ApplTotalMessageCount

# Register ApplTotalMessageCount in _quickfix:
_quickfix.ApplTotalMessageCount_swigregister(ApplTotalMessageCount)

class ApplLastSeqNum(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplLastSeqNum_swiginit(self, _quickfix.new_ApplLastSeqNum(*args))
    __swig_destroy__ = _quickfix.delete_ApplLastSeqNum

# Register ApplLastSeqNum in _quickfix:
_quickfix.ApplLastSeqNum_swigregister(ApplLastSeqNum)

class NoApplIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoApplIDs_swiginit(self, _quickfix.new_NoApplIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoApplIDs

# Register NoApplIDs in _quickfix:
_quickfix.NoApplIDs_swigregister(NoApplIDs)

class ApplResendFlag(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplResendFlag_swiginit(self, _quickfix.new_ApplResendFlag(*args))
    __swig_destroy__ = _quickfix.delete_ApplResendFlag

# Register ApplResendFlag in _quickfix:
_quickfix.ApplResendFlag_swigregister(ApplResendFlag)

class ApplResponseID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplResponseID_swiginit(self, _quickfix.new_ApplResponseID(*args))
    __swig_destroy__ = _quickfix.delete_ApplResponseID

# Register ApplResponseID in _quickfix:
_quickfix.ApplResponseID_swigregister(ApplResponseID)

class ApplResponseError(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplResponseError_swiginit(self, _quickfix.new_ApplResponseError(*args))
    __swig_destroy__ = _quickfix.delete_ApplResponseError

# Register ApplResponseError in _quickfix:
_quickfix.ApplResponseError_swigregister(ApplResponseError)

class RefApplID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefApplID_swiginit(self, _quickfix.new_RefApplID(*args))
    __swig_destroy__ = _quickfix.delete_RefApplID

# Register RefApplID in _quickfix:
_quickfix.RefApplID_swigregister(RefApplID)

class ApplReportID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplReportID_swiginit(self, _quickfix.new_ApplReportID(*args))
    __swig_destroy__ = _quickfix.delete_ApplReportID

# Register ApplReportID in _quickfix:
_quickfix.ApplReportID_swigregister(ApplReportID)

class RefApplLastSeqNum(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefApplLastSeqNum_swiginit(self, _quickfix.new_RefApplLastSeqNum(*args))
    __swig_destroy__ = _quickfix.delete_RefApplLastSeqNum

# Register RefApplLastSeqNum in _quickfix:
_quickfix.RefApplLastSeqNum_swigregister(RefApplLastSeqNum)

class LegPutOrCall(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegPutOrCall_swiginit(self, _quickfix.new_LegPutOrCall(*args))
    __swig_destroy__ = _quickfix.delete_LegPutOrCall

# Register LegPutOrCall in _quickfix:
_quickfix.LegPutOrCall_swigregister(LegPutOrCall)

class TotNoFills(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TotNoFills_swiginit(self, _quickfix.new_TotNoFills(*args))
    __swig_destroy__ = _quickfix.delete_TotNoFills

# Register TotNoFills in _quickfix:
_quickfix.TotNoFills_swigregister(TotNoFills)

class NoFills(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoFills_swiginit(self, _quickfix.new_NoFills(*args))
    __swig_destroy__ = _quickfix.delete_NoFills

# Register NoFills in _quickfix:
_quickfix.NoFills_swigregister(NoFills)

class FillExecID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FillExecID_swiginit(self, _quickfix.new_FillExecID(*args))
    __swig_destroy__ = _quickfix.delete_FillExecID

# Register FillExecID in _quickfix:
_quickfix.FillExecID_swigregister(FillExecID)

class FillPx(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FillPx_swiginit(self, _quickfix.new_FillPx(*args))
    __swig_destroy__ = _quickfix.delete_FillPx

# Register FillPx in _quickfix:
_quickfix.FillPx_swigregister(FillPx)

class FillQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FillQty_swiginit(self, _quickfix.new_FillQty(*args))
    __swig_destroy__ = _quickfix.delete_FillQty

# Register FillQty in _quickfix:
_quickfix.FillQty_swigregister(FillQty)

class LegAllocID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegAllocID_swiginit(self, _quickfix.new_LegAllocID(*args))
    __swig_destroy__ = _quickfix.delete_LegAllocID

# Register LegAllocID in _quickfix:
_quickfix.LegAllocID_swigregister(LegAllocID)

class LegAllocSettlCurrency(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegAllocSettlCurrency_swiginit(self, _quickfix.new_LegAllocSettlCurrency(*args))
    __swig_destroy__ = _quickfix.delete_LegAllocSettlCurrency

# Register LegAllocSettlCurrency in _quickfix:
_quickfix.LegAllocSettlCurrency_swigregister(LegAllocSettlCurrency)

class TradSesEvent(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradSesEvent_swiginit(self, _quickfix.new_TradSesEvent(*args))
    __swig_destroy__ = _quickfix.delete_TradSesEvent

# Register TradSesEvent in _quickfix:
_quickfix.TradSesEvent_swigregister(TradSesEvent)

class MassActionReportID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MassActionReportID_swiginit(self, _quickfix.new_MassActionReportID(*args))
    __swig_destroy__ = _quickfix.delete_MassActionReportID

# Register MassActionReportID in _quickfix:
_quickfix.MassActionReportID_swigregister(MassActionReportID)

class NoNotAffectedOrders(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNotAffectedOrders_swiginit(self, _quickfix.new_NoNotAffectedOrders(*args))
    __swig_destroy__ = _quickfix.delete_NoNotAffectedOrders

# Register NoNotAffectedOrders in _quickfix:
_quickfix.NoNotAffectedOrders_swigregister(NoNotAffectedOrders)

class NotAffectedOrderID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NotAffectedOrderID_swiginit(self, _quickfix.new_NotAffectedOrderID(*args))
    __swig_destroy__ = _quickfix.delete_NotAffectedOrderID

# Register NotAffectedOrderID in _quickfix:
_quickfix.NotAffectedOrderID_swigregister(NotAffectedOrderID)

class NotAffOrigClOrdID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NotAffOrigClOrdID_swiginit(self, _quickfix.new_NotAffOrigClOrdID(*args))
    __swig_destroy__ = _quickfix.delete_NotAffOrigClOrdID

# Register NotAffOrigClOrdID in _quickfix:
_quickfix.NotAffOrigClOrdID_swigregister(NotAffOrigClOrdID)

class MassActionType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MassActionType_swiginit(self, _quickfix.new_MassActionType(*args))
    __swig_destroy__ = _quickfix.delete_MassActionType

# Register MassActionType in _quickfix:
_quickfix.MassActionType_swigregister(MassActionType)

class MassActionScope(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MassActionScope_swiginit(self, _quickfix.new_MassActionScope(*args))
    __swig_destroy__ = _quickfix.delete_MassActionScope

# Register MassActionScope in _quickfix:
_quickfix.MassActionScope_swigregister(MassActionScope)

class MassActionResponse(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MassActionResponse_swiginit(self, _quickfix.new_MassActionResponse(*args))
    __swig_destroy__ = _quickfix.delete_MassActionResponse

# Register MassActionResponse in _quickfix:
_quickfix.MassActionResponse_swigregister(MassActionResponse)

class MassActionRejectReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MassActionRejectReason_swiginit(self, _quickfix.new_MassActionRejectReason(*args))
    __swig_destroy__ = _quickfix.delete_MassActionRejectReason

# Register MassActionRejectReason in _quickfix:
_quickfix.MassActionRejectReason_swigregister(MassActionRejectReason)

class MultilegModel(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MultilegModel_swiginit(self, _quickfix.new_MultilegModel(*args))
    __swig_destroy__ = _quickfix.delete_MultilegModel

# Register MultilegModel in _quickfix:
_quickfix.MultilegModel_swigregister(MultilegModel)

class MultilegPriceMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MultilegPriceMethod_swiginit(self, _quickfix.new_MultilegPriceMethod(*args))
    __swig_destroy__ = _quickfix.delete_MultilegPriceMethod

# Register MultilegPriceMethod in _quickfix:
_quickfix.MultilegPriceMethod_swigregister(MultilegPriceMethod)

class LegVolatility(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegVolatility_swiginit(self, _quickfix.new_LegVolatility(*args))
    __swig_destroy__ = _quickfix.delete_LegVolatility

# Register LegVolatility in _quickfix:
_quickfix.LegVolatility_swigregister(LegVolatility)

class DividendYield(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DividendYield_swiginit(self, _quickfix.new_DividendYield(*args))
    __swig_destroy__ = _quickfix.delete_DividendYield

# Register DividendYield in _quickfix:
_quickfix.DividendYield_swigregister(DividendYield)

class LegDividendYield(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegDividendYield_swiginit(self, _quickfix.new_LegDividendYield(*args))
    __swig_destroy__ = _quickfix.delete_LegDividendYield

# Register LegDividendYield in _quickfix:
_quickfix.LegDividendYield_swigregister(LegDividendYield)

class CurrencyRatio(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.CurrencyRatio_swiginit(self, _quickfix.new_CurrencyRatio(*args))
    __swig_destroy__ = _quickfix.delete_CurrencyRatio

# Register CurrencyRatio in _quickfix:
_quickfix.CurrencyRatio_swigregister(CurrencyRatio)

class LegCurrencyRatio(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegCurrencyRatio_swiginit(self, _quickfix.new_LegCurrencyRatio(*args))
    __swig_destroy__ = _quickfix.delete_LegCurrencyRatio

# Register LegCurrencyRatio in _quickfix:
_quickfix.LegCurrencyRatio_swigregister(LegCurrencyRatio)

class LegExecInst(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegExecInst_swiginit(self, _quickfix.new_LegExecInst(*args))
    __swig_destroy__ = _quickfix.delete_LegExecInst

# Register LegExecInst in _quickfix:
_quickfix.LegExecInst_swigregister(LegExecInst)

class ContingencyType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContingencyType_swiginit(self, _quickfix.new_ContingencyType(*args))
    __swig_destroy__ = _quickfix.delete_ContingencyType

# Register ContingencyType in _quickfix:
_quickfix.ContingencyType_swigregister(ContingencyType)

class ListRejectReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ListRejectReason_swiginit(self, _quickfix.new_ListRejectReason(*args))
    __swig_destroy__ = _quickfix.delete_ListRejectReason

# Register ListRejectReason in _quickfix:
_quickfix.ListRejectReason_swigregister(ListRejectReason)

class NoTrdRepIndicators(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoTrdRepIndicators_swiginit(self, _quickfix.new_NoTrdRepIndicators(*args))
    __swig_destroy__ = _quickfix.delete_NoTrdRepIndicators

# Register NoTrdRepIndicators in _quickfix:
_quickfix.NoTrdRepIndicators_swigregister(NoTrdRepIndicators)

class TrdRepPartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TrdRepPartyRole_swiginit(self, _quickfix.new_TrdRepPartyRole(*args))
    __swig_destroy__ = _quickfix.delete_TrdRepPartyRole

# Register TrdRepPartyRole in _quickfix:
_quickfix.TrdRepPartyRole_swigregister(TrdRepPartyRole)

class TrdRepIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TrdRepIndicator_swiginit(self, _quickfix.new_TrdRepIndicator(*args))
    __swig_destroy__ = _quickfix.delete_TrdRepIndicator

# Register TrdRepIndicator in _quickfix:
_quickfix.TrdRepIndicator_swigregister(TrdRepIndicator)

class TradePublishIndicator(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TradePublishIndicator_swiginit(self, _quickfix.new_TradePublishIndicator(*args))
    __swig_destroy__ = _quickfix.delete_TradePublishIndicator

# Register TradePublishIndicator in _quickfix:
_quickfix.TradePublishIndicator_swigregister(TradePublishIndicator)

class UnderlyingLegOptAttribute(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegOptAttribute_swiginit(self, _quickfix.new_UnderlyingLegOptAttribute(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegOptAttribute

# Register UnderlyingLegOptAttribute in _quickfix:
_quickfix.UnderlyingLegOptAttribute_swigregister(UnderlyingLegOptAttribute)

class UnderlyingLegSecurityDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegSecurityDesc_swiginit(self, _quickfix.new_UnderlyingLegSecurityDesc(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegSecurityDesc

# Register UnderlyingLegSecurityDesc in _quickfix:
_quickfix.UnderlyingLegSecurityDesc_swigregister(UnderlyingLegSecurityDesc)

class MarketReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MarketReqID_swiginit(self, _quickfix.new_MarketReqID(*args))
    __swig_destroy__ = _quickfix.delete_MarketReqID

# Register MarketReqID in _quickfix:
_quickfix.MarketReqID_swigregister(MarketReqID)

class MarketReportID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MarketReportID_swiginit(self, _quickfix.new_MarketReportID(*args))
    __swig_destroy__ = _quickfix.delete_MarketReportID

# Register MarketReportID in _quickfix:
_quickfix.MarketReportID_swigregister(MarketReportID)

class MarketUpdateAction(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MarketUpdateAction_swiginit(self, _quickfix.new_MarketUpdateAction(*args))
    __swig_destroy__ = _quickfix.delete_MarketUpdateAction

# Register MarketUpdateAction in _quickfix:
_quickfix.MarketUpdateAction_swigregister(MarketUpdateAction)

class MarketSegmentDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MarketSegmentDesc_swiginit(self, _quickfix.new_MarketSegmentDesc(*args))
    __swig_destroy__ = _quickfix.delete_MarketSegmentDesc

# Register MarketSegmentDesc in _quickfix:
_quickfix.MarketSegmentDesc_swigregister(MarketSegmentDesc)

class EncodedMktSegmDescLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedMktSegmDescLen_swiginit(self, _quickfix.new_EncodedMktSegmDescLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedMktSegmDescLen

# Register EncodedMktSegmDescLen in _quickfix:
_quickfix.EncodedMktSegmDescLen_swigregister(EncodedMktSegmDescLen)

class EncodedMktSegmDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedMktSegmDesc_swiginit(self, _quickfix.new_EncodedMktSegmDesc(*args))
    __swig_destroy__ = _quickfix.delete_EncodedMktSegmDesc

# Register EncodedMktSegmDesc in _quickfix:
_quickfix.EncodedMktSegmDesc_swigregister(EncodedMktSegmDesc)

class ApplNewSeqNum(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplNewSeqNum_swiginit(self, _quickfix.new_ApplNewSeqNum(*args))
    __swig_destroy__ = _quickfix.delete_ApplNewSeqNum

# Register ApplNewSeqNum in _quickfix:
_quickfix.ApplNewSeqNum_swigregister(ApplNewSeqNum)

class EncryptedPasswordMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncryptedPasswordMethod_swiginit(self, _quickfix.new_EncryptedPasswordMethod(*args))
    __swig_destroy__ = _quickfix.delete_EncryptedPasswordMethod

# Register EncryptedPasswordMethod in _quickfix:
_quickfix.EncryptedPasswordMethod_swigregister(EncryptedPasswordMethod)

class EncryptedPasswordLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncryptedPasswordLen_swiginit(self, _quickfix.new_EncryptedPasswordLen(*args))
    __swig_destroy__ = _quickfix.delete_EncryptedPasswordLen

# Register EncryptedPasswordLen in _quickfix:
_quickfix.EncryptedPasswordLen_swigregister(EncryptedPasswordLen)

class EncryptedPassword(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncryptedPassword_swiginit(self, _quickfix.new_EncryptedPassword(*args))
    __swig_destroy__ = _quickfix.delete_EncryptedPassword

# Register EncryptedPassword in _quickfix:
_quickfix.EncryptedPassword_swigregister(EncryptedPassword)

class EncryptedNewPasswordLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncryptedNewPasswordLen_swiginit(self, _quickfix.new_EncryptedNewPasswordLen(*args))
    __swig_destroy__ = _quickfix.delete_EncryptedNewPasswordLen

# Register EncryptedNewPasswordLen in _quickfix:
_quickfix.EncryptedNewPasswordLen_swigregister(EncryptedNewPasswordLen)

class EncryptedNewPassword(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncryptedNewPassword_swiginit(self, _quickfix.new_EncryptedNewPassword(*args))
    __swig_destroy__ = _quickfix.delete_EncryptedNewPassword

# Register EncryptedNewPassword in _quickfix:
_quickfix.EncryptedNewPassword_swigregister(EncryptedNewPassword)

class UnderlyingLegMaturityTime(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingLegMaturityTime_swiginit(self, _quickfix.new_UnderlyingLegMaturityTime(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingLegMaturityTime

# Register UnderlyingLegMaturityTime in _quickfix:
_quickfix.UnderlyingLegMaturityTime_swigregister(UnderlyingLegMaturityTime)

class RefApplExtID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefApplExtID_swiginit(self, _quickfix.new_RefApplExtID(*args))
    __swig_destroy__ = _quickfix.delete_RefApplExtID

# Register RefApplExtID in _quickfix:
_quickfix.RefApplExtID_swigregister(RefApplExtID)

class DefaultApplExtID(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DefaultApplExtID_swiginit(self, _quickfix.new_DefaultApplExtID(*args))
    __swig_destroy__ = _quickfix.delete_DefaultApplExtID

# Register DefaultApplExtID in _quickfix:
_quickfix.DefaultApplExtID_swigregister(DefaultApplExtID)

class DefaultCstmApplVerID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DefaultCstmApplVerID_swiginit(self, _quickfix.new_DefaultCstmApplVerID(*args))
    __swig_destroy__ = _quickfix.delete_DefaultCstmApplVerID

# Register DefaultCstmApplVerID in _quickfix:
_quickfix.DefaultCstmApplVerID_swigregister(DefaultCstmApplVerID)

class SessionStatus(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SessionStatus_swiginit(self, _quickfix.new_SessionStatus(*args))
    __swig_destroy__ = _quickfix.delete_SessionStatus

# Register SessionStatus in _quickfix:
_quickfix.SessionStatus_swigregister(SessionStatus)

class DefaultVerIndicator(BoolField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DefaultVerIndicator_swiginit(self, _quickfix.new_DefaultVerIndicator(*args))
    __swig_destroy__ = _quickfix.delete_DefaultVerIndicator

# Register DefaultVerIndicator in _quickfix:
_quickfix.DefaultVerIndicator_swigregister(DefaultVerIndicator)

class Nested4PartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested4PartySubIDType_swiginit(self, _quickfix.new_Nested4PartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_Nested4PartySubIDType

# Register Nested4PartySubIDType in _quickfix:
_quickfix.Nested4PartySubIDType_swigregister(Nested4PartySubIDType)

class Nested4PartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested4PartySubID_swiginit(self, _quickfix.new_Nested4PartySubID(*args))
    __swig_destroy__ = _quickfix.delete_Nested4PartySubID

# Register Nested4PartySubID in _quickfix:
_quickfix.Nested4PartySubID_swigregister(Nested4PartySubID)

class NoNested4PartySubIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNested4PartySubIDs_swiginit(self, _quickfix.new_NoNested4PartySubIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoNested4PartySubIDs

# Register NoNested4PartySubIDs in _quickfix:
_quickfix.NoNested4PartySubIDs_swigregister(NoNested4PartySubIDs)

class NoNested4PartyIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNested4PartyIDs_swiginit(self, _quickfix.new_NoNested4PartyIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoNested4PartyIDs

# Register NoNested4PartyIDs in _quickfix:
_quickfix.NoNested4PartyIDs_swigregister(NoNested4PartyIDs)

class Nested4PartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested4PartyID_swiginit(self, _quickfix.new_Nested4PartyID(*args))
    __swig_destroy__ = _quickfix.delete_Nested4PartyID

# Register Nested4PartyID in _quickfix:
_quickfix.Nested4PartyID_swigregister(Nested4PartyID)

class Nested4PartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested4PartyIDSource_swiginit(self, _quickfix.new_Nested4PartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_Nested4PartyIDSource

# Register Nested4PartyIDSource in _quickfix:
_quickfix.Nested4PartyIDSource_swigregister(Nested4PartyIDSource)

class Nested4PartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Nested4PartyRole_swiginit(self, _quickfix.new_Nested4PartyRole(*args))
    __swig_destroy__ = _quickfix.delete_Nested4PartyRole

# Register Nested4PartyRole in _quickfix:
_quickfix.Nested4PartyRole_swigregister(Nested4PartyRole)

class LegLastQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegLastQty_swiginit(self, _quickfix.new_LegLastQty(*args))
    __swig_destroy__ = _quickfix.delete_LegLastQty

# Register LegLastQty in _quickfix:
_quickfix.LegLastQty_swigregister(LegLastQty)

class UnderlyingExerciseStyle(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingExerciseStyle_swiginit(self, _quickfix.new_UnderlyingExerciseStyle(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingExerciseStyle

# Register UnderlyingExerciseStyle in _quickfix:
_quickfix.UnderlyingExerciseStyle_swigregister(UnderlyingExerciseStyle)

class LegExerciseStyle(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegExerciseStyle_swiginit(self, _quickfix.new_LegExerciseStyle(*args))
    __swig_destroy__ = _quickfix.delete_LegExerciseStyle

# Register LegExerciseStyle in _quickfix:
_quickfix.LegExerciseStyle_swigregister(LegExerciseStyle)

class LegPriceUnitOfMeasure(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegPriceUnitOfMeasure_swiginit(self, _quickfix.new_LegPriceUnitOfMeasure(*args))
    __swig_destroy__ = _quickfix.delete_LegPriceUnitOfMeasure

# Register LegPriceUnitOfMeasure in _quickfix:
_quickfix.LegPriceUnitOfMeasure_swigregister(LegPriceUnitOfMeasure)

class LegPriceUnitOfMeasureQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegPriceUnitOfMeasureQty_swiginit(self, _quickfix.new_LegPriceUnitOfMeasureQty(*args))
    __swig_destroy__ = _quickfix.delete_LegPriceUnitOfMeasureQty

# Register LegPriceUnitOfMeasureQty in _quickfix:
_quickfix.LegPriceUnitOfMeasureQty_swigregister(LegPriceUnitOfMeasureQty)

class UnderlyingUnitOfMeasureQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingUnitOfMeasureQty_swiginit(self, _quickfix.new_UnderlyingUnitOfMeasureQty(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingUnitOfMeasureQty

# Register UnderlyingUnitOfMeasureQty in _quickfix:
_quickfix.UnderlyingUnitOfMeasureQty_swigregister(UnderlyingUnitOfMeasureQty)

class UnderlyingPriceUnitOfMeasure(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingPriceUnitOfMeasure_swiginit(self, _quickfix.new_UnderlyingPriceUnitOfMeasure(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingPriceUnitOfMeasure

# Register UnderlyingPriceUnitOfMeasure in _quickfix:
_quickfix.UnderlyingPriceUnitOfMeasure_swigregister(UnderlyingPriceUnitOfMeasure)

class UnderlyingPriceUnitOfMeasureQty(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingPriceUnitOfMeasureQty_swiginit(self, _quickfix.new_UnderlyingPriceUnitOfMeasureQty(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingPriceUnitOfMeasureQty

# Register UnderlyingPriceUnitOfMeasureQty in _quickfix:
_quickfix.UnderlyingPriceUnitOfMeasureQty_swigregister(UnderlyingPriceUnitOfMeasureQty)

class ApplReportType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ApplReportType_swiginit(self, _quickfix.new_ApplReportType(*args))
    __swig_destroy__ = _quickfix.delete_ApplReportType

# Register ApplReportType in _quickfix:
_quickfix.ApplReportType_swigregister(ApplReportType)

class HaltReasonInt(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.HaltReasonInt_swiginit(self, _quickfix.new_HaltReasonInt(*args))
    __swig_destroy__ = _quickfix.delete_HaltReasonInt

# Register HaltReasonInt in _quickfix:
_quickfix.HaltReasonInt_swigregister(HaltReasonInt)

class SideLastQty(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideLastQty_swiginit(self, _quickfix.new_SideLastQty(*args))
    __swig_destroy__ = _quickfix.delete_SideLastQty

# Register SideLastQty in _quickfix:
_quickfix.SideLastQty_swigregister(SideLastQty)

class UnderlyingInstrumentPartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingInstrumentPartyID_swiginit(self, _quickfix.new_UnderlyingInstrumentPartyID(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrumentPartyID

# Register UnderlyingInstrumentPartyID in _quickfix:
_quickfix.UnderlyingInstrumentPartyID_swigregister(UnderlyingInstrumentPartyID)

class UnderlyingInstrumentPartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingInstrumentPartyIDSource_swiginit(self, _quickfix.new_UnderlyingInstrumentPartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrumentPartyIDSource

# Register UnderlyingInstrumentPartyIDSource in _quickfix:
_quickfix.UnderlyingInstrumentPartyIDSource_swigregister(UnderlyingInstrumentPartyIDSource)

class UnderlyingInstrumentPartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingInstrumentPartyRole_swiginit(self, _quickfix.new_UnderlyingInstrumentPartyRole(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrumentPartyRole

# Register UnderlyingInstrumentPartyRole in _quickfix:
_quickfix.UnderlyingInstrumentPartyRole_swigregister(UnderlyingInstrumentPartyRole)

class UnderlyingInstrumentPartySubID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingInstrumentPartySubID_swiginit(self, _quickfix.new_UnderlyingInstrumentPartySubID(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrumentPartySubID

# Register UnderlyingInstrumentPartySubID in _quickfix:
_quickfix.UnderlyingInstrumentPartySubID_swigregister(UnderlyingInstrumentPartySubID)

class UnderlyingInstrumentPartySubIDType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingInstrumentPartySubIDType_swiginit(self, _quickfix.new_UnderlyingInstrumentPartySubIDType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingInstrumentPartySubIDType

# Register UnderlyingInstrumentPartySubIDType in _quickfix:
_quickfix.UnderlyingInstrumentPartySubIDType_swigregister(UnderlyingInstrumentPartySubIDType)

class OptPayoutAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OptPayoutAmount_swiginit(self, _quickfix.new_OptPayoutAmount(*args))
    __swig_destroy__ = _quickfix.delete_OptPayoutAmount

# Register OptPayoutAmount in _quickfix:
_quickfix.OptPayoutAmount_swigregister(OptPayoutAmount)

class ValuationMethod(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ValuationMethod_swiginit(self, _quickfix.new_ValuationMethod(*args))
    __swig_destroy__ = _quickfix.delete_ValuationMethod

# Register ValuationMethod in _quickfix:
_quickfix.ValuationMethod_swigregister(ValuationMethod)

class DerivativeValuationMethod(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeValuationMethod_swiginit(self, _quickfix.new_DerivativeValuationMethod(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeValuationMethod

# Register DerivativeValuationMethod in _quickfix:
_quickfix.DerivativeValuationMethod_swigregister(DerivativeValuationMethod)

class SideExecID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideExecID_swiginit(self, _quickfix.new_SideExecID(*args))
    __swig_destroy__ = _quickfix.delete_SideExecID

# Register SideExecID in _quickfix:
_quickfix.SideExecID_swigregister(SideExecID)

class OrderDelay(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderDelay_swiginit(self, _quickfix.new_OrderDelay(*args))
    __swig_destroy__ = _quickfix.delete_OrderDelay

# Register OrderDelay in _quickfix:
_quickfix.OrderDelay_swigregister(OrderDelay)

class OrderDelayUnit(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrderDelayUnit_swiginit(self, _quickfix.new_OrderDelayUnit(*args))
    __swig_destroy__ = _quickfix.delete_OrderDelayUnit

# Register OrderDelayUnit in _quickfix:
_quickfix.OrderDelayUnit_swigregister(OrderDelayUnit)

class VenueType(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.VenueType_swiginit(self, _quickfix.new_VenueType(*args))
    __swig_destroy__ = _quickfix.delete_VenueType

# Register VenueType in _quickfix:
_quickfix.VenueType_swigregister(VenueType)

class RefOrdIDReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefOrdIDReason_swiginit(self, _quickfix.new_RefOrdIDReason(*args))
    __swig_destroy__ = _quickfix.delete_RefOrdIDReason

# Register RefOrdIDReason in _quickfix:
_quickfix.RefOrdIDReason_swigregister(RefOrdIDReason)

class OrigCustOrderCapacity(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OrigCustOrderCapacity_swiginit(self, _quickfix.new_OrigCustOrderCapacity(*args))
    __swig_destroy__ = _quickfix.delete_OrigCustOrderCapacity

# Register OrigCustOrderCapacity in _quickfix:
_quickfix.OrigCustOrderCapacity_swigregister(OrigCustOrderCapacity)

class RefApplReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RefApplReqID_swiginit(self, _quickfix.new_RefApplReqID(*args))
    __swig_destroy__ = _quickfix.delete_RefApplReqID

# Register RefApplReqID in _quickfix:
_quickfix.RefApplReqID_swigregister(RefApplReqID)

class ModelType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ModelType_swiginit(self, _quickfix.new_ModelType(*args))
    __swig_destroy__ = _quickfix.delete_ModelType

# Register ModelType in _quickfix:
_quickfix.ModelType_swigregister(ModelType)

class ContractMultiplierUnit(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ContractMultiplierUnit_swiginit(self, _quickfix.new_ContractMultiplierUnit(*args))
    __swig_destroy__ = _quickfix.delete_ContractMultiplierUnit

# Register ContractMultiplierUnit in _quickfix:
_quickfix.ContractMultiplierUnit_swigregister(ContractMultiplierUnit)

class LegContractMultiplierUnit(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegContractMultiplierUnit_swiginit(self, _quickfix.new_LegContractMultiplierUnit(*args))
    __swig_destroy__ = _quickfix.delete_LegContractMultiplierUnit

# Register LegContractMultiplierUnit in _quickfix:
_quickfix.LegContractMultiplierUnit_swigregister(LegContractMultiplierUnit)

class UnderlyingContractMultiplierUnit(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingContractMultiplierUnit_swiginit(self, _quickfix.new_UnderlyingContractMultiplierUnit(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingContractMultiplierUnit

# Register UnderlyingContractMultiplierUnit in _quickfix:
_quickfix.UnderlyingContractMultiplierUnit_swigregister(UnderlyingContractMultiplierUnit)

class DerivativeContractMultiplierUnit(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeContractMultiplierUnit_swiginit(self, _quickfix.new_DerivativeContractMultiplierUnit(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeContractMultiplierUnit

# Register DerivativeContractMultiplierUnit in _quickfix:
_quickfix.DerivativeContractMultiplierUnit_swigregister(DerivativeContractMultiplierUnit)

class FlowScheduleType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FlowScheduleType_swiginit(self, _quickfix.new_FlowScheduleType(*args))
    __swig_destroy__ = _quickfix.delete_FlowScheduleType

# Register FlowScheduleType in _quickfix:
_quickfix.FlowScheduleType_swigregister(FlowScheduleType)

class LegFlowScheduleType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LegFlowScheduleType_swiginit(self, _quickfix.new_LegFlowScheduleType(*args))
    __swig_destroy__ = _quickfix.delete_LegFlowScheduleType

# Register LegFlowScheduleType in _quickfix:
_quickfix.LegFlowScheduleType_swigregister(LegFlowScheduleType)

class UnderlyingFlowScheduleType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingFlowScheduleType_swiginit(self, _quickfix.new_UnderlyingFlowScheduleType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingFlowScheduleType

# Register UnderlyingFlowScheduleType in _quickfix:
_quickfix.UnderlyingFlowScheduleType_swigregister(UnderlyingFlowScheduleType)

class DerivativeFlowScheduleType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DerivativeFlowScheduleType_swiginit(self, _quickfix.new_DerivativeFlowScheduleType(*args))
    __swig_destroy__ = _quickfix.delete_DerivativeFlowScheduleType

# Register DerivativeFlowScheduleType in _quickfix:
_quickfix.DerivativeFlowScheduleType_swigregister(DerivativeFlowScheduleType)

class FillLiquidityInd(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FillLiquidityInd_swiginit(self, _quickfix.new_FillLiquidityInd(*args))
    __swig_destroy__ = _quickfix.delete_FillLiquidityInd

# Register FillLiquidityInd in _quickfix:
_quickfix.FillLiquidityInd_swigregister(FillLiquidityInd)

class SideLiquidityInd(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SideLiquidityInd_swiginit(self, _quickfix.new_SideLiquidityInd(*args))
    __swig_destroy__ = _quickfix.delete_SideLiquidityInd

# Register SideLiquidityInd in _quickfix:
_quickfix.SideLiquidityInd_swigregister(SideLiquidityInd)

class NoRateSources(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoRateSources_swiginit(self, _quickfix.new_NoRateSources(*args))
    __swig_destroy__ = _quickfix.delete_NoRateSources

# Register NoRateSources in _quickfix:
_quickfix.NoRateSources_swigregister(NoRateSources)

class RateSource(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RateSource_swiginit(self, _quickfix.new_RateSource(*args))
    __swig_destroy__ = _quickfix.delete_RateSource

# Register RateSource in _quickfix:
_quickfix.RateSource_swigregister(RateSource)

class RateSourceType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RateSourceType_swiginit(self, _quickfix.new_RateSourceType(*args))
    __swig_destroy__ = _quickfix.delete_RateSourceType

# Register RateSourceType in _quickfix:
_quickfix.RateSourceType_swigregister(RateSourceType)

class ReferencePage(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ReferencePage_swiginit(self, _quickfix.new_ReferencePage(*args))
    __swig_destroy__ = _quickfix.delete_ReferencePage

# Register ReferencePage in _quickfix:
_quickfix.ReferencePage_swigregister(ReferencePage)

class RestructuringType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RestructuringType_swiginit(self, _quickfix.new_RestructuringType(*args))
    __swig_destroy__ = _quickfix.delete_RestructuringType

# Register RestructuringType in _quickfix:
_quickfix.RestructuringType_swigregister(RestructuringType)

class Seniority(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Seniority_swiginit(self, _quickfix.new_Seniority(*args))
    __swig_destroy__ = _quickfix.delete_Seniority

# Register Seniority in _quickfix:
_quickfix.Seniority_swigregister(Seniority)

class NotionalPercentageOutstanding(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NotionalPercentageOutstanding_swiginit(self, _quickfix.new_NotionalPercentageOutstanding(*args))
    __swig_destroy__ = _quickfix.delete_NotionalPercentageOutstanding

# Register NotionalPercentageOutstanding in _quickfix:
_quickfix.NotionalPercentageOutstanding_swigregister(NotionalPercentageOutstanding)

class OriginalNotionalPercentageOutstanding(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OriginalNotionalPercentageOutstanding_swiginit(self, _quickfix.new_OriginalNotionalPercentageOutstanding(*args))
    __swig_destroy__ = _quickfix.delete_OriginalNotionalPercentageOutstanding

# Register OriginalNotionalPercentageOutstanding in _quickfix:
_quickfix.OriginalNotionalPercentageOutstanding_swigregister(OriginalNotionalPercentageOutstanding)

class UnderlyingRestructuringType(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingRestructuringType_swiginit(self, _quickfix.new_UnderlyingRestructuringType(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingRestructuringType

# Register UnderlyingRestructuringType in _quickfix:
_quickfix.UnderlyingRestructuringType_swigregister(UnderlyingRestructuringType)

class UnderlyingSeniority(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingSeniority_swiginit(self, _quickfix.new_UnderlyingSeniority(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingSeniority

# Register UnderlyingSeniority in _quickfix:
_quickfix.UnderlyingSeniority_swigregister(UnderlyingSeniority)

class UnderlyingNotionalPercentageOutstanding(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingNotionalPercentageOutstanding_swiginit(self, _quickfix.new_UnderlyingNotionalPercentageOutstanding(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingNotionalPercentageOutstanding

# Register UnderlyingNotionalPercentageOutstanding in _quickfix:
_quickfix.UnderlyingNotionalPercentageOutstanding_swigregister(UnderlyingNotionalPercentageOutstanding)

class UnderlyingOriginalNotionalPercentageOutstanding(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingOriginalNotionalPercentageOutstanding_swiginit(self, _quickfix.new_UnderlyingOriginalNotionalPercentageOutstanding(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingOriginalNotionalPercentageOutstanding

# Register UnderlyingOriginalNotionalPercentageOutstanding in _quickfix:
_quickfix.UnderlyingOriginalNotionalPercentageOutstanding_swigregister(UnderlyingOriginalNotionalPercentageOutstanding)

class AttachmentPoint(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.AttachmentPoint_swiginit(self, _quickfix.new_AttachmentPoint(*args))
    __swig_destroy__ = _quickfix.delete_AttachmentPoint

# Register AttachmentPoint in _quickfix:
_quickfix.AttachmentPoint_swigregister(AttachmentPoint)

class DetachmentPoint(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DetachmentPoint_swiginit(self, _quickfix.new_DetachmentPoint(*args))
    __swig_destroy__ = _quickfix.delete_DetachmentPoint

# Register DetachmentPoint in _quickfix:
_quickfix.DetachmentPoint_swigregister(DetachmentPoint)

class UnderlyingAttachmentPoint(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingAttachmentPoint_swiginit(self, _quickfix.new_UnderlyingAttachmentPoint(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingAttachmentPoint

# Register UnderlyingAttachmentPoint in _quickfix:
_quickfix.UnderlyingAttachmentPoint_swigregister(UnderlyingAttachmentPoint)

class UnderlyingDetachmentPoint(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingDetachmentPoint_swiginit(self, _quickfix.new_UnderlyingDetachmentPoint(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingDetachmentPoint

# Register UnderlyingDetachmentPoint in _quickfix:
_quickfix.UnderlyingDetachmentPoint_swigregister(UnderlyingDetachmentPoint)

class NoTargetPartyIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoTargetPartyIDs_swiginit(self, _quickfix.new_NoTargetPartyIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoTargetPartyIDs

# Register NoTargetPartyIDs in _quickfix:
_quickfix.NoTargetPartyIDs_swigregister(NoTargetPartyIDs)

class TargetPartyID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TargetPartyID_swiginit(self, _quickfix.new_TargetPartyID(*args))
    __swig_destroy__ = _quickfix.delete_TargetPartyID

# Register TargetPartyID in _quickfix:
_quickfix.TargetPartyID_swigregister(TargetPartyID)

class TargetPartyIDSource(CharField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TargetPartyIDSource_swiginit(self, _quickfix.new_TargetPartyIDSource(*args))
    __swig_destroy__ = _quickfix.delete_TargetPartyIDSource

# Register TargetPartyIDSource in _quickfix:
_quickfix.TargetPartyIDSource_swigregister(TargetPartyIDSource)

class TargetPartyRole(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.TargetPartyRole_swiginit(self, _quickfix.new_TargetPartyRole(*args))
    __swig_destroy__ = _quickfix.delete_TargetPartyRole

# Register TargetPartyRole in _quickfix:
_quickfix.TargetPartyRole_swigregister(TargetPartyRole)

class SecurityListID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityListID_swiginit(self, _quickfix.new_SecurityListID(*args))
    __swig_destroy__ = _quickfix.delete_SecurityListID

# Register SecurityListID in _quickfix:
_quickfix.SecurityListID_swigregister(SecurityListID)

class SecurityListRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityListRefID_swiginit(self, _quickfix.new_SecurityListRefID(*args))
    __swig_destroy__ = _quickfix.delete_SecurityListRefID

# Register SecurityListRefID in _quickfix:
_quickfix.SecurityListRefID_swigregister(SecurityListRefID)

class SecurityListDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityListDesc_swiginit(self, _quickfix.new_SecurityListDesc(*args))
    __swig_destroy__ = _quickfix.delete_SecurityListDesc

# Register SecurityListDesc in _quickfix:
_quickfix.SecurityListDesc_swigregister(SecurityListDesc)

class EncodedSecurityListDescLen(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedSecurityListDescLen_swiginit(self, _quickfix.new_EncodedSecurityListDescLen(*args))
    __swig_destroy__ = _quickfix.delete_EncodedSecurityListDescLen

# Register EncodedSecurityListDescLen in _quickfix:
_quickfix.EncodedSecurityListDescLen_swigregister(EncodedSecurityListDescLen)

class EncodedSecurityListDesc(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.EncodedSecurityListDesc_swiginit(self, _quickfix.new_EncodedSecurityListDesc(*args))
    __swig_destroy__ = _quickfix.delete_EncodedSecurityListDesc

# Register EncodedSecurityListDesc in _quickfix:
_quickfix.EncodedSecurityListDesc_swigregister(EncodedSecurityListDesc)

class SecurityListType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityListType_swiginit(self, _quickfix.new_SecurityListType(*args))
    __swig_destroy__ = _quickfix.delete_SecurityListType

# Register SecurityListType in _quickfix:
_quickfix.SecurityListType_swigregister(SecurityListType)

class SecurityListTypeSource(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SecurityListTypeSource_swiginit(self, _quickfix.new_SecurityListTypeSource(*args))
    __swig_destroy__ = _quickfix.delete_SecurityListTypeSource

# Register SecurityListTypeSource in _quickfix:
_quickfix.SecurityListTypeSource_swigregister(SecurityListTypeSource)

class NewsID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NewsID_swiginit(self, _quickfix.new_NewsID(*args))
    __swig_destroy__ = _quickfix.delete_NewsID

# Register NewsID in _quickfix:
_quickfix.NewsID_swigregister(NewsID)

class NewsCategory(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NewsCategory_swiginit(self, _quickfix.new_NewsCategory(*args))
    __swig_destroy__ = _quickfix.delete_NewsCategory

# Register NewsCategory in _quickfix:
_quickfix.NewsCategory_swigregister(NewsCategory)

class LanguageCode(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.LanguageCode_swiginit(self, _quickfix.new_LanguageCode(*args))
    __swig_destroy__ = _quickfix.delete_LanguageCode

# Register LanguageCode in _quickfix:
_quickfix.LanguageCode_swigregister(LanguageCode)

class NoNewsRefIDs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoNewsRefIDs_swiginit(self, _quickfix.new_NoNewsRefIDs(*args))
    __swig_destroy__ = _quickfix.delete_NoNewsRefIDs

# Register NoNewsRefIDs in _quickfix:
_quickfix.NoNewsRefIDs_swigregister(NoNewsRefIDs)

class NewsRefID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NewsRefID_swiginit(self, _quickfix.new_NewsRefID(*args))
    __swig_destroy__ = _quickfix.delete_NewsRefID

# Register NewsRefID in _quickfix:
_quickfix.NewsRefID_swigregister(NewsRefID)

class NewsRefType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NewsRefType_swiginit(self, _quickfix.new_NewsRefType(*args))
    __swig_destroy__ = _quickfix.delete_NewsRefType

# Register NewsRefType in _quickfix:
_quickfix.NewsRefType_swigregister(NewsRefType)

class StrikePriceDeterminationMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikePriceDeterminationMethod_swiginit(self, _quickfix.new_StrikePriceDeterminationMethod(*args))
    __swig_destroy__ = _quickfix.delete_StrikePriceDeterminationMethod

# Register StrikePriceDeterminationMethod in _quickfix:
_quickfix.StrikePriceDeterminationMethod_swigregister(StrikePriceDeterminationMethod)

class StrikePriceBoundaryMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikePriceBoundaryMethod_swiginit(self, _quickfix.new_StrikePriceBoundaryMethod(*args))
    __swig_destroy__ = _quickfix.delete_StrikePriceBoundaryMethod

# Register StrikePriceBoundaryMethod in _quickfix:
_quickfix.StrikePriceBoundaryMethod_swigregister(StrikePriceBoundaryMethod)

class StrikePriceBoundaryPrecision(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StrikePriceBoundaryPrecision_swiginit(self, _quickfix.new_StrikePriceBoundaryPrecision(*args))
    __swig_destroy__ = _quickfix.delete_StrikePriceBoundaryPrecision

# Register StrikePriceBoundaryPrecision in _quickfix:
_quickfix.StrikePriceBoundaryPrecision_swigregister(StrikePriceBoundaryPrecision)

class UnderlyingPriceDeterminationMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.UnderlyingPriceDeterminationMethod_swiginit(self, _quickfix.new_UnderlyingPriceDeterminationMethod(*args))
    __swig_destroy__ = _quickfix.delete_UnderlyingPriceDeterminationMethod

# Register UnderlyingPriceDeterminationMethod in _quickfix:
_quickfix.UnderlyingPriceDeterminationMethod_swigregister(UnderlyingPriceDeterminationMethod)

class OptPayoutType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.OptPayoutType_swiginit(self, _quickfix.new_OptPayoutType(*args))
    __swig_destroy__ = _quickfix.delete_OptPayoutType

# Register OptPayoutType in _quickfix:
_quickfix.OptPayoutType_swigregister(OptPayoutType)

class NoComplexEvents(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoComplexEvents_swiginit(self, _quickfix.new_NoComplexEvents(*args))
    __swig_destroy__ = _quickfix.delete_NoComplexEvents

# Register NoComplexEvents in _quickfix:
_quickfix.NoComplexEvents_swigregister(NoComplexEvents)

class ComplexEventType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexEventType_swiginit(self, _quickfix.new_ComplexEventType(*args))
    __swig_destroy__ = _quickfix.delete_ComplexEventType

# Register ComplexEventType in _quickfix:
_quickfix.ComplexEventType_swigregister(ComplexEventType)

class ComplexOptPayoutAmount(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexOptPayoutAmount_swiginit(self, _quickfix.new_ComplexOptPayoutAmount(*args))
    __swig_destroy__ = _quickfix.delete_ComplexOptPayoutAmount

# Register ComplexOptPayoutAmount in _quickfix:
_quickfix.ComplexOptPayoutAmount_swigregister(ComplexOptPayoutAmount)

class ComplexEventPrice(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexEventPrice_swiginit(self, _quickfix.new_ComplexEventPrice(*args))
    __swig_destroy__ = _quickfix.delete_ComplexEventPrice

# Register ComplexEventPrice in _quickfix:
_quickfix.ComplexEventPrice_swigregister(ComplexEventPrice)

class ComplexEventPriceBoundaryMethod(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexEventPriceBoundaryMethod_swiginit(self, _quickfix.new_ComplexEventPriceBoundaryMethod(*args))
    __swig_destroy__ = _quickfix.delete_ComplexEventPriceBoundaryMethod

# Register ComplexEventPriceBoundaryMethod in _quickfix:
_quickfix.ComplexEventPriceBoundaryMethod_swigregister(ComplexEventPriceBoundaryMethod)

class ComplexEventPriceBoundaryPrecision(DoubleField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexEventPriceBoundaryPrecision_swiginit(self, _quickfix.new_ComplexEventPriceBoundaryPrecision(*args))
    __swig_destroy__ = _quickfix.delete_ComplexEventPriceBoundaryPrecision

# Register ComplexEventPriceBoundaryPrecision in _quickfix:
_quickfix.ComplexEventPriceBoundaryPrecision_swigregister(ComplexEventPriceBoundaryPrecision)

class ComplexEventPriceTimeType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexEventPriceTimeType_swiginit(self, _quickfix.new_ComplexEventPriceTimeType(*args))
    __swig_destroy__ = _quickfix.delete_ComplexEventPriceTimeType

# Register ComplexEventPriceTimeType in _quickfix:
_quickfix.ComplexEventPriceTimeType_swigregister(ComplexEventPriceTimeType)

class ComplexEventCondition(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexEventCondition_swiginit(self, _quickfix.new_ComplexEventCondition(*args))
    __swig_destroy__ = _quickfix.delete_ComplexEventCondition

# Register ComplexEventCondition in _quickfix:
_quickfix.ComplexEventCondition_swigregister(ComplexEventCondition)

class NoComplexEventDates(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoComplexEventDates_swiginit(self, _quickfix.new_NoComplexEventDates(*args))
    __swig_destroy__ = _quickfix.delete_NoComplexEventDates

# Register NoComplexEventDates in _quickfix:
_quickfix.NoComplexEventDates_swigregister(NoComplexEventDates)

class ComplexEventStartDate(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexEventStartDate_swiginit(self, _quickfix.new_ComplexEventStartDate(*args))
    __swig_destroy__ = _quickfix.delete_ComplexEventStartDate

# Register ComplexEventStartDate in _quickfix:
_quickfix.ComplexEventStartDate_swigregister(ComplexEventStartDate)

class ComplexEventEndDate(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexEventEndDate_swiginit(self, _quickfix.new_ComplexEventEndDate(*args))
    __swig_destroy__ = _quickfix.delete_ComplexEventEndDate

# Register ComplexEventEndDate in _quickfix:
_quickfix.ComplexEventEndDate_swigregister(ComplexEventEndDate)

class NoComplexEventTimes(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoComplexEventTimes_swiginit(self, _quickfix.new_NoComplexEventTimes(*args))
    __swig_destroy__ = _quickfix.delete_NoComplexEventTimes

# Register NoComplexEventTimes in _quickfix:
_quickfix.NoComplexEventTimes_swigregister(NoComplexEventTimes)

class ComplexEventStartTime(UtcTimeOnlyField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexEventStartTime_swiginit(self, _quickfix.new_ComplexEventStartTime(*args))
    __swig_destroy__ = _quickfix.delete_ComplexEventStartTime

# Register ComplexEventStartTime in _quickfix:
_quickfix.ComplexEventStartTime_swigregister(ComplexEventStartTime)

class ComplexEventEndTime(UtcTimeOnlyField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ComplexEventEndTime_swiginit(self, _quickfix.new_ComplexEventEndTime(*args))
    __swig_destroy__ = _quickfix.delete_ComplexEventEndTime

# Register ComplexEventEndTime in _quickfix:
_quickfix.ComplexEventEndTime_swigregister(ComplexEventEndTime)

class StreamAsgnReqID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StreamAsgnReqID_swiginit(self, _quickfix.new_StreamAsgnReqID(*args))
    __swig_destroy__ = _quickfix.delete_StreamAsgnReqID

# Register StreamAsgnReqID in _quickfix:
_quickfix.StreamAsgnReqID_swigregister(StreamAsgnReqID)

class StreamAsgnReqType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StreamAsgnReqType_swiginit(self, _quickfix.new_StreamAsgnReqType(*args))
    __swig_destroy__ = _quickfix.delete_StreamAsgnReqType

# Register StreamAsgnReqType in _quickfix:
_quickfix.StreamAsgnReqType_swigregister(StreamAsgnReqType)

class NoAsgnReqs(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.NoAsgnReqs_swiginit(self, _quickfix.new_NoAsgnReqs(*args))
    __swig_destroy__ = _quickfix.delete_NoAsgnReqs

# Register NoAsgnReqs in _quickfix:
_quickfix.NoAsgnReqs_swigregister(NoAsgnReqs)

class MDStreamID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.MDStreamID_swiginit(self, _quickfix.new_MDStreamID(*args))
    __swig_destroy__ = _quickfix.delete_MDStreamID

# Register MDStreamID in _quickfix:
_quickfix.MDStreamID_swigregister(MDStreamID)

class StreamAsgnRptID(StringField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StreamAsgnRptID_swiginit(self, _quickfix.new_StreamAsgnRptID(*args))
    __swig_destroy__ = _quickfix.delete_StreamAsgnRptID

# Register StreamAsgnRptID in _quickfix:
_quickfix.StreamAsgnRptID_swigregister(StreamAsgnRptID)

class StreamAsgnRejReason(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StreamAsgnRejReason_swiginit(self, _quickfix.new_StreamAsgnRejReason(*args))
    __swig_destroy__ = _quickfix.delete_StreamAsgnRejReason

# Register StreamAsgnRejReason in _quickfix:
_quickfix.StreamAsgnRejReason_swigregister(StreamAsgnRejReason)

class StreamAsgnAckType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StreamAsgnAckType_swiginit(self, _quickfix.new_StreamAsgnAckType(*args))
    __swig_destroy__ = _quickfix.delete_StreamAsgnAckType

# Register StreamAsgnAckType in _quickfix:
_quickfix.StreamAsgnAckType_swigregister(StreamAsgnAckType)

class RelSymTransactTime(UtcTimeStampField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.RelSymTransactTime_swiginit(self, _quickfix.new_RelSymTransactTime(*args))
    __swig_destroy__ = _quickfix.delete_RelSymTransactTime

# Register RelSymTransactTime in _quickfix:
_quickfix.RelSymTransactTime_swigregister(RelSymTransactTime)

class StreamAsgnType(IntField):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.StreamAsgnType_swiginit(self, _quickfix.new_StreamAsgnType(*args))
    __swig_destroy__ = _quickfix.delete_StreamAsgnType

# Register StreamAsgnType in _quickfix:
_quickfix.StreamAsgnType_swigregister(StreamAsgnType)

class SessionID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SessionID_swiginit(self, _quickfix.new_SessionID(*args))

    def getBeginString(self):
        return _quickfix.SessionID_getBeginString(self)

    def getSenderCompID(self):
        return _quickfix.SessionID_getSenderCompID(self)

    def getTargetCompID(self):
        return _quickfix.SessionID_getTargetCompID(self)

    def getSessionQualifier(self):
        return _quickfix.SessionID_getSessionQualifier(self)

    def isFIXT(self):
        return _quickfix.SessionID_isFIXT(self)

    def toStringFrozen(self):
        return _quickfix.SessionID_toStringFrozen(self)

    def fromString(self, str):
        return _quickfix.SessionID_fromString(self, str)

    def toString(self, *args):
        return _quickfix.SessionID_toString(self, *args)

    def __invert__(self):
        return _quickfix.SessionID___invert__(self)

    def __str__(self):
        return _quickfix.SessionID___str__(self)
    __swig_destroy__ = _quickfix.delete_SessionID

# Register SessionID in _quickfix:
_quickfix.SessionID_swigregister(SessionID)
BeginString_FIXT11 = cvar.BeginString_FIXT11
BeginString_FIX50 = cvar.BeginString_FIX50
BeginString_FIX44 = cvar.BeginString_FIX44
BeginString_FIX43 = cvar.BeginString_FIX43
BeginString_FIX42 = cvar.BeginString_FIX42
BeginString_FIX41 = cvar.BeginString_FIX41
BeginString_FIX40 = cvar.BeginString_FIX40
SessionRejectReason_INVALID_TAG_NUMBER_TEXT = cvar.SessionRejectReason_INVALID_TAG_NUMBER_TEXT
SessionRejectReason_REQUIRED_TAG_MISSING_TEXT = cvar.SessionRejectReason_REQUIRED_TAG_MISSING_TEXT
SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT = cvar.SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE_TEXT
SessionRejectReason_UNDEFINED_TAG_TEXT = cvar.SessionRejectReason_UNDEFINED_TAG_TEXT
SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT = cvar.SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE_TEXT
SessionRejectReason_VALUE_IS_INCORRECT_TEXT = cvar.SessionRejectReason_VALUE_IS_INCORRECT_TEXT
SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT = cvar.SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE_TEXT
SessionRejectReason_DECRYPTION_PROBLEM_TEXT = cvar.SessionRejectReason_DECRYPTION_PROBLEM_TEXT
SessionRejectReason_SIGNATURE_PROBLEM_TEXT = cvar.SessionRejectReason_SIGNATURE_PROBLEM_TEXT
SessionRejectReason_COMPID_PROBLEM_TEXT = cvar.SessionRejectReason_COMPID_PROBLEM_TEXT
SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT = cvar.SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM_TEXT
SessionRejectReason_INVALID_MSGTYPE_TEXT = cvar.SessionRejectReason_INVALID_MSGTYPE_TEXT
SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT = cvar.SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE_TEXT
SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT = cvar.SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER_TEXT
SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT = cvar.SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP_TEXT
BusinessRejectReason_OTHER_TEXT = cvar.BusinessRejectReason_OTHER_TEXT
BusinessRejectReason_UNKNOWN_ID_TEXT = cvar.BusinessRejectReason_UNKNOWN_ID_TEXT
BusinessRejectReason_UNKNOWN_SECURITY_TEXT = cvar.BusinessRejectReason_UNKNOWN_SECURITY_TEXT
BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT = cvar.BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE_TEXT
BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT = cvar.BusinessRejectReason_APPLICATION_NOT_AVAILABLE_TEXT
BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT = cvar.BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING_TEXT
BusinessRejectReason_NOT_AUTHORIZED_TEXT = cvar.BusinessRejectReason_NOT_AUTHORIZED_TEXT
BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT = cvar.BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME_TEXT
MsgType_Heartbeat = cvar.MsgType_Heartbeat
MsgType_TestRequest = cvar.MsgType_TestRequest
MsgType_ResendRequest = cvar.MsgType_ResendRequest
MsgType_Reject = cvar.MsgType_Reject
MsgType_SequenceReset = cvar.MsgType_SequenceReset
MsgType_Logout = cvar.MsgType_Logout
MsgType_Logon = cvar.MsgType_Logon
MsgType_IOI = cvar.MsgType_IOI
MsgType_Advertisement = cvar.MsgType_Advertisement
MsgType_ExecutionReport = cvar.MsgType_ExecutionReport
MsgType_OrderCancelReject = cvar.MsgType_OrderCancelReject
MsgType_News = cvar.MsgType_News
MsgType_Email = cvar.MsgType_Email
MsgType_NewOrderSingle = cvar.MsgType_NewOrderSingle
MsgType_NewOrderList = cvar.MsgType_NewOrderList
MsgType_OrderCancelRequest = cvar.MsgType_OrderCancelRequest
MsgType_OrderCancelReplaceRequest = cvar.MsgType_OrderCancelReplaceRequest
MsgType_OrderStatusRequest = cvar.MsgType_OrderStatusRequest
MsgType_Allocation = cvar.MsgType_Allocation
MsgType_ListCancelRequest = cvar.MsgType_ListCancelRequest
MsgType_ListExecute = cvar.MsgType_ListExecute
MsgType_ListStatusRequest = cvar.MsgType_ListStatusRequest
MsgType_ListStatus = cvar.MsgType_ListStatus
MsgType_AllocationInstructionAck = cvar.MsgType_AllocationInstructionAck
MsgType_DontKnowTrade = cvar.MsgType_DontKnowTrade
MsgType_QuoteRequest = cvar.MsgType_QuoteRequest
MsgType_Quote = cvar.MsgType_Quote
MsgType_SettlementInstructions = cvar.MsgType_SettlementInstructions
MsgType_MarketDataRequest = cvar.MsgType_MarketDataRequest
MsgType_MarketDataSnapshotFullRefresh = cvar.MsgType_MarketDataSnapshotFullRefresh
MsgType_MarketDataIncrementalRefresh = cvar.MsgType_MarketDataIncrementalRefresh
MsgType_MarketDataRequestReject = cvar.MsgType_MarketDataRequestReject
MsgType_QuoteCancel = cvar.MsgType_QuoteCancel
MsgType_QuoteStatusRequest = cvar.MsgType_QuoteStatusRequest
MsgType_QuoteAcknowledgement = cvar.MsgType_QuoteAcknowledgement
MsgType_SecurityDefinitionRequest = cvar.MsgType_SecurityDefinitionRequest
MsgType_SecurityDefinition = cvar.MsgType_SecurityDefinition
MsgType_SecurityStatusRequest = cvar.MsgType_SecurityStatusRequest
MsgType_SecurityStatus = cvar.MsgType_SecurityStatus
MsgType_TradingSessionStatusRequest = cvar.MsgType_TradingSessionStatusRequest
MsgType_TradingSessionStatus = cvar.MsgType_TradingSessionStatus
MsgType_MassQuote = cvar.MsgType_MassQuote
MsgType_BusinessMessageReject = cvar.MsgType_BusinessMessageReject
MsgType_BidRequest = cvar.MsgType_BidRequest
MsgType_BidResponse = cvar.MsgType_BidResponse
MsgType_ListStrikePrice = cvar.MsgType_ListStrikePrice
MsgType_AllocationAck = cvar.MsgType_AllocationAck
MsgType_MassQuoteAcknowledgement = cvar.MsgType_MassQuoteAcknowledgement
MsgType_XMLnonFIX = cvar.MsgType_XMLnonFIX
MsgType_RegistrationInstructions = cvar.MsgType_RegistrationInstructions
MsgType_RegistrationInstructionsResponse = cvar.MsgType_RegistrationInstructionsResponse
MsgType_OrderMassCancelRequest = cvar.MsgType_OrderMassCancelRequest
MsgType_OrderMassCancelReport = cvar.MsgType_OrderMassCancelReport
MsgType_NewOrderCross = cvar.MsgType_NewOrderCross
MsgType_CrossOrderCancelRequest = cvar.MsgType_CrossOrderCancelRequest
MsgType_CrossOrderCancelReplaceRequest = cvar.MsgType_CrossOrderCancelReplaceRequest
MsgType_SecurityTypeRequest = cvar.MsgType_SecurityTypeRequest
MsgType_SecurityTypes = cvar.MsgType_SecurityTypes
MsgType_SecurityListRequest = cvar.MsgType_SecurityListRequest
MsgType_SecurityList = cvar.MsgType_SecurityList
MsgType_DerivativeSecurityListRequest = cvar.MsgType_DerivativeSecurityListRequest
MsgType_DerivativeSecurityList = cvar.MsgType_DerivativeSecurityList
MsgType_NewOrderMultileg = cvar.MsgType_NewOrderMultileg
MsgType_MultilegOrderCancelReplaceRequest = cvar.MsgType_MultilegOrderCancelReplaceRequest
MsgType_TradeCaptureReportRequest = cvar.MsgType_TradeCaptureReportRequest
MsgType_TradeCaptureReport = cvar.MsgType_TradeCaptureReport
MsgType_OrderMassStatusRequest = cvar.MsgType_OrderMassStatusRequest
MsgType_QuoteRequestReject = cvar.MsgType_QuoteRequestReject
MsgType_RFQRequest = cvar.MsgType_RFQRequest
MsgType_QuoteStatusReport = cvar.MsgType_QuoteStatusReport
MsgType_AllocationInstruction = cvar.MsgType_AllocationInstruction
MsgType_MultilegOrderCancelReplace = cvar.MsgType_MultilegOrderCancelReplace
MsgType_QuoteResponse = cvar.MsgType_QuoteResponse
MsgType_Confirmation = cvar.MsgType_Confirmation
MsgType_PositionMaintenanceRequest = cvar.MsgType_PositionMaintenanceRequest
MsgType_PositionMaintenanceReport = cvar.MsgType_PositionMaintenanceReport
MsgType_RequestForPositions = cvar.MsgType_RequestForPositions
MsgType_RequestForPositionsAck = cvar.MsgType_RequestForPositionsAck
MsgType_PositionReport = cvar.MsgType_PositionReport
MsgType_TradeCaptureReportRequestAck = cvar.MsgType_TradeCaptureReportRequestAck
MsgType_TradeCaptureReportAck = cvar.MsgType_TradeCaptureReportAck
MsgType_AllocationReport = cvar.MsgType_AllocationReport
MsgType_AllocationReportAck = cvar.MsgType_AllocationReportAck
MsgType_ConfirmationAck = cvar.MsgType_ConfirmationAck
MsgType_SettlementInstructionRequest = cvar.MsgType_SettlementInstructionRequest
MsgType_AssignmentReport = cvar.MsgType_AssignmentReport
MsgType_CollateralRequest = cvar.MsgType_CollateralRequest
MsgType_CollateralAssignment = cvar.MsgType_CollateralAssignment
MsgType_CollateralResponse = cvar.MsgType_CollateralResponse
MsgType_CollateralReport = cvar.MsgType_CollateralReport
MsgType_CollateralInquiry = cvar.MsgType_CollateralInquiry
MsgType_NetworkCounterpartySystemStatusRequest = cvar.MsgType_NetworkCounterpartySystemStatusRequest
MsgType_NetworkCounterpartySystemStatusResponse = cvar.MsgType_NetworkCounterpartySystemStatusResponse
MsgType_UserRequest = cvar.MsgType_UserRequest
MsgType_UserResponse = cvar.MsgType_UserResponse
MsgType_CollateralInquiryAck = cvar.MsgType_CollateralInquiryAck
MsgType_ConfirmationRequest = cvar.MsgType_ConfirmationRequest
MsgType_ContraryIntentionReport = cvar.MsgType_ContraryIntentionReport
MsgType_SecurityDefinitionUpdateReport = cvar.MsgType_SecurityDefinitionUpdateReport
MsgType_SecurityListUpdateReport = cvar.MsgType_SecurityListUpdateReport
MsgType_AdjustedPositionReport = cvar.MsgType_AdjustedPositionReport
MsgType_AllocationInstructionAlert = cvar.MsgType_AllocationInstructionAlert
MsgType_ExecutionAcknowledgement = cvar.MsgType_ExecutionAcknowledgement
MsgType_TradingSessionList = cvar.MsgType_TradingSessionList
MsgType_TradingSessionListRequest = cvar.MsgType_TradingSessionListRequest
MsgType_SettlementObligationReport = cvar.MsgType_SettlementObligationReport
MsgType_DerivativeSecurityListUpdateReport = cvar.MsgType_DerivativeSecurityListUpdateReport
MsgType_TradingSessionListUpdateReport = cvar.MsgType_TradingSessionListUpdateReport
MsgType_MarketDefinitionRequest = cvar.MsgType_MarketDefinitionRequest
MsgType_MarketDefinition = cvar.MsgType_MarketDefinition
MsgType_MarketDefinitionUpdateReport = cvar.MsgType_MarketDefinitionUpdateReport
MsgType_ApplicationMessageRequest = cvar.MsgType_ApplicationMessageRequest
MsgType_ApplicationMessageRequestAck = cvar.MsgType_ApplicationMessageRequestAck
MsgType_ApplicationMessageReport = cvar.MsgType_ApplicationMessageReport
MsgType_OrderMassActionReport = cvar.MsgType_OrderMassActionReport
MsgType_OrderMassActionRequest = cvar.MsgType_OrderMassActionRequest
MsgType_UserNotification = cvar.MsgType_UserNotification
MsgType_StreamAssignmentRequest = cvar.MsgType_StreamAssignmentRequest
MsgType_StreamAssignmentReport = cvar.MsgType_StreamAssignmentReport
MsgType_StreamAssignmentReportACK = cvar.MsgType_StreamAssignmentReportACK
PossDupFlag_NO = cvar.PossDupFlag_NO
PossDupFlag_YES = cvar.PossDupFlag_YES
PossResend_NO = cvar.PossResend_NO
PossResend_YES = cvar.PossResend_YES
EncryptMethod_NONE_OTHER = cvar.EncryptMethod_NONE_OTHER
EncryptMethod_PKCS = cvar.EncryptMethod_PKCS
EncryptMethod_DES = cvar.EncryptMethod_DES
EncryptMethod_PKCS_DES = cvar.EncryptMethod_PKCS_DES
EncryptMethod_PGP_DES = cvar.EncryptMethod_PGP_DES
EncryptMethod_PGP_DES_MD5 = cvar.EncryptMethod_PGP_DES_MD5
EncryptMethod_PEM_DES_MD5 = cvar.EncryptMethod_PEM_DES_MD5
EncryptMethod_NONE = cvar.EncryptMethod_NONE
GapFillFlag_NO = cvar.GapFillFlag_NO
GapFillFlag_YES = cvar.GapFillFlag_YES
ResetSeqNumFlag_NO = cvar.ResetSeqNumFlag_NO
ResetSeqNumFlag_YES = cvar.ResetSeqNumFlag_YES
MessageEncoding_ISO_2022_JP = cvar.MessageEncoding_ISO_2022_JP
MessageEncoding_EUC_JP = cvar.MessageEncoding_EUC_JP
MessageEncoding_SHIFT_JIS = cvar.MessageEncoding_SHIFT_JIS
MessageEncoding_UTF_8 = cvar.MessageEncoding_UTF_8
MessageEncoding_JIS = cvar.MessageEncoding_JIS
MessageEncoding_EUC = cvar.MessageEncoding_EUC
MessageEncoding_FOR_USING_SJIS = cvar.MessageEncoding_FOR_USING_SJIS
MessageEncoding_UNICODE = cvar.MessageEncoding_UNICODE
SessionRejectReason_INVALID_TAG_NUMBER = cvar.SessionRejectReason_INVALID_TAG_NUMBER
SessionRejectReason_REQUIRED_TAG_MISSING = cvar.SessionRejectReason_REQUIRED_TAG_MISSING
SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM = cvar.SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM
SessionRejectReason_INVALID_MSGTYPE = cvar.SessionRejectReason_INVALID_MSGTYPE
SessionRejectReason_XML_VALIDATION_ERROR = cvar.SessionRejectReason_XML_VALIDATION_ERROR
SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE = cvar.SessionRejectReason_TAG_APPEARS_MORE_THAN_ONCE
SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER = cvar.SessionRejectReason_TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER
SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER = cvar.SessionRejectReason_REPEATING_GROUP_FIELDS_OUT_OF_ORDER
SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP = cvar.SessionRejectReason_INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP
SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER = cvar.SessionRejectReason_NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER
SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE = cvar.SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE
SessionRejectReason_UNDEFINED_TAG = cvar.SessionRejectReason_UNDEFINED_TAG
SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE = cvar.SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE
SessionRejectReason_VALUE_IS_INCORRECT = cvar.SessionRejectReason_VALUE_IS_INCORRECT
SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE = cvar.SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE
SessionRejectReason_DECRYPTION_PROBLEM = cvar.SessionRejectReason_DECRYPTION_PROBLEM
SessionRejectReason_SIGNATURE_PROBLEM = cvar.SessionRejectReason_SIGNATURE_PROBLEM
SessionRejectReason_COMPID_PROBLEM = cvar.SessionRejectReason_COMPID_PROBLEM
SessionRejectReason_OTHER = cvar.SessionRejectReason_OTHER
MsgDirection_RECEIVE = cvar.MsgDirection_RECEIVE
MsgDirection_SEND = cvar.MsgDirection_SEND
TestMessageIndicator_YES = cvar.TestMessageIndicator_YES
TestMessageIndicator_NO = cvar.TestMessageIndicator_NO
ApplVerID_FIX27 = cvar.ApplVerID_FIX27
ApplVerID_FIX30 = cvar.ApplVerID_FIX30
ApplVerID_FIX40 = cvar.ApplVerID_FIX40
ApplVerID_FIX41 = cvar.ApplVerID_FIX41
ApplVerID_FIX42 = cvar.ApplVerID_FIX42
ApplVerID_FIX43 = cvar.ApplVerID_FIX43
ApplVerID_FIX44 = cvar.ApplVerID_FIX44
ApplVerID_FIX50 = cvar.ApplVerID_FIX50
ApplVerID_FIX50SP1 = cvar.ApplVerID_FIX50SP1
ApplVerID_FIX50SP2 = cvar.ApplVerID_FIX50SP2
AdvSide_BUY = cvar.AdvSide_BUY
AdvSide_SELL = cvar.AdvSide_SELL
AdvSide_TRADE = cvar.AdvSide_TRADE
AdvSide_CROSS = cvar.AdvSide_CROSS
AdvTransType_CANCEL = cvar.AdvTransType_CANCEL
AdvTransType_NEW = cvar.AdvTransType_NEW
AdvTransType_REPLACE = cvar.AdvTransType_REPLACE
CommType_PER_SHARE = cvar.CommType_PER_SHARE
CommType_PERCENTAGE = cvar.CommType_PERCENTAGE
CommType_ABSOLUTE = cvar.CommType_ABSOLUTE
CommType_PER_BOND = cvar.CommType_PER_BOND
CommType_5 = cvar.CommType_5
CommType_4 = cvar.CommType_4
CommType_PER_UNIT = cvar.CommType_PER_UNIT
CommType_POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER = cvar.CommType_POINTS_PER_BOND_OR_CONTRACT_SUPPLY_CONTRACTMULTIPLIER
CommType_PERCENT = cvar.CommType_PERCENT
CommType_PERCENTAGE_WAIVED_4 = cvar.CommType_PERCENTAGE_WAIVED_4
CommType_PERCENTAGE_WAIVED_5 = cvar.CommType_PERCENTAGE_WAIVED_5
CommType_POINTS_PER_BOND_OR_CONTRACT = cvar.CommType_POINTS_PER_BOND_OR_CONTRACT
ExecInst_STAY_ON_OFFERSIDE = cvar.ExecInst_STAY_ON_OFFERSIDE
ExecInst_NOT_HELD = cvar.ExecInst_NOT_HELD
ExecInst_WORK = cvar.ExecInst_WORK
ExecInst_GO_ALONG = cvar.ExecInst_GO_ALONG
ExecInst_OVER_THE_DAY = cvar.ExecInst_OVER_THE_DAY
ExecInst_HELD = cvar.ExecInst_HELD
ExecInst_PARTICIPATE_DONT_INITIATE = cvar.ExecInst_PARTICIPATE_DONT_INITIATE
ExecInst_STRICT_SCALE = cvar.ExecInst_STRICT_SCALE
ExecInst_TRY_TO_SCALE = cvar.ExecInst_TRY_TO_SCALE
ExecInst_STAY_ON_BIDSIDE = cvar.ExecInst_STAY_ON_BIDSIDE
ExecInst_NO_CROSS = cvar.ExecInst_NO_CROSS
ExecInst_OK_TO_CROSS = cvar.ExecInst_OK_TO_CROSS
ExecInst_CALL_FIRST = cvar.ExecInst_CALL_FIRST
ExecInst_PERCENT_OF_VOLUME = cvar.ExecInst_PERCENT_OF_VOLUME
ExecInst_DO_NOT_INCREASE = cvar.ExecInst_DO_NOT_INCREASE
ExecInst_DO_NOT_REDUCE = cvar.ExecInst_DO_NOT_REDUCE
ExecInst_ALL_OR_NONE = cvar.ExecInst_ALL_OR_NONE
ExecInst_INSTITUTIONS_ONLY = cvar.ExecInst_INSTITUTIONS_ONLY
ExecInst_LAST_PEG = cvar.ExecInst_LAST_PEG
ExecInst_MID_PRICE_PEG = cvar.ExecInst_MID_PRICE_PEG
ExecInst_NON_NEGOTIABLE = cvar.ExecInst_NON_NEGOTIABLE
ExecInst_OPENING_PEG = cvar.ExecInst_OPENING_PEG
ExecInst_MARKET_PEG = cvar.ExecInst_MARKET_PEG
ExecInst_PRIMARY_PEG = cvar.ExecInst_PRIMARY_PEG
ExecInst_SUSPEND = cvar.ExecInst_SUSPEND
ExecInst_CUSTOMER_DISPLAY_INSTRUCTION = cvar.ExecInst_CUSTOMER_DISPLAY_INSTRUCTION
ExecInst_NETTING = cvar.ExecInst_NETTING
ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = cvar.ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER
ExecInst_PEG_TO_VWAP = cvar.ExecInst_PEG_TO_VWAP
ExecInst_TRYTOSTOP = cvar.ExecInst_TRYTOSTOP
ExecInst_MIDPRCPEG = cvar.ExecInst_MIDPRCPEG
ExecInst_MARKPEG = cvar.ExecInst_MARKPEG
ExecInst_CANCELONSYSFAIL = cvar.ExecInst_CANCELONSYSFAIL
ExecInst_PRIMPEG = cvar.ExecInst_PRIMPEG
ExecInst_CUSTDISPINST = cvar.ExecInst_CUSTDISPINST
ExecInst_PEGVWAP = cvar.ExecInst_PEGVWAP
ExecInst_TRADEALONG = cvar.ExecInst_TRADEALONG
ExecInst_PERCVOL = cvar.ExecInst_PERCVOL
ExecInst_STAYOFFER = cvar.ExecInst_STAYOFFER
ExecInst_OVERDAY = cvar.ExecInst_OVERDAY
ExecInst_PARTNOTINIT = cvar.ExecInst_PARTNOTINIT
ExecInst_STRICTSCALE = cvar.ExecInst_STRICTSCALE
ExecInst_TRYTOSCALE = cvar.ExecInst_TRYTOSCALE
ExecInst_STAYBID = cvar.ExecInst_STAYBID
ExecInst_NOCROSS = cvar.ExecInst_NOCROSS
ExecInst_OPENPEG = cvar.ExecInst_OPENPEG
ExecInst_CALLFIRST = cvar.ExecInst_CALLFIRST
ExecInst_NONNEGO = cvar.ExecInst_NONNEGO
ExecInst_DNI = cvar.ExecInst_DNI
ExecInst_DNR = cvar.ExecInst_DNR
ExecInst_AON = cvar.ExecInst_AON
ExecInst_RESTATEONSYSFAIL = cvar.ExecInst_RESTATEONSYSFAIL
ExecInst_INSTITONLY = cvar.ExecInst_INSTITONLY
ExecInst_RESTATEONTRADINGHALT = cvar.ExecInst_RESTATEONTRADINGHALT
ExecInst_CANCELONTRADINGHALT = cvar.ExecInst_CANCELONTRADINGHALT
ExecInst_LASTPEG = cvar.ExecInst_LASTPEG
ExecInst_GOALONG = cvar.ExecInst_GOALONG
ExecInst_OKCROSS = cvar.ExecInst_OKCROSS
ExecInst_NOTHELD = cvar.ExecInst_NOTHELD
ExecInst_REINSTATE_ON_SYSTEM_FAILURE = cvar.ExecInst_REINSTATE_ON_SYSTEM_FAILURE
ExecInst_REINSTATE_ON_TRADING_HALT = cvar.ExecInst_REINSTATE_ON_TRADING_HALT
ExecInst_CANCEL_ON_TRADING_HALT = cvar.ExecInst_CANCEL_ON_TRADING_HALT
ExecInst_CANCEL_ON_SYSTEM_FAILURE = cvar.ExecInst_CANCEL_ON_SYSTEM_FAILURE
ExecInst_TRADE_ALONG = cvar.ExecInst_TRADE_ALONG
ExecInst_TRY_TO_STOP = cvar.ExecInst_TRY_TO_STOP
ExecInst_CANCEL_IF_NOT_BEST = cvar.ExecInst_CANCEL_IF_NOT_BEST
ExecInst_TRAILING_STOP_PEG = cvar.ExecInst_TRAILING_STOP_PEG
ExecInst_STRICT_LIMIT = cvar.ExecInst_STRICT_LIMIT
ExecInst_IGNORE_PRICE_VALIDITY_CHECKS = cvar.ExecInst_IGNORE_PRICE_VALIDITY_CHECKS
ExecInst_PEG_TO_LIMIT_PRICE = cvar.ExecInst_PEG_TO_LIMIT_PRICE
ExecInst_WORK_TO_TARGET_STRATEGY = cvar.ExecInst_WORK_TO_TARGET_STRATEGY
ExecInst_STAY_ON_OFFER_SIDE = cvar.ExecInst_STAY_ON_OFFER_SIDE
ExecInst_STAY_ON_BID_SIDE = cvar.ExecInst_STAY_ON_BID_SIDE
ExecInst_REINSTATE_ON_SYSTEM_FAILUE = cvar.ExecInst_REINSTATE_ON_SYSTEM_FAILUE
ExecInst_INTERMARKET_SWEEP = cvar.ExecInst_INTERMARKET_SWEEP
ExecInst_EXTERNAL_ROUTING_ALLOWED = cvar.ExecInst_EXTERNAL_ROUTING_ALLOWED
ExecInst_EXTERNAL_ROUTING_NOT_ALLOWED = cvar.ExecInst_EXTERNAL_ROUTING_NOT_ALLOWED
ExecInst_IMBALANCE_ONLY = cvar.ExecInst_IMBALANCE_ONLY
ExecInst_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE = cvar.ExecInst_SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE
ExecInst_BEST_EXECUTION = cvar.ExecInst_BEST_EXECUTION
ExecInst_SUSPEND_ON_SYSTEM_FAILURE = cvar.ExecInst_SUSPEND_ON_SYSTEM_FAILURE
ExecInst_SUSPEND_ON_TRADING_HALT = cvar.ExecInst_SUSPEND_ON_TRADING_HALT
ExecInst_REINSTATE_ON_CONNECTION_LOSS = cvar.ExecInst_REINSTATE_ON_CONNECTION_LOSS
ExecInst_CANCEL_ON_CONNECTION_LOSS = cvar.ExecInst_CANCEL_ON_CONNECTION_LOSS
ExecInst_SUSPEND_ON_CONNECTION_LOSS = cvar.ExecInst_SUSPEND_ON_CONNECTION_LOSS
ExecInst_RELEASE_FROM_SUSPENSION = cvar.ExecInst_RELEASE_FROM_SUSPENSION
ExecInst_EXECUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED = cvar.ExecInst_EXECUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED
ExecInst_EXECUTE_AS_DURATION_NEUTRAL = cvar.ExecInst_EXECUTE_AS_DURATION_NEUTRAL
ExecInst_EXECUTE_AS_FX_NEUTRAL = cvar.ExecInst_EXECUTE_AS_FX_NEUTRAL
ExecTransType_NEW = cvar.ExecTransType_NEW
ExecTransType_CANCEL = cvar.ExecTransType_CANCEL
ExecTransType_CORRECT = cvar.ExecTransType_CORRECT
ExecTransType_STATUS = cvar.ExecTransType_STATUS
HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION = cvar.HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION
HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK = cvar.HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK
HandlInst_MANUAL_ORDER_BEST_EXECUTION = cvar.HandlInst_MANUAL_ORDER_BEST_EXECUTION
IDSource_CUSIP = cvar.IDSource_CUSIP
IDSource_SEDOL = cvar.IDSource_SEDOL
IDSource_QUIK = cvar.IDSource_QUIK
IDSource_ISIN_NUMBER = cvar.IDSource_ISIN_NUMBER
IDSource_RIC_CODE = cvar.IDSource_RIC_CODE
IDSource_ISO_CURRENCY_CODE = cvar.IDSource_ISO_CURRENCY_CODE
IDSource_ISO_COUNTRY_CODE = cvar.IDSource_ISO_COUNTRY_CODE
IDSource_EXCHANGE_SYMBOL = cvar.IDSource_EXCHANGE_SYMBOL
IDSource_CONSOLIDATED_TAPE_ASSOCIATION = cvar.IDSource_CONSOLIDATED_TAPE_ASSOCIATION
IOIOthSvc_AUTEX = cvar.IOIOthSvc_AUTEX
IOIOthSvc_BRIDGE = cvar.IOIOthSvc_BRIDGE
IOIQltyInd_HIGH = cvar.IOIQltyInd_HIGH
IOIQltyInd_LOW = cvar.IOIQltyInd_LOW
IOIQltyInd_MEDIUM = cvar.IOIQltyInd_MEDIUM
IOIShares_LARGE = cvar.IOIShares_LARGE
IOIShares_MEDIUM = cvar.IOIShares_MEDIUM
IOIShares_SMALL = cvar.IOIShares_SMALL
IOITransType_CANCEL = cvar.IOITransType_CANCEL
IOITransType_NEW = cvar.IOITransType_NEW
IOITransType_REPLACE = cvar.IOITransType_REPLACE
LastCapacity_AGENT = cvar.LastCapacity_AGENT
LastCapacity_CROSS_AS_AGENT = cvar.LastCapacity_CROSS_AS_AGENT
LastCapacity_CROSS_AS_PRINCIPAL = cvar.LastCapacity_CROSS_AS_PRINCIPAL
LastCapacity_PRINCIPAL = cvar.LastCapacity_PRINCIPAL
OrdStatus_NEW = cvar.OrdStatus_NEW
OrdStatus_PARTIALLY_FILLED = cvar.OrdStatus_PARTIALLY_FILLED
OrdStatus_FILLED = cvar.OrdStatus_FILLED
OrdStatus_DONE_FOR_DAY = cvar.OrdStatus_DONE_FOR_DAY
OrdStatus_CANCELED = cvar.OrdStatus_CANCELED
OrdStatus_REPLACED = cvar.OrdStatus_REPLACED
OrdStatus_PENDING_CANCEL_REPLACE = cvar.OrdStatus_PENDING_CANCEL_REPLACE
OrdStatus_STOPPED = cvar.OrdStatus_STOPPED
OrdStatus_REJECTED = cvar.OrdStatus_REJECTED
OrdStatus_SUSPENDED = cvar.OrdStatus_SUSPENDED
OrdStatus_PENDING_NEW = cvar.OrdStatus_PENDING_NEW
OrdStatus_CALCULATED = cvar.OrdStatus_CALCULATED
OrdStatus_EXPIRED = cvar.OrdStatus_EXPIRED
OrdStatus_PENDING_CANCEL = cvar.OrdStatus_PENDING_CANCEL
OrdStatus_ACCEPTED_FOR_BIDDING = cvar.OrdStatus_ACCEPTED_FOR_BIDDING
OrdStatus_PENDING_REPLACE = cvar.OrdStatus_PENDING_REPLACE
OrdType_MARKET = cvar.OrdType_MARKET
OrdType_LIMIT = cvar.OrdType_LIMIT
OrdType_STOP = cvar.OrdType_STOP
OrdType_STOP_LIMIT = cvar.OrdType_STOP_LIMIT
OrdType_MARKET_ON_CLOSE = cvar.OrdType_MARKET_ON_CLOSE
OrdType_WITH_OR_WITHOUT = cvar.OrdType_WITH_OR_WITHOUT
OrdType_LIMIT_OR_BETTER = cvar.OrdType_LIMIT_OR_BETTER
OrdType_LIMIT_WITH_OR_WITHOUT = cvar.OrdType_LIMIT_WITH_OR_WITHOUT
OrdType_ON_BASIS = cvar.OrdType_ON_BASIS
OrdType_ON_CLOSE = cvar.OrdType_ON_CLOSE
OrdType_LIMIT_ON_CLOSE = cvar.OrdType_LIMIT_ON_CLOSE
OrdType_FOREX = cvar.OrdType_FOREX
OrdType_PREVIOUSLY_QUOTED = cvar.OrdType_PREVIOUSLY_QUOTED
OrdType_PREVIOUSLY_INDICATED = cvar.OrdType_PREVIOUSLY_INDICATED
OrdType_PEGGED = cvar.OrdType_PEGGED
OrdType_FOREX_C = cvar.OrdType_FOREX_C
OrdType_FOREX_F = cvar.OrdType_FOREX_F
OrdType_FOREX_G = cvar.OrdType_FOREX_G
OrdType_FOREX_H = cvar.OrdType_FOREX_H
OrdType_FUNARI = cvar.OrdType_FUNARI
OrdType_MARKET_IF_TOUCHED = cvar.OrdType_MARKET_IF_TOUCHED
OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT = cvar.OrdType_MARKET_WITH_LEFTOVER_AS_LIMIT
OrdType_PREVIOUS_FUND_VALUATION_POINT = cvar.OrdType_PREVIOUS_FUND_VALUATION_POINT
OrdType_NEXT_FUND_VALUATION_POINT = cvar.OrdType_NEXT_FUND_VALUATION_POINT
OrdType_FOREX_MARKET = cvar.OrdType_FOREX_MARKET
OrdType_FOREX_LIMIT = cvar.OrdType_FOREX_LIMIT
OrdType_FOREX_SWAP = cvar.OrdType_FOREX_SWAP
OrdType_FOREX_PREVIOUSLY_QUOTED = cvar.OrdType_FOREX_PREVIOUSLY_QUOTED
OrdType_MARKET_WITH_LEFT_OVER_AS_LIMIT = cvar.OrdType_MARKET_WITH_LEFT_OVER_AS_LIMIT
OrdType_COUNTER_ORDER_SELECTION = cvar.OrdType_COUNTER_ORDER_SELECTION
Rule80A_AGENCY_SINGLE_ORDER = cvar.Rule80A_AGENCY_SINGLE_ORDER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM_ORG = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM_ORG
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_ORG = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_ORG
Rule80A_INDIVIDUAL_INVESTOR_SINGLE_ORDER = cvar.Rule80A_INDIVIDUAL_INVESTOR_SINGLE_ORDER
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER
Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY = cvar.Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY
Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER = cvar.Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER
Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY = cvar.Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY
Rule80A_SHORT_EXEMPT_TRANSACTION_B = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_B
Rule80A_REGISTERED_EQUITY_MARKET_MAKER_TRADES = cvar.Rule80A_REGISTERED_EQUITY_MARKET_MAKER_TRADES
Rule80A_SHORT_EXEMPT_TRANSACTION_F = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_F
Rule80A_SHORT_EXEMPT_TRANSACTION_H = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_H
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE
Rule80A_COMPETING_DEALER_TRADES_O = cvar.Rule80A_COMPETING_DEALER_TRADES_O
Rule80A_PRINCIPAL = cvar.Rule80A_PRINCIPAL
Rule80A_COMPETING_DEALER_TRADES_R = cvar.Rule80A_COMPETING_DEALER_TRADES_R
Rule80A_SPECIALIST_TRADES = cvar.Rule80A_SPECIALIST_TRADES
Rule80A_COMPETING_DEALER_TRADES_T = cvar.Rule80A_COMPETING_DEALER_TRADES_T
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_NOT_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_NOT_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_NON_MEMBER_COMPETING_MARKET_MAKER = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_NON_MEMBER_COMPETING_MARKET_MAKER
Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL = cvar.Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_PRINCIPAL
Rule80A_PROPRIETARY_TRANSACTIONS_FOR_COMPETING_MARKET_MAKER_THAT_IS_AFFILIATED_WITH_THE_CLEARING_MEMBER = cvar.Rule80A_PROPRIETARY_TRANSACTIONS_FOR_COMPETING_MARKET_MAKER_THAT_IS_AFFILIATED_WITH_THE_CLEARING_MEMBER
Rule80A_TRANSACTIONS_FOR_THE_ACCOUNT_OF_A_NON_MEMBER_COMPETING_MARKET_MAKER = cvar.Rule80A_TRANSACTIONS_FOR_THE_ACCOUNT_OF_A_NON_MEMBER_COMPETING_MARKET_MAKER
Rule80A_TRANSACTIONS_FOR_THE_ACCOUNT_OF_AN_UNAFFILIATED_MEMBERS_COMPETING_MARKET_MAKER = cvar.Rule80A_TRANSACTIONS_FOR_THE_ACCOUNT_OF_AN_UNAFFILIATED_MEMBERS_COMPETING_MARKET_MAKER
Side_BUY = cvar.Side_BUY
Side_SELL = cvar.Side_SELL
Side_BUY_MINUS = cvar.Side_BUY_MINUS
Side_SELL_PLUS = cvar.Side_SELL_PLUS
Side_SELL_SHORT = cvar.Side_SELL_SHORT
Side_SELL_SHORT_EXEMPT = cvar.Side_SELL_SHORT_EXEMPT
Side_UNDISCLOSED = cvar.Side_UNDISCLOSED
Side_CROSS = cvar.Side_CROSS
Side_CROSS_SHORT = cvar.Side_CROSS_SHORT
Side_AS_DEFINED = cvar.Side_AS_DEFINED
Side_OPPOSITE = cvar.Side_OPPOSITE
Side_CROSS_SHORT_EXEMPT = cvar.Side_CROSS_SHORT_EXEMPT
Side_SUBSCRIBE = cvar.Side_SUBSCRIBE
Side_REDEEM = cvar.Side_REDEEM
Side_LEND = cvar.Side_LEND
Side_BORROW = cvar.Side_BORROW
Side_CROSS_SHORT_EXXMPT = cvar.Side_CROSS_SHORT_EXXMPT
TimeInForce_DAY = cvar.TimeInForce_DAY
TimeInForce_GOOD_TILL_CANCEL = cvar.TimeInForce_GOOD_TILL_CANCEL
TimeInForce_AT_THE_OPENING = cvar.TimeInForce_AT_THE_OPENING
TimeInForce_IMMEDIATE_OR_CANCEL = cvar.TimeInForce_IMMEDIATE_OR_CANCEL
TimeInForce_FILL_OR_KILL = cvar.TimeInForce_FILL_OR_KILL
TimeInForce_GOOD_TILL_CROSSING = cvar.TimeInForce_GOOD_TILL_CROSSING
TimeInForce_GOOD_TILL_DATE = cvar.TimeInForce_GOOD_TILL_DATE
TimeInForce_AT_THE_CLOSE = cvar.TimeInForce_AT_THE_CLOSE
TimeInForce_GOOD_THROUGH_CROSSING = cvar.TimeInForce_GOOD_THROUGH_CROSSING
TimeInForce_AT_CROSSING = cvar.TimeInForce_AT_CROSSING
Urgency_NORMAL = cvar.Urgency_NORMAL
Urgency_FLASH = cvar.Urgency_FLASH
Urgency_BACKGROUND = cvar.Urgency_BACKGROUND
SettlmntTyp_REGULAR = cvar.SettlmntTyp_REGULAR
SettlmntTyp_CASH = cvar.SettlmntTyp_CASH
SettlmntTyp_NEXT_DAY = cvar.SettlmntTyp_NEXT_DAY
SettlmntTyp_T_PLUS_2 = cvar.SettlmntTyp_T_PLUS_2
SettlmntTyp_T_PLUS_3 = cvar.SettlmntTyp_T_PLUS_3
SettlmntTyp_T_PLUS_4 = cvar.SettlmntTyp_T_PLUS_4
SettlmntTyp_FUTURE = cvar.SettlmntTyp_FUTURE
SettlmntTyp_WHEN_ISSUED = cvar.SettlmntTyp_WHEN_ISSUED
SettlmntTyp_SELLERS_OPTION = cvar.SettlmntTyp_SELLERS_OPTION
SettlmntTyp_T_PLUS_5 = cvar.SettlmntTyp_T_PLUS_5
SettlmntTyp_T_PLUS_1 = cvar.SettlmntTyp_T_PLUS_1
SettlmntTyp_WHEN_AND_IF_ISSUED = cvar.SettlmntTyp_WHEN_AND_IF_ISSUED
SymbolSfx_EUCP_WITH_LUMP_SUM_INTEREST_RATHER_THAN_DISCOUNT_PRICE = cvar.SymbolSfx_EUCP_WITH_LUMP_SUM_INTEREST_RATHER_THAN_DISCOUNT_PRICE
SymbolSfx_WHEN_ISSUED_FOR_A_SECURITY_TO_BE_REISSUED_UNDER_AN_OLD_CUSIP_OR_ISIN = cvar.SymbolSfx_WHEN_ISSUED_FOR_A_SECURITY_TO_BE_REISSUED_UNDER_AN_OLD_CUSIP_OR_ISIN
AllocTransType_NEW = cvar.AllocTransType_NEW
AllocTransType_REPLACE = cvar.AllocTransType_REPLACE
AllocTransType_CANCEL = cvar.AllocTransType_CANCEL
AllocTransType_PRELIMINARY = cvar.AllocTransType_PRELIMINARY
AllocTransType_CALCULATED = cvar.AllocTransType_CALCULATED
AllocTransType_CALCULATED_WITHOUT_PRELIMINARY = cvar.AllocTransType_CALCULATED_WITHOUT_PRELIMINARY
AllocTransType_REVERSAL = cvar.AllocTransType_REVERSAL
OpenClose_CLOSE = cvar.OpenClose_CLOSE
OpenClose_OPEN = cvar.OpenClose_OPEN
ProcessCode_REGULAR = cvar.ProcessCode_REGULAR
ProcessCode_SOFT_DOLLAR = cvar.ProcessCode_SOFT_DOLLAR
ProcessCode_STEP_IN = cvar.ProcessCode_STEP_IN
ProcessCode_STEP_OUT = cvar.ProcessCode_STEP_OUT
ProcessCode_SOFT_DOLLAR_STEP_IN = cvar.ProcessCode_SOFT_DOLLAR_STEP_IN
ProcessCode_SOFT_DOLLAR_STEP_OUT = cvar.ProcessCode_SOFT_DOLLAR_STEP_OUT
ProcessCode_PLAN_SPONSOR = cvar.ProcessCode_PLAN_SPONSOR
AllocStatus_ACCEPTED = cvar.AllocStatus_ACCEPTED
AllocStatus_REJECTED = cvar.AllocStatus_REJECTED
AllocStatus_PARTIAL_ACCEPT = cvar.AllocStatus_PARTIAL_ACCEPT
AllocStatus_RECEIVED = cvar.AllocStatus_RECEIVED
AllocStatus_BLOCK_LEVEL_REJECT = cvar.AllocStatus_BLOCK_LEVEL_REJECT
AllocStatus_ACCOUNT_LEVEL_REJECT = cvar.AllocStatus_ACCOUNT_LEVEL_REJECT
AllocStatus_INCOMPLETE = cvar.AllocStatus_INCOMPLETE
AllocStatus_REJECTED_BY_INTERMEDIARY = cvar.AllocStatus_REJECTED_BY_INTERMEDIARY
AllocStatus_ALLOCATION_PENDING = cvar.AllocStatus_ALLOCATION_PENDING
AllocStatus_REVERSED = cvar.AllocStatus_REVERSED
AllocRejCode_UNKNOWN_ACCOUNT = cvar.AllocRejCode_UNKNOWN_ACCOUNT
AllocRejCode_INCORRECT_QUANTITY = cvar.AllocRejCode_INCORRECT_QUANTITY
AllocRejCode_INCORRECT_AVERAGE_PRICE = cvar.AllocRejCode_INCORRECT_AVERAGE_PRICE
AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC = cvar.AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC
AllocRejCode_COMMISSION_DIFFERENCE = cvar.AllocRejCode_COMMISSION_DIFFERENCE
AllocRejCode_UNKNOWN_ORDERID = cvar.AllocRejCode_UNKNOWN_ORDERID
AllocRejCode_UNKNOWN_LISTID = cvar.AllocRejCode_UNKNOWN_LISTID
AllocRejCode_OTHER = cvar.AllocRejCode_OTHER
AllocRejCode_INCORRECT_ALLOCATED_QUANTITY = cvar.AllocRejCode_INCORRECT_ALLOCATED_QUANTITY
AllocRejCode_CALCULATION_DIFFERENCE = cvar.AllocRejCode_CALCULATION_DIFFERENCE
AllocRejCode_UNKNOWN_OR_STALE_EXECID = cvar.AllocRejCode_UNKNOWN_OR_STALE_EXECID
AllocRejCode_MISMATCHED_DATA_VALUE = cvar.AllocRejCode_MISMATCHED_DATA_VALUE
AllocRejCode_UNKNOWN_CLORDID = cvar.AllocRejCode_UNKNOWN_CLORDID
AllocRejCode_WAREHOUSE_REQUEST_REJECTED = cvar.AllocRejCode_WAREHOUSE_REQUEST_REJECTED
AllocRejCode_INCORRECT_AVERAGEG_PRICE = cvar.AllocRejCode_INCORRECT_AVERAGEG_PRICE
AllocRejCode_MISMATCHED_DATA = cvar.AllocRejCode_MISMATCHED_DATA
AllocRejCode_OTHER_7 = cvar.AllocRejCode_OTHER_7
AllocRejCode_OTHER_99 = cvar.AllocRejCode_OTHER_99
EmailType_NEW = cvar.EmailType_NEW
EmailType_REPLY = cvar.EmailType_REPLY
EmailType_ADMIN_REPLY = cvar.EmailType_ADMIN_REPLY
ExDestination_NONE = cvar.ExDestination_NONE
ExDestination_POSIT = cvar.ExDestination_POSIT
CxlRejReason_TOO_LATE_TO_CANCEL = cvar.CxlRejReason_TOO_LATE_TO_CANCEL
CxlRejReason_UNKNOWN_ORDER = cvar.CxlRejReason_UNKNOWN_ORDER
CxlRejReason_BROKER_OPTION = cvar.CxlRejReason_BROKER_OPTION
CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS = cvar.CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS
CxlRejReason_DUPLICATE_CLORDID_RECEIVED = cvar.CxlRejReason_DUPLICATE_CLORDID_RECEIVED
CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER = cvar.CxlRejReason_ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER
CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST = cvar.CxlRejReason_UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST
CxlRejReason_BROKER = cvar.CxlRejReason_BROKER
CxlRejReason_ORIGORDMODTIME = cvar.CxlRejReason_ORIGORDMODTIME
CxlRejReason_DUPLICATE_CLORDID = cvar.CxlRejReason_DUPLICATE_CLORDID
CxlRejReason_OTHER = cvar.CxlRejReason_OTHER
CxlRejReason_INVALID_PRICE_INCREMENT = cvar.CxlRejReason_INVALID_PRICE_INCREMENT
CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE = cvar.CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE
CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND = cvar.CxlRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND
OrdRejReason_BROKER_OPTION = cvar.OrdRejReason_BROKER_OPTION
OrdRejReason_UNKNOWN_SYMBOL = cvar.OrdRejReason_UNKNOWN_SYMBOL
OrdRejReason_EXCHANGE_CLOSED = cvar.OrdRejReason_EXCHANGE_CLOSED
OrdRejReason_ORDER_EXCEEDS_LIMIT = cvar.OrdRejReason_ORDER_EXCEEDS_LIMIT
OrdRejReason_TOO_LATE_TO_ENTER = cvar.OrdRejReason_TOO_LATE_TO_ENTER
OrdRejReason_UNKNOWN_ORDER = cvar.OrdRejReason_UNKNOWN_ORDER
OrdRejReason_DUPLICATE_ORDER = cvar.OrdRejReason_DUPLICATE_ORDER
OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER = cvar.OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER
OrdRejReason_STALE_ORDER = cvar.OrdRejReason_STALE_ORDER
OrdRejReason_TRADE_ALONG_REQUIRED = cvar.OrdRejReason_TRADE_ALONG_REQUIRED
OrdRejReason_INVALID_INVESTOR_ID = cvar.OrdRejReason_INVALID_INVESTOR_ID
OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC = cvar.OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC
OrdRejReason_SURVEILLENCE_OPTION = cvar.OrdRejReason_SURVEILLENCE_OPTION
OrdRejReason_BROKER = cvar.OrdRejReason_BROKER
OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC12_SURVEILLENCE_OPTION = cvar.OrdRejReason_UNSUPPORTED_ORDER_CHARACTERISTIC12_SURVEILLENCE_OPTION
OrdRejReason_INCORRECT_QUANTITY = cvar.OrdRejReason_INCORRECT_QUANTITY
OrdRejReason_INCORRECT_ALLOCATED_QUANTITY = cvar.OrdRejReason_INCORRECT_ALLOCATED_QUANTITY
OrdRejReason_UNKNOWN_ACCOUNT = cvar.OrdRejReason_UNKNOWN_ACCOUNT
OrdRejReason_OTHER = cvar.OrdRejReason_OTHER
OrdRejReason_INVALID_PRICE_INCREMENT = cvar.OrdRejReason_INVALID_PRICE_INCREMENT
OrdRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND = cvar.OrdRejReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND
IOIQualifier_ALL_OR_NONE = cvar.IOIQualifier_ALL_OR_NONE
IOIQualifier_AT_THE_CLOSE = cvar.IOIQualifier_AT_THE_CLOSE
IOIQualifier_IN_TOUCH_WITH = cvar.IOIQualifier_IN_TOUCH_WITH
IOIQualifier_LIMIT = cvar.IOIQualifier_LIMIT
IOIQualifier_MORE_BEHIND = cvar.IOIQualifier_MORE_BEHIND
IOIQualifier_AT_THE_OPEN = cvar.IOIQualifier_AT_THE_OPEN
IOIQualifier_TAKING_A_POSITION = cvar.IOIQualifier_TAKING_A_POSITION
IOIQualifier_CURRENT_QUOTE = cvar.IOIQualifier_CURRENT_QUOTE
IOIQualifier_PORTFOLIO_SHOW_N = cvar.IOIQualifier_PORTFOLIO_SHOW_N
IOIQualifier_THROUGH_THE_DAY = cvar.IOIQualifier_THROUGH_THE_DAY
IOIQualifier_VERSUS = cvar.IOIQualifier_VERSUS
IOIQualifier_INDICATION = cvar.IOIQualifier_INDICATION
IOIQualifier_CROSSING_OPPORTUNITY = cvar.IOIQualifier_CROSSING_OPPORTUNITY
IOIQualifier_AT_THE_MARKET = cvar.IOIQualifier_AT_THE_MARKET
IOIQualifier_AT_THE_MIDPOINT = cvar.IOIQualifier_AT_THE_MIDPOINT
IOIQualifier_PRE_OPEN = cvar.IOIQualifier_PRE_OPEN
IOIQualifier_READY_TO_TRADE = cvar.IOIQualifier_READY_TO_TRADE
IOIQualifier_PORTFOLIO_SHOWN = cvar.IOIQualifier_PORTFOLIO_SHOWN
IOIQualifier_VWAP = cvar.IOIQualifier_VWAP
IOIQualifier_MARKET_ON_CLOSE = cvar.IOIQualifier_MARKET_ON_CLOSE
IOIQualifier_INDIDCATION = cvar.IOIQualifier_INDIDCATION
ReportToExch_NO = cvar.ReportToExch_NO
ReportToExch_YES = cvar.ReportToExch_YES
LocateReqd_NO = cvar.LocateReqd_NO
LocateReqd_YES = cvar.LocateReqd_YES
ForexReq_NO = cvar.ForexReq_NO
ForexReq_YES = cvar.ForexReq_YES
CxlType_FULL_REMAINING_QUANTITY = cvar.CxlType_FULL_REMAINING_QUANTITY
CxlType_PARTIAL_CANCEL = cvar.CxlType_PARTIAL_CANCEL
DKReason_UNKNOWN_SYMBOL = cvar.DKReason_UNKNOWN_SYMBOL
DKReason_WRONG_SIDE = cvar.DKReason_WRONG_SIDE
DKReason_QUANTITY_EXCEEDS_ORDER = cvar.DKReason_QUANTITY_EXCEEDS_ORDER
DKReason_NO_MATCHING_ORDER = cvar.DKReason_NO_MATCHING_ORDER
DKReason_PRICE_EXCEEDS_LIMIT = cvar.DKReason_PRICE_EXCEEDS_LIMIT
DKReason_OTHER = cvar.DKReason_OTHER
DKReason_CALCULATION_DIFFERENCE = cvar.DKReason_CALCULATION_DIFFERENCE
IOINaturalFlag_NO = cvar.IOINaturalFlag_NO
IOINaturalFlag_YES = cvar.IOINaturalFlag_YES
MiscFeeType_REGULATORY = cvar.MiscFeeType_REGULATORY
MiscFeeType_TAX = cvar.MiscFeeType_TAX
MiscFeeType_LOCAL_COMMISSION = cvar.MiscFeeType_LOCAL_COMMISSION
MiscFeeType_EXCHANGE_FEES = cvar.MiscFeeType_EXCHANGE_FEES
MiscFeeType_STAMP = cvar.MiscFeeType_STAMP
MiscFeeType_LEVY = cvar.MiscFeeType_LEVY
MiscFeeType_OTHER = cvar.MiscFeeType_OTHER
MiscFeeType_MARKUP = cvar.MiscFeeType_MARKUP
MiscFeeType_CONSUMPTION_TAX = cvar.MiscFeeType_CONSUMPTION_TAX
MiscFeeType_PER_TRANSACTION = cvar.MiscFeeType_PER_TRANSACTION
MiscFeeType_CONVERSION = cvar.MiscFeeType_CONVERSION
MiscFeeType_AGENT = cvar.MiscFeeType_AGENT
MiscFeeType_TRANSFER_FEE = cvar.MiscFeeType_TRANSFER_FEE
MiscFeeType_SECURITY_LENDING = cvar.MiscFeeType_SECURITY_LENDING
ExecType_NEW = cvar.ExecType_NEW
ExecType_PARTIAL_FILL = cvar.ExecType_PARTIAL_FILL
ExecType_FILL = cvar.ExecType_FILL
ExecType_DONE_FOR_DAY = cvar.ExecType_DONE_FOR_DAY
ExecType_CANCELLED = cvar.ExecType_CANCELLED
ExecType_REPLACE = cvar.ExecType_REPLACE
ExecType_PENDING_CANCEL_REPLACE = cvar.ExecType_PENDING_CANCEL_REPLACE
ExecType_STOPPED = cvar.ExecType_STOPPED
ExecType_REJECTED = cvar.ExecType_REJECTED
ExecType_SUSPENDED = cvar.ExecType_SUSPENDED
ExecType_PENDING_NEW = cvar.ExecType_PENDING_NEW
ExecType_CALCULATED = cvar.ExecType_CALCULATED
ExecType_EXPIRED = cvar.ExecType_EXPIRED
ExecType_CANCELED = cvar.ExecType_CANCELED
ExecType_PENDING_CANCEL = cvar.ExecType_PENDING_CANCEL
ExecType_RESTATED = cvar.ExecType_RESTATED
ExecType_PENDING_REPLACE = cvar.ExecType_PENDING_REPLACE
ExecType_TRADE = cvar.ExecType_TRADE
ExecType_TRADE_CORRECT = cvar.ExecType_TRADE_CORRECT
ExecType_TRADE_CANCEL = cvar.ExecType_TRADE_CANCEL
ExecType_ORDER_STATUS = cvar.ExecType_ORDER_STATUS
ExecType_REPLACED = cvar.ExecType_REPLACED
ExecType_TRADE_IN_A_CLEARING_HOLD = cvar.ExecType_TRADE_IN_A_CLEARING_HOLD
ExecType_TRADE_HAS_BEEN_RELEASED_TO_CLEARING = cvar.ExecType_TRADE_HAS_BEEN_RELEASED_TO_CLEARING
ExecType_TRIGGERED_OR_ACTIVATED_BY_SYSTEM = cvar.ExecType_TRIGGERED_OR_ACTIVATED_BY_SYSTEM
SettlCurrFxRateCalc_MULTIPLY = cvar.SettlCurrFxRateCalc_MULTIPLY
SettlCurrFxRateCalc_DIVIDE = cvar.SettlCurrFxRateCalc_DIVIDE
SettlInstMode_DEFAULT = cvar.SettlInstMode_DEFAULT
SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED = cvar.SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED
SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING = cvar.SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING
SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_STANDING = cvar.SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_STANDING
SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT = cvar.SettlInstMode_SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT
SettlInstMode_REQUEST_REJECT = cvar.SettlInstMode_REQUEST_REJECT
SettlInstTransType_CANCEL = cvar.SettlInstTransType_CANCEL
SettlInstTransType_NEW = cvar.SettlInstTransType_NEW
SettlInstTransType_REPLACE = cvar.SettlInstTransType_REPLACE
SettlInstTransType_RESTATE = cvar.SettlInstTransType_RESTATE
SettlInstSource_BROKERS_INSTRUCTIONS = cvar.SettlInstSource_BROKERS_INSTRUCTIONS
SettlInstSource_INSTITUTIONS_INSTRUCTIONS = cvar.SettlInstSource_INSTITUTIONS_INSTRUCTIONS
SettlInstSource_INVESTOR = cvar.SettlInstSource_INVESTOR
SettlLocation_CEDEL = cvar.SettlLocation_CEDEL
SettlLocation_DEPOSITORY_TRUST_COMPANY = cvar.SettlLocation_DEPOSITORY_TRUST_COMPANY
SettlLocation_EUROCLEAR = cvar.SettlLocation_EUROCLEAR
SettlLocation_FEDERAL_BOOK_ENTRY = cvar.SettlLocation_FEDERAL_BOOK_ENTRY
SettlLocation_LOCAL_MARKET_SETTLE_LOCATION = cvar.SettlLocation_LOCAL_MARKET_SETTLE_LOCATION
SettlLocation_PHYSICAL = cvar.SettlLocation_PHYSICAL
SettlLocation_PARTICIPANT_TRUST_COMPANY = cvar.SettlLocation_PARTICIPANT_TRUST_COMPANY
SecurityType_BANKERS_ACCEPTANCE = cvar.SecurityType_BANKERS_ACCEPTANCE
SecurityType_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_CERTIFICATE_OF_DEPOSIT
SecurityType_COLLATERALIZE_MORTGAGE_OBLIGATION = cvar.SecurityType_COLLATERALIZE_MORTGAGE_OBLIGATION
SecurityType_CORPORATE_BOND = cvar.SecurityType_CORPORATE_BOND
SecurityType_COMMERCIAL_PAPER = cvar.SecurityType_COMMERCIAL_PAPER
SecurityType_CORPORATE_PRIVATE_PLACEMENT = cvar.SecurityType_CORPORATE_PRIVATE_PLACEMENT
SecurityType_COMMON_STOCK = cvar.SecurityType_COMMON_STOCK
SecurityType_FEDERAL_HOUSING_AUTHORITY = cvar.SecurityType_FEDERAL_HOUSING_AUTHORITY
SecurityType_FEDERAL_HOME_LOAN = cvar.SecurityType_FEDERAL_HOME_LOAN
SecurityType_FEDERAL_NATIONAL_MORTGAGE_ASSOCIATION = cvar.SecurityType_FEDERAL_NATIONAL_MORTGAGE_ASSOCIATION
SecurityType_FOREIGN_EXCHANGE_CONTRACT = cvar.SecurityType_FOREIGN_EXCHANGE_CONTRACT
SecurityType_FUTURE = cvar.SecurityType_FUTURE
SecurityType_GOVERNMENT_NATIONAL_MORTGAGE_ASSOCIATION = cvar.SecurityType_GOVERNMENT_NATIONAL_MORTGAGE_ASSOCIATION
SecurityType_TREASURIES_PLUS_AGENCY_DEBENTURE = cvar.SecurityType_TREASURIES_PLUS_AGENCY_DEBENTURE
SecurityType_MUTUAL_FUND = cvar.SecurityType_MUTUAL_FUND
SecurityType_MORTGAGE_INTEREST_ONLY = cvar.SecurityType_MORTGAGE_INTEREST_ONLY
SecurityType_MORTGAGE_PRINCIPLE_ONLY = cvar.SecurityType_MORTGAGE_PRINCIPLE_ONLY
SecurityType_MORTGAGE_PRIVATE_PLACEMENT = cvar.SecurityType_MORTGAGE_PRIVATE_PLACEMENT
SecurityType_MISCELLANEOUS_PASS_THRU = cvar.SecurityType_MISCELLANEOUS_PASS_THRU
SecurityType_MUNICIPAL_BOND = cvar.SecurityType_MUNICIPAL_BOND
SecurityType_NO_ISITC_SECURITY_TYPE = cvar.SecurityType_NO_ISITC_SECURITY_TYPE
SecurityType_OPTION = cvar.SecurityType_OPTION
SecurityType_PREFERRED_STOCK = cvar.SecurityType_PREFERRED_STOCK
SecurityType_REPURCHASE_AGREEMENT = cvar.SecurityType_REPURCHASE_AGREEMENT
SecurityType_REVERSE_REPURCHASE_AGREEMENT = cvar.SecurityType_REVERSE_REPURCHASE_AGREEMENT
SecurityType_STUDENT_LOAN_MARKETING_ASSOCIATION = cvar.SecurityType_STUDENT_LOAN_MARKETING_ASSOCIATION
SecurityType_TIME_DEPOSIT = cvar.SecurityType_TIME_DEPOSIT
SecurityType_US_TREASURY_BILL = cvar.SecurityType_US_TREASURY_BILL
SecurityType_WARRANT = cvar.SecurityType_WARRANT
SecurityType_CATS_TIGERS_LIONS = cvar.SecurityType_CATS_TIGERS_LIONS
SecurityType_WILDCARD_ENTRY = cvar.SecurityType_WILDCARD_ENTRY
SecurityType_CONVERTIBLE_BOND = cvar.SecurityType_CONVERTIBLE_BOND
SecurityType_MORTGAGE_IOETTE = cvar.SecurityType_MORTGAGE_IOETTE
SecurityType_MORTGAGE_PRINCIPAL_ONLY = cvar.SecurityType_MORTGAGE_PRINCIPAL_ONLY
SecurityType_VARIABLE_RATE_DEMAND_NOTE = cvar.SecurityType_VARIABLE_RATE_DEMAND_NOTE
SecurityType_PLAZOS_FIJOS = cvar.SecurityType_PLAZOS_FIJOS
SecurityType_PROMISSORY_NOTE = cvar.SecurityType_PROMISSORY_NOTE
SecurityType_OVERNIGHT = cvar.SecurityType_OVERNIGHT
SecurityType_MEDIUM_TERM_NOTES = cvar.SecurityType_MEDIUM_TERM_NOTES
SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER = cvar.SecurityType_TAX_EXEMPT_COMMERCIAL_PAPER
SecurityType_AMENDED_RESTATED = cvar.SecurityType_AMENDED_RESTATED
SecurityType_BRIDGE_LOAN = cvar.SecurityType_BRIDGE_LOAN
SecurityType_LETTER_OF_CREDIT = cvar.SecurityType_LETTER_OF_CREDIT
SecurityType_SWING_LINE_FACILITY = cvar.SecurityType_SWING_LINE_FACILITY
SecurityType_DEBTOR_IN_POSSESSION = cvar.SecurityType_DEBTOR_IN_POSSESSION
SecurityType_DEFAULTED = cvar.SecurityType_DEFAULTED
SecurityType_WITHDRAWN = cvar.SecurityType_WITHDRAWN
SecurityType_LIQUIDITY_NOTE = cvar.SecurityType_LIQUIDITY_NOTE
SecurityType_MATURED = cvar.SecurityType_MATURED
SecurityType_DEPOSIT_NOTES = cvar.SecurityType_DEPOSIT_NOTES
SecurityType_RETIRED = cvar.SecurityType_RETIRED
SecurityType_BANK_NOTES = cvar.SecurityType_BANK_NOTES
SecurityType_BILL_OF_EXCHANGES = cvar.SecurityType_BILL_OF_EXCHANGES
SecurityType_CALL_LOANS = cvar.SecurityType_CALL_LOANS
SecurityType_REPLACED = cvar.SecurityType_REPLACED
SecurityType_MANDATORY_TENDER = cvar.SecurityType_MANDATORY_TENDER
SecurityType_REVOLVER_TERM_LOAN = cvar.SecurityType_REVOLVER_TERM_LOAN
SecurityType_SHORT_TERM_LOAN_NOTE = cvar.SecurityType_SHORT_TERM_LOAN_NOTE
SecurityType_MISCELLANEOUS_PASS_THROUGH = cvar.SecurityType_MISCELLANEOUS_PASS_THROUGH
SecurityType_TO_BE_ANNOUNCED = cvar.SecurityType_TO_BE_ANNOUNCED
SecurityType_OTHER_ANTICIPATION_NOTES_BAN_GAN_ETC = cvar.SecurityType_OTHER_ANTICIPATION_NOTES_BAN_GAN_ETC
SecurityType_CERTIFICATE_OF_PARTICIPATION = cvar.SecurityType_CERTIFICATE_OF_PARTICIPATION
SecurityType_MORTGAGE_BACKED_SECURITIES = cvar.SecurityType_MORTGAGE_BACKED_SECURITIES
SecurityType_REVENUE_BONDS = cvar.SecurityType_REVENUE_BONDS
SecurityType_SPECIAL_ASSESSMENT = cvar.SecurityType_SPECIAL_ASSESSMENT
SecurityType_SPECIAL_OBLIGATION = cvar.SecurityType_SPECIAL_OBLIGATION
SecurityType_SPECIAL_TAX = cvar.SecurityType_SPECIAL_TAX
SecurityType_TAX_ANTICIPATION_NOTE = cvar.SecurityType_TAX_ANTICIPATION_NOTE
SecurityType_TAX_ALLOCATION = cvar.SecurityType_TAX_ALLOCATION
SecurityType_CERTIFICATE_OF_OBLIGATION = cvar.SecurityType_CERTIFICATE_OF_OBLIGATION
SecurityType_GENERAL_OBLIGATION_BONDS = cvar.SecurityType_GENERAL_OBLIGATION_BONDS
SecurityType_MULTI_LEG_INSTRUMENT = cvar.SecurityType_MULTI_LEG_INSTRUMENT
SecurityType_TAX_REVENUE_ANTICIPATION_NOTE = cvar.SecurityType_TAX_REVENUE_ANTICIPATION_NOTE
SecurityType_NO_SECURITY_TYPE = cvar.SecurityType_NO_SECURITY_TYPE
SecurityType_EXTENDED_COMM_NOTE = cvar.SecurityType_EXTENDED_COMM_NOTE
SecurityType_AGENCY_POOLS = cvar.SecurityType_AGENCY_POOLS
SecurityType_ASSET_BACKED_SECURITIES = cvar.SecurityType_ASSET_BACKED_SECURITIES
SecurityType_CORP_MORTGAGE_BACKED_SECURITIES = cvar.SecurityType_CORP_MORTGAGE_BACKED_SECURITIES
SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION = cvar.SecurityType_COLLATERALIZED_MORTGAGE_OBLIGATION
SecurityType_IOETTE_MORTGAGE = cvar.SecurityType_IOETTE_MORTGAGE
SecurityType_REVENUE_ANTICIPATION_NOTE = cvar.SecurityType_REVENUE_ANTICIPATION_NOTE
SecurityType_REVOLVER_LOAN = cvar.SecurityType_REVOLVER_LOAN
SecurityType_FEDERAL_AGENCY_COUPON = cvar.SecurityType_FEDERAL_AGENCY_COUPON
SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE = cvar.SecurityType_FEDERAL_AGENCY_DISCOUNT_NOTE
SecurityType_PRIVATE_EXPORT_FUNDING = cvar.SecurityType_PRIVATE_EXPORT_FUNDING
SecurityType_DUAL_CURRENCY = cvar.SecurityType_DUAL_CURRENCY
SecurityType_INDEXED_LINKED = cvar.SecurityType_INDEXED_LINKED
SecurityType_YANKEE_CORPORATE_BOND = cvar.SecurityType_YANKEE_CORPORATE_BOND
SecurityType_BRADY_BOND = cvar.SecurityType_BRADY_BOND
SecurityType_US_TREASURY_BOND = cvar.SecurityType_US_TREASURY_BOND
SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE = cvar.SecurityType_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE
SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES = cvar.SecurityType_TREASURY_INFLATION_PROTECTED_SECURITIES
SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE = cvar.SecurityType_PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE
SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE = cvar.SecurityType_PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE
SecurityType_US_TREASURY_NOTE_BOND = cvar.SecurityType_US_TREASURY_NOTE_BOND
SecurityType_TERM_LOAN = cvar.SecurityType_TERM_LOAN
SecurityType_STRUCTURED_NOTES = cvar.SecurityType_STRUCTURED_NOTES
SecurityType_EURO_SUPRANATIONAL_COUPONS = cvar.SecurityType_EURO_SUPRANATIONAL_COUPONS
SecurityType_USD_SUPRANATIONAL_COUPONS = cvar.SecurityType_USD_SUPRANATIONAL_COUPONS
SecurityType_EURO_CORPORATE_BOND = cvar.SecurityType_EURO_CORPORATE_BOND
SecurityType_EURO_SOVEREIGNS = cvar.SecurityType_EURO_SOVEREIGNS
SecurityType_US_TREASURY_NOTE_UST = cvar.SecurityType_US_TREASURY_NOTE_UST
SecurityType_US_TREASURY_BILL_USTB = cvar.SecurityType_US_TREASURY_BILL_USTB
SecurityType_US_TREASURY_NOTE_TNOTE = cvar.SecurityType_US_TREASURY_NOTE_TNOTE
SecurityType_US_TREASURY_BILL_TBILL = cvar.SecurityType_US_TREASURY_BILL_TBILL
SecurityType_REPURCHASE = cvar.SecurityType_REPURCHASE
SecurityType_FORWARD = cvar.SecurityType_FORWARD
SecurityType_BUY_SELLBACK = cvar.SecurityType_BUY_SELLBACK
SecurityType_SECURITIES_LOAN = cvar.SecurityType_SECURITIES_LOAN
SecurityType_SECURITIES_PLEDGE = cvar.SecurityType_SECURITIES_PLEDGE
SecurityType_EURO_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_EURO_CERTIFICATE_OF_DEPOSIT
SecurityType_EURO_COMMERCIAL_PAPER = cvar.SecurityType_EURO_COMMERCIAL_PAPER
SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT = cvar.SecurityType_YANKEE_CERTIFICATE_OF_DEPOSIT
SecurityType_PFANDBRIEFE = cvar.SecurityType_PFANDBRIEFE
SecurityType_OTHER_ANTICIPATION_NOTES = cvar.SecurityType_OTHER_ANTICIPATION_NOTES
SecurityType_MULTILEG_INSTRUMENT = cvar.SecurityType_MULTILEG_INSTRUMENT
SecurityType_OPTIONS_ON_FUTURES = cvar.SecurityType_OPTIONS_ON_FUTURES
SecurityType_OPTIONS_ON_PHYSICAL = cvar.SecurityType_OPTIONS_ON_PHYSICAL
SecurityType_CASH = cvar.SecurityType_CASH
SecurityType_EURO_CORPORATE_FLOATING_RATE_NOTES = cvar.SecurityType_EURO_CORPORATE_FLOATING_RATE_NOTES
SecurityType_US_CORPORATE_FLOATING_RATE_NOTES = cvar.SecurityType_US_CORPORATE_FLOATING_RATE_NOTES
SecurityType_CREDIT_DEFAULT_SWAP = cvar.SecurityType_CREDIT_DEFAULT_SWAP
SecurityType_INTEREST_RATE_SWAP = cvar.SecurityType_INTEREST_RATE_SWAP
SecurityType_OPTIONS_ON_COMBO = cvar.SecurityType_OPTIONS_ON_COMBO
SecurityType_CANADIAN_TREASURY_NOTES = cvar.SecurityType_CANADIAN_TREASURY_NOTES
SecurityType_CANADIAN_TREASURY_BILLS = cvar.SecurityType_CANADIAN_TREASURY_BILLS
SecurityType_CANADIAN_PROVINCIAL_BONDS = cvar.SecurityType_CANADIAN_PROVINCIAL_BONDS
SecurityType_TREASURY_BILL = cvar.SecurityType_TREASURY_BILL
SecurityType_BANK_DEPOSITORY_NOTE = cvar.SecurityType_BANK_DEPOSITORY_NOTE
SecurityType_CANADIAN_MONEY_MARKETS = cvar.SecurityType_CANADIAN_MONEY_MARKETS
SecurityType_SECURED_LIQUIDITY_NOTE = cvar.SecurityType_SECURED_LIQUIDITY_NOTE
SecurityType_TERM_LIQUIDITY_NOTE = cvar.SecurityType_TERM_LIQUIDITY_NOTE
SecurityType_CANADIAN_MORTGAGE_BONDS = cvar.SecurityType_CANADIAN_MORTGAGE_BONDS
SecurityType_TAXABLE_MUNICIPAL_CP = cvar.SecurityType_TAXABLE_MUNICIPAL_CP
SecurityType_WILDCARD_ENTRY_FOR_USE_ON_SECURITY_DEFINITION_REQUEST = cvar.SecurityType_WILDCARD_ENTRY_FOR_USE_ON_SECURITY_DEFINITION_REQUEST
SecurityType_NON_DELIVERABLE_FORWARD = cvar.SecurityType_NON_DELIVERABLE_FORWARD
SecurityType_FX_SPOT = cvar.SecurityType_FX_SPOT
SecurityType_FX_FORWARD = cvar.SecurityType_FX_FORWARD
SecurityType_FX_SWAP = cvar.SecurityType_FX_SWAP
StandInstDbType_OTHER = cvar.StandInstDbType_OTHER
StandInstDbType_DTC_SID = cvar.StandInstDbType_DTC_SID
StandInstDbType_THOMSON_ALERT = cvar.StandInstDbType_THOMSON_ALERT
StandInstDbType_A_GLOBAL_CUSTODIAN = cvar.StandInstDbType_A_GLOBAL_CUSTODIAN
StandInstDbType_ACCOUNTNET = cvar.StandInstDbType_ACCOUNTNET
SettlDeliveryType_FREE = cvar.SettlDeliveryType_FREE
SettlDeliveryType_VERSUS_PAYMENT = cvar.SettlDeliveryType_VERSUS_PAYMENT
SettlDeliveryType_VERSUS_PAYMENT_DELIVER = cvar.SettlDeliveryType_VERSUS_PAYMENT_DELIVER
SettlDeliveryType_FREE_DELIVER = cvar.SettlDeliveryType_FREE_DELIVER
SettlDeliveryType_TRI_PARTY = cvar.SettlDeliveryType_TRI_PARTY
SettlDeliveryType_HOLD_IN_CUSTODY = cvar.SettlDeliveryType_HOLD_IN_CUSTODY
AllocLinkType_F_X_NETTING = cvar.AllocLinkType_F_X_NETTING
AllocLinkType_F_X_SWAP = cvar.AllocLinkType_F_X_SWAP
AllocLinkType_FX_NETTING = cvar.AllocLinkType_FX_NETTING
AllocLinkType_FX_SWAP = cvar.AllocLinkType_FX_SWAP
PutOrCall_PUT = cvar.PutOrCall_PUT
PutOrCall_CALL = cvar.PutOrCall_CALL
CoveredOrUncovered_COVERED = cvar.CoveredOrUncovered_COVERED
CoveredOrUncovered_UNCOVERED = cvar.CoveredOrUncovered_UNCOVERED
CustomerOrFirm_CUSTOMER = cvar.CustomerOrFirm_CUSTOMER
CustomerOrFirm_FIRM = cvar.CustomerOrFirm_FIRM
NotifyBrokerOfCredit_NO = cvar.NotifyBrokerOfCredit_NO
NotifyBrokerOfCredit_YES = cvar.NotifyBrokerOfCredit_YES
AllocHandlInst_MATCH = cvar.AllocHandlInst_MATCH
AllocHandlInst_FORWARD = cvar.AllocHandlInst_FORWARD
AllocHandlInst_FORWARD_AND_MATCH = cvar.AllocHandlInst_FORWARD_AND_MATCH
RoutingType_TARGET_FIRM = cvar.RoutingType_TARGET_FIRM
RoutingType_TARGET_LIST = cvar.RoutingType_TARGET_LIST
RoutingType_BLOCK_FIRM = cvar.RoutingType_BLOCK_FIRM
RoutingType_BLOCK_LIST = cvar.RoutingType_BLOCK_LIST
Benchmark_CURVE = cvar.Benchmark_CURVE
Benchmark_5_YR = cvar.Benchmark_5_YR
Benchmark_OLD_5 = cvar.Benchmark_OLD_5
Benchmark_10_YR = cvar.Benchmark_10_YR
Benchmark_OLD_10 = cvar.Benchmark_OLD_10
Benchmark_30_YR = cvar.Benchmark_30_YR
Benchmark_OLD_30 = cvar.Benchmark_OLD_30
Benchmark_3_MO_LIBOR = cvar.Benchmark_3_MO_LIBOR
Benchmark_6_MO_LIBOR = cvar.Benchmark_6_MO_LIBOR
SubscriptionRequestType_SNAPSHOT = cvar.SubscriptionRequestType_SNAPSHOT
SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES = cvar.SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES
SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST = cvar.SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST
MDUpdateType_FULL_REFRESH = cvar.MDUpdateType_FULL_REFRESH
MDUpdateType_INCREMENTAL_REFRESH = cvar.MDUpdateType_INCREMENTAL_REFRESH
AggregatedBook_NO = cvar.AggregatedBook_NO
AggregatedBook_YES = cvar.AggregatedBook_YES
MDEntryType_BID = cvar.MDEntryType_BID
MDEntryType_OFFER = cvar.MDEntryType_OFFER
MDEntryType_TRADE = cvar.MDEntryType_TRADE
MDEntryType_INDEX_VALUE = cvar.MDEntryType_INDEX_VALUE
MDEntryType_OPENING_PRICE = cvar.MDEntryType_OPENING_PRICE
MDEntryType_CLOSING_PRICE = cvar.MDEntryType_CLOSING_PRICE
MDEntryType_SETTLEMENT_PRICE = cvar.MDEntryType_SETTLEMENT_PRICE
MDEntryType_TRADING_SESSION_HIGH_PRICE = cvar.MDEntryType_TRADING_SESSION_HIGH_PRICE
MDEntryType_TRADING_SESSION_LOW_PRICE = cvar.MDEntryType_TRADING_SESSION_LOW_PRICE
MDEntryType_TRADING_SESSION_VWAP_PRICE = cvar.MDEntryType_TRADING_SESSION_VWAP_PRICE
MDEntryType_IMBALANCE = cvar.MDEntryType_IMBALANCE
MDEntryType_TRADE_VOLUME = cvar.MDEntryType_TRADE_VOLUME
MDEntryType_OPEN_INTEREST = cvar.MDEntryType_OPEN_INTEREST
MDEntryType_COMPOSITE_UNDERLYING_PRICE = cvar.MDEntryType_COMPOSITE_UNDERLYING_PRICE
MDEntryType_SIMULATED_SELL_PRICE = cvar.MDEntryType_SIMULATED_SELL_PRICE
MDEntryType_SIMULATED_BUY_PRICE = cvar.MDEntryType_SIMULATED_BUY_PRICE
MDEntryType_MARGIN_RATE = cvar.MDEntryType_MARGIN_RATE
MDEntryType_MID_PRICE = cvar.MDEntryType_MID_PRICE
MDEntryType_EMPTY_BOOK = cvar.MDEntryType_EMPTY_BOOK
MDEntryType_SETTLE_HIGH_PRICE = cvar.MDEntryType_SETTLE_HIGH_PRICE
MDEntryType_SETTLE_LOW_PRICE = cvar.MDEntryType_SETTLE_LOW_PRICE
MDEntryType_PRIOR_SETTLE_PRICE = cvar.MDEntryType_PRIOR_SETTLE_PRICE
MDEntryType_SESSION_HIGH_BID = cvar.MDEntryType_SESSION_HIGH_BID
MDEntryType_SESSION_LOW_OFFER = cvar.MDEntryType_SESSION_LOW_OFFER
MDEntryType_EARLY_PRICES = cvar.MDEntryType_EARLY_PRICES
MDEntryType_AUCTION_CLEARING_PRICE = cvar.MDEntryType_AUCTION_CLEARING_PRICE
MDEntryType_SWAP_VALUE_FACTOR = cvar.MDEntryType_SWAP_VALUE_FACTOR
MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS = cvar.MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS
MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS = cvar.MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_LONG_POSITIONS
MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS = cvar.MDEntryType_DAILY_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS
MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS = cvar.MDEntryType_CUMULATIVE_VALUE_ADJUSTMENT_FOR_SHORT_POSITIONS
MDEntryType_RECOVERY_RATE = cvar.MDEntryType_RECOVERY_RATE
MDEntryType_RECOVERY_RATE_FOR_LONG = cvar.MDEntryType_RECOVERY_RATE_FOR_LONG
MDEntryType_RECOVERY_RATE_FOR_SHORT = cvar.MDEntryType_RECOVERY_RATE_FOR_SHORT
MDEntryType_FIXING_PRICE = cvar.MDEntryType_FIXING_PRICE
MDEntryType_CASH_RATE = cvar.MDEntryType_CASH_RATE
TickDirection_PLUS_TICK = cvar.TickDirection_PLUS_TICK
TickDirection_ZERO_PLUS_TICK = cvar.TickDirection_ZERO_PLUS_TICK
TickDirection_MINUS_TICK = cvar.TickDirection_MINUS_TICK
TickDirection_ZERO_MINUS_TICK = cvar.TickDirection_ZERO_MINUS_TICK
QuoteCondition_OPEN = cvar.QuoteCondition_OPEN
QuoteCondition_CLOSED = cvar.QuoteCondition_CLOSED
QuoteCondition_EXCHANGE_BEST = cvar.QuoteCondition_EXCHANGE_BEST
QuoteCondition_CONSOLIDATED_BEST = cvar.QuoteCondition_CONSOLIDATED_BEST
QuoteCondition_LOCKED = cvar.QuoteCondition_LOCKED
QuoteCondition_CROSSED = cvar.QuoteCondition_CROSSED
QuoteCondition_DEPTH = cvar.QuoteCondition_DEPTH
QuoteCondition_FAST_TRADING = cvar.QuoteCondition_FAST_TRADING
QuoteCondition_NON_FIRM = cvar.QuoteCondition_NON_FIRM
QuoteCondition_OPEN_ACTIVE = cvar.QuoteCondition_OPEN_ACTIVE
QuoteCondition_CLOSED_INACTIVE = cvar.QuoteCondition_CLOSED_INACTIVE
QuoteCondition_MANUAL_SLOW_QUOTE = cvar.QuoteCondition_MANUAL_SLOW_QUOTE
QuoteCondition_OUTRIGHT_PRICE = cvar.QuoteCondition_OUTRIGHT_PRICE
QuoteCondition_IMPLIED_PRICE = cvar.QuoteCondition_IMPLIED_PRICE
QuoteCondition_DEPTH_ON_OFFER = cvar.QuoteCondition_DEPTH_ON_OFFER
QuoteCondition_DEPTH_ON_BID = cvar.QuoteCondition_DEPTH_ON_BID
QuoteCondition_CLOSING = cvar.QuoteCondition_CLOSING
QuoteCondition_NEWS_DISSEMINATION = cvar.QuoteCondition_NEWS_DISSEMINATION
QuoteCondition_TRADING_RANGE = cvar.QuoteCondition_TRADING_RANGE
QuoteCondition_ORDER_INFLUX = cvar.QuoteCondition_ORDER_INFLUX
QuoteCondition_DUE_TO_RELATED = cvar.QuoteCondition_DUE_TO_RELATED
QuoteCondition_NEWS_PENDING = cvar.QuoteCondition_NEWS_PENDING
QuoteCondition_ADDITIONAL_INFO = cvar.QuoteCondition_ADDITIONAL_INFO
QuoteCondition_ADDITIONAL_INFO_DUE_TO_RELATED = cvar.QuoteCondition_ADDITIONAL_INFO_DUE_TO_RELATED
QuoteCondition_RESUME = cvar.QuoteCondition_RESUME
QuoteCondition_VIEW_OF_COMMON = cvar.QuoteCondition_VIEW_OF_COMMON
QuoteCondition_VOLUME_ALERT = cvar.QuoteCondition_VOLUME_ALERT
QuoteCondition_ORDER_IMBALANCE = cvar.QuoteCondition_ORDER_IMBALANCE
QuoteCondition_EQUIPMENT_CHANGEOVER = cvar.QuoteCondition_EQUIPMENT_CHANGEOVER
QuoteCondition_NO_OPEN = cvar.QuoteCondition_NO_OPEN
QuoteCondition_REGULAR_ETH = cvar.QuoteCondition_REGULAR_ETH
QuoteCondition_AUTOMATIC_EXECUTION = cvar.QuoteCondition_AUTOMATIC_EXECUTION
QuoteCondition_AUTOMATIC_EXECUTION_ETH = cvar.QuoteCondition_AUTOMATIC_EXECUTION_ETH
QuoteCondition_FAST_MARKET_ETH = cvar.QuoteCondition_FAST_MARKET_ETH
QuoteCondition_INACTIVE_ETH = cvar.QuoteCondition_INACTIVE_ETH
QuoteCondition_ROTATION = cvar.QuoteCondition_ROTATION
QuoteCondition_ROTATION_ETH = cvar.QuoteCondition_ROTATION_ETH
QuoteCondition_HALT = cvar.QuoteCondition_HALT
QuoteCondition_HALT_ETH = cvar.QuoteCondition_HALT_ETH
QuoteCondition_DUE_TO_NEWS_DISSEMINATION = cvar.QuoteCondition_DUE_TO_NEWS_DISSEMINATION
QuoteCondition_DUE_TO_NEWS_PENDING = cvar.QuoteCondition_DUE_TO_NEWS_PENDING
QuoteCondition_TRADING_RESUME = cvar.QuoteCondition_TRADING_RESUME
QuoteCondition_OUT_OF_SEQUENCE = cvar.QuoteCondition_OUT_OF_SEQUENCE
QuoteCondition_BID_SPECIALIST = cvar.QuoteCondition_BID_SPECIALIST
QuoteCondition_OFFER_SPECIALIST = cvar.QuoteCondition_OFFER_SPECIALIST
QuoteCondition_BID_OFFER_SPECIALIST = cvar.QuoteCondition_BID_OFFER_SPECIALIST
QuoteCondition_END_OF_DAY_SAM = cvar.QuoteCondition_END_OF_DAY_SAM
QuoteCondition_FORBIDDEN_SAM = cvar.QuoteCondition_FORBIDDEN_SAM
QuoteCondition_FROZEN_SAM = cvar.QuoteCondition_FROZEN_SAM
QuoteCondition_PREOPENING_SAM = cvar.QuoteCondition_PREOPENING_SAM
QuoteCondition_OPENING_SAM = cvar.QuoteCondition_OPENING_SAM
QuoteCondition_OPEN_SAM = cvar.QuoteCondition_OPEN_SAM
QuoteCondition_SURVEILLANCE_SAM = cvar.QuoteCondition_SURVEILLANCE_SAM
QuoteCondition_SUSPENDED_SAM = cvar.QuoteCondition_SUSPENDED_SAM
QuoteCondition_RESERVED_SAM = cvar.QuoteCondition_RESERVED_SAM
QuoteCondition_NO_ACTIVE_SAM = cvar.QuoteCondition_NO_ACTIVE_SAM
QuoteCondition_RESTRICTED = cvar.QuoteCondition_RESTRICTED
QuoteCondition_REST_OF_BOOK_VWAP = cvar.QuoteCondition_REST_OF_BOOK_VWAP
QuoteCondition_BETTER_PRICES_IN_CONDITIONAL_ORDERS = cvar.QuoteCondition_BETTER_PRICES_IN_CONDITIONAL_ORDERS
QuoteCondition_MEDIAN_PRICE = cvar.QuoteCondition_MEDIAN_PRICE
QuoteCondition_FULL_CURVE = cvar.QuoteCondition_FULL_CURVE
QuoteCondition_FLAT_CURVE = cvar.QuoteCondition_FLAT_CURVE
TradeCondition_CASH = cvar.TradeCondition_CASH
TradeCondition_AVERAGE_PRICE_TRADE = cvar.TradeCondition_AVERAGE_PRICE_TRADE
TradeCondition_CASH_TRADE = cvar.TradeCondition_CASH_TRADE
TradeCondition_NEXT_DAY = cvar.TradeCondition_NEXT_DAY
TradeCondition_OPENING = cvar.TradeCondition_OPENING
TradeCondition_INTRADAY_TRADE_DETAIL = cvar.TradeCondition_INTRADAY_TRADE_DETAIL
TradeCondition_RULE_127_TRADE = cvar.TradeCondition_RULE_127_TRADE
TradeCondition_RULE_155_TRADE = cvar.TradeCondition_RULE_155_TRADE
TradeCondition_SOLD_LAST = cvar.TradeCondition_SOLD_LAST
TradeCondition_NEXT_DAY_TRADE = cvar.TradeCondition_NEXT_DAY_TRADE
TradeCondition_OPENED = cvar.TradeCondition_OPENED
TradeCondition_SELLER = cvar.TradeCondition_SELLER
TradeCondition_SOLD = cvar.TradeCondition_SOLD
TradeCondition_STOPPED_STOCK = cvar.TradeCondition_STOPPED_STOCK
TradeCondition_IMBALANCE_MORE_BUYERS = cvar.TradeCondition_IMBALANCE_MORE_BUYERS
TradeCondition_IMBALANCE_MORE_SELLERS = cvar.TradeCondition_IMBALANCE_MORE_SELLERS
TradeCondition_OPENING_PRICE = cvar.TradeCondition_OPENING_PRICE
TradeCondition_OPENING_REOPENING_TRADE_DETAIL = cvar.TradeCondition_OPENING_REOPENING_TRADE_DETAIL
TradeCondition_BARGAIN_CONDITION = cvar.TradeCondition_BARGAIN_CONDITION
TradeCondition_CONVERTED_PRICE_INDICATOR = cvar.TradeCondition_CONVERTED_PRICE_INDICATOR
TradeCondition_EXCHANGE_LAST = cvar.TradeCondition_EXCHANGE_LAST
TradeCondition_FINAL_PRICE_OF_SESSION = cvar.TradeCondition_FINAL_PRICE_OF_SESSION
TradeCondition_EX_PIT = cvar.TradeCondition_EX_PIT
TradeCondition_CROSSED_X = cvar.TradeCondition_CROSSED_X
TradeCondition_TRADES_RESULTING_FROM_MANUAL_SLOW_QUOTE = cvar.TradeCondition_TRADES_RESULTING_FROM_MANUAL_SLOW_QUOTE
TradeCondition_TRADES_RESULTING_FROM_INTERMARKET_SWEEP = cvar.TradeCondition_TRADES_RESULTING_FROM_INTERMARKET_SWEEP
TradeCondition_VOLUME_ONLY = cvar.TradeCondition_VOLUME_ONLY
TradeCondition_DIRECT_PLUS = cvar.TradeCondition_DIRECT_PLUS
TradeCondition_ACQUISITION = cvar.TradeCondition_ACQUISITION
TradeCondition_BUNCHED = cvar.TradeCondition_BUNCHED
TradeCondition_DISTRIBUTION = cvar.TradeCondition_DISTRIBUTION
TradeCondition_BUNCHED_SALE = cvar.TradeCondition_BUNCHED_SALE
TradeCondition_SPLIT_TRADE = cvar.TradeCondition_SPLIT_TRADE
TradeCondition_CANCEL_STOPPED = cvar.TradeCondition_CANCEL_STOPPED
TradeCondition_CANCEL_ETH = cvar.TradeCondition_CANCEL_ETH
TradeCondition_CANCEL_STOPPED_ETH = cvar.TradeCondition_CANCEL_STOPPED_ETH
TradeCondition_OUT_OF_SEQUENCE_ETH = cvar.TradeCondition_OUT_OF_SEQUENCE_ETH
TradeCondition_CANCEL_LAST_ETH = cvar.TradeCondition_CANCEL_LAST_ETH
TradeCondition_SOLD_LAST_SALE_ETH = cvar.TradeCondition_SOLD_LAST_SALE_ETH
TradeCondition_CANCEL_LAST = cvar.TradeCondition_CANCEL_LAST
TradeCondition_SOLD_LAST_SALE = cvar.TradeCondition_SOLD_LAST_SALE
TradeCondition_CANCEL_OPEN = cvar.TradeCondition_CANCEL_OPEN
TradeCondition_CANCEL_OPEN_ETH = cvar.TradeCondition_CANCEL_OPEN_ETH
TradeCondition_OPENED_SALE_ETH = cvar.TradeCondition_OPENED_SALE_ETH
TradeCondition_CANCEL_ONLY = cvar.TradeCondition_CANCEL_ONLY
TradeCondition_CANCEL_ONLY_ETH = cvar.TradeCondition_CANCEL_ONLY_ETH
TradeCondition_LATE_OPEN_ETH = cvar.TradeCondition_LATE_OPEN_ETH
TradeCondition_AUTO_EXECUTION_ETH = cvar.TradeCondition_AUTO_EXECUTION_ETH
TradeCondition_REOPEN = cvar.TradeCondition_REOPEN
TradeCondition_REOPEN_ETH = cvar.TradeCondition_REOPEN_ETH
TradeCondition_ADJUSTED = cvar.TradeCondition_ADJUSTED
TradeCondition_ADJUSTED_ETH = cvar.TradeCondition_ADJUSTED_ETH
TradeCondition_SPREAD = cvar.TradeCondition_SPREAD
TradeCondition_SPREAD_ETH = cvar.TradeCondition_SPREAD_ETH
TradeCondition_STRADDLE = cvar.TradeCondition_STRADDLE
TradeCondition_STRADDLE_ETH = cvar.TradeCondition_STRADDLE_ETH
TradeCondition_STOPPED = cvar.TradeCondition_STOPPED
TradeCondition_STOPPED_ETH = cvar.TradeCondition_STOPPED_ETH
TradeCondition_REGULAR_ETH = cvar.TradeCondition_REGULAR_ETH
TradeCondition_COMBO = cvar.TradeCondition_COMBO
TradeCondition_COMBO_ETH = cvar.TradeCondition_COMBO_ETH
TradeCondition_OFFICIAL_CLOSING_PRICE = cvar.TradeCondition_OFFICIAL_CLOSING_PRICE
TradeCondition_PRIOR_REFERENCE_PRICE = cvar.TradeCondition_PRIOR_REFERENCE_PRICE
TradeCondition_CANCEL = cvar.TradeCondition_CANCEL
TradeCondition_STOPPED_SOLD_LAST = cvar.TradeCondition_STOPPED_SOLD_LAST
TradeCondition_STOPPED_OUT_OF_SEQUENCE = cvar.TradeCondition_STOPPED_OUT_OF_SEQUENCE
TradeCondition_OFFICAL_CLOSING_PRICE = cvar.TradeCondition_OFFICAL_CLOSING_PRICE
TradeCondition_CROSSED_AO = cvar.TradeCondition_CROSSED_AO
TradeCondition_FAST_MARKET = cvar.TradeCondition_FAST_MARKET
TradeCondition_AUTOMATIC_EXECUTION = cvar.TradeCondition_AUTOMATIC_EXECUTION
TradeCondition_FORM_T = cvar.TradeCondition_FORM_T
TradeCondition_BASKET_INDEX = cvar.TradeCondition_BASKET_INDEX
TradeCondition_BURST_BASKET = cvar.TradeCondition_BURST_BASKET
TradeCondition_OUTSIDE_SPREAD = cvar.TradeCondition_OUTSIDE_SPREAD
TradeCondition_IMPLIED_TRADE = cvar.TradeCondition_IMPLIED_TRADE
TradeCondition_MARKETPLACE_ENTERED_TRADE = cvar.TradeCondition_MARKETPLACE_ENTERED_TRADE
TradeCondition_MULT_ASSET_CLASS_MULTILEG_TRADE = cvar.TradeCondition_MULT_ASSET_CLASS_MULTILEG_TRADE
TradeCondition_MULTILEG_TO_MULTILEG_TRADE = cvar.TradeCondition_MULTILEG_TO_MULTILEG_TRADE
MDUpdateAction_NEW = cvar.MDUpdateAction_NEW
MDUpdateAction_CHANGE = cvar.MDUpdateAction_CHANGE
MDUpdateAction_DELETE = cvar.MDUpdateAction_DELETE
MDUpdateAction_DELETE_THRU = cvar.MDUpdateAction_DELETE_THRU
MDUpdateAction_DELETE_FROM = cvar.MDUpdateAction_DELETE_FROM
MDUpdateAction_OVERLAY = cvar.MDUpdateAction_OVERLAY
MDReqRejReason_UNKNOWN_SYMBOL = cvar.MDReqRejReason_UNKNOWN_SYMBOL
MDReqRejReason_DUPLICATE_MDREQID = cvar.MDReqRejReason_DUPLICATE_MDREQID
MDReqRejReason_INSUFFICIENT_BANDWIDTH = cvar.MDReqRejReason_INSUFFICIENT_BANDWIDTH
MDReqRejReason_INSUFFICIENT_PERMISSIONS = cvar.MDReqRejReason_INSUFFICIENT_PERMISSIONS
MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE = cvar.MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE
MDReqRejReason_UNSUPPORTED_MARKETDEPTH = cvar.MDReqRejReason_UNSUPPORTED_MARKETDEPTH
MDReqRejReason_UNSUPPORTED_MDUPDATETYPE = cvar.MDReqRejReason_UNSUPPORTED_MDUPDATETYPE
MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK = cvar.MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK
MDReqRejReason_UNSUPPORTED_MDENTRYTYPE = cvar.MDReqRejReason_UNSUPPORTED_MDENTRYTYPE
MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE = cvar.MDReqRejReason_UNSUPPORTED_MDIMPLICITDELETE
MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG = cvar.MDReqRejReason_UNSUPPORTED_OPENCLOSESETTLEFLAG
MDReqRejReason_UNSUPPORTED_SCOPE = cvar.MDReqRejReason_UNSUPPORTED_SCOPE
MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID = cvar.MDReqRejReason_UNSUPPORTED_TRADINGSESSIONID
MDReqRejReason_INSUFFICIENT_CREDIT = cvar.MDReqRejReason_INSUFFICIENT_CREDIT
DeleteReason_CANCELATION = cvar.DeleteReason_CANCELATION
DeleteReason_ERROR = cvar.DeleteReason_ERROR
DeleteReason_CANCELLATION = cvar.DeleteReason_CANCELLATION
OpenCloseSettleFlag_DAILY_OPEN = cvar.OpenCloseSettleFlag_DAILY_OPEN
OpenCloseSettleFlag_SESSION_OPEN = cvar.OpenCloseSettleFlag_SESSION_OPEN
OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE = cvar.OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE
OpenCloseSettleFlag_EXPECTED_PRICE = cvar.OpenCloseSettleFlag_EXPECTED_PRICE
OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY = cvar.OpenCloseSettleFlag_PRICE_FROM_PREVIOUS_BUSINESS_DAY
FinancialStatus_BANKRUPT = cvar.FinancialStatus_BANKRUPT
FinancialStatus_PENDING_DELISTING = cvar.FinancialStatus_PENDING_DELISTING
FinancialStatus_RESTRICTED = cvar.FinancialStatus_RESTRICTED
CorporateAction_EX_DIVIDEND = cvar.CorporateAction_EX_DIVIDEND
CorporateAction_EX_DISTRIBUTION = cvar.CorporateAction_EX_DISTRIBUTION
CorporateAction_EX_RIGHTS = cvar.CorporateAction_EX_RIGHTS
CorporateAction_NEW = cvar.CorporateAction_NEW
CorporateAction_EX_INTEREST = cvar.CorporateAction_EX_INTEREST
CorporateAction_CASH_DIVIDEND = cvar.CorporateAction_CASH_DIVIDEND
CorporateAction_STOCK_DIVIDEND = cvar.CorporateAction_STOCK_DIVIDEND
CorporateAction_NON_INTEGER_STOCK_SPLIT = cvar.CorporateAction_NON_INTEGER_STOCK_SPLIT
CorporateAction_REVERSE_STOCK_SPLIT = cvar.CorporateAction_REVERSE_STOCK_SPLIT
CorporateAction_STANDARD_INTEGER_STOCK_SPLIT = cvar.CorporateAction_STANDARD_INTEGER_STOCK_SPLIT
CorporateAction_POSITION_CONSOLIDATION = cvar.CorporateAction_POSITION_CONSOLIDATION
CorporateAction_LIQUIDATION_REORGANIZATION = cvar.CorporateAction_LIQUIDATION_REORGANIZATION
CorporateAction_MERGER_REORGANIZATION = cvar.CorporateAction_MERGER_REORGANIZATION
CorporateAction_RIGHTS_OFFERING = cvar.CorporateAction_RIGHTS_OFFERING
CorporateAction_SHAREHOLDER_MEETING = cvar.CorporateAction_SHAREHOLDER_MEETING
CorporateAction_SPINOFF = cvar.CorporateAction_SPINOFF
CorporateAction_TENDER_OFFER = cvar.CorporateAction_TENDER_OFFER
CorporateAction_WARRANT = cvar.CorporateAction_WARRANT
CorporateAction_SPECIAL_ACTION = cvar.CorporateAction_SPECIAL_ACTION
CorporateAction_SYMBOL_CONVERSION = cvar.CorporateAction_SYMBOL_CONVERSION
CorporateAction_CUSIP = cvar.CorporateAction_CUSIP
CorporateAction_LEAP_ROLLOVER = cvar.CorporateAction_LEAP_ROLLOVER
CorporateAction_SUCCESSION_EVENT = cvar.CorporateAction_SUCCESSION_EVENT
QuoteAckStatus_ACCEPTED = cvar.QuoteAckStatus_ACCEPTED
QuoteAckStatus_CANCELED_FOR_SYMBOL = cvar.QuoteAckStatus_CANCELED_FOR_SYMBOL
QuoteAckStatus_CANCELED_FOR_SECURITY_TYPE = cvar.QuoteAckStatus_CANCELED_FOR_SECURITY_TYPE
QuoteAckStatus_CANCELED_FOR_UNDERLYING = cvar.QuoteAckStatus_CANCELED_FOR_UNDERLYING
QuoteAckStatus_CANCELED_ALL = cvar.QuoteAckStatus_CANCELED_ALL
QuoteAckStatus_REJECTED = cvar.QuoteAckStatus_REJECTED
QuoteCancelType_CANCEL_FOR_SYMBOL = cvar.QuoteCancelType_CANCEL_FOR_SYMBOL
QuoteCancelType_CANCEL_FOR_SECURITY_TYPE = cvar.QuoteCancelType_CANCEL_FOR_SECURITY_TYPE
QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL = cvar.QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL
QuoteCancelType_CANCEL_FOR_ALL_QUOTES = cvar.QuoteCancelType_CANCEL_FOR_ALL_QUOTES
QuoteCancelType_CANCEL_ALL_QUOTES = cvar.QuoteCancelType_CANCEL_ALL_QUOTES
QuoteCancelType_CANCEL_QUOTE_SPECIFIED_IN_QUOTEID = cvar.QuoteCancelType_CANCEL_QUOTE_SPECIFIED_IN_QUOTEID
QuoteCancelType_CANCEL_FOR_ONE_OR_MORE_SECURITIES = cvar.QuoteCancelType_CANCEL_FOR_ONE_OR_MORE_SECURITIES
QuoteCancelType_CANCEL_FOR_UNDERLYING_SECURITY = cvar.QuoteCancelType_CANCEL_FOR_UNDERLYING_SECURITY
QuoteCancelType_CANCEL_BY_QUOTETYPE = cvar.QuoteCancelType_CANCEL_BY_QUOTETYPE
QuoteCancelType_CANCEL_FOR_SECURITY_ISSUER = cvar.QuoteCancelType_CANCEL_FOR_SECURITY_ISSUER
QuoteCancelType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.QuoteCancelType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY
QuoteRejectReason_UNKNOWN_SYMBOL = cvar.QuoteRejectReason_UNKNOWN_SYMBOL
QuoteRejectReason_EXCHANGE = cvar.QuoteRejectReason_EXCHANGE
QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT = cvar.QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
QuoteRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteRejectReason_TOO_LATE_TO_ENTER
QuoteRejectReason_UNKNOWN_QUOTE = cvar.QuoteRejectReason_UNKNOWN_QUOTE
QuoteRejectReason_DUPLICATE_QUOTE = cvar.QuoteRejectReason_DUPLICATE_QUOTE
QuoteRejectReason_INVALID_BID_ASK_SPREAD = cvar.QuoteRejectReason_INVALID_BID_ASK_SPREAD
QuoteRejectReason_INVALID_PRICE = cvar.QuoteRejectReason_INVALID_PRICE
QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY = cvar.QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY
QuoteRejectReason_OTHER = cvar.QuoteRejectReason_OTHER
QuoteRejectReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND = cvar.QuoteRejectReason_PRICE_EXCEEDS_CURRENT_PRICE_BAND
QuoteRejectReason_QUOTE_LOCKED = cvar.QuoteRejectReason_QUOTE_LOCKED
QuoteRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER = cvar.QuoteRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER
QuoteRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = cvar.QuoteRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY
QuoteResponseLevel_NO_ACKNOWLEDGEMENT = cvar.QuoteResponseLevel_NO_ACKNOWLEDGEMENT
QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES = cvar.QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES
QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES = cvar.QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES
QuoteResponseLevel_SUMMARY_ACKNOWLEDGEMENT = cvar.QuoteResponseLevel_SUMMARY_ACKNOWLEDGEMENT
QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGE = cvar.QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGE
QuoteRequestType_MANUAL = cvar.QuoteRequestType_MANUAL
QuoteRequestType_AUTOMATIC = cvar.QuoteRequestType_AUTOMATIC
SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS = cvar.SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS
SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED = cvar.SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED
SecurityRequestType_REQUEST_LIST_SECURITY_TYPES = cvar.SecurityRequestType_REQUEST_LIST_SECURITY_TYPES
SecurityRequestType_REQUEST_LIST_SECURITIES = cvar.SecurityRequestType_REQUEST_LIST_SECURITIES
SecurityRequestType_SYMBOL = cvar.SecurityRequestType_SYMBOL
SecurityRequestType_SECURITYTYPE_AND_OR_CFICODE = cvar.SecurityRequestType_SECURITYTYPE_AND_OR_CFICODE
SecurityRequestType_PRODUCT = cvar.SecurityRequestType_PRODUCT
SecurityRequestType_TRADINGSESSIONID = cvar.SecurityRequestType_TRADINGSESSIONID
SecurityRequestType_ALL_SECURITIES = cvar.SecurityRequestType_ALL_SECURITIES
SecurityRequestType_MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID = cvar.SecurityRequestType_MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID
SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS = cvar.SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS
SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE = cvar.SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE
SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST = cvar.SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST
SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST = cvar.SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST
SecurityResponseType_REJECT_SECURITY_PROPOSAL = cvar.SecurityResponseType_REJECT_SECURITY_PROPOSAL
SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA = cvar.SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA
SecurityResponseType_CANNOT_MATCH_SELECTION_CRITERIA = cvar.SecurityResponseType_CANNOT_MATCH_SELECTION_CRITERIA
UnsolicitedIndicator_NO = cvar.UnsolicitedIndicator_NO
UnsolicitedIndicator_YES = cvar.UnsolicitedIndicator_YES
SecurityTradingStatus_OPENING_DELAY = cvar.SecurityTradingStatus_OPENING_DELAY
SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL = cvar.SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL
SecurityTradingStatus_NO_MARKET_IMBALANCE = cvar.SecurityTradingStatus_NO_MARKET_IMBALANCE
SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE = cvar.SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE
SecurityTradingStatus_ITS_PRE_OPENING = cvar.SecurityTradingStatus_ITS_PRE_OPENING
SecurityTradingStatus_NEW_PRICE_INDICATION = cvar.SecurityTradingStatus_NEW_PRICE_INDICATION
SecurityTradingStatus_TRADE_DISSEMINATION_TIME = cvar.SecurityTradingStatus_TRADE_DISSEMINATION_TIME
SecurityTradingStatus_READY_TO_TRADE = cvar.SecurityTradingStatus_READY_TO_TRADE
SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING = cvar.SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING
SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET = cvar.SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET
SecurityTradingStatus_TRADING_HALT = cvar.SecurityTradingStatus_TRADING_HALT
SecurityTradingStatus_UNKNOWN_OR_INVALID = cvar.SecurityTradingStatus_UNKNOWN_OR_INVALID
SecurityTradingStatus_RESUME = cvar.SecurityTradingStatus_RESUME
SecurityTradingStatus_NO_OPEN_NO_RESUME = cvar.SecurityTradingStatus_NO_OPEN_NO_RESUME
SecurityTradingStatus_PRICE_INDICATION = cvar.SecurityTradingStatus_PRICE_INDICATION
SecurityTradingStatus_TRADING_RANGE_INDICATION = cvar.SecurityTradingStatus_TRADING_RANGE_INDICATION
SecurityTradingStatus_MARKET_IMBALANCE_BUY = cvar.SecurityTradingStatus_MARKET_IMBALANCE_BUY
SecurityTradingStatus_MARKET_IMBALANCE_SELL = cvar.SecurityTradingStatus_MARKET_IMBALANCE_SELL
SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY = cvar.SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY
SecurityTradingStatus_OPENING_ROTATION = cvar.SecurityTradingStatus_OPENING_ROTATION
SecurityTradingStatus_PRE_OPEN = cvar.SecurityTradingStatus_PRE_OPEN
SecurityTradingStatus_FAST_MARKET = cvar.SecurityTradingStatus_FAST_MARKET
SecurityTradingStatus_NO_OPEN = cvar.SecurityTradingStatus_NO_OPEN
SecurityTradingStatus_PRE_CROSS = cvar.SecurityTradingStatus_PRE_CROSS
SecurityTradingStatus_CROSS = cvar.SecurityTradingStatus_CROSS
SecurityTradingStatus_POST_CLOSE = cvar.SecurityTradingStatus_POST_CLOSE
HaltReasonChar_NEWS_DISSEMINATION = cvar.HaltReasonChar_NEWS_DISSEMINATION
HaltReasonChar_ORDER_INFLUX = cvar.HaltReasonChar_ORDER_INFLUX
HaltReasonChar_ORDER_IMBALANCE = cvar.HaltReasonChar_ORDER_IMBALANCE
HaltReasonChar_ADDITIONAL_INFORMATION = cvar.HaltReasonChar_ADDITIONAL_INFORMATION
HaltReasonChar_NEWS_PENDING = cvar.HaltReasonChar_NEWS_PENDING
HaltReasonChar_EQUIPMENT_CHANGEOVER = cvar.HaltReasonChar_EQUIPMENT_CHANGEOVER
HaltReasonChar_NEW_PENDING = cvar.HaltReasonChar_NEW_PENDING
InViewOfCommon_NO = cvar.InViewOfCommon_NO
InViewOfCommon_YES = cvar.InViewOfCommon_YES
DueToRelated_NO = cvar.DueToRelated_NO
DueToRelated_YES = cvar.DueToRelated_YES
Adjustment_CANCEL = cvar.Adjustment_CANCEL
Adjustment_ERROR = cvar.Adjustment_ERROR
Adjustment_CORRECTION = cvar.Adjustment_CORRECTION
TradingSessionID_DAY = cvar.TradingSessionID_DAY
TradingSessionID_HALFDAY = cvar.TradingSessionID_HALFDAY
TradingSessionID_MORNING = cvar.TradingSessionID_MORNING
TradingSessionID_AFTERNOON = cvar.TradingSessionID_AFTERNOON
TradingSessionID_EVENING = cvar.TradingSessionID_EVENING
TradingSessionID_AFTER_HOURS = cvar.TradingSessionID_AFTER_HOURS
TradSesMethod_ELECTRONIC = cvar.TradSesMethod_ELECTRONIC
TradSesMethod_OPEN_OUTCRY = cvar.TradSesMethod_OPEN_OUTCRY
TradSesMethod_TWO_PARTY = cvar.TradSesMethod_TWO_PARTY
TradSesMode_TESTING = cvar.TradSesMode_TESTING
TradSesMode_SIMULATED = cvar.TradSesMode_SIMULATED
TradSesMode_PRODUCTION = cvar.TradSesMode_PRODUCTION
TradSesStatus_HALTED = cvar.TradSesStatus_HALTED
TradSesStatus_OPEN = cvar.TradSesStatus_OPEN
TradSesStatus_CLOSED = cvar.TradSesStatus_CLOSED
TradSesStatus_PRE_OPEN = cvar.TradSesStatus_PRE_OPEN
TradSesStatus_PRE_CLOSE = cvar.TradSesStatus_PRE_CLOSE
TradSesStatus_REQUEST_REJECTED = cvar.TradSesStatus_REQUEST_REJECTED
TradSesStatus_UNKNOWN = cvar.TradSesStatus_UNKNOWN
QuoteEntryRejectReason_UNKNOWN_SYMBOL = cvar.QuoteEntryRejectReason_UNKNOWN_SYMBOL
QuoteEntryRejectReason_EXCHANGE = cvar.QuoteEntryRejectReason_EXCHANGE
QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT = cvar.QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT
QuoteEntryRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteEntryRejectReason_TOO_LATE_TO_ENTER
QuoteEntryRejectReason_UNKNOWN_QUOTE = cvar.QuoteEntryRejectReason_UNKNOWN_QUOTE
QuoteEntryRejectReason_DUPLICATE_QUOTE = cvar.QuoteEntryRejectReason_DUPLICATE_QUOTE
QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD = cvar.QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD
QuoteEntryRejectReason_INVALID_PRICE = cvar.QuoteEntryRejectReason_INVALID_PRICE
QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY = cvar.QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY
BidRequestTransType_CANCEL = cvar.BidRequestTransType_CANCEL
BidRequestTransType_NO = cvar.BidRequestTransType_NO
BidRequestTransType_NEW = cvar.BidRequestTransType_NEW
SolicitedFlag_NO = cvar.SolicitedFlag_NO
SolicitedFlag_YES = cvar.SolicitedFlag_YES
ExecRestatementReason_GT_CORPORATE_ACTION = cvar.ExecRestatementReason_GT_CORPORATE_ACTION
ExecRestatementReason_GT_RENEWAL = cvar.ExecRestatementReason_GT_RENEWAL
ExecRestatementReason_VERBAL_CHANGE = cvar.ExecRestatementReason_VERBAL_CHANGE
ExecRestatementReason_REPRICING_OF_ORDER = cvar.ExecRestatementReason_REPRICING_OF_ORDER
ExecRestatementReason_BROKER_OPTION = cvar.ExecRestatementReason_BROKER_OPTION
ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY = cvar.ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY
ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE = cvar.ExecRestatementReason_CANCEL_ON_SYSTEM_FAILURE
ExecRestatementReason_MARKET = cvar.ExecRestatementReason_MARKET
ExecRestatementReason_CANCEL_ON_TRADING_HALT = cvar.ExecRestatementReason_CANCEL_ON_TRADING_HALT
ExecRestatementReason_CANCELED_NOT_BEST = cvar.ExecRestatementReason_CANCELED_NOT_BEST
ExecRestatementReason_WAREHOUSE_RECAP = cvar.ExecRestatementReason_WAREHOUSE_RECAP
ExecRestatementReason_OTHER = cvar.ExecRestatementReason_OTHER
ExecRestatementReason_PEG_REFRESH = cvar.ExecRestatementReason_PEG_REFRESH
BusinessRejectReason_OTHER = cvar.BusinessRejectReason_OTHER
BusinessRejectReason_UNKOWN_ID = cvar.BusinessRejectReason_UNKOWN_ID
BusinessRejectReason_UNKNOWN_SECURITY = cvar.BusinessRejectReason_UNKNOWN_SECURITY
BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE = cvar.BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE
BusinessRejectReason_APPLICATION_NOT_AVAILABLE = cvar.BusinessRejectReason_APPLICATION_NOT_AVAILABLE
BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING = cvar.BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING
BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME = cvar.BusinessRejectReason_DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME
BusinessRejectReason_NOT_AUTHORIZED = cvar.BusinessRejectReason_NOT_AUTHORIZED
BusinessRejectReason_UNKNOWN_ID = cvar.BusinessRejectReason_UNKNOWN_ID
BusinessRejectReason_UNKNOWN_MESSAGE_TYPE = cvar.BusinessRejectReason_UNKNOWN_MESSAGE_TYPE
BusinessRejectReason_INVALID_PRICE_INCREMENT = cvar.BusinessRejectReason_INVALID_PRICE_INCREMENT
DiscretionInst_RELATED_TO_DISPLAYED_PRICE = cvar.DiscretionInst_RELATED_TO_DISPLAYED_PRICE
DiscretionInst_RELATED_TO_MARKET_PRICE = cvar.DiscretionInst_RELATED_TO_MARKET_PRICE
DiscretionInst_RELATED_TO_PRIMARY_PRICE = cvar.DiscretionInst_RELATED_TO_PRIMARY_PRICE
DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE = cvar.DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE
DiscretionInst_RELATED_TO_MIDPOINT_PRICE = cvar.DiscretionInst_RELATED_TO_MIDPOINT_PRICE
DiscretionInst_RELATED_TO_LAST_TRADE_PRICE = cvar.DiscretionInst_RELATED_TO_LAST_TRADE_PRICE
DiscretionInst_RELATED_TO_VWAP = cvar.DiscretionInst_RELATED_TO_VWAP
DiscretionInst_AVERAGE_PRICE_GUARANTEE = cvar.DiscretionInst_AVERAGE_PRICE_GUARANTEE
BidType_NON_DISCLOSED_STYLE = cvar.BidType_NON_DISCLOSED_STYLE
BidType_DISCLOSED_STYLE = cvar.BidType_DISCLOSED_STYLE
BidType_NO_BIDDING_PROCESS = cvar.BidType_NO_BIDDING_PROCESS
BidType_DISCLOSED_SYTLE = cvar.BidType_DISCLOSED_SYTLE
BidDescriptorType_INDEX = cvar.BidDescriptorType_INDEX
BidDescriptorType_COUNTRY = cvar.BidDescriptorType_COUNTRY
BidDescriptorType_SECTOR = cvar.BidDescriptorType_SECTOR
SideValueInd_SIDEVALUE1 = cvar.SideValueInd_SIDEVALUE1
SideValueInd_SIDEVALUE_2 = cvar.SideValueInd_SIDEVALUE_2
SideValueInd_SIDE_VALUE_1 = cvar.SideValueInd_SIDE_VALUE_1
SideValueInd_SIDE_VALUE_2 = cvar.SideValueInd_SIDE_VALUE_2
LiquidityIndType_5_DAY_MOVING_AVERAGE = cvar.LiquidityIndType_5_DAY_MOVING_AVERAGE
LiquidityIndType_20_DAY_MOVING_AVERAGE = cvar.LiquidityIndType_20_DAY_MOVING_AVERAGE
LiquidityIndType_NORMAL_MARKET_SIZE = cvar.LiquidityIndType_NORMAL_MARKET_SIZE
LiquidityIndType_OTHER = cvar.LiquidityIndType_OTHER
LiquidityIndType_5DAY_MOVING_AVERAGE = cvar.LiquidityIndType_5DAY_MOVING_AVERAGE
ExchangeForPhysical_NO = cvar.ExchangeForPhysical_NO
ExchangeForPhysical_YES = cvar.ExchangeForPhysical_YES
ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST = cvar.ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST
ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD = cvar.ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD
ProgRptReqs_REAL_TIME_EXECUTION_REPORTS = cvar.ProgRptReqs_REAL_TIME_EXECUTION_REPORTS
ProgRptReqs_BUY_SIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUE_REQUEST = cvar.ProgRptReqs_BUY_SIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUE_REQUEST
ProgRptReqs_SELL_SIDE_PERIODICALLY_SENDS_STATUS_USING_LIST_STATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD = cvar.ProgRptReqs_SELL_SIDE_PERIODICALLY_SENDS_STATUS_USING_LIST_STATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD
IncTaxInd_NET = cvar.IncTaxInd_NET
IncTaxInd_GROSS = cvar.IncTaxInd_GROSS
TradeType_AGENCY = cvar.TradeType_AGENCY
TradeType_VWAP_GUARANTEE = cvar.TradeType_VWAP_GUARANTEE
TradeType_GUARANTEED_CLOSE = cvar.TradeType_GUARANTEED_CLOSE
TradeType_RISK_TRADE = cvar.TradeType_RISK_TRADE
BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION = cvar.BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION
BasisPxType_CLOSING_PRICE = cvar.BasisPxType_CLOSING_PRICE
BasisPxType_CURRENT_PRICE = cvar.BasisPxType_CURRENT_PRICE
BasisPxType_SQ = cvar.BasisPxType_SQ
BasisPxType_VWAP_THROUGH_A_DAY = cvar.BasisPxType_VWAP_THROUGH_A_DAY
BasisPxType_VWAP_THROUGH_A_MORNING_SESSION = cvar.BasisPxType_VWAP_THROUGH_A_MORNING_SESSION
BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION = cvar.BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION
BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI = cvar.BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI
BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI = cvar.BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI
BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI = cvar.BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI
BasisPxType_STRIKE = cvar.BasisPxType_STRIKE
BasisPxType_OPEN = cvar.BasisPxType_OPEN
BasisPxType_OTHERS = cvar.BasisPxType_OTHERS
PriceType_PERCENTAGE = cvar.PriceType_PERCENTAGE
PriceType_PER_SHARE = cvar.PriceType_PER_SHARE
PriceType_FIXED_AMOUNT = cvar.PriceType_FIXED_AMOUNT
PriceType_DISCOUNT = cvar.PriceType_DISCOUNT
PriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK = cvar.PriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK
PriceType_TED_PRICE = cvar.PriceType_TED_PRICE
PriceType_TED_YIELD = cvar.PriceType_TED_YIELD
PriceType_PREMIUM = cvar.PriceType_PREMIUM
PriceType_PER_UNIT = cvar.PriceType_PER_UNIT
PriceType_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR = cvar.PriceType_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR
PriceType_PREMIUM_PERCENTAGE_POINTS_OVER_PAR = cvar.PriceType_PREMIUM_PERCENTAGE_POINTS_OVER_PAR
PriceType_SPREAD = cvar.PriceType_SPREAD
PriceType_YIELD = cvar.PriceType_YIELD
PriceType_FIXED_CABINET_TRADE_PRICE = cvar.PriceType_FIXED_CABINET_TRADE_PRICE
PriceType_VARIABLE_CABINET_TRADE_PRICE = cvar.PriceType_VARIABLE_CABINET_TRADE_PRICE
PriceType_PRODUCT_TICKS_IN_HALFS = cvar.PriceType_PRODUCT_TICKS_IN_HALFS
PriceType_PRODUCT_TICKS_IN_FOURTHS = cvar.PriceType_PRODUCT_TICKS_IN_FOURTHS
PriceType_PRODUCT_TICKS_IN_EIGHTS = cvar.PriceType_PRODUCT_TICKS_IN_EIGHTS
PriceType_PRODUCT_TICKS_IN_SIXTEENTHS = cvar.PriceType_PRODUCT_TICKS_IN_SIXTEENTHS
PriceType_PRODUCT_TICKS_IN_THIRTY_SECONDS = cvar.PriceType_PRODUCT_TICKS_IN_THIRTY_SECONDS
PriceType_PRODUCT_TICKS_IN_SIXTY_FORTHS = cvar.PriceType_PRODUCT_TICKS_IN_SIXTY_FORTHS
PriceType_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS = cvar.PriceType_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS
GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION = cvar.GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION
GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES = cvar.GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES
GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE = cvar.GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE
ListStatusType_ALERT = cvar.ListStatusType_ALERT
ListStatusType_EXECSTARTED = cvar.ListStatusType_EXECSTARTED
ListStatusType_TIMED = cvar.ListStatusType_TIMED
ListStatusType_RESPONSE = cvar.ListStatusType_RESPONSE
ListStatusType_ACK = cvar.ListStatusType_ACK
ListStatusType_ALLDONE = cvar.ListStatusType_ALLDONE
ListStatusType_EXEC_STARTED = cvar.ListStatusType_EXEC_STARTED
ListStatusType_ALL_DONE = cvar.ListStatusType_ALL_DONE
NetGrossInd_NET = cvar.NetGrossInd_NET
NetGrossInd_GROSS = cvar.NetGrossInd_GROSS
ListOrderStatus_CANCELING = cvar.ListOrderStatus_CANCELING
ListOrderStatus_EXECUTING = cvar.ListOrderStatus_EXECUTING
ListOrderStatus_REJECT = cvar.ListOrderStatus_REJECT
ListOrderStatus_ALL_DONE = cvar.ListOrderStatus_ALL_DONE
ListOrderStatus_ALERT = cvar.ListOrderStatus_ALERT
ListOrderStatus_RECEIVEDFOREXECUTION = cvar.ListOrderStatus_RECEIVEDFOREXECUTION
ListOrderStatus_INBIDDINGPROCESS = cvar.ListOrderStatus_INBIDDINGPROCESS
ListOrderStatus_IN_BIDDING_PROCESS = cvar.ListOrderStatus_IN_BIDDING_PROCESS
ListOrderStatus_RECEIVED_FOR_EXECUTION = cvar.ListOrderStatus_RECEIVED_FOR_EXECUTION
ListOrderStatus_CANCELLING = cvar.ListOrderStatus_CANCELLING
ListExecInstType_IMMEDIATE = cvar.ListExecInstType_IMMEDIATE
ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION = cvar.ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN
ListExecInstType_WAIT_FOR_EXECUT_INSTRUCTION = cvar.ListExecInstType_WAIT_FOR_EXECUT_INSTRUCTION
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_3 = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_3
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_4 = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_4
ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_5 = cvar.ListExecInstType_EXCHANGE_SWITCH_CIV_ORDER_5
CxlRejResponseTo_ORDER_CANCEL_REQUEST = cvar.CxlRejResponseTo_ORDER_CANCEL_REQUEST
CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST = cvar.CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST
MultiLegReportingType_SINGLE_SECURITY = cvar.MultiLegReportingType_SINGLE_SECURITY
MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = cvar.MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY
MultiLegReportingType_MULTI_LEG_SECURITY = cvar.MultiLegReportingType_MULTI_LEG_SECURITY
MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY = cvar.MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY
SecurityIDSource_SICOVAM = cvar.SecurityIDSource_SICOVAM
SecurityIDSource_SEDOL = cvar.SecurityIDSource_SEDOL
SecurityIDSource_CUSIP = cvar.SecurityIDSource_CUSIP
SecurityIDSource_QUIK = cvar.SecurityIDSource_QUIK
SecurityIDSource_BELGIAN = cvar.SecurityIDSource_BELGIAN
SecurityIDSource_VALOREN = cvar.SecurityIDSource_VALOREN
SecurityIDSource_DUTCH = cvar.SecurityIDSource_DUTCH
SecurityIDSource_WERTPAPIER = cvar.SecurityIDSource_WERTPAPIER
SecurityIDSource_BLOOMBERG_SYMBOL = cvar.SecurityIDSource_BLOOMBERG_SYMBOL
SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION = cvar.SecurityIDSource_CONSOLIDATED_TAPE_ASSOCIATION
SecurityIDSource_EXCHANGE_SYMBOL = cvar.SecurityIDSource_EXCHANGE_SYMBOL
SecurityIDSource_ISO_COUNTRY_CODE = cvar.SecurityIDSource_ISO_COUNTRY_CODE
SecurityIDSource_ISO_CURRENCY_CODE = cvar.SecurityIDSource_ISO_CURRENCY_CODE
SecurityIDSource_RIC_CODE = cvar.SecurityIDSource_RIC_CODE
SecurityIDSource_ISIN_NUMBER = cvar.SecurityIDSource_ISIN_NUMBER
SecurityIDSource_COMMON = cvar.SecurityIDSource_COMMON
SecurityIDSource_CLEARING_HOUSE = cvar.SecurityIDSource_CLEARING_HOUSE
SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION = cvar.SecurityIDSource_ISDA_FPML_PRODUCT_SPECIFICATION
SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY = cvar.SecurityIDSource_OPTIONS_PRICE_REPORTING_AUTHORITY
SecurityIDSource_OPTION_PRICE_REPORTING_AUTHORITY = cvar.SecurityIDSource_OPTION_PRICE_REPORTING_AUTHORITY
SecurityIDSource_ISDA_FPML_PRODUCT_URL = cvar.SecurityIDSource_ISDA_FPML_PRODUCT_URL
SecurityIDSource_LETTER_OF_CREDIT = cvar.SecurityIDSource_LETTER_OF_CREDIT
SecurityIDSource_MARKETPLACE_ASSIGNED_IDENTIFIER = cvar.SecurityIDSource_MARKETPLACE_ASSIGNED_IDENTIFIER
IOIQty_LARGE = cvar.IOIQty_LARGE
IOIQty_MEDIUM = cvar.IOIQty_MEDIUM
IOIQty_SMALL = cvar.IOIQty_SMALL
IOIQty_UNDISCLOSED_QUANTITY = cvar.IOIQty_UNDISCLOSED_QUANTITY
PositionEffect_FIFO = cvar.PositionEffect_FIFO
PositionEffect_ROLLED = cvar.PositionEffect_ROLLED
PositionEffect_CLOSE = cvar.PositionEffect_CLOSE
PositionEffect_OPEN = cvar.PositionEffect_OPEN
PositionEffect_CLOSE_BUT_NOTIFY_ON_OPEN = cvar.PositionEffect_CLOSE_BUT_NOTIFY_ON_OPEN
PositionEffect_DEFAULT = cvar.PositionEffect_DEFAULT
BenchmarkCurveName_SWAP = cvar.BenchmarkCurveName_SWAP
BenchmarkCurveName_LIBID = cvar.BenchmarkCurveName_LIBID
BenchmarkCurveName_OTHER = cvar.BenchmarkCurveName_OTHER
BenchmarkCurveName_TREASURY = cvar.BenchmarkCurveName_TREASURY
BenchmarkCurveName_EURIBOR = cvar.BenchmarkCurveName_EURIBOR
BenchmarkCurveName_PFANDBRIEFE = cvar.BenchmarkCurveName_PFANDBRIEFE
BenchmarkCurveName_FUTURESWAP = cvar.BenchmarkCurveName_FUTURESWAP
BenchmarkCurveName_MUNIAAA = cvar.BenchmarkCurveName_MUNIAAA
BenchmarkCurveName_LIBOR = cvar.BenchmarkCurveName_LIBOR
BenchmarkCurveName_EONIA = cvar.BenchmarkCurveName_EONIA
BenchmarkCurveName_EUREPO = cvar.BenchmarkCurveName_EUREPO
BenchmarkCurveName_SONIA = cvar.BenchmarkCurveName_SONIA
StipulationType_ABSOLUTE_PREPAYMENT_SPEED = cvar.StipulationType_ABSOLUTE_PREPAYMENT_SPEED
StipulationType_WEIGHTED_AVERAGE_LOAN_AGE = cvar.StipulationType_WEIGHTED_AVERAGE_LOAN_AGE
StipulationType_WEIGHTED_AVERAGE_MATURITY = cvar.StipulationType_WEIGHTED_AVERAGE_MATURITY
StipulationType_CONSTANT_PREPAYMENT_RATE = cvar.StipulationType_CONSTANT_PREPAYMENT_RATE
StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE = cvar.StipulationType_FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE
StipulationType_WEIGHTED_AVERAGE_LIFE = cvar.StipulationType_WEIGHTED_AVERAGE_LIFE
StipulationType_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE = cvar.StipulationType_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE
StipulationType_SINGLE_MONTHLY_MORTALITY = cvar.StipulationType_SINGLE_MONTHLY_MORTALITY
StipulationType_MONTHLY_PREPAYMENT_RATE = cvar.StipulationType_MONTHLY_PREPAYMENT_RATE
StipulationType_OF_BMA_PREPAYMENT_CURVE = cvar.StipulationType_OF_BMA_PREPAYMENT_CURVE
StipulationType_OF_PROSPECTUS_PREPAYMENT_CURVE = cvar.StipulationType_OF_PROSPECTUS_PREPAYMENT_CURVE
StipulationType_CONSTANT_PREPAYMENT_PENALTY = cvar.StipulationType_CONSTANT_PREPAYMENT_PENALTY
StipulationType_LOT_VARIANCE = cvar.StipulationType_LOT_VARIANCE
StipulationType_CONSTANT_PREPAYMENT_YIELD = cvar.StipulationType_CONSTANT_PREPAYMENT_YIELD
StipulationType_WEIGHTED_AVERAGE_COUPON = cvar.StipulationType_WEIGHTED_AVERAGE_COUPON
StipulationType_YEAR_OF_ISSUE = cvar.StipulationType_YEAR_OF_ISSUE
StipulationType_MATURITY_YEAR = cvar.StipulationType_MATURITY_YEAR
StipulationType_NUMBER_OF_PIECES = cvar.StipulationType_NUMBER_OF_PIECES
StipulationType_POOLS_MAXIMUM = cvar.StipulationType_POOLS_MAXIMUM
StipulationType_POOLS_PER_MILLION = cvar.StipulationType_POOLS_PER_MILLION
StipulationType_POOLS_PER_LOT = cvar.StipulationType_POOLS_PER_LOT
StipulationType_POOLS_PER_TRADE = cvar.StipulationType_POOLS_PER_TRADE
StipulationType_PRODUCTION_YEAR = cvar.StipulationType_PRODUCTION_YEAR
StipulationType_TRADE_VARIANCE = cvar.StipulationType_TRADE_VARIANCE
StipulationType_GEOGRAPHICS = cvar.StipulationType_GEOGRAPHICS
StipulationType_AMT = cvar.StipulationType_AMT
StipulationType_AUTO_REINVESTMENT_AT_RATE_OR_BETTER = cvar.StipulationType_AUTO_REINVESTMENT_AT_RATE_OR_BETTER
StipulationType_BANK_QUALIFIED = cvar.StipulationType_BANK_QUALIFIED
StipulationType_BARGAIN_CONDITIONS_SEE = cvar.StipulationType_BARGAIN_CONDITIONS_SEE
StipulationType_COUPON_RANGE = cvar.StipulationType_COUPON_RANGE
StipulationType_ISO_CURRENCY_CODE = cvar.StipulationType_ISO_CURRENCY_CODE
StipulationType_CUSTOM_START_END_DATE = cvar.StipulationType_CUSTOM_START_END_DATE
StipulationType_GEOGRAPHICS_AND_RANGE = cvar.StipulationType_GEOGRAPHICS_AND_RANGE
StipulationType_VALUATION_DISCOUNT = cvar.StipulationType_VALUATION_DISCOUNT
StipulationType_INSURED = cvar.StipulationType_INSURED
StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE = cvar.StipulationType_YEAR_OR_YEAR_MONTH_OF_ISSUE
StipulationType_ISSUERS_TICKER = cvar.StipulationType_ISSUERS_TICKER
StipulationType_ISSUE_SIZE_RANGE = cvar.StipulationType_ISSUE_SIZE_RANGE
StipulationType_LOOKBACK_DAYS = cvar.StipulationType_LOOKBACK_DAYS
StipulationType_EXPLICIT_LOT_IDENTIFIER = cvar.StipulationType_EXPLICIT_LOT_IDENTIFIER
StipulationType_MATURITY_YEAR_AND_MONTH = cvar.StipulationType_MATURITY_YEAR_AND_MONTH
StipulationType_MATURITY_RANGE = cvar.StipulationType_MATURITY_RANGE
StipulationType_MAXIMUM_SUBSTITUTIONS = cvar.StipulationType_MAXIMUM_SUBSTITUTIONS
StipulationType_MINIMUM_QUANTITY = cvar.StipulationType_MINIMUM_QUANTITY
StipulationType_MINIMUM_INCREMENT = cvar.StipulationType_MINIMUM_INCREMENT
StipulationType_MINIMUM_DENOMINATION = cvar.StipulationType_MINIMUM_DENOMINATION
StipulationType_PAYMENT_FREQUENCY_CALENDAR = cvar.StipulationType_PAYMENT_FREQUENCY_CALENDAR
StipulationType_PRICE_RANGE = cvar.StipulationType_PRICE_RANGE
StipulationType_PRICING_FREQUENCY = cvar.StipulationType_PRICING_FREQUENCY
StipulationType_CALL_PROTECTION = cvar.StipulationType_CALL_PROTECTION
StipulationType_PURPOSE = cvar.StipulationType_PURPOSE
StipulationType_BENCHMARK_PRICE_SOURCE = cvar.StipulationType_BENCHMARK_PRICE_SOURCE
StipulationType_RATING_SOURCE_AND_RANGE = cvar.StipulationType_RATING_SOURCE_AND_RANGE
StipulationType_TYPE_OF_REDEMPTION_VALUES_ARE_NONCALLABLE_CALLABLE_PREFUNDED_ESCROWEDTOMATURITY_PUTABLE_CONVERTIBLE = cvar.StipulationType_TYPE_OF_REDEMPTION_VALUES_ARE_NONCALLABLE_CALLABLE_PREFUNDED_ESCROWEDTOMATURITY_PUTABLE_CONVERTIBLE
StipulationType_RESTRICTED = cvar.StipulationType_RESTRICTED
StipulationType_MARKET_SECTOR = cvar.StipulationType_MARKET_SECTOR
StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED = cvar.StipulationType_SECURITYTYPE_INCLUDED_OR_EXCLUDED
StipulationType_STRUCTURE = cvar.StipulationType_STRUCTURE
StipulationType_SUBSTITUTIONS_FREQUENCY = cvar.StipulationType_SUBSTITUTIONS_FREQUENCY
StipulationType_SUBSTITUTIONS_LEFT = cvar.StipulationType_SUBSTITUTIONS_LEFT
StipulationType_FREEFORM_TEXT = cvar.StipulationType_FREEFORM_TEXT
StipulationType_WEIGHTED_AVERAGE_COUPONVALUE_IN_PERCENT = cvar.StipulationType_WEIGHTED_AVERAGE_COUPONVALUE_IN_PERCENT
StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON_VALUE_IN_PERCENT = cvar.StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON_VALUE_IN_PERCENT
StipulationType_WEIGHTED_AVERAGE_LOAN_AGE_VALUE_IN_MONTHS = cvar.StipulationType_WEIGHTED_AVERAGE_LOAN_AGE_VALUE_IN_MONTHS
StipulationType_WEIGHTED_AVERAGE_MATURITY_VALUE_IN_MONTHS = cvar.StipulationType_WEIGHTED_AVERAGE_MATURITY_VALUE_IN_MONTHS
StipulationType_WHOLE_POOL = cvar.StipulationType_WHOLE_POOL
StipulationType_YIELD_RANGE = cvar.StipulationType_YIELD_RANGE
StipulationType_ALTERNATIVE_MINIMUM_TAX = cvar.StipulationType_ALTERNATIVE_MINIMUM_TAX
StipulationType_BARGAIN_CONDITIONS = cvar.StipulationType_BARGAIN_CONDITIONS
StipulationType_TYPE_OF_REDEMPTION = cvar.StipulationType_TYPE_OF_REDEMPTION
StipulationType_SECURITY_TYPE_INCLUDED_OR_EXCLUDED = cvar.StipulationType_SECURITY_TYPE_INCLUDED_OR_EXCLUDED
StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON = cvar.StipulationType_WEIGHTED_AVERAGE_LIFE_COUPON
StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE
StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE
StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE = cvar.StipulationType_PERCENT_OF_BMA_PREPAYMENT_CURVE
StipulationType_AVERAGE_FICO_SCORE = cvar.StipulationType_AVERAGE_FICO_SCORE
StipulationType_AVERAGE_LOAN_SIZE = cvar.StipulationType_AVERAGE_LOAN_SIZE
StipulationType_MAXIMUM_LOAN_BALANCE = cvar.StipulationType_MAXIMUM_LOAN_BALANCE
StipulationType_POOL_IDENTIFIER = cvar.StipulationType_POOL_IDENTIFIER
StipulationType_TYPE_OF_ROLL_TRADE = cvar.StipulationType_TYPE_OF_ROLL_TRADE
StipulationType_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE = cvar.StipulationType_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE
StipulationType_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE = cvar.StipulationType_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE
StipulationType_INTEREST_OF_ROLLING_OR_CLOSING_TRADE = cvar.StipulationType_INTEREST_OF_ROLLING_OR_CLOSING_TRADE
StipulationType_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET = cvar.StipulationType_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET
StipulationType_BROKERS_SALES_CREDIT = cvar.StipulationType_BROKERS_SALES_CREDIT
StipulationType_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS = cvar.StipulationType_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS
StipulationType_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS = cvar.StipulationType_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS
StipulationType_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY = cvar.StipulationType_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY
StipulationType_MAXIMUM_ORDER_SIZE = cvar.StipulationType_MAXIMUM_ORDER_SIZE
StipulationType_ORDER_QUANTITY_INCREMENT = cvar.StipulationType_ORDER_QUANTITY_INCREMENT
StipulationType_PRIMARY_OR_SECONDARY_MARKET_INDICATOR = cvar.StipulationType_PRIMARY_OR_SECONDARY_MARKET_INDICATOR
StipulationType_BROKER_SALES_CREDIT_OVERRIDE = cvar.StipulationType_BROKER_SALES_CREDIT_OVERRIDE
StipulationType_TRADERS_CREDIT = cvar.StipulationType_TRADERS_CREDIT
StipulationType_DISCOUNT_RATE = cvar.StipulationType_DISCOUNT_RATE
StipulationType_YIELD_TO_MATURITY = cvar.StipulationType_YIELD_TO_MATURITY
YieldType_TRUE_YIELD_THE_YIELD_CALCULATED_WITH_COUPON_DATES_MOVED_FROM_A_WEEKEND_OR_HOLIDAY_TO_THE_NEXT_VALID_SETTLEMENT_DATE = cvar.YieldType_TRUE_YIELD_THE_YIELD_CALCULATED_WITH_COUPON_DATES_MOVED_FROM_A_WEEKEND_OR_HOLIDAY_TO_THE_NEXT_VALID_SETTLEMENT_DATE
YieldType_PREVIOUS_CLOSE_YIELD_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_1_DAY_AGO = cvar.YieldType_PREVIOUS_CLOSE_YIELD_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_1_DAY_AGO
YieldType_YIELD_TO_LONGEST_AVERAGE = cvar.YieldType_YIELD_TO_LONGEST_AVERAGE
YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE_THE_YIELD_ASSUMING_ONLY_MANDATORY_SINKS_ARE_TAKEN_THIS_RESULTS_IN_A_LOWER_PAYDOWN_OF_DEBT_THE_YIELD_IS_THEN_CALCULATED_TO_THE_FINAL_PAYMENT_DATE = cvar.YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE_THE_YIELD_ASSUMING_ONLY_MANDATORY_SINKS_ARE_TAKEN_THIS_RESULTS_IN_A_LOWER_PAYDOWN_OF_DEBT_THE_YIELD_IS_THEN_CALCULATED_TO_THE_FINAL_PAYMENT_DATE
YieldType_YIELD_TO_MATURITY_THE_YIELD_OF_A_BOND_TO_ITS_MATURITY_DATE = cvar.YieldType_YIELD_TO_MATURITY_THE_YIELD_OF_A_BOND_TO_ITS_MATURITY_DATE
YieldType_MARK_TO_MARKET_YIELD_AN_ADJUSTMENT_IN_THE_VALUATION_OF_A_SECURITIES_PORTFOLIO_TO_REFLECT_THE_CURRENT_MARKET_VALUES_OF_THE_RESPECTIVE_SECURITIES_IN_THE_PORTFOLIO = cvar.YieldType_MARK_TO_MARKET_YIELD_AN_ADJUSTMENT_IN_THE_VALUATION_OF_A_SECURITIES_PORTFOLIO_TO_REFLECT_THE_CURRENT_MARKET_VALUES_OF_THE_RESPECTIVE_SECURITIES_IN_THE_PORTFOLIO
YieldType_OPEN_AVERAGE_YIELD_THE_AVERAGE_YIELD_OF_THE_RESPECTIVE_SECURITIES_IN_THE_PORTFOLIO = cvar.YieldType_OPEN_AVERAGE_YIELD_THE_AVERAGE_YIELD_OF_THE_RESPECTIVE_SECURITIES_IN_THE_PORTFOLIO
YieldType_YIELD_TO_NEXT_PUT_THE_YIELD_TO_THE_DATE_AT_WHICH_THE_BOND_HOLDER_CAN_NEXT_PUT_THE_BOND_TO_THE_ISSUER = cvar.YieldType_YIELD_TO_NEXT_PUT_THE_YIELD_TO_THE_DATE_AT_WHICH_THE_BOND_HOLDER_CAN_NEXT_PUT_THE_BOND_TO_THE_ISSUER
YieldType_PROCEEDS_YIELD_THE_CD_EQUIVALENT_YIELD_WHEN_THE_REMAINING_TIME_TO_MATURITY_IS_LESS_THAN_TWO_YEARS = cvar.YieldType_PROCEEDS_YIELD_THE_CD_EQUIVALENT_YIELD_WHEN_THE_REMAINING_TIME_TO_MATURITY_IS_LESS_THAN_TWO_YEARS
YieldType_SEMI_ANNUAL_YIELD_THE_YIELD_OF_A_BOND_WHOSE_COUPON_PAYMENTS_ARE_REINVESTED_SEMI_ANNUALLY = cvar.YieldType_SEMI_ANNUAL_YIELD_THE_YIELD_OF_A_BOND_WHOSE_COUPON_PAYMENTS_ARE_REINVESTED_SEMI_ANNUALLY
YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE_SAME_AS_AVGLIFE_ABOVE = cvar.YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE_SAME_AS_AVGLIFE_ABOVE
YieldType_YIELD_TO_SHORTEST_AVERAGE = cvar.YieldType_YIELD_TO_SHORTEST_AVERAGE
YieldType_SIMPLE_YIELD_THE_YIELD_OF_A_BOND_ASSUMING_NO_REINVESTMENT_OF_COUPON_PAYMENTS = cvar.YieldType_SIMPLE_YIELD_THE_YIELD_OF_A_BOND_ASSUMING_NO_REINVESTMENT_OF_COUPON_PAYMENTS
YieldType_YIELD_TO_TENDER_DATE_THE_YIELD_ON_A_MUNICIPAL_BOND_TO_ITS_MANDATORY_TENDER_DATE = cvar.YieldType_YIELD_TO_TENDER_DATE_THE_YIELD_ON_A_MUNICIPAL_BOND_TO_ITS_MANDATORY_TENDER_DATE
YieldType_YIELD_VALUE_OF_1_32_THE_AMOUNT_THAT_THE_YIELD_WILL_CHANGE_FOR_A_1_32ND_CHANGE_IN_PRICE = cvar.YieldType_YIELD_VALUE_OF_1_32_THE_AMOUNT_THAT_THE_YIELD_WILL_CHANGE_FOR_A_1_32ND_CHANGE_IN_PRICE
YieldType_YIELD_TO_WORST_CONVENTION_THE_LOWEST_YIELD_TO_ALL_POSSIBLE_REDEMPTION_DATE_SCENARIOS = cvar.YieldType_YIELD_TO_WORST_CONVENTION_THE_LOWEST_YIELD_TO_ALL_POSSIBLE_REDEMPTION_DATE_SCENARIOS
YieldType_TAX_EQUIVALENT_YIELD_THE_AFTER_TAX_YIELD_GROSSED_UP_BY_THE_MAXIMUM_FEDERAL_TAX_RATE_OF_396_FOR_COMPARISON_TO_TAXABLE_YIELDS = cvar.YieldType_TAX_EQUIVALENT_YIELD_THE_AFTER_TAX_YIELD_GROSSED_UP_BY_THE_MAXIMUM_FEDERAL_TAX_RATE_OF_396_FOR_COMPARISON_TO_TAXABLE_YIELDS
YieldType_ANNUAL_YIELD_THE_ANNUAL_INTEREST_OR_DIVIDEND_INCOME_AN_INVESTMENT_EARNS_EXPRESSED_AS_A_PERCENTAGE_OF_THE_INVESTMENTS_TOTAL_VALUE = cvar.YieldType_ANNUAL_YIELD_THE_ANNUAL_INTEREST_OR_DIVIDEND_INCOME_AN_INVESTMENT_EARNS_EXPRESSED_AS_A_PERCENTAGE_OF_THE_INVESTMENTS_TOTAL_VALUE
YieldType_CLOSING_YIELD_MOST_RECENT_YEAR_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_YEARS_END = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_YEAR_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_YEARS_END
YieldType_YIELD_TO_NEXT_REFUND = cvar.YieldType_YIELD_TO_NEXT_REFUND
YieldType_AFTER_TAX_YIELD = cvar.YieldType_AFTER_TAX_YIELD
YieldType_YIELD_AT_ISSUE = cvar.YieldType_YIELD_AT_ISSUE
YieldType_YIELD_TO_AVERAGE_LIFE_THE_YIELD_ASSUMING_THAT_ALL_SINKS = cvar.YieldType_YIELD_TO_AVERAGE_LIFE_THE_YIELD_ASSUMING_THAT_ALL_SINKS
YieldType_YIELD_TO_AVERAGE_MATURITY_THE_YIELD_ACHIEVED_BY_SUBSTITUTING_A_BONDS_AVERAGE_MATURITY_FOR_THE_ISSUES_FINAL_MATURITY_DATE = cvar.YieldType_YIELD_TO_AVERAGE_MATURITY_THE_YIELD_ACHIEVED_BY_SUBSTITUTING_A_BONDS_AVERAGE_MATURITY_FOR_THE_ISSUES_FINAL_MATURITY_DATE
YieldType_BOOK_YIELD_THE_YIELD_OF_A_SECURITY_CALCULATED_BY_USING_ITS_BOOK_VALUE_INSTEAD_OF_THE_CURRENT_MARKET_PRICE_THIS_TERM_IS_TYPICALLY_USED_IN_THE_US_DOMESTIC_MARKET = cvar.YieldType_BOOK_YIELD_THE_YIELD_OF_A_SECURITY_CALCULATED_BY_USING_ITS_BOOK_VALUE_INSTEAD_OF_THE_CURRENT_MARKET_PRICE_THIS_TERM_IS_TYPICALLY_USED_IN_THE_US_DOMESTIC_MARKET
YieldType_YIELD_TO_NEXT_CALL_THE_YIELD_OF_A_BOND_TO_THE_NEXT_POSSIBLE_CALL_DATE = cvar.YieldType_YIELD_TO_NEXT_CALL_THE_YIELD_OF_A_BOND_TO_THE_NEXT_POSSIBLE_CALL_DATE
YieldType_YIELD_CHANGE_SINCE_CLOSE_THE_CHANGE_IN_THE_YIELD_SINCE_THE_PREVIOUS_DAYS_CLOSING_YIELD = cvar.YieldType_YIELD_CHANGE_SINCE_CLOSE_THE_CHANGE_IN_THE_YIELD_SINCE_THE_PREVIOUS_DAYS_CLOSING_YIELD
YieldType_COMPOUND_YIELD_THE_YIELD_OF_CERTAIN_JAPANESE_BONDS_BASED_ON_ITS_PRICE_CERTAIN_JAPANESE_BONDS_HAVE_IRREGULAR_FIRST_OR_LAST_COUPONS_AND_THE_YIELD_IS_CALCULATED_COMPOUND_FOR_THESE_IRREGULAR_PERIODS = cvar.YieldType_COMPOUND_YIELD_THE_YIELD_OF_CERTAIN_JAPANESE_BONDS_BASED_ON_ITS_PRICE_CERTAIN_JAPANESE_BONDS_HAVE_IRREGULAR_FIRST_OR_LAST_COUPONS_AND_THE_YIELD_IS_CALCULATED_COMPOUND_FOR_THESE_IRREGULAR_PERIODS
YieldType_CURRENT_YIELD_ANNUAL_INTEREST_ON_A_BOND_DIVIDED_BY_THE_MARKET_VALUE_THE_ACTUAL_INCOME_RATE_OF_RETURN_AS_OPPOSED_TO_THE_COUPON_RATE_EXPRESSED_AS_A_PERCENTAGE = cvar.YieldType_CURRENT_YIELD_ANNUAL_INTEREST_ON_A_BOND_DIVIDED_BY_THE_MARKET_VALUE_THE_ACTUAL_INCOME_RATE_OF_RETURN_AS_OPPOSED_TO_THE_COUPON_RATE_EXPRESSED_AS_A_PERCENTAGE
YieldType_TRUE_GROSS_YIELD_YIELD_CALCULATED_USING_THE_PRICE_INCLUDING_ACCRUED_INTEREST_WHERE_COUPON_DATES_ARE_MOVED_FROM_HOLIDAYS_AND_WEEKENDS_TO_THE_NEXT_TRADING_DAY = cvar.YieldType_TRUE_GROSS_YIELD_YIELD_CALCULATED_USING_THE_PRICE_INCLUDING_ACCRUED_INTEREST_WHERE_COUPON_DATES_ARE_MOVED_FROM_HOLIDAYS_AND_WEEKENDS_TO_THE_NEXT_TRADING_DAY
YieldType_GOVERNMENT_EQUIVALENT_YIELD_ASK_YIELD_BASED_ON_SEMI_ANNUAL_COUPONS_COMPOUNDING_IN_ALL_PERIODS_AND_ACTUAL_ACTUAL_CALENDAR = cvar.YieldType_GOVERNMENT_EQUIVALENT_YIELD_ASK_YIELD_BASED_ON_SEMI_ANNUAL_COUPONS_COMPOUNDING_IN_ALL_PERIODS_AND_ACTUAL_ACTUAL_CALENDAR
YieldType_YIELD_WITH_INFLATION_ASSUMPTION_BASED_ON_PRICE_THE_RETURN_AN_INVESTOR_WOULD_REQUIRE_ON_A_NORMAL_BOND_THAT_WOULD_MAKE_THE_REAL_RETURN_EQUAL_TO_THAT_OF_THE_INFLATION_INDEXED_BOND_ASSUMING_A_CONSTANT_INFLATION_RATE = cvar.YieldType_YIELD_WITH_INFLATION_ASSUMPTION_BASED_ON_PRICE_THE_RETURN_AN_INVESTOR_WOULD_REQUIRE_ON_A_NORMAL_BOND_THAT_WOULD_MAKE_THE_REAL_RETURN_EQUAL_TO_THAT_OF_THE_INFLATION_INDEXED_BOND_ASSUMING_A_CONSTANT_INFLATION_RATE
YieldType_INVERSE_FLOATER_BOND_YIELD_INVERSE_FLOATER_SEMI_ANNUAL_BOND_EQUIVALENT_RATE = cvar.YieldType_INVERSE_FLOATER_BOND_YIELD_INVERSE_FLOATER_SEMI_ANNUAL_BOND_EQUIVALENT_RATE
YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_QUARTERS_END = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_QUARTERS_END
YieldType_MOST_RECENT_CLOSING_YIELD_THE_LAST_AVAILABLE_YIELD_STORED_IN_HISTORY_COMPUTED_USING_PRICE = cvar.YieldType_MOST_RECENT_CLOSING_YIELD_THE_LAST_AVAILABLE_YIELD_STORED_IN_HISTORY_COMPUTED_USING_PRICE
YieldType_CLOSING_YIELD_MOST_RECENT_MONTH_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_MONTHS_END = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_MONTH_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE_AS_OF_THE_MOST_RECENT_MONTHS_END
YieldType_CLOSING_YIELD_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE = cvar.YieldType_CLOSING_YIELD_THE_YIELD_OF_A_BOND_BASED_ON_THE_CLOSING_PRICE
YieldType_ANNUAL_YIELD = cvar.YieldType_ANNUAL_YIELD
YieldType_YIELD_TO_AVERAGE_MATURITY = cvar.YieldType_YIELD_TO_AVERAGE_MATURITY
YieldType_BOOK_YIELD = cvar.YieldType_BOOK_YIELD
YieldType_YIELD_TO_NEXT_CALL = cvar.YieldType_YIELD_TO_NEXT_CALL
YieldType_YIELD_CHANGE_SINCE_CLOSE = cvar.YieldType_YIELD_CHANGE_SINCE_CLOSE
YieldType_CLOSING_YIELD = cvar.YieldType_CLOSING_YIELD
YieldType_COMPOUND_YIELD = cvar.YieldType_COMPOUND_YIELD
YieldType_CURRENT_YIELD = cvar.YieldType_CURRENT_YIELD
YieldType_TRUE_GROSS_YIELD = cvar.YieldType_TRUE_GROSS_YIELD
YieldType_GOVERNMENT_EQUIVALENT_YIELD = cvar.YieldType_GOVERNMENT_EQUIVALENT_YIELD
YieldType_YIELD_WITH_INFLATION_ASSUMPTION = cvar.YieldType_YIELD_WITH_INFLATION_ASSUMPTION
YieldType_INVERSE_FLOATER_BOND_YIELD = cvar.YieldType_INVERSE_FLOATER_BOND_YIELD
YieldType_MOST_RECENT_CLOSING_YIELD = cvar.YieldType_MOST_RECENT_CLOSING_YIELD
YieldType_CLOSING_YIELD_MOST_RECENT_MONTH = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_MONTH
YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_QUARTER
YieldType_CLOSING_YIELD_MOST_RECENT_YEAR = cvar.YieldType_CLOSING_YIELD_MOST_RECENT_YEAR
YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE = cvar.YieldType_YIELD_TO_LONGEST_AVERAGE_LIFE
YieldType_MARK_TO_MARKET_YIELD = cvar.YieldType_MARK_TO_MARKET_YIELD
YieldType_YIELD_TO_MATURITY = cvar.YieldType_YIELD_TO_MATURITY
YieldType_OPEN_AVERAGE_YIELD = cvar.YieldType_OPEN_AVERAGE_YIELD
YieldType_YIELD_TO_NEXT_PUT = cvar.YieldType_YIELD_TO_NEXT_PUT
YieldType_PREVIOUS_CLOSE_YIELD = cvar.YieldType_PREVIOUS_CLOSE_YIELD
YieldType_PROCEEDS_YIELD = cvar.YieldType_PROCEEDS_YIELD
YieldType_SEMI_ANNUAL_YIELD = cvar.YieldType_SEMI_ANNUAL_YIELD
YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE = cvar.YieldType_YIELD_TO_SHORTEST_AVERAGE_LIFE
YieldType_SIMPLE_YIELD = cvar.YieldType_SIMPLE_YIELD
YieldType_TAX_EQUIVALENT_YIELD = cvar.YieldType_TAX_EQUIVALENT_YIELD
YieldType_YIELD_TO_TENDER_DATE = cvar.YieldType_YIELD_TO_TENDER_DATE
YieldType_TRUE_YIELD = cvar.YieldType_TRUE_YIELD
YieldType_YIELD_VALUE_OF_1_32 = cvar.YieldType_YIELD_VALUE_OF_1_32
YieldType_YIELD_TO_WORST = cvar.YieldType_YIELD_TO_WORST
YieldType_YIELD_TO_AVG_MATURITY = cvar.YieldType_YIELD_TO_AVG_MATURITY
YieldType_GVNT_EQUIVALENT_YIELD = cvar.YieldType_GVNT_EQUIVALENT_YIELD
TradedFlatSwitch_NO = cvar.TradedFlatSwitch_NO
TradedFlatSwitch_YES = cvar.TradedFlatSwitch_YES
QuoteStatus_REMOVED_FROM_MARKET = cvar.QuoteStatus_REMOVED_FROM_MARKET
QuoteStatus_CANCELED_FOR_SYMBOL = cvar.QuoteStatus_CANCELED_FOR_SYMBOL
QuoteStatus_PENDING = cvar.QuoteStatus_PENDING
QuoteStatus_QUOTE_NOT_FOUND = cvar.QuoteStatus_QUOTE_NOT_FOUND
QuoteStatus_QUERY = cvar.QuoteStatus_QUERY
QuoteStatus_EXPIRED = cvar.QuoteStatus_EXPIRED
QuoteStatus_REJECTED = cvar.QuoteStatus_REJECTED
QuoteStatus_CANCELED_ALL = cvar.QuoteStatus_CANCELED_ALL
QuoteStatus_CANCELED_FOR_UNDERLYING = cvar.QuoteStatus_CANCELED_FOR_UNDERLYING
QuoteStatus_CANCELED_FOR_SECURITY_TYPE = cvar.QuoteStatus_CANCELED_FOR_SECURITY_TYPE
QuoteStatus_ACCEPTED = cvar.QuoteStatus_ACCEPTED
QuoteStatus_PASS = cvar.QuoteStatus_PASS
QuoteStatus_LOCKED_MARKET_WARNING = cvar.QuoteStatus_LOCKED_MARKET_WARNING
QuoteStatus_CROSS_MARKET_WARNING = cvar.QuoteStatus_CROSS_MARKET_WARNING
QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET = cvar.QuoteStatus_CANCELED_DUE_TO_LOCK_MARKET
QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET = cvar.QuoteStatus_CANCELED_DUE_TO_CROSS_MARKET
QuoteStatus_CANCEL_FOR_SYMBOL = cvar.QuoteStatus_CANCEL_FOR_SYMBOL
QuoteStatus_ACTIVE = cvar.QuoteStatus_ACTIVE
QuoteStatus_CANCELED = cvar.QuoteStatus_CANCELED
QuoteStatus_UNSOLICITED_QUOTE_REPLENISHMENT = cvar.QuoteStatus_UNSOLICITED_QUOTE_REPLENISHMENT
QuoteStatus_PENDING_END_TRADE = cvar.QuoteStatus_PENDING_END_TRADE
QuoteStatus_TOO_LATE_TO_END = cvar.QuoteStatus_TOO_LATE_TO_END
PartyIDSource_CHINESE_B_SHARE = cvar.PartyIDSource_CHINESE_B_SHARE
PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER = cvar.PartyIDSource_US_EMPLOYER_IDENTIFICATION_NUMBER
PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER = cvar.PartyIDSource_AUSTRALIAN_TAX_FILE_NUMBER
PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER = cvar.PartyIDSource_AUSTRALIAN_BUSINESS_NUMBER
PartyIDSource_ISO_COUNTRY_CODE = cvar.PartyIDSource_ISO_COUNTRY_CODE
PartyIDSource_BIC = cvar.PartyIDSource_BIC
PartyIDSource_US_SOCIAL_SECURITY_NUMBER = cvar.PartyIDSource_US_SOCIAL_SECURITY_NUMBER
PartyIDSource_PROPRIETARY_CUSTOM_CODE = cvar.PartyIDSource_PROPRIETARY_CUSTOM_CODE
PartyIDSource_SETTLEMENT_ENTITY_LOCATION = cvar.PartyIDSource_SETTLEMENT_ENTITY_LOCATION
PartyIDSource_KOREAN_INVESTOR_ID = cvar.PartyIDSource_KOREAN_INVESTOR_ID
PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII = cvar.PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII
PartyIDSource_TAIWANESE_TRADING_ACCOUNT = cvar.PartyIDSource_TAIWANESE_TRADING_ACCOUNT
PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY = cvar.PartyIDSource_MALAYSIAN_CENTRAL_DEPOSITORY
PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER = cvar.PartyIDSource_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER
PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER = cvar.PartyIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER
PartyIDSource_MIC = cvar.PartyIDSource_MIC
PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE = cvar.PartyIDSource_CSD_PARTICIPANT_MEMBER_CODE
PartyIDSource_DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_BEST_PRACTICE_GUIDELINES_DOCUMENT = cvar.PartyIDSource_DIRECTED_BROKER_THREE_CHARACTER_ACRONYM_AS_DEFINED_IN_ISITC_ETC_BEST_PRACTICE_GUIDELINES_DOCUMENT
PartyIDSource_US_EMPLOYER_OR_TAX_ID_NUMBER = cvar.PartyIDSource_US_EMPLOYER_OR_TAX_ID_NUMBER
PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID = cvar.PartyIDSource_TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID
PartyIDSource_TAIWANESE_TRADING_ACCT = cvar.PartyIDSource_TAIWANESE_TRADING_ACCT
PartyIDSource_CHINESE_INVESTOR_ID = cvar.PartyIDSource_CHINESE_INVESTOR_ID
PartyIDSource_PROPRIETARY = cvar.PartyIDSource_PROPRIETARY
PartyRole_CORRESPONDANT_CLEARING_FIRM = cvar.PartyRole_CORRESPONDANT_CLEARING_FIRM
PartyRole_CLIENT_ID = cvar.PartyRole_CLIENT_ID
PartyRole_UNDERLYING_CONTRA_FIRM = cvar.PartyRole_UNDERLYING_CONTRA_FIRM
PartyRole_SPONSORING_FIRM = cvar.PartyRole_SPONSORING_FIRM
PartyRole_CONTRA_CLEARING_FIRM = cvar.PartyRole_CONTRA_CLEARING_FIRM
PartyRole_CONTRA_FIRM = cvar.PartyRole_CONTRA_FIRM
PartyRole_EXECUTING_SYSTEM = cvar.PartyRole_EXECUTING_SYSTEM
PartyRole_ENTERING_FIRM = cvar.PartyRole_ENTERING_FIRM
PartyRole_EXECUTING_FIRM = cvar.PartyRole_EXECUTING_FIRM
PartyRole_BROKER_OF_CREDIT = cvar.PartyRole_BROKER_OF_CREDIT
PartyRole_INVESTOR_ID = cvar.PartyRole_INVESTOR_ID
PartyRole_INTRODUCING_FIRM = cvar.PartyRole_INTRODUCING_FIRM
PartyRole_GIVEUP_CLEARING_FIRM = cvar.PartyRole_GIVEUP_CLEARING_FIRM
PartyRole_LOCATE_LENDING_FIRM = cvar.PartyRole_LOCATE_LENDING_FIRM
PartyRole_FUND_MANAGER_CLIENT_ID = cvar.PartyRole_FUND_MANAGER_CLIENT_ID
PartyRole_SETTLEMENT_LOCATION = cvar.PartyRole_SETTLEMENT_LOCATION
PartyRole_ORDER_ORIGINATION_TRADER = cvar.PartyRole_ORDER_ORIGINATION_TRADER
PartyRole_EXECUTING_TRADER = cvar.PartyRole_EXECUTING_TRADER
PartyRole_ORDER_ORIGINATION_FIRM = cvar.PartyRole_ORDER_ORIGINATION_FIRM
PartyRole_CLEARING_FIRM = cvar.PartyRole_CLEARING_FIRM
PartyRole_CLEARING_ORGANIZATION = cvar.PartyRole_CLEARING_ORGANIZATION
PartyRole_EXCHANGE = cvar.PartyRole_EXCHANGE
PartyRole_CUSTOMER_ACCOUNT = cvar.PartyRole_CUSTOMER_ACCOUNT
PartyRole_CORRESPONDENT_CLEARING_ORGANIZATION = cvar.PartyRole_CORRESPONDENT_CLEARING_ORGANIZATION
PartyRole_CORRESPONDENT_BROKER = cvar.PartyRole_CORRESPONDENT_BROKER
PartyRole_BUYER_SELLER = cvar.PartyRole_BUYER_SELLER
PartyRole_CUSTODIAN = cvar.PartyRole_CUSTODIAN
PartyRole_INTERMEDIARY = cvar.PartyRole_INTERMEDIARY
PartyRole_AGENT = cvar.PartyRole_AGENT
PartyRole_SUB_CUSTODIAN = cvar.PartyRole_SUB_CUSTODIAN
PartyRole_BENEFICIARY = cvar.PartyRole_BENEFICIARY
PartyRole_INTERESTED_PARTY = cvar.PartyRole_INTERESTED_PARTY
PartyRole_REGULATORY_BODY = cvar.PartyRole_REGULATORY_BODY
PartyRole_LIQUIDITY_PROVIDER = cvar.PartyRole_LIQUIDITY_PROVIDER
PartyRole_ENTERING_TRADER = cvar.PartyRole_ENTERING_TRADER
PartyRole_CONTRA_TRADER = cvar.PartyRole_CONTRA_TRADER
PartyRole_POSITION_ACCOUNT = cvar.PartyRole_POSITION_ACCOUNT
PartyRole_LOCATE = cvar.PartyRole_LOCATE
PartyRole_CONTRA_INVESTOR_ID = cvar.PartyRole_CONTRA_INVESTOR_ID
PartyRole_TRANSFER_TO_FIRM = cvar.PartyRole_TRANSFER_TO_FIRM
PartyRole_CONTRA_POSITION_ACCOUNT = cvar.PartyRole_CONTRA_POSITION_ACCOUNT
PartyRole_CONTRA_EXCHANGE = cvar.PartyRole_CONTRA_EXCHANGE
PartyRole_INTERNAL_CARRY_ACCOUNT = cvar.PartyRole_INTERNAL_CARRY_ACCOUNT
PartyRole_ORDER_ENTRY_OPERATOR_ID = cvar.PartyRole_ORDER_ENTRY_OPERATOR_ID
PartyRole_SECONDARY_ACCOUNT_NUMBER = cvar.PartyRole_SECONDARY_ACCOUNT_NUMBER
PartyRole_FORIEGN_FIRM = cvar.PartyRole_FORIEGN_FIRM
PartyRole_THIRD_PARTY_ALLOCATION_FIRM = cvar.PartyRole_THIRD_PARTY_ALLOCATION_FIRM
PartyRole_CLAIMING_ACCOUNT = cvar.PartyRole_CLAIMING_ACCOUNT
PartyRole_ASSET_MANAGER = cvar.PartyRole_ASSET_MANAGER
PartyRole_PLEDGOR_ACCOUNT = cvar.PartyRole_PLEDGOR_ACCOUNT
PartyRole_PLEDGEE_ACCOUNT = cvar.PartyRole_PLEDGEE_ACCOUNT
PartyRole_LARGE_TRADER_REPORTABLE_ACCOUNT = cvar.PartyRole_LARGE_TRADER_REPORTABLE_ACCOUNT
PartyRole_TRADER_MNEMONIC = cvar.PartyRole_TRADER_MNEMONIC
PartyRole_SENDER_LOCATION = cvar.PartyRole_SENDER_LOCATION
PartyRole_SESSION_ID = cvar.PartyRole_SESSION_ID
PartyRole_ACCEPTABLE_COUNTERPARTY = cvar.PartyRole_ACCEPTABLE_COUNTERPARTY
PartyRole_UNACCEPTABLE_COUNTERPARTY = cvar.PartyRole_UNACCEPTABLE_COUNTERPARTY
PartyRole_ENTERING_UNIT = cvar.PartyRole_ENTERING_UNIT
PartyRole_EXECUTING_UNIT = cvar.PartyRole_EXECUTING_UNIT
PartyRole_INTRODUCING_BROKER = cvar.PartyRole_INTRODUCING_BROKER
PartyRole_QUOTE_ORIGINATOR = cvar.PartyRole_QUOTE_ORIGINATOR
PartyRole_REPORT_ORIGINATOR = cvar.PartyRole_REPORT_ORIGINATOR
PartyRole_SYSTEMATIC_INTERNALISER = cvar.PartyRole_SYSTEMATIC_INTERNALISER
PartyRole_MULTILATERAL_TRADING_FACILITY = cvar.PartyRole_MULTILATERAL_TRADING_FACILITY
PartyRole_REGULATED_MARKET = cvar.PartyRole_REGULATED_MARKET
PartyRole_MARKET_MAKER = cvar.PartyRole_MARKET_MAKER
PartyRole_INVESTMENT_FIRM = cvar.PartyRole_INVESTMENT_FIRM
PartyRole_HOST_COMPETENT_AUTHORITY = cvar.PartyRole_HOST_COMPETENT_AUTHORITY
PartyRole_HOME_COMPETENT_AUTHORITY = cvar.PartyRole_HOME_COMPETENT_AUTHORITY
PartyRole_COMPETENT_AUTHORITY_OF_THE_MOST_RELEVANT_MARKET_IN_TERMS_OF_LIQUIDITY = cvar.PartyRole_COMPETENT_AUTHORITY_OF_THE_MOST_RELEVANT_MARKET_IN_TERMS_OF_LIQUIDITY
PartyRole_COMPETENT_AUTHORITY_OF_THE_TRANSACTION = cvar.PartyRole_COMPETENT_AUTHORITY_OF_THE_TRANSACTION
PartyRole_REPORTING_INTERMEDIARY = cvar.PartyRole_REPORTING_INTERMEDIARY
PartyRole_EXECUTION_VENUE = cvar.PartyRole_EXECUTION_VENUE
PartyRole_MARKET_DATA_ENTRY_ORIGINATOR = cvar.PartyRole_MARKET_DATA_ENTRY_ORIGINATOR
PartyRole_LOCATION_ID = cvar.PartyRole_LOCATION_ID
PartyRole_DESK_ID = cvar.PartyRole_DESK_ID
PartyRole_MARKET_DATA_MARKET = cvar.PartyRole_MARKET_DATA_MARKET
PartyRole_ALLOCATION_ENTITY = cvar.PartyRole_ALLOCATION_ENTITY
PartyRole_PRIME_BROKER_PROVIDING_GENERAL_TRADE_SERVICES = cvar.PartyRole_PRIME_BROKER_PROVIDING_GENERAL_TRADE_SERVICES
PartyRole_STEP_OUT_FIRM = cvar.PartyRole_STEP_OUT_FIRM
PartyRole_BROKERCLEARINGID = cvar.PartyRole_BROKERCLEARINGID
PartyRole_FOREIGN_FIRM = cvar.PartyRole_FOREIGN_FIRM
PartyRole_CENTRAL_REGISTRATION_DEPOSITORY = cvar.PartyRole_CENTRAL_REGISTRATION_DEPOSITORY
PartyRole_CLEARING_ACCOUNT = cvar.PartyRole_CLEARING_ACCOUNT
PartyRole_ACCEPTABLE_SETTLING_COUNTERPARTY = cvar.PartyRole_ACCEPTABLE_SETTLING_COUNTERPARTY
PartyRole_UNACCEPTABLE_SETTLING_COUNTERPARTY = cvar.PartyRole_UNACCEPTABLE_SETTLING_COUNTERPARTY
Product_LOAN = cvar.Product_LOAN
Product_OTHER = cvar.Product_OTHER
Product_MUNICIPAL = cvar.Product_MUNICIPAL
Product_AGENCY = cvar.Product_AGENCY
Product_CORPORATE = cvar.Product_CORPORATE
Product_CURRENCY = cvar.Product_CURRENCY
Product_COMMODITY = cvar.Product_COMMODITY
Product_GOVERNMENT = cvar.Product_GOVERNMENT
Product_MORTGAGE = cvar.Product_MORTGAGE
Product_INDEX = cvar.Product_INDEX
Product_MONEYMARKET = cvar.Product_MONEYMARKET
Product_EQUITY = cvar.Product_EQUITY
Product_FINANCING = cvar.Product_FINANCING
QuantityType_CONTRACTS = cvar.QuantityType_CONTRACTS
QuantityType_OTHER = cvar.QuantityType_OTHER
QuantityType_CURRENCY = cvar.QuantityType_CURRENCY
QuantityType_ORIGINALFACE = cvar.QuantityType_ORIGINALFACE
QuantityType_CURRENTFACE = cvar.QuantityType_CURRENTFACE
QuantityType_BONDS = cvar.QuantityType_BONDS
QuantityType_SHARES = cvar.QuantityType_SHARES
QuantityType_PAR = cvar.QuantityType_PAR
RoundingDirection_ROUND_TO_NEAREST = cvar.RoundingDirection_ROUND_TO_NEAREST
RoundingDirection_ROUND_DOWN = cvar.RoundingDirection_ROUND_DOWN
RoundingDirection_ROUND_UP = cvar.RoundingDirection_ROUND_UP
DistribPaymentMethod_CREST = cvar.DistribPaymentMethod_CREST
DistribPaymentMethod_NSCC = cvar.DistribPaymentMethod_NSCC
DistribPaymentMethod_EUROCLEAR = cvar.DistribPaymentMethod_EUROCLEAR
DistribPaymentMethod_CLEARSTREAM = cvar.DistribPaymentMethod_CLEARSTREAM
DistribPaymentMethod_CHEQUE = cvar.DistribPaymentMethod_CHEQUE
DistribPaymentMethod_TELEGRAPHIC_TRANSFER = cvar.DistribPaymentMethod_TELEGRAPHIC_TRANSFER
DistribPaymentMethod_FEDWIRE = cvar.DistribPaymentMethod_FEDWIRE
DistribPaymentMethod_DIRECT_CREDIT = cvar.DistribPaymentMethod_DIRECT_CREDIT
DistribPaymentMethod_ACH_CREDIT = cvar.DistribPaymentMethod_ACH_CREDIT
DistribPaymentMethod_BPAY = cvar.DistribPaymentMethod_BPAY
DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM = cvar.DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM
DistribPaymentMethod_REINVEST_IN_FUND = cvar.DistribPaymentMethod_REINVEST_IN_FUND
DistribPaymentMethod_FED_WIRE = cvar.DistribPaymentMethod_FED_WIRE
DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM_HVACS = cvar.DistribPaymentMethod_HIGH_VALUE_CLEARING_SYSTEM_HVACS
CancellationRights_NO_WAIVER_AGREEMENT = cvar.CancellationRights_NO_WAIVER_AGREEMENT
CancellationRights_NO_EXECUTION_ONLY = cvar.CancellationRights_NO_EXECUTION_ONLY
CancellationRights_YES = cvar.CancellationRights_YES
CancellationRights_NO_INSTITUTIONAL = cvar.CancellationRights_NO_INSTITUTIONAL
CancellationRights_NO_N = cvar.CancellationRights_NO_N
CancellationRights_NO_M = cvar.CancellationRights_NO_M
CancellationRights_NO_O = cvar.CancellationRights_NO_O
MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION = cvar.MoneyLaunderingStatus_EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION
MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION = cvar.MoneyLaunderingStatus_EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION
MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT = cvar.MoneyLaunderingStatus_EXEMPT_BELOW_THE_LIMIT
MoneyLaunderingStatus_PASSED = cvar.MoneyLaunderingStatus_PASSED
MoneyLaunderingStatus_NOT_CHECKED = cvar.MoneyLaunderingStatus_NOT_CHECKED
MoneyLaunderingStatus_EXEMPT_1 = cvar.MoneyLaunderingStatus_EXEMPT_1
MoneyLaunderingStatus_EXEMPT_2 = cvar.MoneyLaunderingStatus_EXEMPT_2
MoneyLaunderingStatus_EXEMPT_3 = cvar.MoneyLaunderingStatus_EXEMPT_3
ExecPriceType_SINGLE_PRICE = cvar.ExecPriceType_SINGLE_PRICE
ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT = cvar.ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT
ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT = cvar.ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT
ExecPriceType_OFFER_PRICE = cvar.ExecPriceType_OFFER_PRICE
ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT = cvar.ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT
ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT = cvar.ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT
ExecPriceType_CREATION_PRICE = cvar.ExecPriceType_CREATION_PRICE
ExecPriceType_BID_PRICE = cvar.ExecPriceType_BID_PRICE
ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT = cvar.ExecPriceType_CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT
ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT = cvar.ExecPriceType_OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT
TradeReportTransType_NEW = cvar.TradeReportTransType_NEW
TradeReportTransType_REPLACE = cvar.TradeReportTransType_REPLACE
TradeReportTransType_CANCEL = cvar.TradeReportTransType_CANCEL
TradeReportTransType_RELEASE = cvar.TradeReportTransType_RELEASE
TradeReportTransType_REVERSE = cvar.TradeReportTransType_REVERSE
TradeReportTransType_CANCEL_DUE_TO_BACK_OUT_OF_TRADE = cvar.TradeReportTransType_CANCEL_DUE_TO_BACK_OUT_OF_TRADE
PaymentMethod_BPAY = cvar.PaymentMethod_BPAY
PaymentMethod_ACH_CREDIT = cvar.PaymentMethod_ACH_CREDIT
PaymentMethod_ACH_DEBIT = cvar.PaymentMethod_ACH_DEBIT
PaymentMethod_CREDIT_CARD = cvar.PaymentMethod_CREDIT_CARD
PaymentMethod_DIRECT_CREDIT = cvar.PaymentMethod_DIRECT_CREDIT
PaymentMethod_DIRECT_DEBIT = cvar.PaymentMethod_DIRECT_DEBIT
PaymentMethod_DEBIT_CARD = cvar.PaymentMethod_DEBIT_CARD
PaymentMethod_FEDWIRE = cvar.PaymentMethod_FEDWIRE
PaymentMethod_HIGH_VALUE_CLEARING_SYSTEM = cvar.PaymentMethod_HIGH_VALUE_CLEARING_SYSTEM
PaymentMethod_EUROCLEAR = cvar.PaymentMethod_EUROCLEAR
PaymentMethod_TELEGRAPHIC_TRANSFER = cvar.PaymentMethod_TELEGRAPHIC_TRANSFER
PaymentMethod_CLEARSTREAM = cvar.PaymentMethod_CLEARSTREAM
PaymentMethod_CREST = cvar.PaymentMethod_CREST
PaymentMethod_NSCC = cvar.PaymentMethod_NSCC
PaymentMethod_CHEQUE = cvar.PaymentMethod_CHEQUE
PaymentMethod_FED_WIRE = cvar.PaymentMethod_FED_WIRE
TaxAdvantageType_PROFIT_SHARING_PLAN = cvar.TaxAdvantageType_PROFIT_SHARING_PLAN
TaxAdvantageType_EMPLOYER = cvar.TaxAdvantageType_EMPLOYER
TaxAdvantageType_EMPLOYER_CURRENT_YEAR = cvar.TaxAdvantageType_EMPLOYER_CURRENT_YEAR
TaxAdvantageType_NON_FUND_PROTOTYPE_IRA = cvar.TaxAdvantageType_NON_FUND_PROTOTYPE_IRA
TaxAdvantageType_NON_FUND_QUALIFIED_PLAN = cvar.TaxAdvantageType_NON_FUND_QUALIFIED_PLAN
TaxAdvantageType_DEFINED_CONTRIBUTION_PLAN = cvar.TaxAdvantageType_DEFINED_CONTRIBUTION_PLAN
TaxAdvantageType_EMPLOYEE_CURRENT_YEAR = cvar.TaxAdvantageType_EMPLOYEE_CURRENT_YEAR
TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_ROLLOVER = cvar.TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_ROLLOVER
TaxAdvantageType_MINI_INSURANCE_ISA = cvar.TaxAdvantageType_MINI_INSURANCE_ISA
TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT = cvar.TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT
TaxAdvantageType_EMPLOYEE = cvar.TaxAdvantageType_EMPLOYEE
TaxAdvantageType_ASSET_TRANSFER = cvar.TaxAdvantageType_ASSET_TRANSFER
TaxAdvantageType_SELF_DIRECTED_IRA = cvar.TaxAdvantageType_SELF_DIRECTED_IRA
TaxAdvantageType_CURRENT_YEAR_PAYMENT = cvar.TaxAdvantageType_CURRENT_YEAR_PAYMENT
TaxAdvantageType_401K = cvar.TaxAdvantageType_401K
TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA = cvar.TaxAdvantageType_MINI_STOCKS_AND_SHARES_ISA
TaxAdvantageType_MINI_CASH_ISA = cvar.TaxAdvantageType_MINI_CASH_ISA
TaxAdvantageType_TESSA = cvar.TaxAdvantageType_TESSA
TaxAdvantageType_MAXI_ISA = cvar.TaxAdvantageType_MAXI_ISA
TaxAdvantageType_NONE_NOT_APPLICABLE = cvar.TaxAdvantageType_NONE_NOT_APPLICABLE
TaxAdvantageType_PRIOR_YEAR_PAYMENT = cvar.TaxAdvantageType_PRIOR_YEAR_PAYMENT
TaxAdvantageType_457 = cvar.TaxAdvantageType_457
TaxAdvantageType_ROTH_IRA_24 = cvar.TaxAdvantageType_ROTH_IRA_24
TaxAdvantageType_ROTH_IRA_25 = cvar.TaxAdvantageType_ROTH_IRA_25
TaxAdvantageType_ROTH_CONVERSION_IRA_26 = cvar.TaxAdvantageType_ROTH_CONVERSION_IRA_26
TaxAdvantageType_ROTH_CONVERSION_IRA_27 = cvar.TaxAdvantageType_ROTH_CONVERSION_IRA_27
TaxAdvantageType_EDUCATION_IRA_28 = cvar.TaxAdvantageType_EDUCATION_IRA_28
TaxAdvantageType_EDUCATION_IRA_29 = cvar.TaxAdvantageType_EDUCATION_IRA_29
TaxAdvantageType_KEOGH = cvar.TaxAdvantageType_KEOGH
TaxAdvantageType_403 = cvar.TaxAdvantageType_403
TaxAdvantageType_EMPLOYEE_9 = cvar.TaxAdvantageType_EMPLOYEE_9
TaxAdvantageType_EMPLOYEE_10 = cvar.TaxAdvantageType_EMPLOYEE_10
TaxAdvantageType_EMPLOYER_11 = cvar.TaxAdvantageType_EMPLOYER_11
TaxAdvantageType_EMPLOYER_12 = cvar.TaxAdvantageType_EMPLOYER_12
TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_16 = cvar.TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_16
TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_17 = cvar.TaxAdvantageType_INDIVIDUAL_RETIREMENT_ACCOUNT_17
TaxAdvantageType_401 = cvar.TaxAdvantageType_401
TaxAdvantageType_OTHER = cvar.TaxAdvantageType_OTHER
FundRenewWaiv_NO = cvar.FundRenewWaiv_NO
FundRenewWaiv_YES = cvar.FundRenewWaiv_YES
RegistStatus_ACCEPT = cvar.RegistStatus_ACCEPT
RegistStatus_REMINDER = cvar.RegistStatus_REMINDER
RegistStatus_REJECT = cvar.RegistStatus_REJECT
RegistStatus_HELD = cvar.RegistStatus_HELD
RegistStatus_ACCEPTED = cvar.RegistStatus_ACCEPTED
RegistStatus_REJECTED = cvar.RegistStatus_REJECTED
RegistStatus_REMINDER_IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING = cvar.RegistStatus_REMINDER_IE_REGISTRATION_INSTRUCTIONS_ARE_STILL_OUTSTANDING
RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_NODISTRIBINSTNS
RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE
RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME
RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETLS
RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD
RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE
RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_OWNERSHIP_TYPE
RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE
RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE
RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_DATE_OF_BIRTH
RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE
RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_INVESTOR_ID
RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INST
RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DTLS
RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_SEQ_NO
RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_ACCOUNT_TYPE
RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM
RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DTLS
RegistRejReasonCode_OTHER = cvar.RegistRejReasonCode_OTHER
RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETAILS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_REG_DETAILS
RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DETAILS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_REG_DETAILS
RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DETAILS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_DETAILS
RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INSTRUCTIONS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_MAILING_INSTRUCTIONS
RegistRejReasonCode_INVALID_UNACEEPTABLE_INVESTOR_ID_SOURCE = cvar.RegistRejReasonCode_INVALID_UNACEEPTABLE_INVESTOR_ID_SOURCE
RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_DISTRIB_INSTNS = cvar.RegistRejReasonCode_INVALID_UNACCEPTABLE_NO_DISTRIB_INSTNS
RegistTransType_CANCEL = cvar.RegistTransType_CANCEL
RegistTransType_NEW = cvar.RegistTransType_NEW
RegistTransType_REPLACE = cvar.RegistTransType_REPLACE
OwnershipType_JOINT_INVESTORS = cvar.OwnershipType_JOINT_INVESTORS
OwnershipType_TENANTS_IN_COMMON = cvar.OwnershipType_TENANTS_IN_COMMON
OwnershipType_JOINT_TRUSTEES = cvar.OwnershipType_JOINT_TRUSTEES
ContAmtType_NET_SETTLEMENT_AMOUNT = cvar.ContAmtType_NET_SETTLEMENT_AMOUNT
ContAmtType_COMMISSION_AMOUNT = cvar.ContAmtType_COMMISSION_AMOUNT
ContAmtType_COMMISSION = cvar.ContAmtType_COMMISSION
ContAmtType_INITIAL_CHARGE_AMOUNT = cvar.ContAmtType_INITIAL_CHARGE_AMOUNT
ContAmtType_INITIAL_CHARGE = cvar.ContAmtType_INITIAL_CHARGE
ContAmtType_DISCOUNT_AMOUNT = cvar.ContAmtType_DISCOUNT_AMOUNT
ContAmtType_DISCOUNT = cvar.ContAmtType_DISCOUNT
ContAmtType_DILUTION_LEVY_AMOUNT = cvar.ContAmtType_DILUTION_LEVY_AMOUNT
ContAmtType_DILUTION_LEVY = cvar.ContAmtType_DILUTION_LEVY
ContAmtType_EXIT_CHARGE_AMOUNT = cvar.ContAmtType_EXIT_CHARGE_AMOUNT
ContAmtType_EXIT_CHARGE = cvar.ContAmtType_EXIT_CHARGE
ContAmtType_FUND_BASED_RENEWAL_COMMISSION = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION
ContAmtType_PROJECTED_FUND_VALUE = cvar.ContAmtType_PROJECTED_FUND_VALUE
ContAmtType_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_14 = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_14
ContAmtType_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_13 = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION_AMOUNT_13
ContAmtType_COMMISSION_PERCENT = cvar.ContAmtType_COMMISSION_PERCENT
ContAmtType_INITIAL_CHARGE_PERCENT = cvar.ContAmtType_INITIAL_CHARGE_PERCENT
ContAmtType_DISCOUNT_PERCENT = cvar.ContAmtType_DISCOUNT_PERCENT
ContAmtType_DILUTION_LEVY_PERCENT = cvar.ContAmtType_DILUTION_LEVY_PERCENT
ContAmtType_EXIT_CHARGE_PERCENT = cvar.ContAmtType_EXIT_CHARGE_PERCENT
ContAmtType_FUND_BASED_RENEWAL_COMMISSION_PERCENT = cvar.ContAmtType_FUND_BASED_RENEWAL_COMMISSION_PERCENT
OwnerType_COMPANY_TRUSTEE = cvar.OwnerType_COMPANY_TRUSTEE
OwnerType_NOMINEE = cvar.OwnerType_NOMINEE
OwnerType_CORPORATE_BODY = cvar.OwnerType_CORPORATE_BODY
OwnerType_NON_PROFIT_ORGANIZATION = cvar.OwnerType_NON_PROFIT_ORGANIZATION
OwnerType_NETWORKING_SUB_ACCOUNT = cvar.OwnerType_NETWORKING_SUB_ACCOUNT
OwnerType_FIDUCIARIES = cvar.OwnerType_FIDUCIARIES
OwnerType_TRUSTS = cvar.OwnerType_TRUSTS
OwnerType_PENSION_PLAN = cvar.OwnerType_PENSION_PLAN
OwnerType_INDIVIDUAL_TRUSTEE = cvar.OwnerType_INDIVIDUAL_TRUSTEE
OwnerType_PUBLIC_COMPANY = cvar.OwnerType_PUBLIC_COMPANY
OwnerType_PRIVATE_COMPANY = cvar.OwnerType_PRIVATE_COMPANY
OwnerType_INDIVIDUAL_INVESTOR = cvar.OwnerType_INDIVIDUAL_INVESTOR
OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT = cvar.OwnerType_CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT
OrderCapacity_RISKLESS_PRINCIPAL = cvar.OrderCapacity_RISKLESS_PRINCIPAL
OrderCapacity_INDIVIDUAL = cvar.OrderCapacity_INDIVIDUAL
OrderCapacity_PRINCIPAL = cvar.OrderCapacity_PRINCIPAL
OrderCapacity_AGENT_FOR_OTHER_MEMBER = cvar.OrderCapacity_AGENT_FOR_OTHER_MEMBER
OrderCapacity_AGENCY = cvar.OrderCapacity_AGENCY
OrderCapacity_PROPRIETARY = cvar.OrderCapacity_PROPRIETARY
OrderRestrictions_FOREIGN_ENTITY = cvar.OrderRestrictions_FOREIGN_ENTITY
OrderRestrictions_RISKLESS_ARBITRAGE = cvar.OrderRestrictions_RISKLESS_ARBITRAGE
OrderRestrictions_PROGRAM_TRADE = cvar.OrderRestrictions_PROGRAM_TRADE
OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT = cvar.OrderRestrictions_EXTERNAL_MARKET_PARTICIPANT
OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY = cvar.OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY
OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY = cvar.OrderRestrictions_ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY
OrderRestrictions_NON_INDEX_ARBITRAGE = cvar.OrderRestrictions_NON_INDEX_ARBITRAGE
OrderRestrictions_INDEX_ARBITRAGE = cvar.OrderRestrictions_INDEX_ARBITRAGE
OrderRestrictions_COMPETING_MARKET_MAKER = cvar.OrderRestrictions_COMPETING_MARKET_MAKER
OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE = cvar.OrderRestrictions_EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE
OrderRestrictions_ACTING_AS_MARKET_MAKER_OF_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SEUCIRTY = cvar.OrderRestrictions_ACTING_AS_MARKET_MAKER_OF_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SEUCIRTY
OrderRestrictions_EXTNERAL_INTER_CONNECTED_MARKET_LINKAGE = cvar.OrderRestrictions_EXTNERAL_INTER_CONNECTED_MARKET_LINKAGE
OrderRestrictions_ISSUER_HOLDING = cvar.OrderRestrictions_ISSUER_HOLDING
OrderRestrictions_ISSUE_PRICE_STABILIZATION = cvar.OrderRestrictions_ISSUE_PRICE_STABILIZATION
OrderRestrictions_NON_ALGORITHMIC = cvar.OrderRestrictions_NON_ALGORITHMIC
OrderRestrictions_ALGORITHMIC = cvar.OrderRestrictions_ALGORITHMIC
OrderRestrictions_CROSS = cvar.OrderRestrictions_CROSS
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY
MassCancelRequestType_CANCEL_ALL_ORDERS = cvar.MassCancelRequestType_CANCEL_ALL_ORDERS
MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_TRADING_SESSION
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITYTYPE
MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_CFICODE
MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_PRODUCT
MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET
MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT
MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_GROUP = cvar.MassCancelRequestType_CANCEL_ORDERS_FOR_A_SECURITY_GROUP
MassCancelRequestType_CANCEL_FOR_SECURITY_ISSUER = cvar.MassCancelRequestType_CANCEL_FOR_SECURITY_ISSUER
MassCancelRequestType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassCancelRequestType_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_TRADING_SESSION
MassCancelResponse_CANCEL_REQUEST_REJECTED = cvar.MassCancelResponse_CANCEL_REQUEST_REJECTED
MassCancelResponse_CANCEL_ALL_ORDERS = cvar.MassCancelResponse_CANCEL_ALL_ORDERS
MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_PRODUCT
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITYTYPE
MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_CFICODE
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET
MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_MARKET_SEGMENT
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_GROUP = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITY_GROUP
MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITIES_ISSUER = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_A_SECURITIES_ISSUER
MassCancelResponse_CANCEL_ORDERS_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassCancelResponse_CANCEL_ORDERS_FOR_ISSUER_OF_UNDERLYING_SECURITY
MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_UNDERLYING
MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_TYPE
MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_PRODUCT
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY
MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED = cvar.MassCancelRejectReason_MASS_CANCEL_NOT_SUPPORTED
MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_CFICODE
MassCancelRejectReason_OTHER = cvar.MassCancelRejectReason_OTHER
MassCancelRejectReason_INVALID_OR_UNKOWN_UNDERLYING_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKOWN_UNDERLYING_SECURITY
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITYTYPE = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITYTYPE
MassCancelRejectReason_INVALID_OR_UNKNOWN_MARKET = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_MARKET
MassCancelRejectReason_INVALID_OR_UNKOWN_MARKET_SEGMENT = cvar.MassCancelRejectReason_INVALID_OR_UNKOWN_MARKET_SEGMENT
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP
MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER
MassCancelRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassCancelRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY
QuoteType_INDICATIVE = cvar.QuoteType_INDICATIVE
QuoteType_TRADEABLE = cvar.QuoteType_TRADEABLE
QuoteType_RESTRICTED_TRADEABLE = cvar.QuoteType_RESTRICTED_TRADEABLE
QuoteType_COUNTER = cvar.QuoteType_COUNTER
CashMargin_MARGIN_OPEN = cvar.CashMargin_MARGIN_OPEN
CashMargin_MARGIN_CLOSE = cvar.CashMargin_MARGIN_CLOSE
CashMargin_CASH = cvar.CashMargin_CASH
Scope_LOCAL = cvar.Scope_LOCAL
Scope_NATIONAL = cvar.Scope_NATIONAL
Scope_GLOBAL = cvar.Scope_GLOBAL
Scope_LOCAL_MARKET = cvar.Scope_LOCAL_MARKET
MDImplicitDelete_YES = cvar.MDImplicitDelete_YES
MDImplicitDelete_NO = cvar.MDImplicitDelete_NO
CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_BOTH_SIDES_ARE_TREATED_IN_THE_SAME_MANNER_THIS_IS_EQUIVALENT_TO_AN_ALL_OR_NONE = cvar.CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT_BOTH_SIDES_ARE_TREATED_IN_THE_SAME_MANNER_THIS_IS_EQUIVALENT_TO_AN_ALL_OR_NONE
CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE = cvar.CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE
CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_ONE_SIDE_OF_THE_CROSS_IS_FULLY_EXECUTED = cvar.CrossType_CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE_ONE_SIDE_OF_THE_CROSS_IS_FULLY_EXECUTED
CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE = cvar.CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE
CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE_NOTE_THE_CROSSPRIORITZATION = cvar.CrossType_CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED_ONE_SIDE_IS_FULLY_EXECUTED_THE_OTHER_SIDE_IS_PARTIALLY_EXECUTED_WITH_THE_REMAINDER_BEING_CANCELLED_THIS_IS_EQUIVALENT_TO_AN_IMMEDIATE_OR_CANCEL_ON_THE_OTHER_SIDE_NOTE_THE_CROSSPRIORITZATION
CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_IN_THE_CASE_OTHER_ORDERS_EXIST_WITH_THE_SAME_PRICE_THE_QUANTITY_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_EXISTING_ORDERS_AND_QUOTES_THE_REMAINDER_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_OTHER_SIDE_OF_THE_CROSS_THE_TWO_SIDES_POTENTIALLY_HAVE_DIFFERENT_QUANTITIES = cvar.CrossType_CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE_IN_THE_CASE_OTHER_ORDERS_EXIST_WITH_THE_SAME_PRICE_THE_QUANTITY_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_EXISTING_ORDERS_AND_QUOTES_THE_REMAINDER_OF_THE_CROSS_IS_EXECUTED_AGAINST_THE_OTHER_SIDE_OF_THE_CROSS_THE_TWO_SIDES_POTENTIALLY_HAVE_DIFFERENT_QUANTITIES
CrossType_CROSS_AON = cvar.CrossType_CROSS_AON
CrossType_CROSS_IOC = cvar.CrossType_CROSS_IOC
CrossType_CROSS_ONE_SIDE = cvar.CrossType_CROSS_ONE_SIDE
CrossType_CROSS_SAME_PRICE = cvar.CrossType_CROSS_SAME_PRICE
CrossPrioritization_SELLSIDE_PRIORITIZED = cvar.CrossPrioritization_SELLSIDE_PRIORITIZED
CrossPrioritization_NONE = cvar.CrossPrioritization_NONE
CrossPrioritization_BUYSIDE_PRIORITIZED = cvar.CrossPrioritization_BUYSIDE_PRIORITIZED
CrossPrioritization_BUY_SIDE_IS_PRIORITIZED = cvar.CrossPrioritization_BUY_SIDE_IS_PRIORITIZED
CrossPrioritization_SELL_SIDE_IS_PRIORITIZED = cvar.CrossPrioritization_SELL_SIDE_IS_PRIORITIZED
NoSides_ONE_SIDE = cvar.NoSides_ONE_SIDE
NoSides_BOTH_SIDES = cvar.NoSides_BOTH_SIDES
SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE = cvar.SecurityListRequestType_SECURITYTYPE_AND_OR_CFICODE
SecurityListRequestType_PRODUCT = cvar.SecurityListRequestType_PRODUCT
SecurityListRequestType_TRADINGSESSIONID = cvar.SecurityListRequestType_TRADINGSESSIONID
SecurityListRequestType_ALL_SECURITIES = cvar.SecurityListRequestType_ALL_SECURITIES
SecurityListRequestType_SYMBOL = cvar.SecurityListRequestType_SYMBOL
SecurityListRequestType_MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID = cvar.SecurityListRequestType_MARKETID_OR_MARKETID_PLUS_MARKETSEGMENTID
SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE = cvar.SecurityRequestResult_INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE
SecurityRequestResult_VALID_REQUEST = cvar.SecurityRequestResult_VALID_REQUEST
SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST = cvar.SecurityRequestResult_INVALID_OR_UNSUPPORTED_REQUEST
SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED = cvar.SecurityRequestResult_REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED
SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA = cvar.SecurityRequestResult_NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA
SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA = cvar.SecurityRequestResult_NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA
MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY = cvar.MultiLegRptTypeReq_REPORT_BY_MULITLEG_SECURITY_ONLY
MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY = cvar.MultiLegRptTypeReq_REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY
MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY = cvar.MultiLegRptTypeReq_REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY
TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID = cvar.TradSesStatusRejReason_UNKNOWN_OR_INVALID_TRADINGSESSIONID
TradSesStatusRejReason_OTHER = cvar.TradSesStatusRejReason_OTHER
TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_ADVISORIES_THAT_MATCH_CRITERIA
TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_UNREPORTED_TRADES_THAT_MATCH_CRITERIA
TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA = cvar.TradeRequestType_UNMATCHED_TRADES_THAT_MATCH_CRITERIA
TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST = cvar.TradeRequestType_MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST
TradeRequestType_ALL_TRADES = cvar.TradeRequestType_ALL_TRADES
PreviouslyReported_NO = cvar.PreviouslyReported_NO
PreviouslyReported_YES = cvar.PreviouslyReported_YES
MatchStatus_COMPARED_MATCHED_OR_AFFIRMED = cvar.MatchStatus_COMPARED_MATCHED_OR_AFFIRMED
MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED = cvar.MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRMED
MatchStatus_ADVISORY_OR_ALERT = cvar.MatchStatus_ADVISORY_OR_ALERT
MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRED = cvar.MatchStatus_UNCOMPARED_UNMATCHED_OR_UNAFFIRED
MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S5 = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S5
MatchType_ACT_M1_MATCH = cvar.MatchType_ACT_M1_MATCH
MatchType_ACT_M6_MATCH = cvar.MatchType_ACT_M6_MATCH
MatchType_ACT_DEFAULT_AFTER_M2 = cvar.MatchType_ACT_DEFAULT_AFTER_M2
MatchType_ACT_ACCEPTED_TRADE = cvar.MatchType_ACT_ACCEPTED_TRADE
MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S2 = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S2
MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S3 = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S3
MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S4 = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S4
MatchType_ACT_M2_MATCH = cvar.MatchType_ACT_M2_MATCH
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES_AND_EXECUTION_TIME
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND
MatchType_COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST = cvar.MatchType_COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST
MatchType_NON_ACT = cvar.MatchType_NON_ACT
MatchType_ACT_DEFAULT_TRADE = cvar.MatchType_ACT_DEFAULT_TRADE
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_FOUR_BADGES_AND_EXECUTION_TIME
MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S1 = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_TO_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED_S1
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_TWO_BADGES
MatchType_COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS_PAIR_OFFS = cvar.MatchType_COMPARED_RECORDS_RESULTING_FROM_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS_PAIR_OFFS
MatchType_SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED
MatchType_SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = cvar.MatchType_SUMMARIZED_MATCH_USING_A2_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED
MatchType_SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = cvar.MatchType_SUMMARIZED_MATCH_USING_A3_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED
MatchType_SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = cvar.MatchType_SUMMARIZED_MATCH_USING_A4_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED
MatchType_SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED = cvar.MatchType_SUMMARIZED_MATCH_USING_A5_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIZED
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_TIMES_ACT_M1_MATCH = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADE_TYPE_AND_SPECIAL_TRADE_INDICATOR_MINUS_BADGES_AND_TIMES_ACT_M1_MATCH
MatchType_SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH = cvar.MatchType_SUMMARIZED_MATCH_MINUS_BADGES_AND_TIMES_ACT_M2_MATCH
MatchType_OCS_LOCKED_IN_NON_ACT = cvar.MatchType_OCS_LOCKED_IN_NON_ACT
MatchType_ONE_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT = cvar.MatchType_ONE_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT
MatchType_TWO_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT = cvar.MatchType_TWO_PARTY_PRIVATELY_NEGOTIATED_TRADE_REPORT
MatchType_CONTINUOUS_AUTO_MATCH = cvar.MatchType_CONTINUOUS_AUTO_MATCH
MatchType_CROSS_AUCTION_63 = cvar.MatchType_CROSS_AUCTION_63
MatchType_COUNTER_ORDER_SELECTION_64 = cvar.MatchType_COUNTER_ORDER_SELECTION_64
MatchType_CALL_AUCTION_65 = cvar.MatchType_CALL_AUCTION_65
MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADETYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME = cvar.MatchType_EXACT_MATCH_ON_TRADE_DATE_STOCK_SYMBOL_QUANTITY_PRICE_TRADETYPE_AND_SPECIAL_TRADE_INDICATOR_PLUS_EXECUTION_TIME
MatchType_SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIED = cvar.MatchType_SUMMARIZED_MATCH_USING_A1_EXACT_MATCH_CRITERIA_EXCEPT_QUANTITY_IS_SUMMARIED
MatchType_ONE_PARTY_TRADE_REPORT = cvar.MatchType_ONE_PARTY_TRADE_REPORT
MatchType_TWO_PARTY_TRADE_REPORT = cvar.MatchType_TWO_PARTY_TRADE_REPORT
MatchType_CONFIRMED_TRADE_REPORT = cvar.MatchType_CONFIRMED_TRADE_REPORT
MatchType_AUTO_MATCH = cvar.MatchType_AUTO_MATCH
MatchType_CROSS_AUCTION_5 = cvar.MatchType_CROSS_AUCTION_5
MatchType_COUNTER_ORDER_SELECTION_6 = cvar.MatchType_COUNTER_ORDER_SELECTION_6
MatchType_CALL_AUCTION_7 = cvar.MatchType_CALL_AUCTION_7
MatchType_CROSS_AUCTION = cvar.MatchType_CROSS_AUCTION
MatchType_COUNTER_ORDER_SELECTION = cvar.MatchType_COUNTER_ORDER_SELECTION
MatchType_CALL_AUCTION = cvar.MatchType_CALL_AUCTION
MatchType_ISSUING_BUY_BACK_AUCTION = cvar.MatchType_ISSUING_BUY_BACK_AUCTION
OddLot_YES = cvar.OddLot_YES
OddLot_NO = cvar.OddLot_NO
ClearingInstruction_MANUAL_MODE = cvar.ClearingInstruction_MANUAL_MODE
ClearingInstruction_MULTILATERAL_NETTING = cvar.ClearingInstruction_MULTILATERAL_NETTING
ClearingInstruction_AUTOMATIC_POSTING_MODE = cvar.ClearingInstruction_AUTOMATIC_POSTING_MODE
ClearingInstruction_BILATERAL_NETTING_ONLY = cvar.ClearingInstruction_BILATERAL_NETTING_ONLY
ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY = cvar.ClearingInstruction_CLEAR_AGAINST_CENTRAL_COUNTERPARTY
ClearingInstruction_AUTOMATIC_GIVE_UP_MODE = cvar.ClearingInstruction_AUTOMATIC_GIVE_UP_MODE
ClearingInstruction_SPECIAL_TRADE = cvar.ClearingInstruction_SPECIAL_TRADE
ClearingInstruction_EX_CLEARING = cvar.ClearingInstruction_EX_CLEARING
ClearingInstruction_PROCESS_NORMALLY = cvar.ClearingInstruction_PROCESS_NORMALLY
ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY = cvar.ClearingInstruction_EXCLUDE_FROM_CENTRAL_COUNTERPARTY
ClearingInstruction_EXCLUDE_FROM_ALL_NETTING = cvar.ClearingInstruction_EXCLUDE_FROM_ALL_NETTING
ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE = cvar.ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE
ClearingInstruction_CUSTOMER_TRADE = cvar.ClearingInstruction_CUSTOMER_TRADE
ClearingInstruction_SELF_CLEARING = cvar.ClearingInstruction_SELF_CLEARING
ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE_QSR = cvar.ClearingInstruction_QUALIFIED_SERVICE_REPRESENTATIVE_QSR
AccountType_HOUSE_TRADER = cvar.AccountType_HOUSE_TRADER
AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = cvar.AccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED
AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED
AccountType_FLOOR_TRADER = cvar.AccountType_FLOOR_TRADER
AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS
AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS
AccountType_JOINT_BACKOFFICE_ACCOUNT = cvar.AccountType_JOINT_BACKOFFICE_ACCOUNT
AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_THE_BOOKS = cvar.AccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_THE_BOOKS
AccountType_JOINT_BACK_OFFICE_ACCOUNT = cvar.AccountType_JOINT_BACK_OFFICE_ACCOUNT
CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = cvar.CustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT
CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = cvar.CustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT
CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER = cvar.CustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER
CustOrderCapacity_ALL_OTHER = cvar.CustOrderCapacity_ALL_OTHER
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITY
MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PRODUCT
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_CFICODE
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION
MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID = cvar.MassStatusReqType_STATUS_FOR_ORDERS_FOR_A_PARTYID
MassStatusReqType_STATUS_FOR_ALL_ORDERS = cvar.MassStatusReqType_STATUS_FOR_ALL_ORDERS
MassStatusReqType_STATUS_FOR_SECURITY_ISSUER = cvar.MassStatusReqType_STATUS_FOR_SECURITY_ISSUER
MassStatusReqType_STATUS_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassStatusReqType_STATUS_FOR_ISSUER_OF_UNDERLYING_SECURITY
DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR = cvar.DayBookingInst_CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR
DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING = cvar.DayBookingInst_SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING
DayBookingInst_ACCUMULATE = cvar.DayBookingInst_ACCUMULATE
BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER = cvar.BookingUnit_AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER
BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE = cvar.BookingUnit_AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE
BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT = cvar.BookingUnit_EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT
PreallocMethod_PRO_RATA = cvar.PreallocMethod_PRO_RATA
PreallocMethod_DO_NOT_PRO_RATA_DISCUSS_FIRST = cvar.PreallocMethod_DO_NOT_PRO_RATA_DISCUSS_FIRST
PreallocMethod_DO_NOT_PRO_RATA = cvar.PreallocMethod_DO_NOT_PRO_RATA
TradingSessionSubID_PRE_TRADING = cvar.TradingSessionSubID_PRE_TRADING
TradingSessionSubID_OPENING_OR_OPENING_AUCTION = cvar.TradingSessionSubID_OPENING_OR_OPENING_AUCTION
TradingSessionSubID_3 = cvar.TradingSessionSubID_3
TradingSessionSubID_CLOSING_OR_CLOSING_AUCTION = cvar.TradingSessionSubID_CLOSING_OR_CLOSING_AUCTION
TradingSessionSubID_POST_TRADING = cvar.TradingSessionSubID_POST_TRADING
TradingSessionSubID_INTRADAY_AUCTION = cvar.TradingSessionSubID_INTRADAY_AUCTION
TradingSessionSubID_QUIESCENT = cvar.TradingSessionSubID_QUIESCENT
AllocType_BUYSIDE_READY_TO_BOOK_6 = cvar.AllocType_BUYSIDE_READY_TO_BOOK_6
AllocType_BUYSIDE_PRELIMINARY = cvar.AllocType_BUYSIDE_PRELIMINARY
AllocType_SELLSIDE_CALCULATED_USING_PRELIMINARY = cvar.AllocType_SELLSIDE_CALCULATED_USING_PRELIMINARY
AllocType_BUYSIDE_READY_TO_BOOK_5 = cvar.AllocType_BUYSIDE_READY_TO_BOOK_5
AllocType_BUYSIDE_CALCULATED = cvar.AllocType_BUYSIDE_CALCULATED
AllocType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY = cvar.AllocType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY
AllocType_CALCULATED = cvar.AllocType_CALCULATED
AllocType_PRELIMINARY = cvar.AllocType_PRELIMINARY
AllocType_READY_TO_BOOK = cvar.AllocType_READY_TO_BOOK
AllocType_WAREHOUSE_INSTRUCTION = cvar.AllocType_WAREHOUSE_INSTRUCTION
AllocType_REQUEST_TO_INTERMEDIARY = cvar.AllocType_REQUEST_TO_INTERMEDIARY
AllocType_BUYSIDE_READY_TO_BOOK = cvar.AllocType_BUYSIDE_READY_TO_BOOK
AllocType_ACCEPT = cvar.AllocType_ACCEPT
AllocType_REJECT = cvar.AllocType_REJECT
AllocType_ACCEPT_PENDING = cvar.AllocType_ACCEPT_PENDING
AllocType_INCOMPLETE_GROUP = cvar.AllocType_INCOMPLETE_GROUP
AllocType_COMPLETE_GROUP = cvar.AllocType_COMPLETE_GROUP
AllocType_REVERSAL_PENDING = cvar.AllocType_REVERSAL_PENDING
ClearingFeeIndicator_106H_AND_106J_FIRMS = cvar.ClearingFeeIndicator_106H_AND_106J_FIRMS
ClearingFeeIndicator_5TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_5TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_4TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_4TH_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_3RD_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_3RD_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_2ND_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_2ND_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_1ST_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_1ST_YEAR_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES = cvar.ClearingFeeIndicator_ALL_OTHER_OWNERSHIP_TYPES
ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS = cvar.ClearingFeeIndicator_GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS
ClearingFeeIndicator_6TH_YEAR_AND_BEYOND_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT = cvar.ClearingFeeIndicator_6TH_YEAR_AND_BEYOND_DELEGATE_TRADING_FOR_HIS_OWN_ACCOUNT
ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR = cvar.ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR
ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER = cvar.ClearingFeeIndicator_EQUITY_MEMBER_AND_CLEARING_MEMBER
ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER = cvar.ClearingFeeIndicator_NON_MEMBER_AND_CUSTOMER
ClearingFeeIndicator_CBOE_MEMBER = cvar.ClearingFeeIndicator_CBOE_MEMBER
ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES = cvar.ClearingFeeIndicator_LESSEE_AND_106F_EMPLOYEES
ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS = cvar.ClearingFeeIndicator_FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS
ClearingFeeIndicator_1ST_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_1ST_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_2ND_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_2ND_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_3RD_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_3RD_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_4TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_4TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_5TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_5TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_6TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT = cvar.ClearingFeeIndicator_6TH_YEAR_DELEGATE_TRADING_FOR_OWN_ACCOUNT
ClearingFeeIndicator_LESSEE_106F_EMPLOYEES = cvar.ClearingFeeIndicator_LESSEE_106F_EMPLOYEES
WorkingIndicator_NO = cvar.WorkingIndicator_NO
WorkingIndicator_YES = cvar.WorkingIndicator_YES
PriorityIndicator_PRIORITY_UNCHANGED = cvar.PriorityIndicator_PRIORITY_UNCHANGED
PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE = cvar.PriorityIndicator_LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE
LegalConfirm_YES = cvar.LegalConfirm_YES
LegalConfirm_NO = cvar.LegalConfirm_NO
QuoteRequestRejectReason_UNKNOWN_SYMBOL = cvar.QuoteRequestRejectReason_UNKNOWN_SYMBOL
QuoteRequestRejectReason_EXCHANGE = cvar.QuoteRequestRejectReason_EXCHANGE
QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT = cvar.QuoteRequestRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT
QuoteRequestRejectReason_TOO_LATE_TO_ENTER = cvar.QuoteRequestRejectReason_TOO_LATE_TO_ENTER
QuoteRequestRejectReason_INVALID_PRICE = cvar.QuoteRequestRejectReason_INVALID_PRICE
QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE = cvar.QuoteRequestRejectReason_NOT_AUTHORIZED_TO_REQUEST_QUOTE
QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY = cvar.QuoteRequestRejectReason_NO_MATCH_FOR_INQUIRY
QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT = cvar.QuoteRequestRejectReason_NO_MARKET_FOR_INSTRUMENT
QuoteRequestRejectReason_NO_INVENTORY = cvar.QuoteRequestRejectReason_NO_INVENTORY
QuoteRequestRejectReason_PASS = cvar.QuoteRequestRejectReason_PASS
QuoteRequestRejectReason_OTHER = cvar.QuoteRequestRejectReason_OTHER
QuoteRequestRejectReason_INSUFFICIENT_CREDIT = cvar.QuoteRequestRejectReason_INSUFFICIENT_CREDIT
SettlType_REGULAR = cvar.SettlType_REGULAR
SettlType_CASH = cvar.SettlType_CASH
SettlType_NEXT_DAY = cvar.SettlType_NEXT_DAY
SettlType_T_PLUS_2 = cvar.SettlType_T_PLUS_2
SettlType_T_PLUS_3 = cvar.SettlType_T_PLUS_3
SettlType_T_PLUS_4 = cvar.SettlType_T_PLUS_4
SettlType_FUTURE = cvar.SettlType_FUTURE
SettlType_WHEN_AND_IF_ISSUED = cvar.SettlType_WHEN_AND_IF_ISSUED
SettlType_SELLERS_OPTION = cvar.SettlType_SELLERS_OPTION
SettlType_T_PLUS_5 = cvar.SettlType_T_PLUS_5
SettlType_BROKEN_DATE = cvar.SettlType_BROKEN_DATE
SettlType_FX_SPOT_NEXT_SETTLEMENT = cvar.SettlType_FX_SPOT_NEXT_SETTLEMENT
OpenCloseSettlFlag_DAILY_OPEN = cvar.OpenCloseSettlFlag_DAILY_OPEN
OpenCloseSettlFlag_SESSION_OPEN = cvar.OpenCloseSettlFlag_SESSION_OPEN
OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY = cvar.OpenCloseSettlFlag_DELIVERY_SETTLEMENT_ENTRY
OpenCloseSettlFlag_EXPECTED_ENTRY = cvar.OpenCloseSettlFlag_EXPECTED_ENTRY
OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY = cvar.OpenCloseSettlFlag_ENTRY_FROM_PREVIOUS_BUSINESS_DAY
OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE = cvar.OpenCloseSettlFlag_THEORETICAL_PRICE_VALUE
BidTradeType_RISK_TRADE = cvar.BidTradeType_RISK_TRADE
BidTradeType_VWAP_GUARANTEE = cvar.BidTradeType_VWAP_GUARANTEE
BidTradeType_AGENCY = cvar.BidTradeType_AGENCY
BidTradeType_GUARANTEED_CLOSE = cvar.BidTradeType_GUARANTEED_CLOSE
AcctIDSource_BIC = cvar.AcctIDSource_BIC
AcctIDSource_SID_CODE = cvar.AcctIDSource_SID_CODE
AcctIDSource_TFM = cvar.AcctIDSource_TFM
AcctIDSource_OMGEO = cvar.AcctIDSource_OMGEO
AcctIDSource_DTCC_CODE = cvar.AcctIDSource_DTCC_CODE
AcctIDSource_OTHER = cvar.AcctIDSource_OTHER
ConfirmStatus_RECEIVED = cvar.ConfirmStatus_RECEIVED
ConfirmStatus_MISMATCHED_ACCOUNT = cvar.ConfirmStatus_MISMATCHED_ACCOUNT
ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS = cvar.ConfirmStatus_MISSING_SETTLEMENT_INSTRUCTIONS
ConfirmStatus_CONFIRMED = cvar.ConfirmStatus_CONFIRMED
ConfirmStatus_REQUEST_REJECTED = cvar.ConfirmStatus_REQUEST_REJECTED
ConfirmTransType_NEW = cvar.ConfirmTransType_NEW
ConfirmTransType_REPLACE = cvar.ConfirmTransType_REPLACE
ConfirmTransType_CANCEL = cvar.ConfirmTransType_CANCEL
DeliveryForm_BOOKENTRY = cvar.DeliveryForm_BOOKENTRY
DeliveryForm_BEARER = cvar.DeliveryForm_BEARER
DeliveryForm_BOOK_ENTRY = cvar.DeliveryForm_BOOK_ENTRY
LegSwapType_PAR_FOR_PAR = cvar.LegSwapType_PAR_FOR_PAR
LegSwapType_MODIFIED_DURATION = cvar.LegSwapType_MODIFIED_DURATION
LegSwapType_RISK = cvar.LegSwapType_RISK
LegSwapType_PROCEEDS = cvar.LegSwapType_PROCEEDS
QuotePriceType_PERCENT = cvar.QuotePriceType_PERCENT
QuotePriceType_PER_SHARE = cvar.QuotePriceType_PER_SHARE
QuotePriceType_FIXED_AMOUNT = cvar.QuotePriceType_FIXED_AMOUNT
QuotePriceType_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR = cvar.QuotePriceType_DISCOUNT_PERCENTAGE_POINTS_BELOW_PAR
QuotePriceType_PREMIUM_PERCENTAGE_POINTS_OVER_PAR = cvar.QuotePriceType_PREMIUM_PERCENTAGE_POINTS_OVER_PAR
QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK = cvar.QuotePriceType_BASIS_POINTS_RELATIVE_TO_BENCHMARK
QuotePriceType_TED_PRICE = cvar.QuotePriceType_TED_PRICE
QuotePriceType_TED_YIELD = cvar.QuotePriceType_TED_YIELD
QuotePriceType_YIELD_SPREAD = cvar.QuotePriceType_YIELD_SPREAD
QuotePriceType_YIELD = cvar.QuotePriceType_YIELD
QuotePriceType_DISCOUNT = cvar.QuotePriceType_DISCOUNT
QuotePriceType_PREMIUM = cvar.QuotePriceType_PREMIUM
QuotePriceType_SPREAD = cvar.QuotePriceType_SPREAD
QuoteRespType_HIT_LIFT = cvar.QuoteRespType_HIT_LIFT
QuoteRespType_COUNTER = cvar.QuoteRespType_COUNTER
QuoteRespType_EXPIRED = cvar.QuoteRespType_EXPIRED
QuoteRespType_COVER = cvar.QuoteRespType_COVER
QuoteRespType_DONE_AWAY = cvar.QuoteRespType_DONE_AWAY
QuoteRespType_PASS = cvar.QuoteRespType_PASS
QuoteRespType_END_TRADE = cvar.QuoteRespType_END_TRADE
QuoteRespType_TIMED_OUT = cvar.QuoteRespType_TIMED_OUT
PosType_TRANSACTION_QUANTITY = cvar.PosType_TRANSACTION_QUANTITY
PosType_INTRA_SPREAD_QTY = cvar.PosType_INTRA_SPREAD_QTY
PosType_INTER_SPREAD_QTY = cvar.PosType_INTER_SPREAD_QTY
PosType_END_OF_DAY_QTY = cvar.PosType_END_OF_DAY_QTY
PosType_START_OF_DAY_QTY = cvar.PosType_START_OF_DAY_QTY
PosType_OPTION_EXERCISE_QTY = cvar.PosType_OPTION_EXERCISE_QTY
PosType_OPTION_ASSIGNMENT = cvar.PosType_OPTION_ASSIGNMENT
PosType_TRANSACTION_FROM_EXERCISE = cvar.PosType_TRANSACTION_FROM_EXERCISE
PosType_TRANSACTION_FROM_ASSIGNMENT = cvar.PosType_TRANSACTION_FROM_ASSIGNMENT
PosType_PIT_TRADE_QTY = cvar.PosType_PIT_TRADE_QTY
PosType_TRANSFER_TRADE_QTY = cvar.PosType_TRANSFER_TRADE_QTY
PosType_ELECTRONIC_TRADE_QTY = cvar.PosType_ELECTRONIC_TRADE_QTY
PosType_ALLOCATION_TRADE_QTY = cvar.PosType_ALLOCATION_TRADE_QTY
PosType_ADJUSTMENT_QTY = cvar.PosType_ADJUSTMENT_QTY
PosType_AS_OF_TRADE_QTY = cvar.PosType_AS_OF_TRADE_QTY
PosType_DELIVERY_QTY = cvar.PosType_DELIVERY_QTY
PosType_TOTAL_TRANSACTION_QTY = cvar.PosType_TOTAL_TRANSACTION_QTY
PosType_CROSS_MARGIN_QTY = cvar.PosType_CROSS_MARGIN_QTY
PosType_INTEGRAL_SPLIT = cvar.PosType_INTEGRAL_SPLIT
PosType_RECEIVE_QUANTITY = cvar.PosType_RECEIVE_QUANTITY
PosType_CORPORATE_ACTION_ADJUSTMENT = cvar.PosType_CORPORATE_ACTION_ADJUSTMENT
PosType_DELIVERY_NOTICE_QTY = cvar.PosType_DELIVERY_NOTICE_QTY
PosType_EXCHANGE_FOR_PHYSICAL_QTY = cvar.PosType_EXCHANGE_FOR_PHYSICAL_QTY
PosType_PRIVATELY_NEGOTIATED_TRADE_QTY = cvar.PosType_PRIVATELY_NEGOTIATED_TRADE_QTY
PosType_NET_DELTA_QTY = cvar.PosType_NET_DELTA_QTY
PosType_CREDIT_EVENT_ADJUSTMENT = cvar.PosType_CREDIT_EVENT_ADJUSTMENT
PosType_SUCCESSION_EVENT_ADJUSTMENT = cvar.PosType_SUCCESSION_EVENT_ADJUSTMENT
PosQtyStatus_SUBMITTED = cvar.PosQtyStatus_SUBMITTED
PosQtyStatus_ACCEPTED = cvar.PosQtyStatus_ACCEPTED
PosQtyStatus_REJECTED = cvar.PosQtyStatus_REJECTED
PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_FINAL_MARK_TO_MARKET_AMOUNT
PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_INCREMENTAL_MARK_TO_MARKET_AMOUNT
PosAmtType_TRADE_VARIATION_AMOUNT = cvar.PosAmtType_TRADE_VARIATION_AMOUNT
PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT = cvar.PosAmtType_START_OF_DAY_MARK_TO_MARKET_AMOUNT
PosAmtType_PREMIUM_AMOUNT = cvar.PosAmtType_PREMIUM_AMOUNT
PosAmtType_CASH_RESIDUAL_AMOUNT = cvar.PosAmtType_CASH_RESIDUAL_AMOUNT
PosAmtType_CASH_AMOUNT = cvar.PosAmtType_CASH_AMOUNT
PosAmtType_VALUE_ADJUSTED_AMOUNT = cvar.PosAmtType_VALUE_ADJUSTED_AMOUNT
PosAmtType_SETTLEMENT_VALUE = cvar.PosAmtType_SETTLEMENT_VALUE
PosAmtType_INITIAL_TRADE_COUPON_AMOUNT = cvar.PosAmtType_INITIAL_TRADE_COUPON_AMOUNT
PosAmtType_ACCRUED_COUPON_AMOUNT = cvar.PosAmtType_ACCRUED_COUPON_AMOUNT
PosAmtType_COUPON_AMOUNT = cvar.PosAmtType_COUPON_AMOUNT
PosAmtType_INCREMENTAL_ACCRUED_COUPON = cvar.PosAmtType_INCREMENTAL_ACCRUED_COUPON
PosAmtType_COLLATERALIZED_MARK_TO_MARKET = cvar.PosAmtType_COLLATERALIZED_MARK_TO_MARKET
PosAmtType_INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET = cvar.PosAmtType_INCREMENTAL_COLLATERALIZED_MARK_TO_MARKET
PosAmtType_COMPENSATION_AMOUNT = cvar.PosAmtType_COMPENSATION_AMOUNT
PosAmtType_TOTAL_BANKED_AMOUNT = cvar.PosAmtType_TOTAL_BANKED_AMOUNT
PosAmtType_TOTAL_COLLATERALIZED_AMOUNT = cvar.PosAmtType_TOTAL_COLLATERALIZED_AMOUNT
PosTransType_EXERCISE = cvar.PosTransType_EXERCISE
PosTransType_DO_NOT_EXERCISE = cvar.PosTransType_DO_NOT_EXERCISE
PosTransType_POSITION_ADJUSTMENT = cvar.PosTransType_POSITION_ADJUSTMENT
PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION = cvar.PosTransType_POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION
PosTransType_PLEDGE = cvar.PosTransType_PLEDGE
PosTransType_LARGE_TRADER_SUBMISSION = cvar.PosTransType_LARGE_TRADER_SUBMISSION
PosMaintAction_NEW_USED_TO_INCREMENT_THE_OVERALL_TRANSACTION_QUANTITY = cvar.PosMaintAction_NEW_USED_TO_INCREMENT_THE_OVERALL_TRANSACTION_QUANTITY
PosMaintAction_REPLACE_USED_TO_OVERRIDE_THE_OVERALL_TRANSACTION_QUANTITY_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_THE_REFERENCE_ID = cvar.PosMaintAction_REPLACE_USED_TO_OVERRIDE_THE_OVERALL_TRANSACTION_QUANTITY_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_THE_REFERENCE_ID
PosMaintAction_CANCEL_USED_TO_REMOVE_THE_OVERALL_TRANSACTION_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_REFERENCE_ID = cvar.PosMaintAction_CANCEL_USED_TO_REMOVE_THE_OVERALL_TRANSACTION_OR_SPECIFIC_ADD_MESSAGES_BASED_ON_REFERENCE_ID
PosMaintAction_NEW = cvar.PosMaintAction_NEW
PosMaintAction_REPLACE = cvar.PosMaintAction_REPLACE
PosMaintAction_CANCEL = cvar.PosMaintAction_CANCEL
PosMaintAction_REVERSE = cvar.PosMaintAction_REVERSE
SettlSessID_INTRADAY = cvar.SettlSessID_INTRADAY
SettlSessID_REGULAR_TRADING_HOURS = cvar.SettlSessID_REGULAR_TRADING_HOURS
SettlSessID_ELECTRONIC_TRADING_HOURS = cvar.SettlSessID_ELECTRONIC_TRADING_HOURS
SettlSessID_END_OF_DAY = cvar.SettlSessID_END_OF_DAY
AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION = cvar.AdjustmentType_PROCESS_REQUEST_AS_MARGIN_DISPOSITION
AdjustmentType_DELTA_PLUS = cvar.AdjustmentType_DELTA_PLUS
AdjustmentType_DELTA_MINUS = cvar.AdjustmentType_DELTA_MINUS
AdjustmentType_FINAL = cvar.AdjustmentType_FINAL
PosMaintStatus_ACCEPTED = cvar.PosMaintStatus_ACCEPTED
PosMaintStatus_ACCEPTED_WITH_WARNINGS = cvar.PosMaintStatus_ACCEPTED_WITH_WARNINGS
PosMaintStatus_REJECTED = cvar.PosMaintStatus_REJECTED
PosMaintStatus_COMPLETED = cvar.PosMaintStatus_COMPLETED
PosMaintStatus_COMPLETED_WITH_WARNINGS = cvar.PosMaintStatus_COMPLETED_WITH_WARNINGS
PosMaintResult_SUCCESSFUL_COMPLETION = cvar.PosMaintResult_SUCCESSFUL_COMPLETION
PosMaintResult_REJECTED = cvar.PosMaintResult_REJECTED
PosMaintResult_OTHER = cvar.PosMaintResult_OTHER
PosReqType_POSITIONS = cvar.PosReqType_POSITIONS
PosReqType_TRADES = cvar.PosReqType_TRADES
PosReqType_EXERCISES = cvar.PosReqType_EXERCISES
PosReqType_ASSIGNMENTS = cvar.PosReqType_ASSIGNMENTS
PosReqType_SETTLEMENT_ACTIVITY = cvar.PosReqType_SETTLEMENT_ACTIVITY
PosReqType_BACKOUT_MESSAGE = cvar.PosReqType_BACKOUT_MESSAGE
PosReqType_DELTA_POSITIONS = cvar.PosReqType_DELTA_POSITIONS
ResponseTransportType_INBAND_TRANSPORT_THE_REQUEST_WAS_SENT_OVER = cvar.ResponseTransportType_INBAND_TRANSPORT_THE_REQUEST_WAS_SENT_OVER
ResponseTransportType_OUT_OF_BAND_PRE_ARRANGED_OUT_OF_BAND_DELIVERY_MECHANISM = cvar.ResponseTransportType_OUT_OF_BAND_PRE_ARRANGED_OUT_OF_BAND_DELIVERY_MECHANISM
ResponseTransportType_INBAND = cvar.ResponseTransportType_INBAND
ResponseTransportType_OUT_OF_BAND = cvar.ResponseTransportType_OUT_OF_BAND
PosReqResult_VALID_REQUEST = cvar.PosReqResult_VALID_REQUEST
PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST = cvar.PosReqResult_INVALID_OR_UNSUPPORTED_REQUEST
PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA = cvar.PosReqResult_NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA
PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS = cvar.PosReqResult_NOT_AUTHORIZED_TO_REQUEST_POSITIONS
PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED = cvar.PosReqResult_REQUEST_FOR_POSITION_NOT_SUPPORTED
PosReqResult_OTHER = cvar.PosReqResult_OTHER
PosReqStatus_COMPLETED = cvar.PosReqStatus_COMPLETED
PosReqStatus_COMPLETED_WITH_WARNINGS = cvar.PosReqStatus_COMPLETED_WITH_WARNINGS
PosReqStatus_REJECTED = cvar.PosReqStatus_REJECTED
SettlPriceType_FINAL = cvar.SettlPriceType_FINAL
SettlPriceType_THEORETICAL = cvar.SettlPriceType_THEORETICAL
AssignmentMethod_RANDOM = cvar.AssignmentMethod_RANDOM
AssignmentMethod_PRORATA = cvar.AssignmentMethod_PRORATA
AssignmentMethod_PRO_RATA = cvar.AssignmentMethod_PRO_RATA
ExerciseMethod_AUTOMATIC = cvar.ExerciseMethod_AUTOMATIC
ExerciseMethod_MANUAL = cvar.ExerciseMethod_MANUAL
TradeRequestResult_SUCCESSFUL = cvar.TradeRequestResult_SUCCESSFUL
TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT = cvar.TradeRequestResult_INVALID_OR_UNKNOWN_INSTRUMENT
TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED = cvar.TradeRequestResult_INVALID_TYPE_OF_TRADE_REQUESTED
TradeRequestResult_INVALID_PARTIES = cvar.TradeRequestResult_INVALID_PARTIES
TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED = cvar.TradeRequestResult_INVALID_TRANSPORT_TYPE_REQUESTED
TradeRequestResult_INVALID_DESTINATION_REQUESTED = cvar.TradeRequestResult_INVALID_DESTINATION_REQUESTED
TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED = cvar.TradeRequestResult_TRADEREQUESTTYPE_NOT_SUPPORTED
TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST = cvar.TradeRequestResult_UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST
TradeRequestResult_OTHER = cvar.TradeRequestResult_OTHER
TradeRequestResult_UNAUTHORIZED_ROR_TRADE_CAPTURE_REPORT_REQUEST = cvar.TradeRequestResult_UNAUTHORIZED_ROR_TRADE_CAPTURE_REPORT_REQUEST
TradeRequestResult_NOT_AUTHORIZED = cvar.TradeRequestResult_NOT_AUTHORIZED
TradeRequestStatus_ACCEPTED = cvar.TradeRequestStatus_ACCEPTED
TradeRequestStatus_COMPLETED = cvar.TradeRequestStatus_COMPLETED
TradeRequestStatus_REJECTED = cvar.TradeRequestStatus_REJECTED
TradeReportRejectReason_SUCCESSFUL = cvar.TradeReportRejectReason_SUCCESSFUL
TradeReportRejectReason_INVALID_PARTY_INFORMATION = cvar.TradeReportRejectReason_INVALID_PARTY_INFORMATION
TradeReportRejectReason_UNKNOWN_INSTRUMENT = cvar.TradeReportRejectReason_UNKNOWN_INSTRUMENT
TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES = cvar.TradeReportRejectReason_UNAUTHORIZED_TO_REPORT_TRADES
TradeReportRejectReason_INVALID_TRADE_TYPE = cvar.TradeReportRejectReason_INVALID_TRADE_TYPE
TradeReportRejectReason_OTHER = cvar.TradeReportRejectReason_OTHER
TradeReportRejectReason_INVALID_PARTY_ONFORMATION = cvar.TradeReportRejectReason_INVALID_PARTY_ONFORMATION
SideMultiLegReportingType_SINGLE_SECURITY = cvar.SideMultiLegReportingType_SINGLE_SECURITY
SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = cvar.SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY
SideMultiLegReportingType_MULTI_LEG_SECURITY = cvar.SideMultiLegReportingType_MULTI_LEG_SECURITY
SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY = cvar.SideMultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTILEG_SECURITY
SideMultiLegReportingType_MULTILEG_SECURITY = cvar.SideMultiLegReportingType_MULTILEG_SECURITY
TrdRegTimestampType_EXECUTION_TIME = cvar.TrdRegTimestampType_EXECUTION_TIME
TrdRegTimestampType_TIME_IN = cvar.TrdRegTimestampType_TIME_IN
TrdRegTimestampType_TIME_OUT = cvar.TrdRegTimestampType_TIME_OUT
TrdRegTimestampType_BROKER_RECEIPT = cvar.TrdRegTimestampType_BROKER_RECEIPT
TrdRegTimestampType_BROKER_EXECUTION = cvar.TrdRegTimestampType_BROKER_EXECUTION
TrdRegTimestampType_DESK_RECEIPT = cvar.TrdRegTimestampType_DESK_RECEIPT
TrdRegTimestampType_SUBMISSION_TO_CLEARING = cvar.TrdRegTimestampType_SUBMISSION_TO_CLEARING
ConfirmType_STATUS = cvar.ConfirmType_STATUS
ConfirmType_CONFIRMATION = cvar.ConfirmType_CONFIRMATION
ConfirmType_CONFIRMATION_REQUEST_REJECTED = cvar.ConfirmType_CONFIRMATION_REQUEST_REJECTED
ConfirmRejReason_MISMATCHED_ACCOUNT = cvar.ConfirmRejReason_MISMATCHED_ACCOUNT
ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS = cvar.ConfirmRejReason_MISSING_SETTLEMENT_INSTRUCTIONS
ConfirmRejReason_OTHER = cvar.ConfirmRejReason_OTHER
BookingType_REGULAR_BOOKING = cvar.BookingType_REGULAR_BOOKING
BookingType_CFD = cvar.BookingType_CFD
BookingType_TOTAL_RETURN_SWAP = cvar.BookingType_TOTAL_RETURN_SWAP
AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS = cvar.AllocSettlInstType_USE_DEFAULT_INSTRUCTIONS
AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED = cvar.AllocSettlInstType_DERIVE_FROM_PARAMETERS_PROVIDED
AllocSettlInstType_FULL_DETAILS_PROVIDED = cvar.AllocSettlInstType_FULL_DETAILS_PROVIDED
AllocSettlInstType_SSI_DB_IDS_PROVIDED = cvar.AllocSettlInstType_SSI_DB_IDS_PROVIDED
AllocSettlInstType_PHONE_FOR_INSTRUCTIONS = cvar.AllocSettlInstType_PHONE_FOR_INSTRUCTIONS
DlvyInstType_SECURITIES = cvar.DlvyInstType_SECURITIES
DlvyInstType_CASH = cvar.DlvyInstType_CASH
TerminationType_OVERNIGHT = cvar.TerminationType_OVERNIGHT
TerminationType_TERM = cvar.TerminationType_TERM
TerminationType_FLEXIBLE = cvar.TerminationType_FLEXIBLE
TerminationType_OPEN = cvar.TerminationType_OPEN
SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST = cvar.SettlInstReqRejCode_UNABLE_TO_PROCESS_REQUEST
SettlInstReqRejCode_UNKNOWN_ACCOUNT = cvar.SettlInstReqRejCode_UNKNOWN_ACCOUNT
SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND = cvar.SettlInstReqRejCode_NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND
SettlInstReqRejCode_OTHER = cvar.SettlInstReqRejCode_OTHER
AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY = cvar.AllocReportType_SELLSIDE_CALCULATED_USING_PRELIMINARY
AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY = cvar.AllocReportType_SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY
AllocReportType_WAREHOUSE_RECAP = cvar.AllocReportType_WAREHOUSE_RECAP
AllocReportType_REQUEST_TO_INTERMEDIARY = cvar.AllocReportType_REQUEST_TO_INTERMEDIARY
AllocReportType_PRELIMINARY_REQUEST_TO_INTERMEDIARY = cvar.AllocReportType_PRELIMINARY_REQUEST_TO_INTERMEDIARY
AllocReportType_ACCEPT = cvar.AllocReportType_ACCEPT
AllocReportType_REJECT = cvar.AllocReportType_REJECT
AllocReportType_ACCEPT_PENDING = cvar.AllocReportType_ACCEPT_PENDING
AllocReportType_COMPLETE = cvar.AllocReportType_COMPLETE
AllocReportType_REVERSE_PENDING = cvar.AllocReportType_REVERSE_PENDING
AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT = cvar.AllocCancReplaceReason_ORIGINAL_DETAILS_INCOMPLETE_INCORRECT
AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS = cvar.AllocCancReplaceReason_CHANGE_IN_UNDERLYING_ORDER_DETAILS
AllocCancReplaceReason_OTHER = cvar.AllocCancReplaceReason_OTHER
AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS
AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS
AllocAccountType_HOUSE_TRADER = cvar.AllocAccountType_HOUSE_TRADER
AllocAccountType_FLOOR_TRADER = cvar.AllocAccountType_FLOOR_TRADER
AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED
AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = cvar.AllocAccountType_ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED
AllocAccountType_JOINT_BACKOFFICE_ACCOUNT = cvar.AllocAccountType_JOINT_BACKOFFICE_ACCOUNT
AllocAccountType_ACCOUNT_IS_CARRIED_PN_CUSTOMER_SIDE_OF_BOOKS = cvar.AllocAccountType_ACCOUNT_IS_CARRIED_PN_CUSTOMER_SIDE_OF_BOOKS
AllocAccountType_JOINT_BACK_OFFICE_ACCOUNT = cvar.AllocAccountType_JOINT_BACK_OFFICE_ACCOUNT
PartySubIDType_FIRM = cvar.PartySubIDType_FIRM
PartySubIDType_PERSON = cvar.PartySubIDType_PERSON
PartySubIDType_SYSTEM = cvar.PartySubIDType_SYSTEM
PartySubIDType_APPLICATION = cvar.PartySubIDType_APPLICATION
PartySubIDType_FULL_LEGAL_NAME_OF_FIRM = cvar.PartySubIDType_FULL_LEGAL_NAME_OF_FIRM
PartySubIDType_POSTAL_ADDRESS = cvar.PartySubIDType_POSTAL_ADDRESS
PartySubIDType_PHONE_NUMBER = cvar.PartySubIDType_PHONE_NUMBER
PartySubIDType_EMAIL_ADDRESS = cvar.PartySubIDType_EMAIL_ADDRESS
PartySubIDType_CONTACT_NAME = cvar.PartySubIDType_CONTACT_NAME
PartySubIDType_SECURITIES_ACCOUNT_NUMBER = cvar.PartySubIDType_SECURITIES_ACCOUNT_NUMBER
PartySubIDType_REGISTRATION_NUMBER = cvar.PartySubIDType_REGISTRATION_NUMBER
PartySubIDType_REGISTERED_ADDRESS_12 = cvar.PartySubIDType_REGISTERED_ADDRESS_12
PartySubIDType_REGULATORY_STATUS = cvar.PartySubIDType_REGULATORY_STATUS
PartySubIDType_REGISTRATION_NAME = cvar.PartySubIDType_REGISTRATION_NAME
PartySubIDType_CASH_ACCOUNT_NUMBER = cvar.PartySubIDType_CASH_ACCOUNT_NUMBER
PartySubIDType_BIC = cvar.PartySubIDType_BIC
PartySubIDType_CSD_PARTICIPANT_MEMBER_CODE = cvar.PartySubIDType_CSD_PARTICIPANT_MEMBER_CODE
PartySubIDType_REGISTERED_ADDRESS_18 = cvar.PartySubIDType_REGISTERED_ADDRESS_18
PartySubIDType_FUND_ACCOUNT_NAME = cvar.PartySubIDType_FUND_ACCOUNT_NAME
PartySubIDType_TELEX_NUMBER = cvar.PartySubIDType_TELEX_NUMBER
PartySubIDType_FAX_NUMBER = cvar.PartySubIDType_FAX_NUMBER
PartySubIDType_SECURITIES_ACCOUNT_NAME = cvar.PartySubIDType_SECURITIES_ACCOUNT_NAME
PartySubIDType_CASH_ACCOUNT_NAME = cvar.PartySubIDType_CASH_ACCOUNT_NAME
PartySubIDType_DEPARTMENT = cvar.PartySubIDType_DEPARTMENT
PartySubIDType_LOCATION = cvar.PartySubIDType_LOCATION
PartySubIDType_POSITION_ACCOUNT_TYPE = cvar.PartySubIDType_POSITION_ACCOUNT_TYPE
PartySubIDType_LOCATION_DESK = cvar.PartySubIDType_LOCATION_DESK
PartySubIDType_SECURITY_LOCATE_ID = cvar.PartySubIDType_SECURITY_LOCATE_ID
PartySubIDType_MARKET_MAKER = cvar.PartySubIDType_MARKET_MAKER
PartySubIDType_ELIGIBLE_COUNTERPARTY = cvar.PartySubIDType_ELIGIBLE_COUNTERPARTY
PartySubIDType_PROFESSIONAL_CLIENT = cvar.PartySubIDType_PROFESSIONAL_CLIENT
PartySubIDType_EXECUTION_VENUE = cvar.PartySubIDType_EXECUTION_VENUE
PartySubIDType_CURRENCY_DELIVERY_IDENTIFIER = cvar.PartySubIDType_CURRENCY_DELIVERY_IDENTIFIER
AllocIntermedReqType_PENDING_ACCEPT = cvar.AllocIntermedReqType_PENDING_ACCEPT
AllocIntermedReqType_PENDING_RELEASE = cvar.AllocIntermedReqType_PENDING_RELEASE
AllocIntermedReqType_PENDING_REVERSAL = cvar.AllocIntermedReqType_PENDING_REVERSAL
AllocIntermedReqType_ACCEPT = cvar.AllocIntermedReqType_ACCEPT
AllocIntermedReqType_BLOCK_LEVEL_REJECT = cvar.AllocIntermedReqType_BLOCK_LEVEL_REJECT
AllocIntermedReqType_ACCOUNT_LEVEL_REJECT = cvar.AllocIntermedReqType_ACCOUNT_LEVEL_REJECT
ApplQueueResolution_NO_ACTION_TAKEN = cvar.ApplQueueResolution_NO_ACTION_TAKEN
ApplQueueResolution_QUEUE_FLUSHED = cvar.ApplQueueResolution_QUEUE_FLUSHED
ApplQueueResolution_OVERLAY_LAST = cvar.ApplQueueResolution_OVERLAY_LAST
ApplQueueResolution_END_SESSION = cvar.ApplQueueResolution_END_SESSION
ApplQueueAction_NO_ACTION_TAKEN = cvar.ApplQueueAction_NO_ACTION_TAKEN
ApplQueueAction_QUEUE_FLUSHED = cvar.ApplQueueAction_QUEUE_FLUSHED
ApplQueueAction_OVERLAY_LAST = cvar.ApplQueueAction_OVERLAY_LAST
ApplQueueAction_END_SESSION = cvar.ApplQueueAction_END_SESSION
AvgPxIndicator_NO_AVERAGE_PRICING = cvar.AvgPxIndicator_NO_AVERAGE_PRICING
AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = cvar.AvgPxIndicator_TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID
AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = cvar.AvgPxIndicator_LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID
AvgPxIndicator_LAST_TRADE_IS_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = cvar.AvgPxIndicator_LAST_TRADE_IS_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID
TradeAllocIndicator_ALLOCATION_NOT_REQUIRED = cvar.TradeAllocIndicator_ALLOCATION_NOT_REQUIRED
TradeAllocIndicator_ALLOCATION_REQUIRED = cvar.TradeAllocIndicator_ALLOCATION_REQUIRED
TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE = cvar.TradeAllocIndicator_USE_ALLOCATION_PROVIDED_WITH_THE_TRADE
TradeAllocIndicator_ALLOCATION_GIVE_UP_EXECUTOR = cvar.TradeAllocIndicator_ALLOCATION_GIVE_UP_EXECUTOR
TradeAllocIndicator_ALLOCATION_FROM_EXECUTOR = cvar.TradeAllocIndicator_ALLOCATION_FROM_EXECUTOR
TradeAllocIndicator_ALLOCATION_TO_CLAIM_ACCOUNT = cvar.TradeAllocIndicator_ALLOCATION_TO_CLAIM_ACCOUNT
ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE = cvar.ExpirationCycle_EXPIRE_ON_TRADING_SESSION_CLOSE
ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN = cvar.ExpirationCycle_EXPIRE_ON_TRADING_SESSION_OPEN
ExpirationCycle_TRADING_ELIGIBILITY_EXPIRATION_SPECIFIED_IN_THE_DATE_AND_TIME_FIELDS_EVENTDATE = cvar.ExpirationCycle_TRADING_ELIGIBILITY_EXPIRATION_SPECIFIED_IN_THE_DATE_AND_TIME_FIELDS_EVENTDATE
TrdType_REGULAR_TRADE = cvar.TrdType_REGULAR_TRADE
TrdType_BLOCK_TRADE = cvar.TrdType_BLOCK_TRADE
TrdType_EFP = cvar.TrdType_EFP
TrdType_TRANSFER = cvar.TrdType_TRANSFER
TrdType_LATE_TRADE = cvar.TrdType_LATE_TRADE
TrdType_T_TRADE = cvar.TrdType_T_TRADE
TrdType_WEIGHTED_AVERAGE_PRICE_TRADE = cvar.TrdType_WEIGHTED_AVERAGE_PRICE_TRADE
TrdType_BUNCHED_TRADE = cvar.TrdType_BUNCHED_TRADE
TrdType_LATE_BUNCHED_TRADE = cvar.TrdType_LATE_BUNCHED_TRADE
TrdType_PRIOR_REFERENCE_PRICE_TRADE = cvar.TrdType_PRIOR_REFERENCE_PRICE_TRADE
TrdType_AFTER_HOURS_TRADE = cvar.TrdType_AFTER_HOURS_TRADE
TrdType_BLOCK_TRADE_1 = cvar.TrdType_BLOCK_TRADE_1
TrdType_EXCHANGE_FOR_RISK = cvar.TrdType_EXCHANGE_FOR_RISK
TrdType_EXCHANGE_FOR_SWAP = cvar.TrdType_EXCHANGE_FOR_SWAP
TrdType_EXCHANGE_OF_FUTURES_FOR = cvar.TrdType_EXCHANGE_OF_FUTURES_FOR
TrdType_EXCHANGE_OF_OPTIONS_FOR_OPTIONS = cvar.TrdType_EXCHANGE_OF_OPTIONS_FOR_OPTIONS
TrdType_TRADING_AT_SETTLEMENT = cvar.TrdType_TRADING_AT_SETTLEMENT
TrdType_ALL_OR_NONE = cvar.TrdType_ALL_OR_NONE
TrdType_FUTURES_LARGE_ORDER_EXECUTION = cvar.TrdType_FUTURES_LARGE_ORDER_EXECUTION
TrdType_EXCHANGE_OF_FUTURES_FOR_FUTURES = cvar.TrdType_EXCHANGE_OF_FUTURES_FOR_FUTURES
TrdType_OPTION_INTERIM_TRADE = cvar.TrdType_OPTION_INTERIM_TRADE
TrdType_OPTION_CABINET_TRADE = cvar.TrdType_OPTION_CABINET_TRADE
TrdType_PRIVATELY_NEGOTIATED_TRADES = cvar.TrdType_PRIVATELY_NEGOTIATED_TRADES
TrdType_SUBSTITUTION_OF_FUTURES_FOR_FORWARDS = cvar.TrdType_SUBSTITUTION_OF_FUTURES_FOR_FORWARDS
TrdType_ERROR_TRADE = cvar.TrdType_ERROR_TRADE
TrdType_SPECIAL_CUM_DIVIDEND = cvar.TrdType_SPECIAL_CUM_DIVIDEND
TrdType_SPECIAL_EX_DIVIDEND = cvar.TrdType_SPECIAL_EX_DIVIDEND
TrdType_SPECIAL_CUM_COUPON = cvar.TrdType_SPECIAL_CUM_COUPON
TrdType_SPECIAL_EX_COUPON = cvar.TrdType_SPECIAL_EX_COUPON
TrdType_CASH_SETTLEMENT = cvar.TrdType_CASH_SETTLEMENT
TrdType_SPECIAL_PRICE = cvar.TrdType_SPECIAL_PRICE
TrdType_GUARANTEED_DELIVERY = cvar.TrdType_GUARANTEED_DELIVERY
TrdType_SPECIAL_CUM_RIGHTS = cvar.TrdType_SPECIAL_CUM_RIGHTS
TrdType_SPECIAL_EX_RIGHTS = cvar.TrdType_SPECIAL_EX_RIGHTS
TrdType_SPECIAL_CUM_CAPITAL_REPAYMENTS = cvar.TrdType_SPECIAL_CUM_CAPITAL_REPAYMENTS
TrdType_SPECIAL_EX_CAPITAL_REPAYMENTS = cvar.TrdType_SPECIAL_EX_CAPITAL_REPAYMENTS
TrdType_SPECIAL_CUM_BONUS = cvar.TrdType_SPECIAL_CUM_BONUS
TrdType_SPECIAL_EX_BONUS = cvar.TrdType_SPECIAL_EX_BONUS
TrdType_BLOCK_TRADE_38 = cvar.TrdType_BLOCK_TRADE_38
TrdType_WORKED_PRINCIPAL_TRADE = cvar.TrdType_WORKED_PRINCIPAL_TRADE
TrdType_BLOCK_TRADES = cvar.TrdType_BLOCK_TRADES
TrdType_NAME_CHANGE = cvar.TrdType_NAME_CHANGE
TrdType_PORTFOLIO_TRANSFER = cvar.TrdType_PORTFOLIO_TRANSFER
TrdType_PROROGATION_BUY = cvar.TrdType_PROROGATION_BUY
TrdType_PROROGATION_SELL = cvar.TrdType_PROROGATION_SELL
TrdType_OPTION_EXERCISE = cvar.TrdType_OPTION_EXERCISE
TrdType_DELTA_NEUTRAL_TRANSACTION = cvar.TrdType_DELTA_NEUTRAL_TRANSACTION
TrdType_FINANCING_TRANSACTION = cvar.TrdType_FINANCING_TRANSACTION
TrdType_NON_STANDARD_SETTLEMENT = cvar.TrdType_NON_STANDARD_SETTLEMENT
TrdType_DERIVATIVE_RELATED_TRANSACTION = cvar.TrdType_DERIVATIVE_RELATED_TRANSACTION
TrdType_PORTFOLIO_TRADE = cvar.TrdType_PORTFOLIO_TRADE
TrdType_VOLUME_WEIGHTED_AVERAGE_TRADE = cvar.TrdType_VOLUME_WEIGHTED_AVERAGE_TRADE
TrdType_EXCHANGE_GRANTED_TRADE = cvar.TrdType_EXCHANGE_GRANTED_TRADE
TrdType_REPURCHASE_AGREEMENT = cvar.TrdType_REPURCHASE_AGREEMENT
TrdType_OTC = cvar.TrdType_OTC
TrdType_EXCHANGE_BASIS_FACILITY = cvar.TrdType_EXCHANGE_BASIS_FACILITY
TrdSubType_CMTA = cvar.TrdSubType_CMTA
TrdSubType_INTERNAL_TRANSFER_OR_ADJUSTMENT = cvar.TrdSubType_INTERNAL_TRANSFER_OR_ADJUSTMENT
TrdSubType_EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT = cvar.TrdSubType_EXTERNAL_TRANSFER_OR_TRANSFER_OF_ACCOUNT
TrdSubType_REJECT_FOR_SUBMITTING_SIDE = cvar.TrdSubType_REJECT_FOR_SUBMITTING_SIDE
TrdSubType_ADVISORY_FOR_CONTRA_SIDE = cvar.TrdSubType_ADVISORY_FOR_CONTRA_SIDE
TrdSubType_OFFSET_DUE_TO_AN_ALLOCATION = cvar.TrdSubType_OFFSET_DUE_TO_AN_ALLOCATION
TrdSubType_ONSET_DUT_TO_AN_ALLOCATION = cvar.TrdSubType_ONSET_DUT_TO_AN_ALLOCATION
TrdSubType_DIFFERENTIAL_SPREAD = cvar.TrdSubType_DIFFERENTIAL_SPREAD
TrdSubType_IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT = cvar.TrdSubType_IMPLIED_SPREAD_LEG_EXECUTED_AGAINST_AN_OUTRIGHT
TrdSubType_TRANSACTION_FROM_EXERCISE = cvar.TrdSubType_TRANSACTION_FROM_EXERCISE
TrdSubType_TRANSACTION_FROM_ASSIGNMENT = cvar.TrdSubType_TRANSACTION_FROM_ASSIGNMENT
TrdSubType_ACATS = cvar.TrdSubType_ACATS
TrdSubType_AI = cvar.TrdSubType_AI
TrdSubType_B = cvar.TrdSubType_B
TrdSubType_K = cvar.TrdSubType_K
TrdSubType_LC = cvar.TrdSubType_LC
TrdSubType_M = cvar.TrdSubType_M
TrdSubType_N = cvar.TrdSubType_N
TrdSubType_NM = cvar.TrdSubType_NM
TrdSubType_NR = cvar.TrdSubType_NR
TrdSubType_P = cvar.TrdSubType_P
TrdSubType_PA = cvar.TrdSubType_PA
TrdSubType_PC = cvar.TrdSubType_PC
TrdSubType_PN = cvar.TrdSubType_PN
TrdSubType_R = cvar.TrdSubType_R
TrdSubType_RO = cvar.TrdSubType_RO
TrdSubType_RT = cvar.TrdSubType_RT
TrdSubType_SW = cvar.TrdSubType_SW
TrdSubType_T = cvar.TrdSubType_T
TrdSubType_WN = cvar.TrdSubType_WN
TrdSubType_WT = cvar.TrdSubType_WT
TrdSubType_OFF_HOURS_TRADE = cvar.TrdSubType_OFF_HOURS_TRADE
TrdSubType_ON_HOURS_TRADE = cvar.TrdSubType_ON_HOURS_TRADE
TrdSubType_OTC_QUOTE = cvar.TrdSubType_OTC_QUOTE
TrdSubType_CONVERTED_SWAP = cvar.TrdSubType_CONVERTED_SWAP
TrdSubType_CROSSED_TRADE = cvar.TrdSubType_CROSSED_TRADE
TrdSubType_INTERIM_PROTECTED_TRADE = cvar.TrdSubType_INTERIM_PROTECTED_TRADE
TrdSubType_LARGE_IN_SCALE = cvar.TrdSubType_LARGE_IN_SCALE
TrdSubType_ONSET_DUE_TO_AN_ALLOCATION = cvar.TrdSubType_ONSET_DUE_TO_AN_ALLOCATION
PegMoveType_FLOATING = cvar.PegMoveType_FLOATING
PegMoveType_FIXED = cvar.PegMoveType_FIXED
PegOffsetType_PRICE = cvar.PegOffsetType_PRICE
PegOffsetType_BASIS_POINTS = cvar.PegOffsetType_BASIS_POINTS
PegOffsetType_TICKS = cvar.PegOffsetType_TICKS
PegOffsetType_PRICE_TIER = cvar.PegOffsetType_PRICE_TIER
PegLimitType_OR_BETTER = cvar.PegLimitType_OR_BETTER
PegLimitType_STRICT_LIMIT_IS_A_STRICT_LIMIT = cvar.PegLimitType_STRICT_LIMIT_IS_A_STRICT_LIMIT
PegLimitType_OR_WORSE_FOR_A_BUY_THE_PEG_LIMIT_IS_A_MINIMUM_AND_FOR_A_SELL_THE_PEG_LIMIT_IS_A_MAXIMUM = cvar.PegLimitType_OR_WORSE_FOR_A_BUY_THE_PEG_LIMIT_IS_A_MINIMUM_AND_FOR_A_SELL_THE_PEG_LIMIT_IS_A_MAXIMUM
PegLimitType_STRICT = cvar.PegLimitType_STRICT
PegLimitType_OR_WORSE = cvar.PegLimitType_OR_WORSE
PegRoundDirection_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK = cvar.PegRoundDirection_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK
PegRoundDirection_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK = cvar.PegRoundDirection_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK
PegRoundDirection_MORE_AGGRESSIVE = cvar.PegRoundDirection_MORE_AGGRESSIVE
PegRoundDirection_MORE_PASSIVE = cvar.PegRoundDirection_MORE_PASSIVE
PegScope_LOCAL = cvar.PegScope_LOCAL
PegScope_NATIONAL = cvar.PegScope_NATIONAL
PegScope_GLOBAL = cvar.PegScope_GLOBAL
PegScope_NATIONAL_EXCLUDING_LOCAL = cvar.PegScope_NATIONAL_EXCLUDING_LOCAL
PegScope_NATIONAL_XXCLUDING_LOCAL = cvar.PegScope_NATIONAL_XXCLUDING_LOCAL
DiscretionMoveType_FLOATING = cvar.DiscretionMoveType_FLOATING
DiscretionMoveType_FIXED = cvar.DiscretionMoveType_FIXED
DiscretionOffsetType_PRICE = cvar.DiscretionOffsetType_PRICE
DiscretionOffsetType_BASIS_POINTS = cvar.DiscretionOffsetType_BASIS_POINTS
DiscretionOffsetType_TICKS = cvar.DiscretionOffsetType_TICKS
DiscretionOffsetType_PRICE_TIER = cvar.DiscretionOffsetType_PRICE_TIER
DiscretionLimitType_OR_BETTER = cvar.DiscretionLimitType_OR_BETTER
DiscretionLimitType_STRICT_LIMIT_IS_A_STRICT_LIMIT = cvar.DiscretionLimitType_STRICT_LIMIT_IS_A_STRICT_LIMIT
DiscretionLimitType_OR_WORSE_FOR_A_BUY_THE_DISCRETION_PRICE_IS_A_MINIMUM_AND_FOR_A_SELL_THE_DISCRETION_PRICE_IS_A_MAXIMUM = cvar.DiscretionLimitType_OR_WORSE_FOR_A_BUY_THE_DISCRETION_PRICE_IS_A_MINIMUM_AND_FOR_A_SELL_THE_DISCRETION_PRICE_IS_A_MAXIMUM
DiscretionLimitType_STRICT = cvar.DiscretionLimitType_STRICT
DiscretionLimitType_OR_WORSE = cvar.DiscretionLimitType_OR_WORSE
DiscretionRoundDirection_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK = cvar.DiscretionRoundDirection_MORE_AGGRESSIVE_ON_A_BUY_ORDER_ROUND_THE_PRICE_UP_ROUND_UP_TO_THE_NEAREST_TICK_ON_A_SELL_ROUND_DOWN_TO_THE_NEAREST_TICK
DiscretionRoundDirection_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK = cvar.DiscretionRoundDirection_MORE_PASSIVE_ON_A_BUY_ORDER_ROUND_DOWN_TO_NEAREST_TICK_ON_A_SELL_ORDER_ROUND_UP_TO_NEAREST_TICK
DiscretionRoundDirection_MORE_AGGRESSIVE = cvar.DiscretionRoundDirection_MORE_AGGRESSIVE
DiscretionRoundDirection_MORE_PASSIVE = cvar.DiscretionRoundDirection_MORE_PASSIVE
DiscretionScope_LOCAL = cvar.DiscretionScope_LOCAL
DiscretionScope_NATIONAL = cvar.DiscretionScope_NATIONAL
DiscretionScope_GLOBAL = cvar.DiscretionScope_GLOBAL
DiscretionScope_NATIONAL_EXCLUDING_LOCAL = cvar.DiscretionScope_NATIONAL_EXCLUDING_LOCAL
TargetStrategy_VWAP = cvar.TargetStrategy_VWAP
TargetStrategy_PARTICIPATE = cvar.TargetStrategy_PARTICIPATE
TargetStrategy_MININIZE_MARKET_IMPACT = cvar.TargetStrategy_MININIZE_MARKET_IMPACT
LastLiquidityInd_ADDED_LIQUIDITY = cvar.LastLiquidityInd_ADDED_LIQUIDITY
LastLiquidityInd_REMOVED_LIQUIDITY = cvar.LastLiquidityInd_REMOVED_LIQUIDITY
LastLiquidityInd_LIQUIDITY_ROUTED_OUT = cvar.LastLiquidityInd_LIQUIDITY_ROUTED_OUT
LastLiquidityInd_AUCTION = cvar.LastLiquidityInd_AUCTION
PublishTrdIndicator_YES = cvar.PublishTrdIndicator_YES
PublishTrdIndicator_NO = cvar.PublishTrdIndicator_NO
ShortSaleReason_DEALER_SOLD_SHORT = cvar.ShortSaleReason_DEALER_SOLD_SHORT
ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_DEALER_SOLD_SHORT_EXEMPT
ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT = cvar.ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT
ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_SELLING_CUSTOMER_SOLD_SHORT_EXEMPT
ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE = cvar.ShortSaleReason_QUALIFED_SERVICE_REPRESENTATIVE
ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT = cvar.ShortSaleReason_QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT
ShortSaleReason_QUALIFIED_SERVICE_REPRESENTATIVE = cvar.ShortSaleReason_QUALIFIED_SERVICE_REPRESENTATIVE
QtyType_UNITS = cvar.QtyType_UNITS
QtyType_CONTRACTS = cvar.QtyType_CONTRACTS
QtyType_UNITS_OF_MEASURE_PER_TIME_UNIT = cvar.QtyType_UNITS_OF_MEASURE_PER_TIME_UNIT
TradeReportType_SUBMIT = cvar.TradeReportType_SUBMIT
TradeReportType_ALLEGED = cvar.TradeReportType_ALLEGED
TradeReportType_ACCEPT = cvar.TradeReportType_ACCEPT
TradeReportType_DECLINE = cvar.TradeReportType_DECLINE
TradeReportType_ADDENDUM = cvar.TradeReportType_ADDENDUM
TradeReportType_NO_WAS = cvar.TradeReportType_NO_WAS
TradeReportType_TRADE_REPORT_CANCEL = cvar.TradeReportType_TRADE_REPORT_CANCEL
TradeReportType_LOCKED_IN_TRADE_BREAK = cvar.TradeReportType_LOCKED_IN_TRADE_BREAK
TradeReportType_ALLEGED_1 = cvar.TradeReportType_ALLEGED_1
TradeReportType_7 = cvar.TradeReportType_7
TradeReportType_DEFAULTED = cvar.TradeReportType_DEFAULTED
TradeReportType_INVALID_CMTA = cvar.TradeReportType_INVALID_CMTA
TradeReportType_PENDED = cvar.TradeReportType_PENDED
TradeReportType_ALLEGED_NEW = cvar.TradeReportType_ALLEGED_NEW
TradeReportType_ALLEGED_ADDENDUM = cvar.TradeReportType_ALLEGED_ADDENDUM
TradeReportType_ALLEGED_NO_WAS = cvar.TradeReportType_ALLEGED_NO_WAS
TradeReportType_ALLEGED_TRADE_REPORT_CANCEL = cvar.TradeReportType_ALLEGED_TRADE_REPORT_CANCEL
TradeReportType_ALLEGED_15 = cvar.TradeReportType_ALLEGED_15
AllocNoOrdersType_NOT_SPECIFIED = cvar.AllocNoOrdersType_NOT_SPECIFIED
AllocNoOrdersType_EXPLICIT_LIST_PROVIDED = cvar.AllocNoOrdersType_EXPLICIT_LIST_PROVIDED
EventType_PUT = cvar.EventType_PUT
EventType_CALL = cvar.EventType_CALL
EventType_TENDER = cvar.EventType_TENDER
EventType_SINKING_FUND_CALL = cvar.EventType_SINKING_FUND_CALL
EventType_OTHER = cvar.EventType_OTHER
EventType_ACTIVATION = cvar.EventType_ACTIVATION
EventType_INACTIVIATION = cvar.EventType_INACTIVIATION
EventType_LAST_ELIGIBLE_TRADE_DATE = cvar.EventType_LAST_ELIGIBLE_TRADE_DATE
EventType_SWAP_START_DATE = cvar.EventType_SWAP_START_DATE
EventType_SWAP_END_DATE = cvar.EventType_SWAP_END_DATE
EventType_SWAP_ROLL_DATE = cvar.EventType_SWAP_ROLL_DATE
EventType_SWAP_NEXT_START_DATE = cvar.EventType_SWAP_NEXT_START_DATE
EventType_SWAP_NEXT_ROLL_DATE = cvar.EventType_SWAP_NEXT_ROLL_DATE
EventType_FIRST_DELIVERY_DATE = cvar.EventType_FIRST_DELIVERY_DATE
EventType_LAST_DELIVERY_DATE = cvar.EventType_LAST_DELIVERY_DATE
EventType_INITIAL_INVENTORY_DUE_DATE = cvar.EventType_INITIAL_INVENTORY_DUE_DATE
EventType_FINAL_INVENTORY_DUE_DATE = cvar.EventType_FINAL_INVENTORY_DUE_DATE
EventType_FIRST_INTENT_DATE = cvar.EventType_FIRST_INTENT_DATE
EventType_LAST_INTENT_DATE = cvar.EventType_LAST_INTENT_DATE
EventType_POSITION_REMOVAL_DATE = cvar.EventType_POSITION_REMOVAL_DATE
InstrAttribType_FLAT = cvar.InstrAttribType_FLAT
InstrAttribType_ZERO_COUPON = cvar.InstrAttribType_ZERO_COUPON
InstrAttribType_INTEREST_BEARING = cvar.InstrAttribType_INTEREST_BEARING
InstrAttribType_NO_PERIODIC_PAYMENTS = cvar.InstrAttribType_NO_PERIODIC_PAYMENTS
InstrAttribType_VARIABLE_RATE = cvar.InstrAttribType_VARIABLE_RATE
InstrAttribType_LESS_FEE_FOR_PUT = cvar.InstrAttribType_LESS_FEE_FOR_PUT
InstrAttribType_STEPPED_COUPON = cvar.InstrAttribType_STEPPED_COUPON
InstrAttribType_COUPON_PERIOD = cvar.InstrAttribType_COUPON_PERIOD
InstrAttribType_WHEN_AND_IF_ISSUED = cvar.InstrAttribType_WHEN_AND_IF_ISSUED
InstrAttribType_ORIGINAL_ISSUE_DISCOUNT = cvar.InstrAttribType_ORIGINAL_ISSUE_DISCOUNT
InstrAttribType_CALLABLE_PUTTABLE = cvar.InstrAttribType_CALLABLE_PUTTABLE
InstrAttribType_ESCROWED_TO_MATURITY = cvar.InstrAttribType_ESCROWED_TO_MATURITY
InstrAttribType_ESCROWED_TO_REDEMPTION_DATE_CALLABLE_SUPPLY_REDEMPTION_DATE_IN_THE_INSTRATTRIBVALUE = cvar.InstrAttribType_ESCROWED_TO_REDEMPTION_DATE_CALLABLE_SUPPLY_REDEMPTION_DATE_IN_THE_INSTRATTRIBVALUE
InstrAttribType_PREREFUNDED = cvar.InstrAttribType_PREREFUNDED
InstrAttribType_IN_DEFAULT = cvar.InstrAttribType_IN_DEFAULT
InstrAttribType_UNRATED = cvar.InstrAttribType_UNRATED
InstrAttribType_TAXABLE = cvar.InstrAttribType_TAXABLE
InstrAttribType_INDEXED = cvar.InstrAttribType_INDEXED
InstrAttribType_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX = cvar.InstrAttribType_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX
InstrAttribType_ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVALUE = cvar.InstrAttribType_ORIGINAL_ISSUE_DISCOUNT_PRICE_SUPPLY_PRICE_IN_THE_INSTRATTRIBVALUE
InstrAttribType_CALLABLE_BELOW_MATURITY_VALUE = cvar.InstrAttribType_CALLABLE_BELOW_MATURITY_VALUE
InstrAttribType_CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED = cvar.InstrAttribType_CALLABLE_WITHOUT_NOTICE_BY_MAIL_TO_HOLDER_UNLESS_REGISTERED
InstrAttribType_TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTRATTRIBVALUE = cvar.InstrAttribType_TEXT_SUPPLY_THE_TEXT_OF_THE_ATTRIBUTE_OR_DISCLAIMER_IN_THE_INSTRATTRIBVALUE
InstrAttribType_ESCROWED_TO_REDEMPTION_DATE = cvar.InstrAttribType_ESCROWED_TO_REDEMPTION_DATE
InstrAttribType_PRE_REFUNDED = cvar.InstrAttribType_PRE_REFUNDED
InstrAttribType_PRICE_TICK_RULES_FOR_SECURITY = cvar.InstrAttribType_PRICE_TICK_RULES_FOR_SECURITY
InstrAttribType_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY = cvar.InstrAttribType_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY
InstrAttribType_INSTRUMENT_DENOMINATOR = cvar.InstrAttribType_INSTRUMENT_DENOMINATOR
InstrAttribType_INSTRUMENT_NUMERATOR = cvar.InstrAttribType_INSTRUMENT_NUMERATOR
InstrAttribType_INSTRUMENT_PRICE_PRECISION = cvar.InstrAttribType_INSTRUMENT_PRICE_PRECISION
InstrAttribType_INSTRUMENT_STRIKE_PRICE = cvar.InstrAttribType_INSTRUMENT_STRIKE_PRICE
InstrAttribType_TRADEABLE_INDICATOR = cvar.InstrAttribType_TRADEABLE_INDICATOR
CPProgram_3 = cvar.CPProgram_3
CPProgram_4 = cvar.CPProgram_4
CPProgram_OTHER = cvar.CPProgram_OTHER
MiscFeeBasis_ABSOLUTE = cvar.MiscFeeBasis_ABSOLUTE
MiscFeeBasis_PER_UNIT = cvar.MiscFeeBasis_PER_UNIT
MiscFeeBasis_PERCENTAGE = cvar.MiscFeeBasis_PERCENTAGE
LastFragment_YES = cvar.LastFragment_YES
LastFragment_NO = cvar.LastFragment_NO
CollAsgnReason_INITIAL = cvar.CollAsgnReason_INITIAL
CollAsgnReason_SCHEDULED = cvar.CollAsgnReason_SCHEDULED
CollAsgnReason_TIME_WARNING = cvar.CollAsgnReason_TIME_WARNING
CollAsgnReason_MARGIN_DEFICIENCY = cvar.CollAsgnReason_MARGIN_DEFICIENCY
CollAsgnReason_MARGIN_EXCESS = cvar.CollAsgnReason_MARGIN_EXCESS
CollAsgnReason_FORWARD_COLLATERAL_DEMAND = cvar.CollAsgnReason_FORWARD_COLLATERAL_DEMAND
CollAsgnReason_EVENT_OF_DEFAULT = cvar.CollAsgnReason_EVENT_OF_DEFAULT
CollAsgnReason_ADVERSE_TAX_EVENT = cvar.CollAsgnReason_ADVERSE_TAX_EVENT
CollInquiryQualifier_TRADEDATE = cvar.CollInquiryQualifier_TRADEDATE
CollInquiryQualifier_GC_INSTRUMENT = cvar.CollInquiryQualifier_GC_INSTRUMENT
CollInquiryQualifier_COLLATERALINSTRUMENT = cvar.CollInquiryQualifier_COLLATERALINSTRUMENT
CollInquiryQualifier_SUBSTITUTION_ELIGIBLE = cvar.CollInquiryQualifier_SUBSTITUTION_ELIGIBLE
CollInquiryQualifier_NOT_ASSIGNED = cvar.CollInquiryQualifier_NOT_ASSIGNED
CollInquiryQualifier_PARTIALLY_ASSIGNED = cvar.CollInquiryQualifier_PARTIALLY_ASSIGNED
CollInquiryQualifier_FULLY_ASSIGNED = cvar.CollInquiryQualifier_FULLY_ASSIGNED
CollInquiryQualifier_OUTSTANDING_TRADES = cvar.CollInquiryQualifier_OUTSTANDING_TRADES
CollInquiryQualifier_TRADE_DATE = cvar.CollInquiryQualifier_TRADE_DATE
CollInquiryQualifier_COLLATERAL_INSTRUMENT = cvar.CollInquiryQualifier_COLLATERAL_INSTRUMENT
CollAsgnTransType_NEW = cvar.CollAsgnTransType_NEW
CollAsgnTransType_REPLACE = cvar.CollAsgnTransType_REPLACE
CollAsgnTransType_CANCEL = cvar.CollAsgnTransType_CANCEL
CollAsgnTransType_RELEASE = cvar.CollAsgnTransType_RELEASE
CollAsgnTransType_REVERSE = cvar.CollAsgnTransType_REVERSE
CollAsgnRespType_RECEIVED = cvar.CollAsgnRespType_RECEIVED
CollAsgnRespType_ACCEPTED = cvar.CollAsgnRespType_ACCEPTED
CollAsgnRespType_DECLINED = cvar.CollAsgnRespType_DECLINED
CollAsgnRespType_REJECTED = cvar.CollAsgnRespType_REJECTED
CollAsgnRejectReason_UNKNOWN_DEAL = cvar.CollAsgnRejectReason_UNKNOWN_DEAL
CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT = cvar.CollAsgnRejectReason_UNKNOWN_OR_INVALID_INSTRUMENT
CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION = cvar.CollAsgnRejectReason_UNAUTHORIZED_TRANSACTION
CollAsgnRejectReason_INSUFFICIENT_COLLATERAL = cvar.CollAsgnRejectReason_INSUFFICIENT_COLLATERAL
CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL = cvar.CollAsgnRejectReason_INVALID_TYPE_OF_COLLATERAL
CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION = cvar.CollAsgnRejectReason_EXCESSIVE_SUBSTITUTION
CollAsgnRejectReason_OTHER = cvar.CollAsgnRejectReason_OTHER
CollStatus_UNASSIGNED = cvar.CollStatus_UNASSIGNED
CollStatus_PARTIALLY_ASSIGNED = cvar.CollStatus_PARTIALLY_ASSIGNED
CollStatus_ASSIGNMENT_PROPOSED = cvar.CollStatus_ASSIGNMENT_PROPOSED
CollStatus_ASSIGNED = cvar.CollStatus_ASSIGNED
CollStatus_CHALLENGED = cvar.CollStatus_CHALLENGED
LastRptRequested_NO = cvar.LastRptRequested_NO
LastRptRequested_YES = cvar.LastRptRequested_YES
DeliveryType_VERSUS_PAYMENT_DELIVER = cvar.DeliveryType_VERSUS_PAYMENT_DELIVER
DeliveryType_FREE_DELIVER = cvar.DeliveryType_FREE_DELIVER
DeliveryType_TRI_PARTY = cvar.DeliveryType_TRI_PARTY
DeliveryType_HOLD_IN_CUSTODY = cvar.DeliveryType_HOLD_IN_CUSTODY
UserRequestType_LOGONUSER = cvar.UserRequestType_LOGONUSER
UserRequestType_LOGOFFUSER = cvar.UserRequestType_LOGOFFUSER
UserRequestType_CHANGEPASSWORDFORUSER = cvar.UserRequestType_CHANGEPASSWORDFORUSER
UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS = cvar.UserRequestType_REQUEST_INDIVIDUAL_USER_STATUS
UserRequestType_LOG_ON_USER = cvar.UserRequestType_LOG_ON_USER
UserRequestType_LOG_OFF_USER = cvar.UserRequestType_LOG_OFF_USER
UserRequestType_CHANGE_PASSWORD_FOR_USER = cvar.UserRequestType_CHANGE_PASSWORD_FOR_USER
UserStatus_LOGGED_IN = cvar.UserStatus_LOGGED_IN
UserStatus_NOT_LOGGED_IN = cvar.UserStatus_NOT_LOGGED_IN
UserStatus_USER_NOT_RECOGNISED = cvar.UserStatus_USER_NOT_RECOGNISED
UserStatus_PASSWORD_INCORRECT = cvar.UserStatus_PASSWORD_INCORRECT
UserStatus_PASSWORD_CHANGED = cvar.UserStatus_PASSWORD_CHANGED
UserStatus_OTHER = cvar.UserStatus_OTHER
UserStatus_FORCED_USER_LOGOUT_BY_EXCHANGE = cvar.UserStatus_FORCED_USER_LOGOUT_BY_EXCHANGE
UserStatus_SESSION_SHUTDOWN_WARNING = cvar.UserStatus_SESSION_SHUTDOWN_WARNING
StatusValue_CONNECTED = cvar.StatusValue_CONNECTED
StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP = cvar.StatusValue_NOT_CONNECTED_DOWN_EXPECTED_UP
StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN = cvar.StatusValue_NOT_CONNECTED_DOWN_EXPECTED_DOWN
StatusValue_IN_PROCESS = cvar.StatusValue_IN_PROCESS
StatusValue_NOT_CONNECTED_2 = cvar.StatusValue_NOT_CONNECTED_2
StatusValue_NOT_CONNECTED_3 = cvar.StatusValue_NOT_CONNECTED_3
NetworkRequestType_SNAPSHOT = cvar.NetworkRequestType_SNAPSHOT
NetworkRequestType_SUBSCRIBE = cvar.NetworkRequestType_SUBSCRIBE
NetworkRequestType_STOP_SUBSCRIBING = cvar.NetworkRequestType_STOP_SUBSCRIBING
NetworkRequestType_LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED = cvar.NetworkRequestType_LEVEL_OF_DETAIL_THEN_NOCOMPIDS_BECOMES_REQUIRED
NetworkStatusResponseType_FULL = cvar.NetworkStatusResponseType_FULL
NetworkStatusResponseType_INCREMENTAL_UPDATE = cvar.NetworkStatusResponseType_INCREMENTAL_UPDATE
TrdRptStatus_ACCEPTED = cvar.TrdRptStatus_ACCEPTED
TrdRptStatus_REJECTED = cvar.TrdRptStatus_REJECTED
TrdRptStatus_ACCEPTED_WITH_ERRORS = cvar.TrdRptStatus_ACCEPTED_WITH_ERRORS
AffirmStatus_RECEIVED = cvar.AffirmStatus_RECEIVED
AffirmStatus_CONFIRM_REJECTED_IE_NOT_AFFIRMED = cvar.AffirmStatus_CONFIRM_REJECTED_IE_NOT_AFFIRMED
AffirmStatus_AFFIRMED = cvar.AffirmStatus_AFFIRMED
CollAction_RETAIN = cvar.CollAction_RETAIN
CollAction_ADD = cvar.CollAction_ADD
CollAction_REMOVE = cvar.CollAction_REMOVE
CollInquiryStatus_ACCEPTED = cvar.CollInquiryStatus_ACCEPTED
CollInquiryStatus_ACCEPTED_WITH_WARNINGS = cvar.CollInquiryStatus_ACCEPTED_WITH_WARNINGS
CollInquiryStatus_COMPLETED = cvar.CollInquiryStatus_COMPLETED
CollInquiryStatus_COMPLETED_WITH_WARNINGS = cvar.CollInquiryStatus_COMPLETED_WITH_WARNINGS
CollInquiryStatus_REJECTED = cvar.CollInquiryStatus_REJECTED
CollInquiryResult_SUCCESSFUL = cvar.CollInquiryResult_SUCCESSFUL
CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT = cvar.CollInquiryResult_INVALID_OR_UNKNOWN_INSTRUMENT
CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE = cvar.CollInquiryResult_INVALID_OR_UNKNOWN_COLLATERAL_TYPE
CollInquiryResult_INVALID_PARTIES = cvar.CollInquiryResult_INVALID_PARTIES
CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED = cvar.CollInquiryResult_INVALID_TRANSPORT_TYPE_REQUESTED
CollInquiryResult_INVALID_DESTINATION_REQUESTED = cvar.CollInquiryResult_INVALID_DESTINATION_REQUESTED
CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED = cvar.CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED
CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED = cvar.CollInquiryResult_NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED
CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED = cvar.CollInquiryResult_COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED
CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY = cvar.CollInquiryResult_UNAUTHORIZED_FOR_COLLATERAL_INQUIRY
CollInquiryResult_OTHER = cvar.CollInquiryResult_OTHER
StrategyParameterType_INT = cvar.StrategyParameterType_INT
StrategyParameterType_LENGTH = cvar.StrategyParameterType_LENGTH
StrategyParameterType_NUMINGROUP = cvar.StrategyParameterType_NUMINGROUP
StrategyParameterType_SEQNUM = cvar.StrategyParameterType_SEQNUM
StrategyParameterType_TAGNUM = cvar.StrategyParameterType_TAGNUM
StrategyParameterType_FLOAT = cvar.StrategyParameterType_FLOAT
StrategyParameterType_QTY = cvar.StrategyParameterType_QTY
StrategyParameterType_PRICE = cvar.StrategyParameterType_PRICE
StrategyParameterType_PRICEOFFSET = cvar.StrategyParameterType_PRICEOFFSET
StrategyParameterType_AMT = cvar.StrategyParameterType_AMT
StrategyParameterType_PERCENTAGE = cvar.StrategyParameterType_PERCENTAGE
StrategyParameterType_CHAR = cvar.StrategyParameterType_CHAR
StrategyParameterType_BOOLEAN = cvar.StrategyParameterType_BOOLEAN
StrategyParameterType_STRING = cvar.StrategyParameterType_STRING
StrategyParameterType_MULTIPLECHARVALUE = cvar.StrategyParameterType_MULTIPLECHARVALUE
StrategyParameterType_CURRENCY = cvar.StrategyParameterType_CURRENCY
StrategyParameterType_EXCHANGE = cvar.StrategyParameterType_EXCHANGE
StrategyParameterType_MONTHYEAR = cvar.StrategyParameterType_MONTHYEAR
StrategyParameterType_UTCTIMESTAMP = cvar.StrategyParameterType_UTCTIMESTAMP
StrategyParameterType_UTCTIMEONLY = cvar.StrategyParameterType_UTCTIMEONLY
StrategyParameterType_LOCALMKTTIME = cvar.StrategyParameterType_LOCALMKTTIME
StrategyParameterType_UTCDATE = cvar.StrategyParameterType_UTCDATE
StrategyParameterType_DATA = cvar.StrategyParameterType_DATA
StrategyParameterType_MULTIPLESTRINGVALUE = cvar.StrategyParameterType_MULTIPLESTRINGVALUE
StrategyParameterType_LOCALMKTDATE = cvar.StrategyParameterType_LOCALMKTDATE
StrategyParameterType_UTCDATEONLY = cvar.StrategyParameterType_UTCDATEONLY
StrategyParameterType_COUNTRY = cvar.StrategyParameterType_COUNTRY
StrategyParameterType_LANGUAGE = cvar.StrategyParameterType_LANGUAGE
StrategyParameterType_TZTIMEONLY = cvar.StrategyParameterType_TZTIMEONLY
StrategyParameterType_TZTIMESTAMP = cvar.StrategyParameterType_TZTIMESTAMP
StrategyParameterType_TENOR = cvar.StrategyParameterType_TENOR
SecurityStatus_ACTIVE = cvar.SecurityStatus_ACTIVE
SecurityStatus_INACTIVE = cvar.SecurityStatus_INACTIVE
UnderlyingCashType_FIXED = cvar.UnderlyingCashType_FIXED
UnderlyingCashType_DIFF = cvar.UnderlyingCashType_DIFF
UnderlyingSettlementType_T_PLUS_1 = cvar.UnderlyingSettlementType_T_PLUS_1
UnderlyingSettlementType_T_PLUS_3 = cvar.UnderlyingSettlementType_T_PLUS_3
UnderlyingSettlementType_T_PLUS_4 = cvar.UnderlyingSettlementType_T_PLUS_4
SecurityUpdateAction_ADD = cvar.SecurityUpdateAction_ADD
SecurityUpdateAction_DELETE = cvar.SecurityUpdateAction_DELETE
SecurityUpdateAction_MODIFY = cvar.SecurityUpdateAction_MODIFY
ExpType_AUTO_EXERCISE = cvar.ExpType_AUTO_EXERCISE
ExpType_NON_AUTO_EXERCISE = cvar.ExpType_NON_AUTO_EXERCISE
ExpType_FINAL_WILL_BE_EXERCISED = cvar.ExpType_FINAL_WILL_BE_EXERCISED
ExpType_CONTRARY_INTENTION = cvar.ExpType_CONTRARY_INTENTION
ExpType_DIFFERENCE = cvar.ExpType_DIFFERENCE
IndividualAllocType_SUB_ALLOCATE = cvar.IndividualAllocType_SUB_ALLOCATE
IndividualAllocType_THIRD_PARTY_ALLOCATION = cvar.IndividualAllocType_THIRD_PARTY_ALLOCATION
UnitOfMeasure_BARRELS = cvar.UnitOfMeasure_BARRELS
UnitOfMeasure_BILLION_CUBIC_FEET = cvar.UnitOfMeasure_BILLION_CUBIC_FEET
UnitOfMeasure_BUSHELS = cvar.UnitOfMeasure_BUSHELS
UnitOfMeasure_POUNDS = cvar.UnitOfMeasure_POUNDS
UnitOfMeasure_GALLONS = cvar.UnitOfMeasure_GALLONS
UnitOfMeasure_MILLION_BARRELS = cvar.UnitOfMeasure_MILLION_BARRELS
UnitOfMeasure_ONE_MILLION_BTU = cvar.UnitOfMeasure_ONE_MILLION_BTU
UnitOfMeasure_MEGAWATT_HOURS = cvar.UnitOfMeasure_MEGAWATT_HOURS
UnitOfMeasure_TROY_OUNCES = cvar.UnitOfMeasure_TROY_OUNCES
UnitOfMeasure_METRIC_TONS = cvar.UnitOfMeasure_METRIC_TONS
UnitOfMeasure_TONS = cvar.UnitOfMeasure_TONS
UnitOfMeasure_US_DOLLARS = cvar.UnitOfMeasure_US_DOLLARS
UnitOfMeasure_ALLOWANCES = cvar.UnitOfMeasure_ALLOWANCES
TimeUnit_HOUR = cvar.TimeUnit_HOUR
TimeUnit_MINUTE = cvar.TimeUnit_MINUTE
TimeUnit_SECOND = cvar.TimeUnit_SECOND
TimeUnit_DAY = cvar.TimeUnit_DAY
TimeUnit_WEEK = cvar.TimeUnit_WEEK
TimeUnit_MONTH = cvar.TimeUnit_MONTH
TimeUnit_YEAR = cvar.TimeUnit_YEAR
AllocMethod_AUTOMATIC = cvar.AllocMethod_AUTOMATIC
AllocMethod_GUARANTOR = cvar.AllocMethod_GUARANTOR
AllocMethod_MANUAL = cvar.AllocMethod_MANUAL
AsOfIndicator_FALSE = cvar.AsOfIndicator_FALSE
AsOfIndicator_TRUE = cvar.AsOfIndicator_TRUE
MDBookType_TOP_OF_BOOK = cvar.MDBookType_TOP_OF_BOOK
MDBookType_PRICE_DEPTH = cvar.MDBookType_PRICE_DEPTH
MDBookType_ORDER_DEPTH = cvar.MDBookType_ORDER_DEPTH
MDOriginType_BOOK = cvar.MDOriginType_BOOK
MDOriginType_OFF_BOOK = cvar.MDOriginType_OFF_BOOK
MDOriginType_CROSS = cvar.MDOriginType_CROSS
CustOrderHandlingInst_ADD_ON_ORDER = cvar.CustOrderHandlingInst_ADD_ON_ORDER
CustOrderHandlingInst_ALL_OR_NONE = cvar.CustOrderHandlingInst_ALL_OR_NONE
CustOrderHandlingInst_CASH_NOT_HELD = cvar.CustOrderHandlingInst_CASH_NOT_HELD
CustOrderHandlingInst_DIRECTED_ORDER = cvar.CustOrderHandlingInst_DIRECTED_ORDER
CustOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION = cvar.CustOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION
CustOrderHandlingInst_FILL_OR_KILL = cvar.CustOrderHandlingInst_FILL_OR_KILL
CustOrderHandlingInst_IMBALANCE_ONLY = cvar.CustOrderHandlingInst_IMBALANCE_ONLY
CustOrderHandlingInst_IMMEDIATE_OR_CANCEL = cvar.CustOrderHandlingInst_IMMEDIATE_OR_CANCEL
CustOrderHandlingInst_LIMIT_ON_OPEN = cvar.CustOrderHandlingInst_LIMIT_ON_OPEN
CustOrderHandlingInst_LIMIT_ON_CLOSE = cvar.CustOrderHandlingInst_LIMIT_ON_CLOSE
CustOrderHandlingInst_MARKET_AT_OPEN = cvar.CustOrderHandlingInst_MARKET_AT_OPEN
CustOrderHandlingInst_MARKET_AT_CLOSE = cvar.CustOrderHandlingInst_MARKET_AT_CLOSE
CustOrderHandlingInst_MARKET_ON_OPEN = cvar.CustOrderHandlingInst_MARKET_ON_OPEN
CustOrderHandlingInst_MARKET_ON_CLOSE = cvar.CustOrderHandlingInst_MARKET_ON_CLOSE
CustOrderHandlingInst_MINIMUM_QUANTITY = cvar.CustOrderHandlingInst_MINIMUM_QUANTITY
CustOrderHandlingInst_NOT_HELD = cvar.CustOrderHandlingInst_NOT_HELD
CustOrderHandlingInst_OVER_THE_DAY = cvar.CustOrderHandlingInst_OVER_THE_DAY
CustOrderHandlingInst_PEGGED = cvar.CustOrderHandlingInst_PEGGED
CustOrderHandlingInst_RESERVE_SIZE_ORDER = cvar.CustOrderHandlingInst_RESERVE_SIZE_ORDER
CustOrderHandlingInst_STOP_STOCK_TRANSACTION = cvar.CustOrderHandlingInst_STOP_STOCK_TRANSACTION
CustOrderHandlingInst_SCALE = cvar.CustOrderHandlingInst_SCALE
CustOrderHandlingInst_TIME_ORDER = cvar.CustOrderHandlingInst_TIME_ORDER
CustOrderHandlingInst_TRAILING_STOP = cvar.CustOrderHandlingInst_TRAILING_STOP
CustOrderHandlingInst_WORK = cvar.CustOrderHandlingInst_WORK
OrderHandlingInstSource_NASD_OATS = cvar.OrderHandlingInstSource_NASD_OATS
DeskType_AGENCY = cvar.DeskType_AGENCY
DeskType_ARBITRAGE = cvar.DeskType_ARBITRAGE
DeskType_DERIVATIVES = cvar.DeskType_DERIVATIVES
DeskType_INTERNATIONAL = cvar.DeskType_INTERNATIONAL
DeskType_INSTITUTIONAL = cvar.DeskType_INSTITUTIONAL
DeskType_OTHER = cvar.DeskType_OTHER
DeskType_PREFERRED_TRADING = cvar.DeskType_PREFERRED_TRADING
DeskType_PROPRIETARY = cvar.DeskType_PROPRIETARY
DeskType_PROGRAM_TRADING = cvar.DeskType_PROGRAM_TRADING
DeskType_SALES = cvar.DeskType_SALES
DeskType_TRADING = cvar.DeskType_TRADING
DeskTypeSource_NASD_OATS = cvar.DeskTypeSource_NASD_OATS
DeskOrderHandlingInst_ADD_ON_ORDER = cvar.DeskOrderHandlingInst_ADD_ON_ORDER
DeskOrderHandlingInst_ALL_OR_NONE = cvar.DeskOrderHandlingInst_ALL_OR_NONE
DeskOrderHandlingInst_CASH_NOT_HELD = cvar.DeskOrderHandlingInst_CASH_NOT_HELD
DeskOrderHandlingInst_DIRECTED_ORDER = cvar.DeskOrderHandlingInst_DIRECTED_ORDER
DeskOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION = cvar.DeskOrderHandlingInst_EXCHANGE_FOR_PHYSICAL_TRANSACTION
DeskOrderHandlingInst_FILL_OR_KILL = cvar.DeskOrderHandlingInst_FILL_OR_KILL
DeskOrderHandlingInst_IMBALANCE_ONLY = cvar.DeskOrderHandlingInst_IMBALANCE_ONLY
DeskOrderHandlingInst_IMMEDIATE_OR_CANCEL = cvar.DeskOrderHandlingInst_IMMEDIATE_OR_CANCEL
DeskOrderHandlingInst_LIMIT_ON_OPEN = cvar.DeskOrderHandlingInst_LIMIT_ON_OPEN
DeskOrderHandlingInst_LIMIT_ON_CLOSE = cvar.DeskOrderHandlingInst_LIMIT_ON_CLOSE
DeskOrderHandlingInst_MARKET_AT_OPEN = cvar.DeskOrderHandlingInst_MARKET_AT_OPEN
DeskOrderHandlingInst_MARKET_AT_CLOSE = cvar.DeskOrderHandlingInst_MARKET_AT_CLOSE
DeskOrderHandlingInst_MARKET_ON_OPEN = cvar.DeskOrderHandlingInst_MARKET_ON_OPEN
DeskOrderHandlingInst_MARKET_ON_CLOSE = cvar.DeskOrderHandlingInst_MARKET_ON_CLOSE
DeskOrderHandlingInst_MINIMUM_QUANTITY = cvar.DeskOrderHandlingInst_MINIMUM_QUANTITY
DeskOrderHandlingInst_NOT_HELD = cvar.DeskOrderHandlingInst_NOT_HELD
DeskOrderHandlingInst_OVER_THE_DAY = cvar.DeskOrderHandlingInst_OVER_THE_DAY
DeskOrderHandlingInst_PEGGED = cvar.DeskOrderHandlingInst_PEGGED
DeskOrderHandlingInst_RESERVE_SIZE_ORDER = cvar.DeskOrderHandlingInst_RESERVE_SIZE_ORDER
DeskOrderHandlingInst_STOP_STOCK_TRANSACTION = cvar.DeskOrderHandlingInst_STOP_STOCK_TRANSACTION
DeskOrderHandlingInst_SCALE = cvar.DeskOrderHandlingInst_SCALE
DeskOrderHandlingInst_TIME_ORDER = cvar.DeskOrderHandlingInst_TIME_ORDER
DeskOrderHandlingInst_TRAILING_STOP = cvar.DeskOrderHandlingInst_TRAILING_STOP
DeskOrderHandlingInst_WORK = cvar.DeskOrderHandlingInst_WORK
ExecAckStatus_RECEIVED_NOT_YET_PROCESSED = cvar.ExecAckStatus_RECEIVED_NOT_YET_PROCESSED
ExecAckStatus_ACCEPTED = cvar.ExecAckStatus_ACCEPTED
ExecAckStatus_DONT_KNOW = cvar.ExecAckStatus_DONT_KNOW
CollApplType_SPECIFIC_DEPOSIT = cvar.CollApplType_SPECIFIC_DEPOSIT
CollApplType_GENERAL = cvar.CollApplType_GENERAL
UnderlyingFXRateCalc_DIVIDE = cvar.UnderlyingFXRateCalc_DIVIDE
UnderlyingFXRateCalc_MULTIPLY = cvar.UnderlyingFXRateCalc_MULTIPLY
AllocPositionEffect_OPEN = cvar.AllocPositionEffect_OPEN
AllocPositionEffect_CLOSE = cvar.AllocPositionEffect_CLOSE
AllocPositionEffect_ROLLED = cvar.AllocPositionEffect_ROLLED
AllocPositionEffect_FIFO = cvar.AllocPositionEffect_FIFO
DealingCapacity_AGENT = cvar.DealingCapacity_AGENT
DealingCapacity_PRINCIPAL = cvar.DealingCapacity_PRINCIPAL
DealingCapacity_RISKLESS_PRINCIPAL = cvar.DealingCapacity_RISKLESS_PRINCIPAL
InstrmtAssignmentMethod_RANDOM = cvar.InstrmtAssignmentMethod_RANDOM
InstrmtAssignmentMethod_PRORATA = cvar.InstrmtAssignmentMethod_PRORATA
InstrmtAssignmentMethod_PRO_RATA = cvar.InstrmtAssignmentMethod_PRO_RATA
AggressorIndicator_YES = cvar.AggressorIndicator_YES
AggressorIndicator_NO = cvar.AggressorIndicator_NO
MDQuoteType_INDICATIVE = cvar.MDQuoteType_INDICATIVE
MDQuoteType_TRADEABLE = cvar.MDQuoteType_TRADEABLE
MDQuoteType_RESTRICTED_TRADEABLE = cvar.MDQuoteType_RESTRICTED_TRADEABLE
MDQuoteType_COUNTER = cvar.MDQuoteType_COUNTER
MDQuoteType_INDICATIVE_AND_TRADEABLE = cvar.MDQuoteType_INDICATIVE_AND_TRADEABLE
RefOrderIDSource_SECONDARYORDEID = cvar.RefOrderIDSource_SECONDARYORDEID
RefOrderIDSource_ORDEID = cvar.RefOrderIDSource_ORDEID
RefOrderIDSource_MENTRYID = cvar.RefOrderIDSource_MENTRYID
RefOrderIDSource_QUOTENTRYID = cvar.RefOrderIDSource_QUOTENTRYID
RefOrderIDSource_SECONDARYORDERID = cvar.RefOrderIDSource_SECONDARYORDERID
RefOrderIDSource_ORDERID = cvar.RefOrderIDSource_ORDERID
RefOrderIDSource_MDENTRYID = cvar.RefOrderIDSource_MDENTRYID
RefOrderIDSource_QUOTEENTRYID = cvar.RefOrderIDSource_QUOTEENTRYID
RefOrderIDSource_ORIGINAL_ORDER_ID = cvar.RefOrderIDSource_ORIGINAL_ORDER_ID
DisplayWhen_IMMEDIATE = cvar.DisplayWhen_IMMEDIATE
DisplayWhen_EXHAUST = cvar.DisplayWhen_EXHAUST
DisplayMethod_INITIAL = cvar.DisplayMethod_INITIAL
DisplayMethod_NEW = cvar.DisplayMethod_NEW
DisplayMethod_RANDOM = cvar.DisplayMethod_RANDOM
DisplayMethod_UNDISCLOSED = cvar.DisplayMethod_UNDISCLOSED
PriceProtectionScope_NONE = cvar.PriceProtectionScope_NONE
PriceProtectionScope_LOCAL = cvar.PriceProtectionScope_LOCAL
PriceProtectionScope_NATIONAL = cvar.PriceProtectionScope_NATIONAL
PriceProtectionScope_GLOBAL = cvar.PriceProtectionScope_GLOBAL
LotType_ODD_LOT = cvar.LotType_ODD_LOT
LotType_ROUND_LOT = cvar.LotType_ROUND_LOT
LotType_BLOCK_LOT = cvar.LotType_BLOCK_LOT
LotType_ROUND_LOT_BASED_UPON_UNITOFMEASURE = cvar.LotType_ROUND_LOT_BASED_UPON_UNITOFMEASURE
PegPriceType_LAST_PEG = cvar.PegPriceType_LAST_PEG
PegPriceType_MID_PRICE_PEG = cvar.PegPriceType_MID_PRICE_PEG
PegPriceType_OPENING_PEG = cvar.PegPriceType_OPENING_PEG
PegPriceType_MARKET_PEG = cvar.PegPriceType_MARKET_PEG
PegPriceType_PRIMARY_PEG = cvar.PegPriceType_PRIMARY_PEG
PegPriceType_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = cvar.PegPriceType_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER
PegPriceType_PEG_TO_VWAP = cvar.PegPriceType_PEG_TO_VWAP
PegPriceType_TRAILING_STOP_PEG = cvar.PegPriceType_TRAILING_STOP_PEG
PegPriceType_PEG_TO_LIMIT_PRICE = cvar.PegPriceType_PEG_TO_LIMIT_PRICE
TriggerType_PARTIAL_EXECUTION = cvar.TriggerType_PARTIAL_EXECUTION
TriggerType_SPECIFIED_TRADING_SESSION = cvar.TriggerType_SPECIFIED_TRADING_SESSION
TriggerType_NEXT_AUCTION = cvar.TriggerType_NEXT_AUCTION
TriggerType_PRICE_MOVEMENT = cvar.TriggerType_PRICE_MOVEMENT
TriggerAction_ACTIVATE = cvar.TriggerAction_ACTIVATE
TriggerAction_MODIFY = cvar.TriggerAction_MODIFY
TriggerAction_CANCEL = cvar.TriggerAction_CANCEL
TriggerPriceType_BEST_OFFER = cvar.TriggerPriceType_BEST_OFFER
TriggerPriceType_LAST_TRADE = cvar.TriggerPriceType_LAST_TRADE
TriggerPriceType_BEST_BID = cvar.TriggerPriceType_BEST_BID
TriggerPriceType_BEST_BID_OR_LAST_TRADE = cvar.TriggerPriceType_BEST_BID_OR_LAST_TRADE
TriggerPriceType_BEST_OFFER_OR_LAST_TRADE = cvar.TriggerPriceType_BEST_OFFER_OR_LAST_TRADE
TriggerPriceType_BEST_MID = cvar.TriggerPriceType_BEST_MID
TriggerPriceTypeScope_NONE = cvar.TriggerPriceTypeScope_NONE
TriggerPriceTypeScope_LOCAL = cvar.TriggerPriceTypeScope_LOCAL
TriggerPriceTypeScope_NATIONAL = cvar.TriggerPriceTypeScope_NATIONAL
TriggerPriceTypeScope_GLOBAL = cvar.TriggerPriceTypeScope_GLOBAL
TriggerPriceDirection_TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_UP_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE = cvar.TriggerPriceDirection_TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_UP_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE
TriggerPriceDirection_TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_DOWN_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE = cvar.TriggerPriceDirection_TRIGGER_IF_THE_PRICE_OF_THE_SPECIFIED_TYPE_GOES_DOWN_TO_OR_THROUGH_THE_SPECIFIED_TRIGGER_PRICE
TriggerOrderType_MARKET = cvar.TriggerOrderType_MARKET
TriggerOrderType_LIMIT = cvar.TriggerOrderType_LIMIT
OrderCategory_ORDER = cvar.OrderCategory_ORDER
OrderCategory_QUOTE = cvar.OrderCategory_QUOTE
OrderCategory_PRIVATELY_NEGOTIATED_TRADE = cvar.OrderCategory_PRIVATELY_NEGOTIATED_TRADE
OrderCategory_MULTILEG_ORDER = cvar.OrderCategory_MULTILEG_ORDER
OrderCategory_LINKED_ORDER = cvar.OrderCategory_LINKED_ORDER
OrderCategory_QUOTE_REQUEST = cvar.OrderCategory_QUOTE_REQUEST
OrderCategory_IMPLIED_ORDER = cvar.OrderCategory_IMPLIED_ORDER
OrderCategory_CROSS_ORDER = cvar.OrderCategory_CROSS_ORDER
OrderCategory_STREAMING_PRICE = cvar.OrderCategory_STREAMING_PRICE
TradeHandlingInstr_TRADE_CONFIRMATION = cvar.TradeHandlingInstr_TRADE_CONFIRMATION
TradeHandlingInstr_TWO_PARTY_REPORT = cvar.TradeHandlingInstr_TWO_PARTY_REPORT
TradeHandlingInstr_ONE_PARTY_REPORT_FOR_MATCHING = cvar.TradeHandlingInstr_ONE_PARTY_REPORT_FOR_MATCHING
TradeHandlingInstr_ONE_PARTY_REPORT_FOR_PASS_THROUGH = cvar.TradeHandlingInstr_ONE_PARTY_REPORT_FOR_PASS_THROUGH
TradeHandlingInstr_AUTOMATED_FLOOR_ORDER_ROUTING = cvar.TradeHandlingInstr_AUTOMATED_FLOOR_ORDER_ROUTING
TradeHandlingInstr_TWO_PARTY_REPORT_FOR_CLAIM = cvar.TradeHandlingInstr_TWO_PARTY_REPORT_FOR_CLAIM
ExDestinationIDSource_BIC = cvar.ExDestinationIDSource_BIC
ExDestinationIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER = cvar.ExDestinationIDSource_GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER
ExDestinationIDSource_PROPRIETARY = cvar.ExDestinationIDSource_PROPRIETARY
ExDestinationIDSource_ISO_COUNTRY_CODE = cvar.ExDestinationIDSource_ISO_COUNTRY_CODE
ExDestinationIDSource_MIC = cvar.ExDestinationIDSource_MIC
ExpirationQtyType_AUTO_EXERCISE = cvar.ExpirationQtyType_AUTO_EXERCISE
ExpirationQtyType_NON_AUTO_EXERCISE = cvar.ExpirationQtyType_NON_AUTO_EXERCISE
ExpirationQtyType_FINAL_WILL_BE_EXERCISED = cvar.ExpirationQtyType_FINAL_WILL_BE_EXERCISED
ExpirationQtyType_CONTRARY_INTENTION = cvar.ExpirationQtyType_CONTRARY_INTENTION
ExpirationQtyType_DIFFERENCE = cvar.ExpirationQtyType_DIFFERENCE
ImpliedMarketIndicator_NOT_IMPLIED = cvar.ImpliedMarketIndicator_NOT_IMPLIED
ImpliedMarketIndicator_IMPLIED_IN = cvar.ImpliedMarketIndicator_IMPLIED_IN
ImpliedMarketIndicator_IMPLIED_OUT = cvar.ImpliedMarketIndicator_IMPLIED_OUT
ImpliedMarketIndicator_BOTH_IMPLIED_IN_AND_IMPLIED_OUT = cvar.ImpliedMarketIndicator_BOTH_IMPLIED_IN_AND_IMPLIED_OUT
SettlObligMode_PRELIMINARY = cvar.SettlObligMode_PRELIMINARY
SettlObligMode_FINAL = cvar.SettlObligMode_FINAL
SettlObligTransType_CANCEL = cvar.SettlObligTransType_CANCEL
SettlObligTransType_NEW = cvar.SettlObligTransType_NEW
SettlObligTransType_REPLACE = cvar.SettlObligTransType_REPLACE
SettlObligTransType_RESTATE = cvar.SettlObligTransType_RESTATE
SettlObligSource_INSTRUCTIONS_OF_BROKER = cvar.SettlObligSource_INSTRUCTIONS_OF_BROKER
SettlObligSource_INSTRUCTIONS_FOR_INSTITUTION = cvar.SettlObligSource_INSTRUCTIONS_FOR_INSTITUTION
SettlObligSource_INVESTOR = cvar.SettlObligSource_INVESTOR
QuoteEntryStatus_ACCEPTED = cvar.QuoteEntryStatus_ACCEPTED
QuoteEntryStatus_REJECTED = cvar.QuoteEntryStatus_REJECTED
QuoteEntryStatus_REMOVED_FROM_MARKET = cvar.QuoteEntryStatus_REMOVED_FROM_MARKET
QuoteEntryStatus_EXPIRED = cvar.QuoteEntryStatus_EXPIRED
QuoteEntryStatus_LOCKED_MARKET_WARNING = cvar.QuoteEntryStatus_LOCKED_MARKET_WARNING
QuoteEntryStatus_CROSS_MARKET_WARNING = cvar.QuoteEntryStatus_CROSS_MARKET_WARNING
QuoteEntryStatus_CANCELED_DUE_TO_LOCK_MARKET = cvar.QuoteEntryStatus_CANCELED_DUE_TO_LOCK_MARKET
QuoteEntryStatus_CANCELED_DUE_TO_CROSS_MARKET = cvar.QuoteEntryStatus_CANCELED_DUE_TO_CROSS_MARKET
QuoteEntryStatus_ACTIVE = cvar.QuoteEntryStatus_ACTIVE
PrivateQuote_YES = cvar.PrivateQuote_YES
PrivateQuote_NO = cvar.PrivateQuote_NO
RespondentType_ALL_MARKET_PARTICIPANTS = cvar.RespondentType_ALL_MARKET_PARTICIPANTS
RespondentType_SPECIFIED_MARKET_PARTICIPANTS = cvar.RespondentType_SPECIFIED_MARKET_PARTICIPANTS
RespondentType_ALL_MARKET_MAKERS = cvar.RespondentType_ALL_MARKET_MAKERS
RespondentType_PRIMARY_MARKET_MAKER = cvar.RespondentType_PRIMARY_MARKET_MAKER
SecurityTradingEvent_ORDER_IMBALANCE_AUCTION_IS_EXTENDED = cvar.SecurityTradingEvent_ORDER_IMBALANCE_AUCTION_IS_EXTENDED
SecurityTradingEvent_TRADING_RESUMES = cvar.SecurityTradingEvent_TRADING_RESUMES
SecurityTradingEvent_PRICE_VOLATILITY_INTERRUPTION = cvar.SecurityTradingEvent_PRICE_VOLATILITY_INTERRUPTION
SecurityTradingEvent_CHANGE_OF_TRADING_SESSION = cvar.SecurityTradingEvent_CHANGE_OF_TRADING_SESSION
SecurityTradingEvent_CHANGE_OF_TRADING_SUBSESSION = cvar.SecurityTradingEvent_CHANGE_OF_TRADING_SUBSESSION
SecurityTradingEvent_CHANGE_OF_SECURITY_STATUS = cvar.SecurityTradingEvent_CHANGE_OF_SECURITY_STATUS
SecurityTradingEvent_CHANGE_OF_BOOK_TYPE = cvar.SecurityTradingEvent_CHANGE_OF_BOOK_TYPE
SecurityTradingEvent_CHANGE_OF_MARKET_DEPTH = cvar.SecurityTradingEvent_CHANGE_OF_MARKET_DEPTH
SecurityTradingEvent_CHANGE_OF_SECURITY_TRADING_STATUS = cvar.SecurityTradingEvent_CHANGE_OF_SECURITY_TRADING_STATUS
StatsType_EXCHANGE_LAST = cvar.StatsType_EXCHANGE_LAST
StatsType_HIGH = cvar.StatsType_HIGH
StatsType_AVERAGE_PRICE = cvar.StatsType_AVERAGE_PRICE
StatsType_TURNOVER = cvar.StatsType_TURNOVER
MDSecSizeType_CUSTOMER = cvar.MDSecSizeType_CUSTOMER
SettlMethod_CASH_SETTLEMENT_REQUIRED = cvar.SettlMethod_CASH_SETTLEMENT_REQUIRED
SettlMethod_PHYSICAL_SETTLEMENT_REQUIRED = cvar.SettlMethod_PHYSICAL_SETTLEMENT_REQUIRED
ExerciseStyle_EUROPEAN = cvar.ExerciseStyle_EUROPEAN
ExerciseStyle_AMERICAN = cvar.ExerciseStyle_AMERICAN
ExerciseStyle_BERMUDA = cvar.ExerciseStyle_BERMUDA
PriceQuoteMethod_STANDARD_MONEY_PER_UNIT_OF_A_PHYSICAL = cvar.PriceQuoteMethod_STANDARD_MONEY_PER_UNIT_OF_A_PHYSICAL
PriceQuoteMethod_INDEX = cvar.PriceQuoteMethod_INDEX
PriceQuoteMethod_INTEREST_RATE_INDEX = cvar.PriceQuoteMethod_INTEREST_RATE_INDEX
PriceQuoteMethod_PERCENT_OF_PAR = cvar.PriceQuoteMethod_PERCENT_OF_PAR
FuturesValuationMethod_PREMIUM_STYLE = cvar.FuturesValuationMethod_PREMIUM_STYLE
FuturesValuationMethod_FUTURES_STYLE_MARK_TO_MARKET = cvar.FuturesValuationMethod_FUTURES_STYLE_MARK_TO_MARKET
FuturesValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT = cvar.FuturesValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT
ListMethod_PRE_LISTED_ONLY = cvar.ListMethod_PRE_LISTED_ONLY
ListMethod_USER_REQUESTED = cvar.ListMethod_USER_REQUESTED
TickRuleType_REGULAR = cvar.TickRuleType_REGULAR
TickRuleType_VARIABLE = cvar.TickRuleType_VARIABLE
TickRuleType_FIXED = cvar.TickRuleType_FIXED
TickRuleType_TRADED_AS_A_SPREAD_LEG = cvar.TickRuleType_TRADED_AS_A_SPREAD_LEG
TickRuleType_SETTLED_AS_A_SPREAD_LEG = cvar.TickRuleType_SETTLED_AS_A_SPREAD_LEG
MaturityMonthYearIncrementUnits_MONTHS = cvar.MaturityMonthYearIncrementUnits_MONTHS
MaturityMonthYearIncrementUnits_DAYS = cvar.MaturityMonthYearIncrementUnits_DAYS
MaturityMonthYearIncrementUnits_WEEKS = cvar.MaturityMonthYearIncrementUnits_WEEKS
MaturityMonthYearIncrementUnits_YEARS = cvar.MaturityMonthYearIncrementUnits_YEARS
MaturityMonthYearFormat_YEARMONTH_ONLY = cvar.MaturityMonthYearFormat_YEARMONTH_ONLY
MaturityMonthYearFormat_YEARMONTHDAY = cvar.MaturityMonthYearFormat_YEARMONTHDAY
MaturityMonthYearFormat_YEARMONTHWEEK = cvar.MaturityMonthYearFormat_YEARMONTHWEEK
PriceLimitType_PRICE = cvar.PriceLimitType_PRICE
PriceLimitType_TICKS = cvar.PriceLimitType_TICKS
PriceLimitType_PERCENTAGE = cvar.PriceLimitType_PERCENTAGE
ApplReqType_RETRANSMISSION_OF_APPLICATION_MESSAGES_FOR_THE_SPECIFIED_APPLICATIONS = cvar.ApplReqType_RETRANSMISSION_OF_APPLICATION_MESSAGES_FOR_THE_SPECIFIED_APPLICATIONS
ApplReqType_SUBSCRIPTION_TO_THE_SPECIFIED_APPLICATIONS = cvar.ApplReqType_SUBSCRIPTION_TO_THE_SPECIFIED_APPLICATIONS
ApplReqType_REQUEST_FOR_THE_LAST_APPLLASTSEQNUM_PUBLISHED_FOR_THE_SPECIFIED_APPLICATIONS = cvar.ApplReqType_REQUEST_FOR_THE_LAST_APPLLASTSEQNUM_PUBLISHED_FOR_THE_SPECIFIED_APPLICATIONS
ApplReqType_REQUEST_VALID_SET_OF_APPLICATIONS = cvar.ApplReqType_REQUEST_VALID_SET_OF_APPLICATIONS
ApplReqType_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS = cvar.ApplReqType_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS
ApplReqType_CANCEL_RETRANSMISSION = cvar.ApplReqType_CANCEL_RETRANSMISSION
ApplReqType_CANCEL_RETRANSMISSION_AND_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS = cvar.ApplReqType_CANCEL_RETRANSMISSION_AND_UNSUBSCRIBE_TO_THE_SPECIFIED_APPLICATIONS
ApplResponseType_REQUEST_SUCCESSFULLY_PROCESSED = cvar.ApplResponseType_REQUEST_SUCCESSFULLY_PROCESSED
ApplResponseType_APPLICATION_DOES_NOT_EXIST = cvar.ApplResponseType_APPLICATION_DOES_NOT_EXIST
ApplResponseType_MESSAGES_NOT_AVAILABLE = cvar.ApplResponseType_MESSAGES_NOT_AVAILABLE
ApplResponseError_APPLICATION_DOES_NOT_EXIST = cvar.ApplResponseError_APPLICATION_DOES_NOT_EXIST
ApplResponseError_MESSAGES_REQUESTED_ARE_NOT_AVAILABLE = cvar.ApplResponseError_MESSAGES_REQUESTED_ARE_NOT_AVAILABLE
ApplResponseError_USER_NOT_AUTHORIZED_FOR_APPLICATION = cvar.ApplResponseError_USER_NOT_AUTHORIZED_FOR_APPLICATION
TradSesEvent_TRADING_RESUMES = cvar.TradSesEvent_TRADING_RESUMES
TradSesEvent_CHANGE_OF_TRADING_SESSION = cvar.TradSesEvent_CHANGE_OF_TRADING_SESSION
TradSesEvent_CHANGE_OF_TRADING_SUBSESSION = cvar.TradSesEvent_CHANGE_OF_TRADING_SUBSESSION
TradSesEvent_CHANGE_OF_TRADING_STATUS = cvar.TradSesEvent_CHANGE_OF_TRADING_STATUS
MassActionType_SUSPEND_ORDERS = cvar.MassActionType_SUSPEND_ORDERS
MassActionType_RELEASE_ORDERS_FROM_SUSPENSION = cvar.MassActionType_RELEASE_ORDERS_FROM_SUSPENSION
MassActionType_CANCEL_ORDERS = cvar.MassActionType_CANCEL_ORDERS
MassActionScope_ALL_ORDERS_FOR_A_SECURITY = cvar.MassActionScope_ALL_ORDERS_FOR_A_SECURITY
MassActionScope_ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY = cvar.MassActionScope_ALL_ORDERS_FOR_AN_UNDERLYING_SECURITY
MassActionScope_ALL_ORDERS_FOR_A_PRODUCT = cvar.MassActionScope_ALL_ORDERS_FOR_A_PRODUCT
MassActionScope_ALL_ORDERS_FOR_A_CFICODE = cvar.MassActionScope_ALL_ORDERS_FOR_A_CFICODE
MassActionScope_ALL_ORDERS_FOR_A_SECURITYTYPE = cvar.MassActionScope_ALL_ORDERS_FOR_A_SECURITYTYPE
MassActionScope_ALL_ORDERS_FOR_A_TRADING_SESSION = cvar.MassActionScope_ALL_ORDERS_FOR_A_TRADING_SESSION
MassActionScope_ALL_ORDERS = cvar.MassActionScope_ALL_ORDERS
MassActionScope_ALL_ORDERS_FOR_A_MARKET = cvar.MassActionScope_ALL_ORDERS_FOR_A_MARKET
MassActionScope_ALL_ORDERS_FOR_A_MARKET_SEGMENT = cvar.MassActionScope_ALL_ORDERS_FOR_A_MARKET_SEGMENT
MassActionScope_ALL_ORDERS_FOR_A_SECURITY_GROUP = cvar.MassActionScope_ALL_ORDERS_FOR_A_SECURITY_GROUP
MassActionScope_CANCEL_FOR_SECURITY_ISSUER = cvar.MassActionScope_CANCEL_FOR_SECURITY_ISSUER
MassActionScope_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassActionScope_CANCEL_FOR_ISSUER_OF_UNDERLYING_SECURITY
MassActionResponse_REJECTED = cvar.MassActionResponse_REJECTED
MassActionResponse_ACCEPTED = cvar.MassActionResponse_ACCEPTED
MassActionRejectReason_MASS_ACTION_NOT_SUPPORTED = cvar.MassActionRejectReason_MASS_ACTION_NOT_SUPPORTED
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY
MassActionRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_SECURITY = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_UNDERLYING_SECURITY
MassActionRejectReason_INVALID_OR_UNKNOWN_PRODUCT = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_PRODUCT
MassActionRejectReason_INVALID_OR_UNKNOWN_CFICODE = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_CFICODE
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITYTYPE = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITYTYPE
MassActionRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_TRADING_SESSION
MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET
MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET_SEGMENT = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_MARKET_SEGMENT
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_GROUP
MassActionRejectReason_OTHER = cvar.MassActionRejectReason_OTHER
MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_SECURITY_ISSUER
MassActionRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY = cvar.MassActionRejectReason_INVALID_OR_UNKNOWN_ISSUER_OF_UNDERLYING_SECURITY
MultilegModel_PREDEFINED_MULTILEG_SECURITY = cvar.MultilegModel_PREDEFINED_MULTILEG_SECURITY
MultilegModel_USER_DEFINED_MULTLEG_SECURITY = cvar.MultilegModel_USER_DEFINED_MULTLEG_SECURITY
MultilegModel_USER_DEFINED_NON_SECURITIZED_MULTILEG = cvar.MultilegModel_USER_DEFINED_NON_SECURITIZED_MULTILEG
MultilegPriceMethod_NET_PRICE = cvar.MultilegPriceMethod_NET_PRICE
MultilegPriceMethod_REVERSED_NET_PRICE = cvar.MultilegPriceMethod_REVERSED_NET_PRICE
MultilegPriceMethod_YIELD_DIFFERENCE = cvar.MultilegPriceMethod_YIELD_DIFFERENCE
MultilegPriceMethod_INDIVIDUAL = cvar.MultilegPriceMethod_INDIVIDUAL
MultilegPriceMethod_CONTRACT_WEIGHTED_AVERAGE_PRICE = cvar.MultilegPriceMethod_CONTRACT_WEIGHTED_AVERAGE_PRICE
MultilegPriceMethod_MULTIPLIED_PRICE = cvar.MultilegPriceMethod_MULTIPLIED_PRICE
ContingencyType_ONE_CANCELS_THE_OTHER = cvar.ContingencyType_ONE_CANCELS_THE_OTHER
ContingencyType_ONE_TRIGGERS_THE_OTHER = cvar.ContingencyType_ONE_TRIGGERS_THE_OTHER
ContingencyType_ONE_UPDATES_THE_OTHER_3 = cvar.ContingencyType_ONE_UPDATES_THE_OTHER_3
ContingencyType_ONE_UPDATES_THE_OTHER_4 = cvar.ContingencyType_ONE_UPDATES_THE_OTHER_4
ListRejectReason_BROKER = cvar.ListRejectReason_BROKER
ListRejectReason_EXCHANGE_CLOSED = cvar.ListRejectReason_EXCHANGE_CLOSED
ListRejectReason_TOO_LATE_TO_ENTER = cvar.ListRejectReason_TOO_LATE_TO_ENTER
ListRejectReason_UNKNOWN_ORDER = cvar.ListRejectReason_UNKNOWN_ORDER
ListRejectReason_DUPLICATE_ORDER = cvar.ListRejectReason_DUPLICATE_ORDER
ListRejectReason_UNSUPPORTED_ORDER_CHARACTERISTIC = cvar.ListRejectReason_UNSUPPORTED_ORDER_CHARACTERISTIC
ListRejectReason_OTHER = cvar.ListRejectReason_OTHER
TradePublishIndicator_DO_NOT_PUBLISH_TRADE = cvar.TradePublishIndicator_DO_NOT_PUBLISH_TRADE
TradePublishIndicator_PUBLISH_TRADE = cvar.TradePublishIndicator_PUBLISH_TRADE
TradePublishIndicator_DEFERRED_PUBLICATION = cvar.TradePublishIndicator_DEFERRED_PUBLICATION
MarketUpdateAction_ADD = cvar.MarketUpdateAction_ADD
MarketUpdateAction_DELETE = cvar.MarketUpdateAction_DELETE
MarketUpdateAction_MODIFY = cvar.MarketUpdateAction_MODIFY
SessionStatus_SESSION_ACTIVE = cvar.SessionStatus_SESSION_ACTIVE
SessionStatus_SESSION_PASSWORD_CHANGED = cvar.SessionStatus_SESSION_PASSWORD_CHANGED
SessionStatus_SESSION_PASSWORD_DUE_TO_EXPIRE = cvar.SessionStatus_SESSION_PASSWORD_DUE_TO_EXPIRE
SessionStatus_NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY = cvar.SessionStatus_NEW_SESSION_PASSWORD_DOES_NOT_COMPLY_WITH_POLICY
SessionStatus_SESSION_LOGOUT_COMPLETE = cvar.SessionStatus_SESSION_LOGOUT_COMPLETE
SessionStatus_INVALID_USERNAME_OR_PASSWORD = cvar.SessionStatus_INVALID_USERNAME_OR_PASSWORD
SessionStatus_ACCOUNT_LOCKED = cvar.SessionStatus_ACCOUNT_LOCKED
SessionStatus_LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME = cvar.SessionStatus_LOGONS_ARE_NOT_ALLOWED_AT_THIS_TIME
SessionStatus_PASSWORD_EXPIRED = cvar.SessionStatus_PASSWORD_EXPIRED
ApplReportType_RESET_APPLSEQNUM_TO_NEW_VALUE_SPECIFIED_IN_APPLNEWSEQNUM = cvar.ApplReportType_RESET_APPLSEQNUM_TO_NEW_VALUE_SPECIFIED_IN_APPLNEWSEQNUM
ApplReportType_REPORTS_THAT_THE_LAST_MESSAGE_HAS_BEEN_SENT_FOR_THE_APPLIDS_REFER_TO_REFAPPLLASTSEQNUM = cvar.ApplReportType_REPORTS_THAT_THE_LAST_MESSAGE_HAS_BEEN_SENT_FOR_THE_APPLIDS_REFER_TO_REFAPPLLASTSEQNUM
ApplReportType_HEARTBEAT_MESSAGE_INDICATING_THAT_APPLICATION_IDENTIFIED_BY_REFAPPLID = cvar.ApplReportType_HEARTBEAT_MESSAGE_INDICATING_THAT_APPLICATION_IDENTIFIED_BY_REFAPPLID
ApplReportType_APPLICATION_MESSAGE_RE_SEND_COMPLETED = cvar.ApplReportType_APPLICATION_MESSAGE_RE_SEND_COMPLETED
HaltReasonInt_NEWS_DISSEMINATION = cvar.HaltReasonInt_NEWS_DISSEMINATION
HaltReasonInt_ORDER_INFLUX = cvar.HaltReasonInt_ORDER_INFLUX
HaltReasonInt_ORDER_IMBALANCE = cvar.HaltReasonInt_ORDER_IMBALANCE
HaltReasonInt_ADDITIONAL_INFORMATION = cvar.HaltReasonInt_ADDITIONAL_INFORMATION
HaltReasonInt_NEWS_PENDING = cvar.HaltReasonInt_NEWS_PENDING
HaltReasonInt_EQUIPMENT_CHANGEOVER = cvar.HaltReasonInt_EQUIPMENT_CHANGEOVER
ValuationMethod_PREMIUM_STYLE = cvar.ValuationMethod_PREMIUM_STYLE
ValuationMethod_FUTURES_STYLE_MARK_TO_MARKET = cvar.ValuationMethod_FUTURES_STYLE_MARK_TO_MARKET
ValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT = cvar.ValuationMethod_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT
ValuationMethod_CDS_STYLE_COLLATERALIZATION_OF_MARKET_TO_MARKET_AND_COUPON = cvar.ValuationMethod_CDS_STYLE_COLLATERALIZATION_OF_MARKET_TO_MARKET_AND_COUPON
ValuationMethod_CDS_IN_DELIVERY = cvar.ValuationMethod_CDS_IN_DELIVERY
OrderDelayUnit_SECONDS = cvar.OrderDelayUnit_SECONDS
OrderDelayUnit_TENTHS_OF_A_SECOND = cvar.OrderDelayUnit_TENTHS_OF_A_SECOND
OrderDelayUnit_HUNDREDTHS_OF_A_SECOND = cvar.OrderDelayUnit_HUNDREDTHS_OF_A_SECOND
OrderDelayUnit_MILLISECONDS = cvar.OrderDelayUnit_MILLISECONDS
OrderDelayUnit_MICROSECONDS = cvar.OrderDelayUnit_MICROSECONDS
OrderDelayUnit_NANOSECONDS = cvar.OrderDelayUnit_NANOSECONDS
OrderDelayUnit_MINUTES = cvar.OrderDelayUnit_MINUTES
OrderDelayUnit_HOURS = cvar.OrderDelayUnit_HOURS
OrderDelayUnit_DAYS = cvar.OrderDelayUnit_DAYS
OrderDelayUnit_WEEKS = cvar.OrderDelayUnit_WEEKS
OrderDelayUnit_MONTHS = cvar.OrderDelayUnit_MONTHS
OrderDelayUnit_YEARS = cvar.OrderDelayUnit_YEARS
VenueType_ELECTRONIC = cvar.VenueType_ELECTRONIC
VenueType_PIT = cvar.VenueType_PIT
VenueType_EX_PIT = cvar.VenueType_EX_PIT
RefOrdIDReason_GTC_FROM_PREVIOUS_DAY = cvar.RefOrdIDReason_GTC_FROM_PREVIOUS_DAY
RefOrdIDReason_PARTIAL_FILL_REMAINING = cvar.RefOrdIDReason_PARTIAL_FILL_REMAINING
RefOrdIDReason_ORDER_CHANGED = cvar.RefOrdIDReason_ORDER_CHANGED
OrigCustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = cvar.OrigCustOrderCapacity_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT
OrigCustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = cvar.OrigCustOrderCapacity_CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT
OrigCustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER = cvar.OrigCustOrderCapacity_MEMBER_TRADING_FOR_ANOTHER_MEMBER
OrigCustOrderCapacity_ALL_OTHER = cvar.OrigCustOrderCapacity_ALL_OTHER
ModelType_UTILITY_PROVIDED_STANDARD_MODEL = cvar.ModelType_UTILITY_PROVIDED_STANDARD_MODEL
ModelType_PROPRIETARY = cvar.ModelType_PROPRIETARY
ContractMultiplierUnit_SHARES = cvar.ContractMultiplierUnit_SHARES
ContractMultiplierUnit_HOURS = cvar.ContractMultiplierUnit_HOURS
ContractMultiplierUnit_DAYS = cvar.ContractMultiplierUnit_DAYS
FlowScheduleType_NERC_EASTERN_OFF_PEAK = cvar.FlowScheduleType_NERC_EASTERN_OFF_PEAK
FlowScheduleType_NERC_WESTERN_OFF_PEAK = cvar.FlowScheduleType_NERC_WESTERN_OFF_PEAK
FlowScheduleType_NERC_CALENDAR_ALL_DAYS_IN_MONTH = cvar.FlowScheduleType_NERC_CALENDAR_ALL_DAYS_IN_MONTH
FlowScheduleType_NERC_EASTERN_PEAK = cvar.FlowScheduleType_NERC_EASTERN_PEAK
FlowScheduleType_NERC_WESTERN_PEAK = cvar.FlowScheduleType_NERC_WESTERN_PEAK
RateSource_BLOOMBERG = cvar.RateSource_BLOOMBERG
RateSource_REUTERS = cvar.RateSource_REUTERS
RateSource_TELERATE = cvar.RateSource_TELERATE
RateSource_OTHER = cvar.RateSource_OTHER
RateSourceType_PRIMARY = cvar.RateSourceType_PRIMARY
RateSourceType_SECONDARY = cvar.RateSourceType_SECONDARY
RestructuringType_FULL_RESTRUCTURING = cvar.RestructuringType_FULL_RESTRUCTURING
RestructuringType_MODIFIED_RESTRUCTURING = cvar.RestructuringType_MODIFIED_RESTRUCTURING
RestructuringType_MODIFIED_MOD_RESTRUCTURING = cvar.RestructuringType_MODIFIED_MOD_RESTRUCTURING
RestructuringType_NO_RESTRUCTURING_SPECIFIED = cvar.RestructuringType_NO_RESTRUCTURING_SPECIFIED
Seniority_SENIOR_SECURED = cvar.Seniority_SENIOR_SECURED
Seniority_SENIOR = cvar.Seniority_SENIOR
Seniority_SUBORDINATED = cvar.Seniority_SUBORDINATED
SecurityListType_INDUSTRY_CLASSIFICATION = cvar.SecurityListType_INDUSTRY_CLASSIFICATION
SecurityListType_TRADING_LIST = cvar.SecurityListType_TRADING_LIST
SecurityListType_MARKET = cvar.SecurityListType_MARKET
SecurityListType_NEWSPAPER_LIST = cvar.SecurityListType_NEWSPAPER_LIST
SecurityListTypeSource_ICB = cvar.SecurityListTypeSource_ICB
SecurityListTypeSource_NAICS = cvar.SecurityListTypeSource_NAICS
SecurityListTypeSource_GICS = cvar.SecurityListTypeSource_GICS
NewsCategory_COMPANY_NEWS = cvar.NewsCategory_COMPANY_NEWS
NewsCategory_MARKETPLACE_NEWS = cvar.NewsCategory_MARKETPLACE_NEWS
NewsCategory_FINANCIAL_MARKET_NEWS = cvar.NewsCategory_FINANCIAL_MARKET_NEWS
NewsCategory_TECHNICAL_NEWS = cvar.NewsCategory_TECHNICAL_NEWS
NewsCategory_OTHER_NEWS = cvar.NewsCategory_OTHER_NEWS
NewsRefType_REPLACEMENT = cvar.NewsRefType_REPLACEMENT
NewsRefType_OTHER_LANGUAGE = cvar.NewsRefType_OTHER_LANGUAGE
NewsRefType_COMPLIMENTARY = cvar.NewsRefType_COMPLIMENTARY
StrikePriceDeterminationMethod_FIXED_STRIKE = cvar.StrikePriceDeterminationMethod_FIXED_STRIKE
StrikePriceDeterminationMethod_STRIKE_SET_AT_EXPIRATION_TO_UNDERLYING_OR_OTHER_VALUE = cvar.StrikePriceDeterminationMethod_STRIKE_SET_AT_EXPIRATION_TO_UNDERLYING_OR_OTHER_VALUE
StrikePriceDeterminationMethod_STRIKE_SET_TO_AVERAGE_OF_UNDERLYING_SETTLEMENT_PRICE_ACROSS_THE_LIFE_OF_THE_OPTION = cvar.StrikePriceDeterminationMethod_STRIKE_SET_TO_AVERAGE_OF_UNDERLYING_SETTLEMENT_PRICE_ACROSS_THE_LIFE_OF_THE_OPTION
StrikePriceDeterminationMethod_STRIKE_SET_TO_OPTIMAL_VALUE = cvar.StrikePriceDeterminationMethod_STRIKE_SET_TO_OPTIMAL_VALUE
StrikePriceBoundaryMethod_LESS_THAN_UNDERLYING_PRICE_IS_IN_THE_MONEY = cvar.StrikePriceBoundaryMethod_LESS_THAN_UNDERLYING_PRICE_IS_IN_THE_MONEY
StrikePriceBoundaryMethod_LESS_THAN_OR_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY = cvar.StrikePriceBoundaryMethod_LESS_THAN_OR_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY
StrikePriceBoundaryMethod_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY = cvar.StrikePriceBoundaryMethod_EQUAL_TO_THE_UNDERLYING_PRICE_IS_IN_THE_MONEY
StrikePriceBoundaryMethod_GREATER_THAN_OR_EQUAL_TO_UNDERLYING_PRICE_IS_IN_THE_MONEY = cvar.StrikePriceBoundaryMethod_GREATER_THAN_OR_EQUAL_TO_UNDERLYING_PRICE_IS_IN_THE_MONEY
StrikePriceBoundaryMethod_GREATER_THAN_UNDERLYING_IS_IN_THE_MONEY = cvar.StrikePriceBoundaryMethod_GREATER_THAN_UNDERLYING_IS_IN_THE_MONEY
UnderlyingPriceDeterminationMethod_REGULAR = cvar.UnderlyingPriceDeterminationMethod_REGULAR
UnderlyingPriceDeterminationMethod_SPECIAL_REFERENCE = cvar.UnderlyingPriceDeterminationMethod_SPECIAL_REFERENCE
UnderlyingPriceDeterminationMethod_OPTIMAL_VALUE = cvar.UnderlyingPriceDeterminationMethod_OPTIMAL_VALUE
UnderlyingPriceDeterminationMethod_AVERAGE_VALUE = cvar.UnderlyingPriceDeterminationMethod_AVERAGE_VALUE
OptPayoutType_VANILLA = cvar.OptPayoutType_VANILLA
OptPayoutType_CAPPED = cvar.OptPayoutType_CAPPED
OptPayoutType_BINARY = cvar.OptPayoutType_BINARY
ComplexEventType_CAPPED = cvar.ComplexEventType_CAPPED
ComplexEventType_TRIGGER = cvar.ComplexEventType_TRIGGER
ComplexEventType_KNOCK_IN_UP = cvar.ComplexEventType_KNOCK_IN_UP
ComplexEventType_KOCK_IN_DOWN = cvar.ComplexEventType_KOCK_IN_DOWN
ComplexEventType_KNOCK_OUT_UP = cvar.ComplexEventType_KNOCK_OUT_UP
ComplexEventType_KNOCK_OUT_DOWN = cvar.ComplexEventType_KNOCK_OUT_DOWN
ComplexEventType_UNDERLYING = cvar.ComplexEventType_UNDERLYING
ComplexEventType_RESET_BARRIER = cvar.ComplexEventType_RESET_BARRIER
ComplexEventType_ROLLING_BARRIER = cvar.ComplexEventType_ROLLING_BARRIER
ComplexEventPriceBoundaryMethod_LESS_THAN_COMPLEXEVENTPRICE = cvar.ComplexEventPriceBoundaryMethod_LESS_THAN_COMPLEXEVENTPRICE
ComplexEventPriceBoundaryMethod_LESS_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE = cvar.ComplexEventPriceBoundaryMethod_LESS_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE
ComplexEventPriceBoundaryMethod_EQUAL_TO_COMPLEXEVENTPRICE = cvar.ComplexEventPriceBoundaryMethod_EQUAL_TO_COMPLEXEVENTPRICE
ComplexEventPriceBoundaryMethod_GREATER_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE = cvar.ComplexEventPriceBoundaryMethod_GREATER_THAN_OR_EQUAL_TO_COMPLEXEVENTPRICE
ComplexEventPriceBoundaryMethod_GREATER_THAN_COMPLEXEVENTPRICE = cvar.ComplexEventPriceBoundaryMethod_GREATER_THAN_COMPLEXEVENTPRICE
ComplexEventPriceTimeType_EXPIRATION = cvar.ComplexEventPriceTimeType_EXPIRATION
ComplexEventPriceTimeType_IMMEDIATE = cvar.ComplexEventPriceTimeType_IMMEDIATE
ComplexEventPriceTimeType_SPECIFIED_DATE_TIME = cvar.ComplexEventPriceTimeType_SPECIFIED_DATE_TIME
ComplexEventCondition_AND = cvar.ComplexEventCondition_AND
ComplexEventCondition_OR = cvar.ComplexEventCondition_OR
StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER = cvar.StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_NEW_CUSTOMER
StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER = cvar.StreamAsgnReqType_STREAM_ASSIGNMENT_FOR_EXISTING_CUSTOMER
StreamAsgnRejReason_UNKNOWN_CLIENT = cvar.StreamAsgnRejReason_UNKNOWN_CLIENT
StreamAsgnRejReason_EXCEEDS_MAXIMUM_SIZE = cvar.StreamAsgnRejReason_EXCEEDS_MAXIMUM_SIZE
StreamAsgnRejReason_UNKNOWN_OR_INVALID_CURRENCY_PAIR = cvar.StreamAsgnRejReason_UNKNOWN_OR_INVALID_CURRENCY_PAIR
StreamAsgnRejReason_NO_AVAILABLE_STREAM = cvar.StreamAsgnRejReason_NO_AVAILABLE_STREAM
StreamAsgnRejReason_OTHER = cvar.StreamAsgnRejReason_OTHER
StreamAsgnAckType_ASSIGNMENT_ACCEPTED = cvar.StreamAsgnAckType_ASSIGNMENT_ACCEPTED
StreamAsgnAckType_ASSIGNMENT_REJECTED = cvar.StreamAsgnAckType_ASSIGNMENT_REJECTED
StreamAsgnType_ASSIGNMENT = cvar.StreamAsgnType_ASSIGNMENT
StreamAsgnType_REJECTED = cvar.StreamAsgnType_REJECTED
StreamAsgnType_TERMINATE_UNASSIGN = cvar.StreamAsgnType_TERMINATE_UNASSIGN


def __lt__(*args):
    return _quickfix.__lt__(*args)

def __eq__(*args):
    return _quickfix.__eq__(*args)

def __ne__(*args):
    return _quickfix.__ne__(*args)
class Dictionary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.Dictionary_swiginit(self, _quickfix.new_Dictionary(*args))
    __swig_destroy__ = _quickfix.delete_Dictionary

    def getName(self):
        return _quickfix.Dictionary_getName(self)

    def size(self):
        return _quickfix.Dictionary_size(self)

    def getString(self, arg2, capitalize=False):
        return _quickfix.Dictionary_getString(self, arg2, capitalize)

    def getInt(self, arg2):
        return _quickfix.Dictionary_getInt(self, arg2)

    def getDouble(self, arg2):
        return _quickfix.Dictionary_getDouble(self, arg2)

    def getBool(self, arg2):
        return _quickfix.Dictionary_getBool(self, arg2)

    def getDay(self, arg2):
        return _quickfix.Dictionary_getDay(self, arg2)

    def setString(self, arg2, arg3):
        return _quickfix.Dictionary_setString(self, arg2, arg3)

    def setInt(self, arg2, arg3):
        return _quickfix.Dictionary_setInt(self, arg2, arg3)

    def setDouble(self, arg2, arg3):
        return _quickfix.Dictionary_setDouble(self, arg2, arg3)

    def setBool(self, arg2, arg3):
        return _quickfix.Dictionary_setBool(self, arg2, arg3)

    def setDay(self, arg2, arg3):
        return _quickfix.Dictionary_setDay(self, arg2, arg3)

    def has(self, arg2):
        return _quickfix.Dictionary_has(self, arg2)

    def merge(self, arg2):
        return _quickfix.Dictionary_merge(self, arg2)

    def begin(self):
        return _quickfix.Dictionary_begin(self)

    def end(self):
        return _quickfix.Dictionary_end(self)

# Register Dictionary in _quickfix:
_quickfix.Dictionary_swigregister(Dictionary)

class SessionSettings(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SessionSettings_swiginit(self, _quickfix.new_SessionSettings(*args))

    def has(self, arg2):
        return _quickfix.SessionSettings_has(self, arg2)

    def get(self, *args):
        return _quickfix.SessionSettings_get(self, *args)

    def set(self, *args):
        return _quickfix.SessionSettings_set(self, *args)

    def size(self):
        return _quickfix.SessionSettings_size(self)

    def getSessions(self):
        return _quickfix.SessionSettings_getSessions(self)

    def setFromString(self, str):
        return _quickfix.SessionSettings_setFromString(self, str)
    __swig_destroy__ = _quickfix.delete_SessionSettings

# Register SessionSettings in _quickfix:
_quickfix.SessionSettings_swigregister(SessionSettings)
BEGINSTRING = cvar.BEGINSTRING
SENDERCOMPID = cvar.SENDERCOMPID
TARGETCOMPID = cvar.TARGETCOMPID
SESSION_QUALIFIER = cvar.SESSION_QUALIFIER
DEFAULT_APPLVERID = cvar.DEFAULT_APPLVERID
CONNECTION_TYPE = cvar.CONNECTION_TYPE
USE_DATA_DICTIONARY = cvar.USE_DATA_DICTIONARY
SEND_RESETSEQNUMFLAG = cvar.SEND_RESETSEQNUMFLAG
SEND_REDUNDANT_RESENDREQUESTS = cvar.SEND_REDUNDANT_RESENDREQUESTS
DATA_DICTIONARY = cvar.DATA_DICTIONARY
TRANSPORT_DATA_DICTIONARY = cvar.TRANSPORT_DATA_DICTIONARY
APP_DATA_DICTIONARY = cvar.APP_DATA_DICTIONARY
USE_LOCAL_TIME = cvar.USE_LOCAL_TIME
START_TIME = cvar.START_TIME
END_TIME = cvar.END_TIME
START_DAY = cvar.START_DAY
END_DAY = cvar.END_DAY
LOGON_TIME = cvar.LOGON_TIME
LOGOUT_TIME = cvar.LOGOUT_TIME
LOGON_DAY = cvar.LOGON_DAY
LOGOUT_DAY = cvar.LOGOUT_DAY
CHECK_COMPID = cvar.CHECK_COMPID
CHECK_LATENCY = cvar.CHECK_LATENCY
MAX_LATENCY = cvar.MAX_LATENCY
HEARTBTINT = cvar.HEARTBTINT
SOCKET_ACCEPT_PORT = cvar.SOCKET_ACCEPT_PORT
SOCKET_REUSE_ADDRESS = cvar.SOCKET_REUSE_ADDRESS
SOCKET_CONNECT_HOST = cvar.SOCKET_CONNECT_HOST
SOCKET_CONNECT_PORT = cvar.SOCKET_CONNECT_PORT
SOCKET_CONNECT_SOURCE_HOST = cvar.SOCKET_CONNECT_SOURCE_HOST
SOCKET_CONNECT_SOURCE_PORT = cvar.SOCKET_CONNECT_SOURCE_PORT
SOCKET_NODELAY = cvar.SOCKET_NODELAY
SOCKET_SEND_BUFFER_SIZE = cvar.SOCKET_SEND_BUFFER_SIZE
SOCKET_RECEIVE_BUFFER_SIZE = cvar.SOCKET_RECEIVE_BUFFER_SIZE
RECONNECT_INTERVAL = cvar.RECONNECT_INTERVAL
VALIDATE_LENGTH_AND_CHECKSUM = cvar.VALIDATE_LENGTH_AND_CHECKSUM
VALIDATE_FIELDS_OUT_OF_ORDER = cvar.VALIDATE_FIELDS_OUT_OF_ORDER
VALIDATE_FIELDS_HAVE_VALUES = cvar.VALIDATE_FIELDS_HAVE_VALUES
VALIDATE_USER_DEFINED_FIELDS = cvar.VALIDATE_USER_DEFINED_FIELDS
ALLOW_UNKNOWN_MSG_FIELDS = cvar.ALLOW_UNKNOWN_MSG_FIELDS
PRESERVE_MESSAGE_FIELDS_ORDER = cvar.PRESERVE_MESSAGE_FIELDS_ORDER
LOGON_TIMEOUT = cvar.LOGON_TIMEOUT
LOGOUT_TIMEOUT = cvar.LOGOUT_TIMEOUT
FILE_STORE_PATH = cvar.FILE_STORE_PATH
MYSQL_STORE_USECONNECTIONPOOL = cvar.MYSQL_STORE_USECONNECTIONPOOL
MYSQL_STORE_DATABASE = cvar.MYSQL_STORE_DATABASE
MYSQL_STORE_USER = cvar.MYSQL_STORE_USER
MYSQL_STORE_PASSWORD = cvar.MYSQL_STORE_PASSWORD
MYSQL_STORE_HOST = cvar.MYSQL_STORE_HOST
MYSQL_STORE_PORT = cvar.MYSQL_STORE_PORT
POSTGRESQL_STORE_USECONNECTIONPOOL = cvar.POSTGRESQL_STORE_USECONNECTIONPOOL
POSTGRESQL_STORE_DATABASE = cvar.POSTGRESQL_STORE_DATABASE
POSTGRESQL_STORE_USER = cvar.POSTGRESQL_STORE_USER
POSTGRESQL_STORE_PASSWORD = cvar.POSTGRESQL_STORE_PASSWORD
POSTGRESQL_STORE_HOST = cvar.POSTGRESQL_STORE_HOST
POSTGRESQL_STORE_PORT = cvar.POSTGRESQL_STORE_PORT
ODBC_STORE_USER = cvar.ODBC_STORE_USER
ODBC_STORE_PASSWORD = cvar.ODBC_STORE_PASSWORD
ODBC_STORE_CONNECTION_STRING = cvar.ODBC_STORE_CONNECTION_STRING
FILE_LOG_PATH = cvar.FILE_LOG_PATH
FILE_LOG_BACKUP_PATH = cvar.FILE_LOG_BACKUP_PATH
SCREEN_LOG_SHOW_INCOMING = cvar.SCREEN_LOG_SHOW_INCOMING
SCREEN_LOG_SHOW_OUTGOING = cvar.SCREEN_LOG_SHOW_OUTGOING
SCREEN_LOG_SHOW_EVENTS = cvar.SCREEN_LOG_SHOW_EVENTS
MYSQL_LOG_USECONNECTIONPOOL = cvar.MYSQL_LOG_USECONNECTIONPOOL
MYSQL_LOG_DATABASE = cvar.MYSQL_LOG_DATABASE
MYSQL_LOG_USER = cvar.MYSQL_LOG_USER
MYSQL_LOG_PASSWORD = cvar.MYSQL_LOG_PASSWORD
MYSQL_LOG_HOST = cvar.MYSQL_LOG_HOST
MYSQL_LOG_PORT = cvar.MYSQL_LOG_PORT
MYSQL_LOG_INCOMING_TABLE = cvar.MYSQL_LOG_INCOMING_TABLE
MYSQL_LOG_OUTGOING_TABLE = cvar.MYSQL_LOG_OUTGOING_TABLE
MYSQL_LOG_EVENT_TABLE = cvar.MYSQL_LOG_EVENT_TABLE
POSTGRESQL_LOG_USECONNECTIONPOOL = cvar.POSTGRESQL_LOG_USECONNECTIONPOOL
POSTGRESQL_LOG_DATABASE = cvar.POSTGRESQL_LOG_DATABASE
POSTGRESQL_LOG_USER = cvar.POSTGRESQL_LOG_USER
POSTGRESQL_LOG_PASSWORD = cvar.POSTGRESQL_LOG_PASSWORD
POSTGRESQL_LOG_HOST = cvar.POSTGRESQL_LOG_HOST
POSTGRESQL_LOG_PORT = cvar.POSTGRESQL_LOG_PORT
POSTGRESQL_LOG_INCOMING_TABLE = cvar.POSTGRESQL_LOG_INCOMING_TABLE
POSTGRESQL_LOG_OUTGOING_TABLE = cvar.POSTGRESQL_LOG_OUTGOING_TABLE
POSTGRESQL_LOG_EVENT_TABLE = cvar.POSTGRESQL_LOG_EVENT_TABLE
ODBC_LOG_USER = cvar.ODBC_LOG_USER
ODBC_LOG_PASSWORD = cvar.ODBC_LOG_PASSWORD
ODBC_LOG_CONNECTION_STRING = cvar.ODBC_LOG_CONNECTION_STRING
ODBC_LOG_INCOMING_TABLE = cvar.ODBC_LOG_INCOMING_TABLE
ODBC_LOG_OUTGOING_TABLE = cvar.ODBC_LOG_OUTGOING_TABLE
ODBC_LOG_EVENT_TABLE = cvar.ODBC_LOG_EVENT_TABLE
RESET_ON_LOGON = cvar.RESET_ON_LOGON
RESET_ON_LOGOUT = cvar.RESET_ON_LOGOUT
RESET_ON_DISCONNECT = cvar.RESET_ON_DISCONNECT
REFRESH_ON_LOGON = cvar.REFRESH_ON_LOGON
MILLISECONDS_IN_TIMESTAMP = cvar.MILLISECONDS_IN_TIMESTAMP
TIMESTAMP_PRECISION = cvar.TIMESTAMP_PRECISION
HTTP_ACCEPT_PORT = cvar.HTTP_ACCEPT_PORT
PERSIST_MESSAGES = cvar.PERSIST_MESSAGES
SERVER_CERT_FILE = cvar.SERVER_CERT_FILE
SERVER_CERT_KEY_FILE = cvar.SERVER_CERT_KEY_FILE
CLIENT_CERT_FILE = cvar.CLIENT_CERT_FILE
CLIENT_CERT_KEY_FILE = cvar.CLIENT_CERT_KEY_FILE
CERT_AUTH_FILE = cvar.CERT_AUTH_FILE
CERT_AUTH_DIR = cvar.CERT_AUTH_DIR
CRL_FILE = cvar.CRL_FILE
CRL_DIR = cvar.CRL_DIR
VERIFY_LEVEL = cvar.VERIFY_LEVEL
SSL_PROTOCOL = cvar.SSL_PROTOCOL
SSL_CIPHER_SUITE = cvar.SSL_CIPHER_SUITE


def __rshift__(*args):
    return _quickfix.__rshift__(*args)

def __lshift__(*args):
    return _quickfix.__lshift__(*args)
class Session(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3, arg4, arg5, arg6, heartBtInt, pLogFactory):
        _quickfix.Session_swiginit(self, _quickfix.new_Session(arg2, arg3, arg4, arg5, arg6, heartBtInt, pLogFactory))
    __swig_destroy__ = _quickfix.delete_Session

    def logon(self):
        return _quickfix.Session_logon(self)

    def logout(self, *args):
        return _quickfix.Session_logout(self, *args)

    def isEnabled(self):
        return _quickfix.Session_isEnabled(self)

    def sentLogon(self):
        return _quickfix.Session_sentLogon(self)

    def sentLogout(self):
        return _quickfix.Session_sentLogout(self)

    def receivedLogon(self):
        return _quickfix.Session_receivedLogon(self)

    def isLoggedOn(self):
        return _quickfix.Session_isLoggedOn(self)

    def reset(self):
        return _quickfix.Session_reset(self)

    def refresh(self):
        return _quickfix.Session_refresh(self)

    def setNextSenderMsgSeqNum(self, num):
        return _quickfix.Session_setNextSenderMsgSeqNum(self, num)

    def setNextTargetMsgSeqNum(self, num):
        return _quickfix.Session_setNextTargetMsgSeqNum(self, num)

    def getSessionID(self):
        return _quickfix.Session_getSessionID(self)

    def setDataDictionaryProvider(self, dataDictionaryProvider):
        return _quickfix.Session_setDataDictionaryProvider(self, dataDictionaryProvider)

    def getDataDictionaryProvider(self):
        return _quickfix.Session_getDataDictionaryProvider(self)

    @staticmethod
    def sendToTarget(*args):
        return _quickfix.Session_sendToTarget(*args)

    @staticmethod
    def getSessions():
        return _quickfix.Session_getSessions()

    @staticmethod
    def doesSessionExist(arg1):
        return _quickfix.Session_doesSessionExist(arg1)

    @staticmethod
    def lookupSession(*args):
        return _quickfix.Session_lookupSession(*args)

    @staticmethod
    def isSessionRegistered(arg1):
        return _quickfix.Session_isSessionRegistered(arg1)

    @staticmethod
    def registerSession(arg1):
        return _quickfix.Session_registerSession(arg1)

    @staticmethod
    def unregisterSession(arg1):
        return _quickfix.Session_unregisterSession(arg1)

    @staticmethod
    def numSessions():
        return _quickfix.Session_numSessions()

    def isSessionTime(self, time):
        return _quickfix.Session_isSessionTime(self, time)

    def isLogonTime(self, time):
        return _quickfix.Session_isLogonTime(self, time)

    def isInitiator(self):
        return _quickfix.Session_isInitiator(self)

    def isAcceptor(self):
        return _quickfix.Session_isAcceptor(self)

    def getLogonTime(self):
        return _quickfix.Session_getLogonTime(self)

    def setLogonTime(self, value):
        return _quickfix.Session_setLogonTime(self, value)

    def getSenderDefaultApplVerID(self):
        return _quickfix.Session_getSenderDefaultApplVerID(self)

    def setSenderDefaultApplVerID(self, senderDefaultApplVerID):
        return _quickfix.Session_setSenderDefaultApplVerID(self, senderDefaultApplVerID)

    def getTargetDefaultApplVerID(self):
        return _quickfix.Session_getTargetDefaultApplVerID(self)

    def setTargetDefaultApplVerID(self, targetDefaultApplVerID):
        return _quickfix.Session_setTargetDefaultApplVerID(self, targetDefaultApplVerID)

    def getSendRedundantResendRequests(self):
        return _quickfix.Session_getSendRedundantResendRequests(self)

    def setSendRedundantResendRequests(self, value):
        return _quickfix.Session_setSendRedundantResendRequests(self, value)

    def getCheckCompId(self):
        return _quickfix.Session_getCheckCompId(self)

    def setCheckCompId(self, value):
        return _quickfix.Session_setCheckCompId(self, value)

    def getCheckLatency(self):
        return _quickfix.Session_getCheckLatency(self)

    def setCheckLatency(self, value):
        return _quickfix.Session_setCheckLatency(self, value)

    def getMaxLatency(self):
        return _quickfix.Session_getMaxLatency(self)

    def setMaxLatency(self, value):
        return _quickfix.Session_setMaxLatency(self, value)

    def getLogonTimeout(self):
        return _quickfix.Session_getLogonTimeout(self)

    def setLogonTimeout(self, value):
        return _quickfix.Session_setLogonTimeout(self, value)

    def getLogoutTimeout(self):
        return _quickfix.Session_getLogoutTimeout(self)

    def setLogoutTimeout(self, value):
        return _quickfix.Session_setLogoutTimeout(self, value)

    def getResetOnLogon(self):
        return _quickfix.Session_getResetOnLogon(self)

    def setResetOnLogon(self, value):
        return _quickfix.Session_setResetOnLogon(self, value)

    def getResetOnLogout(self):
        return _quickfix.Session_getResetOnLogout(self)

    def setResetOnLogout(self, value):
        return _quickfix.Session_setResetOnLogout(self, value)

    def getResetOnDisconnect(self):
        return _quickfix.Session_getResetOnDisconnect(self)

    def setResetOnDisconnect(self, value):
        return _quickfix.Session_setResetOnDisconnect(self, value)

    def getRefreshOnLogon(self):
        return _quickfix.Session_getRefreshOnLogon(self)

    def setRefreshOnLogon(self, value):
        return _quickfix.Session_setRefreshOnLogon(self, value)

    def getMillisecondsInTimeStamp(self):
        return _quickfix.Session_getMillisecondsInTimeStamp(self)

    def setMillisecondsInTimeStamp(self, value):
        return _quickfix.Session_setMillisecondsInTimeStamp(self, value)

    def getTimestampPrecision(self):
        return _quickfix.Session_getTimestampPrecision(self)

    def setTimestampPrecision(self, precision):
        return _quickfix.Session_setTimestampPrecision(self, precision)

    def getSupportedTimestampPrecision(self):
        return _quickfix.Session_getSupportedTimestampPrecision(self)

    @staticmethod
    def supportsSubSecondTimestamps(beginString):
        return _quickfix.Session_supportsSubSecondTimestamps(beginString)

    def getPersistMessages(self):
        return _quickfix.Session_getPersistMessages(self)

    def setPersistMessages(self, value):
        return _quickfix.Session_setPersistMessages(self, value)

    def getValidateLengthAndChecksum(self):
        return _quickfix.Session_getValidateLengthAndChecksum(self)

    def setValidateLengthAndChecksum(self, value):
        return _quickfix.Session_setValidateLengthAndChecksum(self, value)

    def setResponder(self, pR):
        return _quickfix.Session_setResponder(self, pR)

    def send(self, arg2):
        return _quickfix.Session_send(self, arg2)

    def next(self, *args):
        return _quickfix.Session_next(self, *args)

    def disconnect(self):
        return _quickfix.Session_disconnect(self)

    def getExpectedSenderNum(self):
        return _quickfix.Session_getExpectedSenderNum(self)

    def getExpectedTargetNum(self):
        return _quickfix.Session_getExpectedTargetNum(self)

    def getLog(self):
        return _quickfix.Session_getLog(self)

    def getStore(self):
        return _quickfix.Session_getStore(self)

# Register Session in _quickfix:
_quickfix.Session_swigregister(Session)

def Session_sendToTarget(*args):
    return _quickfix.Session_sendToTarget(*args)

def Session_getSessions():
    return _quickfix.Session_getSessions()

def Session_doesSessionExist(arg1):
    return _quickfix.Session_doesSessionExist(arg1)

def Session_lookupSession(*args):
    return _quickfix.Session_lookupSession(*args)

def Session_isSessionRegistered(arg1):
    return _quickfix.Session_isSessionRegistered(arg1)

def Session_registerSession(arg1):
    return _quickfix.Session_registerSession(arg1)

def Session_unregisterSession(arg1):
    return _quickfix.Session_unregisterSession(arg1)

def Session_numSessions():
    return _quickfix.Session_numSessions()

def Session_supportsSubSecondTimestamps(beginString):
    return _quickfix.Session_supportsSubSecondTimestamps(beginString)

class LogFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_LogFactory

    def create(self, *args):
        return _quickfix.LogFactory_create(self, *args)

    def destroy(self, arg2):
        return _quickfix.LogFactory_destroy(self, arg2)

# Register LogFactory in _quickfix:
_quickfix.LogFactory_swigregister(LogFactory)

class ScreenLogFactory(LogFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ScreenLogFactory_swiginit(self, _quickfix.new_ScreenLogFactory(*args))

    def create(self, *args):
        return _quickfix.ScreenLogFactory_create(self, *args)

    def destroy(self, log):
        return _quickfix.ScreenLogFactory_destroy(self, log)
    __swig_destroy__ = _quickfix.delete_ScreenLogFactory

# Register ScreenLogFactory in _quickfix:
_quickfix.ScreenLogFactory_swigregister(ScreenLogFactory)

class Log(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Log

    def clear(self):
        return _quickfix.Log_clear(self)

    def backup(self):
        return _quickfix.Log_backup(self)

    def onIncoming(self, arg2):
        return _quickfix.Log_onIncoming(self, arg2)

    def onOutgoing(self, arg2):
        return _quickfix.Log_onOutgoing(self, arg2)

    def onEvent(self, arg2):
        return _quickfix.Log_onEvent(self, arg2)

# Register Log in _quickfix:
_quickfix.Log_swigregister(Log)

class NullLog(Log):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self):
        return _quickfix.NullLog_clear(self)

    def backup(self):
        return _quickfix.NullLog_backup(self)

    def onIncoming(self, arg2):
        return _quickfix.NullLog_onIncoming(self, arg2)

    def onOutgoing(self, arg2):
        return _quickfix.NullLog_onOutgoing(self, arg2)

    def onEvent(self, arg2):
        return _quickfix.NullLog_onEvent(self, arg2)

    def __init__(self):
        _quickfix.NullLog_swiginit(self, _quickfix.new_NullLog())
    __swig_destroy__ = _quickfix.delete_NullLog

# Register NullLog in _quickfix:
_quickfix.NullLog_swigregister(NullLog)

class ScreenLog(Log):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.ScreenLog_swiginit(self, _quickfix.new_ScreenLog(*args))

    def clear(self):
        return _quickfix.ScreenLog_clear(self)

    def backup(self):
        return _quickfix.ScreenLog_backup(self)

    def onIncoming(self, value):
        return _quickfix.ScreenLog_onIncoming(self, value)

    def onOutgoing(self, value):
        return _quickfix.ScreenLog_onOutgoing(self, value)

    def onEvent(self, value):
        return _quickfix.ScreenLog_onEvent(self, value)
    __swig_destroy__ = _quickfix.delete_ScreenLog

# Register ScreenLog in _quickfix:
_quickfix.ScreenLog_swigregister(ScreenLog)

class FileLogFactory(LogFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FileLogFactory_swiginit(self, _quickfix.new_FileLogFactory(*args))

    def create(self, *args):
        return _quickfix.FileLogFactory_create(self, *args)

    def destroy(self, log):
        return _quickfix.FileLogFactory_destroy(self, log)
    __swig_destroy__ = _quickfix.delete_FileLogFactory

# Register FileLogFactory in _quickfix:
_quickfix.FileLogFactory_swigregister(FileLogFactory)

class FileLog(Log):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FileLog_swiginit(self, _quickfix.new_FileLog(*args))
    __swig_destroy__ = _quickfix.delete_FileLog

    def clear(self):
        return _quickfix.FileLog_clear(self)

    def backup(self):
        return _quickfix.FileLog_backup(self)

    def onIncoming(self, value):
        return _quickfix.FileLog_onIncoming(self, value)

    def onOutgoing(self, value):
        return _quickfix.FileLog_onOutgoing(self, value)

    def onEvent(self, value):
        return _quickfix.FileLog_onEvent(self, value)

# Register FileLog in _quickfix:
_quickfix.FileLog_swigregister(FileLog)

class MessageStoreFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_MessageStoreFactory

    def create(self, arg2):
        return _quickfix.MessageStoreFactory_create(self, arg2)

    def destroy(self, arg2):
        return _quickfix.MessageStoreFactory_destroy(self, arg2)

# Register MessageStoreFactory in _quickfix:
_quickfix.MessageStoreFactory_swigregister(MessageStoreFactory)

class MemoryStoreFactory(MessageStoreFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def create(self, arg2):
        return _quickfix.MemoryStoreFactory_create(self, arg2)

    def destroy(self, arg2):
        return _quickfix.MemoryStoreFactory_destroy(self, arg2)

    def __init__(self):
        _quickfix.MemoryStoreFactory_swiginit(self, _quickfix.new_MemoryStoreFactory())
    __swig_destroy__ = _quickfix.delete_MemoryStoreFactory

# Register MemoryStoreFactory in _quickfix:
_quickfix.MemoryStoreFactory_swigregister(MemoryStoreFactory)

class MessageStore(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_MessageStore

    def set(self, arg2, arg3):
        return _quickfix.MessageStore_set(self, arg2, arg3)

    def get(self, arg2, arg3, arg4):
        return _quickfix.MessageStore_get(self, arg2, arg3, arg4)

    def getNextSenderMsgSeqNum(self):
        return _quickfix.MessageStore_getNextSenderMsgSeqNum(self)

    def getNextTargetMsgSeqNum(self):
        return _quickfix.MessageStore_getNextTargetMsgSeqNum(self)

    def setNextSenderMsgSeqNum(self, arg2):
        return _quickfix.MessageStore_setNextSenderMsgSeqNum(self, arg2)

    def setNextTargetMsgSeqNum(self, arg2):
        return _quickfix.MessageStore_setNextTargetMsgSeqNum(self, arg2)

    def incrNextSenderMsgSeqNum(self):
        return _quickfix.MessageStore_incrNextSenderMsgSeqNum(self)

    def incrNextTargetMsgSeqNum(self):
        return _quickfix.MessageStore_incrNextTargetMsgSeqNum(self)

    def getCreationTime(self):
        return _quickfix.MessageStore_getCreationTime(self)

    def reset(self):
        return _quickfix.MessageStore_reset(self)

    def refresh(self):
        return _quickfix.MessageStore_refresh(self)

# Register MessageStore in _quickfix:
_quickfix.MessageStore_swigregister(MessageStore)

class MemoryStore(MessageStore):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quickfix.MemoryStore_swiginit(self, _quickfix.new_MemoryStore())

    def set(self, arg2, arg3):
        return _quickfix.MemoryStore_set(self, arg2, arg3)

    def get(self, arg2, arg3, arg4):
        return _quickfix.MemoryStore_get(self, arg2, arg3, arg4)

    def getNextSenderMsgSeqNum(self):
        return _quickfix.MemoryStore_getNextSenderMsgSeqNum(self)

    def getNextTargetMsgSeqNum(self):
        return _quickfix.MemoryStore_getNextTargetMsgSeqNum(self)

    def setNextSenderMsgSeqNum(self, value):
        return _quickfix.MemoryStore_setNextSenderMsgSeqNum(self, value)

    def setNextTargetMsgSeqNum(self, value):
        return _quickfix.MemoryStore_setNextTargetMsgSeqNum(self, value)

    def incrNextSenderMsgSeqNum(self):
        return _quickfix.MemoryStore_incrNextSenderMsgSeqNum(self)

    def incrNextTargetMsgSeqNum(self):
        return _quickfix.MemoryStore_incrNextTargetMsgSeqNum(self)

    def setCreationTime(self, creationTime):
        return _quickfix.MemoryStore_setCreationTime(self, creationTime)

    def getCreationTime(self):
        return _quickfix.MemoryStore_getCreationTime(self)

    def reset(self):
        return _quickfix.MemoryStore_reset(self)

    def refresh(self):
        return _quickfix.MemoryStore_refresh(self)
    __swig_destroy__ = _quickfix.delete_MemoryStore

# Register MemoryStore in _quickfix:
_quickfix.MemoryStore_swigregister(MemoryStore)

class MessageStoreFactoryExceptionWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pFactory):
        _quickfix.MessageStoreFactoryExceptionWrapper_swiginit(self, _quickfix.new_MessageStoreFactoryExceptionWrapper(pFactory))

    def create(self, arg2, arg3, arg4):
        return _quickfix.MessageStoreFactoryExceptionWrapper_create(self, arg2, arg3, arg4)

    def destroy(self, arg2):
        return _quickfix.MessageStoreFactoryExceptionWrapper_destroy(self, arg2)
    __swig_destroy__ = _quickfix.delete_MessageStoreFactoryExceptionWrapper

# Register MessageStoreFactoryExceptionWrapper in _quickfix:
_quickfix.MessageStoreFactoryExceptionWrapper_swigregister(MessageStoreFactoryExceptionWrapper)

class MessageStoreExceptionWrapper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pStore):
        _quickfix.MessageStoreExceptionWrapper_swiginit(self, _quickfix.new_MessageStoreExceptionWrapper(pStore))
    __swig_destroy__ = _quickfix.delete_MessageStoreExceptionWrapper

    def set(self, arg2, arg3, arg4, arg5):
        return _quickfix.MessageStoreExceptionWrapper_set(self, arg2, arg3, arg4, arg5)

    def get(self, arg2, arg3, arg4, arg5, arg6):
        return _quickfix.MessageStoreExceptionWrapper_get(self, arg2, arg3, arg4, arg5, arg6)

    def getNextSenderMsgSeqNum(self, arg2, arg3):
        return _quickfix.MessageStoreExceptionWrapper_getNextSenderMsgSeqNum(self, arg2, arg3)

    def getNextTargetMsgSeqNum(self, arg2, arg3):
        return _quickfix.MessageStoreExceptionWrapper_getNextTargetMsgSeqNum(self, arg2, arg3)

    def setNextSenderMsgSeqNum(self, arg2, arg3, arg4):
        return _quickfix.MessageStoreExceptionWrapper_setNextSenderMsgSeqNum(self, arg2, arg3, arg4)

    def setNextTargetMsgSeqNum(self, arg2, arg3, arg4):
        return _quickfix.MessageStoreExceptionWrapper_setNextTargetMsgSeqNum(self, arg2, arg3, arg4)

    def incrNextSenderMsgSeqNum(self, arg2, arg3):
        return _quickfix.MessageStoreExceptionWrapper_incrNextSenderMsgSeqNum(self, arg2, arg3)

    def incrNextTargetMsgSeqNum(self, arg2, arg3):
        return _quickfix.MessageStoreExceptionWrapper_incrNextTargetMsgSeqNum(self, arg2, arg3)

    def getCreationTime(self, arg2, arg3):
        return _quickfix.MessageStoreExceptionWrapper_getCreationTime(self, arg2, arg3)

    def reset(self, arg2, arg3):
        return _quickfix.MessageStoreExceptionWrapper_reset(self, arg2, arg3)

    def refresh(self, arg2, arg3):
        return _quickfix.MessageStoreExceptionWrapper_refresh(self, arg2, arg3)

# Register MessageStoreExceptionWrapper in _quickfix:
_quickfix.MessageStoreExceptionWrapper_swigregister(MessageStoreExceptionWrapper)

class FileStoreFactory(MessageStoreFactory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.FileStoreFactory_swiginit(self, _quickfix.new_FileStoreFactory(*args))

    def create(self, arg2):
        return _quickfix.FileStoreFactory_create(self, arg2)

    def destroy(self, arg2):
        return _quickfix.FileStoreFactory_destroy(self, arg2)
    __swig_destroy__ = _quickfix.delete_FileStoreFactory

# Register FileStoreFactory in _quickfix:
_quickfix.FileStoreFactory_swigregister(FileStoreFactory)

class FileStore(MessageStore):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, s):
        _quickfix.FileStore_swiginit(self, _quickfix.new_FileStore(arg2, s))
    __swig_destroy__ = _quickfix.delete_FileStore

    def set(self, arg2, arg3):
        return _quickfix.FileStore_set(self, arg2, arg3)

    def get(self, arg2, arg3, arg4):
        return _quickfix.FileStore_get(self, arg2, arg3, arg4)

    def getNextSenderMsgSeqNum(self):
        return _quickfix.FileStore_getNextSenderMsgSeqNum(self)

    def getNextTargetMsgSeqNum(self):
        return _quickfix.FileStore_getNextTargetMsgSeqNum(self)

    def setNextSenderMsgSeqNum(self, value):
        return _quickfix.FileStore_setNextSenderMsgSeqNum(self, value)

    def setNextTargetMsgSeqNum(self, value):
        return _quickfix.FileStore_setNextTargetMsgSeqNum(self, value)

    def incrNextSenderMsgSeqNum(self):
        return _quickfix.FileStore_incrNextSenderMsgSeqNum(self)

    def incrNextTargetMsgSeqNum(self):
        return _quickfix.FileStore_incrNextTargetMsgSeqNum(self)

    def getCreationTime(self):
        return _quickfix.FileStore_getCreationTime(self)

    def reset(self):
        return _quickfix.FileStore_reset(self)

    def refresh(self):
        return _quickfix.FileStore_refresh(self)

# Register FileStore in _quickfix:
_quickfix.FileStore_swigregister(FileStore)

class Application(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Application

    def onCreate(self, arg0):
        return _quickfix.Application_onCreate(self, arg0)

    def onLogon(self, arg0):
        return _quickfix.Application_onLogon(self, arg0)

    def onLogout(self, arg0):
        return _quickfix.Application_onLogout(self, arg0)

    def toAdmin(self, arg0, arg1):
        return _quickfix.Application_toAdmin(self, arg0, arg1)

    def toApp(self, arg0, arg1):
        return _quickfix.Application_toApp(self, arg0, arg1)

    def fromAdmin(self, arg0, arg1):
        return _quickfix.Application_fromAdmin(self, arg0, arg1)

    def fromApp(self, arg0, arg1):
        return _quickfix.Application_fromApp(self, arg0, arg1)

    def __init__(self):
        if self.__class__ == Application:
            _self = None
        else:
            _self = self
        _quickfix.Application_swiginit(self, _quickfix.new_Application(_self, ))
    def __disown__(self):
        self.this.disown()
        _quickfix.disown_Application(self)
        return weakref.proxy(self)

# Register Application in _quickfix:
_quickfix.Application_swigregister(Application)

class SynchronizedApplication(Application):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, app):
        _quickfix.SynchronizedApplication_swiginit(self, _quickfix.new_SynchronizedApplication(app))

    def onCreate(self, sessionID):
        return _quickfix.SynchronizedApplication_onCreate(self, sessionID)

    def onLogon(self, sessionID):
        return _quickfix.SynchronizedApplication_onLogon(self, sessionID)

    def onLogout(self, sessionID):
        return _quickfix.SynchronizedApplication_onLogout(self, sessionID)

    def toAdmin(self, message, sessionID):
        return _quickfix.SynchronizedApplication_toAdmin(self, message, sessionID)

    def toApp(self, message, sessionID):
        return _quickfix.SynchronizedApplication_toApp(self, message, sessionID)

    def fromAdmin(self, message, sessionID):
        return _quickfix.SynchronizedApplication_fromAdmin(self, message, sessionID)

    def fromApp(self, message, sessionID):
        return _quickfix.SynchronizedApplication_fromApp(self, message, sessionID)
    m_mutex = property(_quickfix.SynchronizedApplication_m_mutex_get, _quickfix.SynchronizedApplication_m_mutex_set)

    def app(self):
        return _quickfix.SynchronizedApplication_app(self)
    m_app = property(_quickfix.SynchronizedApplication_m_app_get, _quickfix.SynchronizedApplication_m_app_set)
    __swig_destroy__ = _quickfix.delete_SynchronizedApplication

# Register SynchronizedApplication in _quickfix:
_quickfix.SynchronizedApplication_swigregister(SynchronizedApplication)

class NullApplication(Application):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _quickfix.NullApplication_swiginit(self, _quickfix.new_NullApplication())
    __swig_destroy__ = _quickfix.delete_NullApplication

# Register NullApplication in _quickfix:
_quickfix.NullApplication_swigregister(NullApplication)

class Initiator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Initiator

    def start(self):
        return _quickfix.Initiator_start(self)

    def block(self):
        return _quickfix.Initiator_block(self)

    def poll(self):
        return _quickfix.Initiator_poll(self)

    def stop(self, force=False):
        return _quickfix.Initiator_stop(self, force)

    def isLoggedOn(self):
        return _quickfix.Initiator_isLoggedOn(self)

    def getSessions(self):
        return _quickfix.Initiator_getSessions(self)

    def getSession(self, *args):
        return _quickfix.Initiator_getSession(self, *args)

    def getSessionSettings(self, sessionID):
        return _quickfix.Initiator_getSessionSettings(self, sessionID)

    def has(self, id):
        return _quickfix.Initiator_has(self, id)

    def isStopped(self):
        return _quickfix.Initiator_isStopped(self)

    def getApplication(self):
        return _quickfix.Initiator_getApplication(self)

    def getMessageStoreFactory(self):
        return _quickfix.Initiator_getMessageStoreFactory(self)

    def getLog(self):
        return _quickfix.Initiator_getLog(self)

# Register Initiator in _quickfix:
_quickfix.Initiator_swigregister(Initiator)

class SocketInitiatorBase(Initiator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SocketInitiatorBase_swiginit(self, _quickfix.new_SocketInitiatorBase(*args))
    __swig_destroy__ = _quickfix.delete_SocketInitiatorBase

# Register SocketInitiatorBase in _quickfix:
_quickfix.SocketInitiatorBase_swigregister(SocketInitiatorBase)

class Acceptor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _quickfix.delete_Acceptor

    def getLog(self):
        return _quickfix.Acceptor_getLog(self)

    def start(self):
        return _quickfix.Acceptor_start(self)

    def block(self):
        return _quickfix.Acceptor_block(self)

    def poll(self):
        return _quickfix.Acceptor_poll(self)

    def stop(self, force=False):
        return _quickfix.Acceptor_stop(self, force)

    def isLoggedOn(self):
        return _quickfix.Acceptor_isLoggedOn(self)

    def getSessions(self):
        return _quickfix.Acceptor_getSessions(self)

    def getSession(self, *args):
        return _quickfix.Acceptor_getSession(self, *args)

    def getSessionSettings(self, sessionID):
        return _quickfix.Acceptor_getSessionSettings(self, sessionID)

    def has(self, id):
        return _quickfix.Acceptor_has(self, id)

    def isStopped(self):
        return _quickfix.Acceptor_isStopped(self)

    def getApplication(self):
        return _quickfix.Acceptor_getApplication(self)

    def getMessageStoreFactory(self):
        return _quickfix.Acceptor_getMessageStoreFactory(self)

# Register Acceptor in _quickfix:
_quickfix.Acceptor_swigregister(Acceptor)

class SocketAcceptorBase(Acceptor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SocketAcceptorBase_swiginit(self, _quickfix.new_SocketAcceptorBase(*args))
    __swig_destroy__ = _quickfix.delete_SocketAcceptorBase

    def sessionToPort(self):
        return _quickfix.SocketAcceptorBase_sessionToPort(self)

# Register SocketAcceptorBase in _quickfix:
_quickfix.SocketAcceptorBase_swigregister(SocketAcceptorBase)

class DataDictionary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.DataDictionary_swiginit(self, _quickfix.new_DataDictionary(*args))
    __swig_destroy__ = _quickfix.delete_DataDictionary

    def readFromURL(self, url):
        return _quickfix.DataDictionary_readFromURL(self, url)

    def readFromDocument(self, pDoc):
        return _quickfix.DataDictionary_readFromDocument(self, pDoc)

    def readFromStream(self, stream):
        return _quickfix.DataDictionary_readFromStream(self, stream)

    def getOrderedFields(self):
        return _quickfix.DataDictionary_getOrderedFields(self)

    def getHeaderOrderedFields(self):
        return _quickfix.DataDictionary_getHeaderOrderedFields(self)

    def getTrailerOrderedFields(self):
        return _quickfix.DataDictionary_getTrailerOrderedFields(self)

    def getMessageOrderedFields(self, msgType):
        return _quickfix.DataDictionary_getMessageOrderedFields(self, msgType)

    def setVersion(self, beginString):
        return _quickfix.DataDictionary_setVersion(self, beginString)

    def getVersion(self):
        return _quickfix.DataDictionary_getVersion(self)

    def addField(self, field):
        return _quickfix.DataDictionary_addField(self, field)

    def addFieldName(self, field, name):
        return _quickfix.DataDictionary_addFieldName(self, field, name)

    def getFieldName(self, field, name):
        return _quickfix.DataDictionary_getFieldName(self, field, name)

    def getFieldTag(self, name, field):
        return _quickfix.DataDictionary_getFieldTag(self, name, field)

    def addValueName(self, field, value, name):
        return _quickfix.DataDictionary_addValueName(self, field, value, name)

    def getValueName(self, field, value, name):
        return _quickfix.DataDictionary_getValueName(self, field, value, name)

    def getNameValue(self, field, name, value):
        return _quickfix.DataDictionary_getNameValue(self, field, name, value)

    def isField(self, field):
        return _quickfix.DataDictionary_isField(self, field)

    def addMsgType(self, msgType):
        return _quickfix.DataDictionary_addMsgType(self, msgType)

    def isMsgType(self, msgType):
        return _quickfix.DataDictionary_isMsgType(self, msgType)

    def addMsgField(self, msgType, field):
        return _quickfix.DataDictionary_addMsgField(self, msgType, field)

    def isMsgField(self, msgType, field):
        return _quickfix.DataDictionary_isMsgField(self, msgType, field)

    def addHeaderField(self, field, required):
        return _quickfix.DataDictionary_addHeaderField(self, field, required)

    def isHeaderField(self, field):
        return _quickfix.DataDictionary_isHeaderField(self, field)

    def addTrailerField(self, field, required):
        return _quickfix.DataDictionary_addTrailerField(self, field, required)

    def isTrailerField(self, field):
        return _quickfix.DataDictionary_isTrailerField(self, field)

    def addFieldType(self, field, type):
        return _quickfix.DataDictionary_addFieldType(self, field, type)

    def getFieldType(self, field, type):
        return _quickfix.DataDictionary_getFieldType(self, field, type)

    def addRequiredField(self, msgType, field):
        return _quickfix.DataDictionary_addRequiredField(self, msgType, field)

    def isRequiredField(self, msgType, field):
        return _quickfix.DataDictionary_isRequiredField(self, msgType, field)

    def addFieldValue(self, field, value):
        return _quickfix.DataDictionary_addFieldValue(self, field, value)

    def hasFieldValue(self, field):
        return _quickfix.DataDictionary_hasFieldValue(self, field)

    def isFieldValue(self, field, value):
        return _quickfix.DataDictionary_isFieldValue(self, field, value)

    def addGroup(self, msg, field, delim, dataDictionary):
        return _quickfix.DataDictionary_addGroup(self, msg, field, delim, dataDictionary)

    def isGroup(self, msg, field):
        return _quickfix.DataDictionary_isGroup(self, msg, field)

    def getGroup(self, msg, field, delim, pDataDictionary):
        return _quickfix.DataDictionary_getGroup(self, msg, field, delim, pDataDictionary)

    def isDataField(self, field):
        return _quickfix.DataDictionary_isDataField(self, field)

    def isMultipleValueField(self, field):
        return _quickfix.DataDictionary_isMultipleValueField(self, field)

    def checkFieldsOutOfOrder(self, value):
        return _quickfix.DataDictionary_checkFieldsOutOfOrder(self, value)

    def checkFieldsHaveValues(self, value):
        return _quickfix.DataDictionary_checkFieldsHaveValues(self, value)

    def checkUserDefinedFields(self, value):
        return _quickfix.DataDictionary_checkUserDefinedFields(self, value)

    def allowUnknownMsgFields(self, value):
        return _quickfix.DataDictionary_allowUnknownMsgFields(self, value)

    def preserveMessageFieldsOrder(self, value):
        return _quickfix.DataDictionary_preserveMessageFieldsOrder(self, value)

    def isMessageFieldsOrderPreserved(self):
        return _quickfix.DataDictionary_isMessageFieldsOrderPreserved(self)

    def validate(self, *args):
        return _quickfix.DataDictionary_validate(self, *args)

# Register DataDictionary in _quickfix:
_quickfix.DataDictionary_swigregister(DataDictionary)

class SSLSocketAcceptorBase(Acceptor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SSLSocketAcceptorBase_swiginit(self, _quickfix.new_SSLSocketAcceptorBase(*args))
    __swig_destroy__ = _quickfix.delete_SSLSocketAcceptorBase

    def setPassword(self, pwd):
        return _quickfix.SSLSocketAcceptorBase_setPassword(self, pwd)

    def passwordHandleCallback(self, buf, bufsize, verify):
        return _quickfix.SSLSocketAcceptorBase_passwordHandleCallback(self, buf, bufsize, verify)

    @staticmethod
    def passPhraseHandleCB(buf, bufsize, verify, instance):
        return _quickfix.SSLSocketAcceptorBase_passPhraseHandleCB(buf, bufsize, verify, instance)

# Register SSLSocketAcceptorBase in _quickfix:
_quickfix.SSLSocketAcceptorBase_swigregister(SSLSocketAcceptorBase)

def SSLSocketAcceptorBase_passPhraseHandleCB(buf, bufsize, verify, instance):
    return _quickfix.SSLSocketAcceptorBase_passPhraseHandleCB(buf, bufsize, verify, instance)

SSL_HANDSHAKE_FAILED = _quickfix.SSL_HANDSHAKE_FAILED
SSL_HANDSHAKE_SUCCEDED = _quickfix.SSL_HANDSHAKE_SUCCEDED
SSL_HANDSHAKE_IN_PROGRESS = _quickfix.SSL_HANDSHAKE_IN_PROGRESS
class SSLSocketInitiatorBase(Initiator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _quickfix.SSLSocketInitiatorBase_swiginit(self, _quickfix.new_SSLSocketInitiatorBase(*args))
    __swig_destroy__ = _quickfix.delete_SSLSocketInitiatorBase

    def setPassword(self, pwd):
        return _quickfix.SSLSocketInitiatorBase_setPassword(self, pwd)

    def setCertAndKey(self, cert, key):
        return _quickfix.SSLSocketInitiatorBase_setCertAndKey(self, cert, key)

    def passwordHandleCallback(self, buf, bufsize, verify):
        return _quickfix.SSLSocketInitiatorBase_passwordHandleCallback(self, buf, bufsize, verify)

    @staticmethod
    def passwordHandleCB(buf, bufsize, verify, instance):
        return _quickfix.SSLSocketInitiatorBase_passwordHandleCB(buf, bufsize, verify, instance)

# Register SSLSocketInitiatorBase in _quickfix:
_quickfix.SSLSocketInitiatorBase_swigregister(SSLSocketInitiatorBase)

def SSLSocketInitiatorBase_passwordHandleCB(buf, bufsize, verify, instance):
    return _quickfix.SSLSocketInitiatorBase_passwordHandleCB(buf, bufsize, verify, instance)


try:
  import thread
except ImportError:
  import _thread as thread

def _quickfix_start_thread(i_or_a):
  i_or_a.block()


class SocketInitiator(SocketInitiatorBase):
  application = 0
  storeFactory = 0
  setting = 0
  logFactory = 0

  def __init__(self, application, storeFactory, settings, logFactory=None):
    if logFactory == None:
      SocketInitiatorBase.__init__(self, application, storeFactory, settings)
    else:
      SocketInitiatorBase.__init__(self, application, storeFactory, settings, logFactory)

    self.application = application
    self.storeFactory = storeFactory
    self.settings = settings
    self.logFactory = logFactory

class SocketAcceptor(SocketAcceptorBase):
  application = 0
  storeFactory = 0
  setting = 0
  logFactory = 0

  def __init__(self, application, storeFactory, settings, logFactory=None):
    if logFactory == None:
      SocketAcceptorBase.__init__(self, application, storeFactory, settings)
    else:
      SocketAcceptorBase.__init__(self, application, storeFactory, settings, logFactory)

    self.application = application
    self.storeFactory = storeFactory
    self.settings = settings
    self.logFactory = logFactory

#if (HAVE_SSL > 0)
class SSLSocketInitiator(SSLSocketInitiatorBase):
  application = 0
  storeFactory = 0
  setting = 0
  logFactory = 0

  def __init__(self, application, storeFactory, settings, logFactory=None):
    if logFactory == None:
      SSLSocketInitiatorBase.__init__(self, application, storeFactory, settings)
    else:
      SSLSocketInitiatorBase.__init__(self, application, storeFactory, settings, logFactory)

    self.application = application
    self.storeFactory = storeFactory
    self.settings = settings
    self.logFactory = logFactory

class SSLSocketAcceptor(SSLSocketAcceptorBase):
  application = 0
  storeFactory = 0
  setting = 0
  logFactory = 0

  def __init__(self, application, storeFactory, settings, logFactory=None):
    if logFactory == None:
      SSLSocketAcceptorBase.__init__(self, application, storeFactory, settings)
    else:
      SSLSocketAcceptorBase.__init__(self, application, storeFactory, settings, logFactory)

    self.application = application
    self.storeFactory = storeFactory
    self.settings = settings
    self.logFactory = logFactory
#endif



import quickfix

class BeginSeqNo(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 7)
		else:
			quickfix.IntField.__init__(self, 7, data)

class BeginString(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 8)
		else:
			quickfix.StringField.__init__(self, 8, data)

class BodyLength(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 9)
		else:
			quickfix.IntField.__init__(self, 9, data)

class CheckSum(quickfix.CheckSumField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CheckSumField.__init__(self, 10)
		else:
			quickfix.CheckSumField.__init__(self, 10, data)

class EndSeqNo(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 16)
		else:
			quickfix.IntField.__init__(self, 16, data)

class MsgSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 34)
		else:
			quickfix.IntField.__init__(self, 34, data)

class MsgType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 35)
		else:
			quickfix.StringField.__init__(self, 35, data)

class NewSeqNo(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 36)
		else:
			quickfix.IntField.__init__(self, 36, data)

class PossDupFlag(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 43)
		else:
			quickfix.BoolField.__init__(self, 43, data)

class RefSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 45)
		else:
			quickfix.IntField.__init__(self, 45, data)

class SenderCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 49)
		else:
			quickfix.StringField.__init__(self, 49, data)

class SenderSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 50)
		else:
			quickfix.StringField.__init__(self, 50, data)

class SendingTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 52)
		else:
			quickfix.UtcTimeStampField.__init__(self, 52, data)

class TargetCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 56)
		else:
			quickfix.StringField.__init__(self, 56, data)

class TargetSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 57)
		else:
			quickfix.StringField.__init__(self, 57, data)

class Text(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 58)
		else:
			quickfix.StringField.__init__(self, 58, data)

class Signature(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 89)
		else:
			quickfix.StringField.__init__(self, 89, data)

class SecureDataLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 90)
		else:
			quickfix.IntField.__init__(self, 90, data)

class SecureData(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 91)
		else:
			quickfix.StringField.__init__(self, 91, data)

class SignatureLength(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 93)
		else:
			quickfix.IntField.__init__(self, 93, data)

class RawDataLength(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 95)
		else:
			quickfix.IntField.__init__(self, 95, data)

class RawData(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 96)
		else:
			quickfix.StringField.__init__(self, 96, data)

class PossResend(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 97)
		else:
			quickfix.BoolField.__init__(self, 97, data)

class EncryptMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 98)
		else:
			quickfix.IntField.__init__(self, 98, data)

class HeartBtInt(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 108)
		else:
			quickfix.IntField.__init__(self, 108, data)

class TestReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 112)
		else:
			quickfix.StringField.__init__(self, 112, data)

class OnBehalfOfCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 115)
		else:
			quickfix.StringField.__init__(self, 115, data)

class OnBehalfOfSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 116)
		else:
			quickfix.StringField.__init__(self, 116, data)

class OrigSendingTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 122)
		else:
			quickfix.UtcTimeStampField.__init__(self, 122, data)

class GapFillFlag(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 123)
		else:
			quickfix.BoolField.__init__(self, 123, data)

class DeliverToCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 128)
		else:
			quickfix.StringField.__init__(self, 128, data)

class DeliverToSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 129)
		else:
			quickfix.StringField.__init__(self, 129, data)

class ResetSeqNumFlag(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 141)
		else:
			quickfix.BoolField.__init__(self, 141, data)

class SenderLocationID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 142)
		else:
			quickfix.StringField.__init__(self, 142, data)

class TargetLocationID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 143)
		else:
			quickfix.StringField.__init__(self, 143, data)

class OnBehalfOfLocationID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 144)
		else:
			quickfix.StringField.__init__(self, 144, data)

class DeliverToLocationID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 145)
		else:
			quickfix.StringField.__init__(self, 145, data)

class XmlDataLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 212)
		else:
			quickfix.IntField.__init__(self, 212, data)

class XmlData(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 213)
		else:
			quickfix.StringField.__init__(self, 213, data)

class MessageEncoding(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 347)
		else:
			quickfix.StringField.__init__(self, 347, data)

class EncodedTextLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 354)
		else:
			quickfix.IntField.__init__(self, 354, data)

class EncodedText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 355)
		else:
			quickfix.StringField.__init__(self, 355, data)

class LastMsgSeqNumProcessed(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 369)
		else:
			quickfix.IntField.__init__(self, 369, data)

class RefTagID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 371)
		else:
			quickfix.IntField.__init__(self, 371, data)

class RefMsgType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 372)
		else:
			quickfix.StringField.__init__(self, 372, data)

class SessionRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 373)
		else:
			quickfix.IntField.__init__(self, 373, data)

class MaxMessageSize(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 383)
		else:
			quickfix.IntField.__init__(self, 383, data)

class NoMsgTypes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 384)
		else:
			quickfix.IntField.__init__(self, 384, data)

class MsgDirection(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 385)
		else:
			quickfix.CharField.__init__(self, 385, data)

class TestMessageIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 464)
		else:
			quickfix.BoolField.__init__(self, 464, data)

class Username(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 553)
		else:
			quickfix.StringField.__init__(self, 553, data)

class Password(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 554)
		else:
			quickfix.StringField.__init__(self, 554, data)

class NoHops(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 627)
		else:
			quickfix.IntField.__init__(self, 627, data)

class HopCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 628)
		else:
			quickfix.StringField.__init__(self, 628, data)

class HopSendingTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 629)
		else:
			quickfix.UtcTimeStampField.__init__(self, 629, data)

class HopRefID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 630)
		else:
			quickfix.IntField.__init__(self, 630, data)

class NextExpectedMsgSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 789)
		else:
			quickfix.IntField.__init__(self, 789, data)

class ApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1128)
		else:
			quickfix.StringField.__init__(self, 1128, data)

class CstmApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1129)
		else:
			quickfix.StringField.__init__(self, 1129, data)

class RefApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1130)
		else:
			quickfix.StringField.__init__(self, 1130, data)

class RefCstmApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1131)
		else:
			quickfix.StringField.__init__(self, 1131, data)

class DefaultApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1137)
		else:
			quickfix.StringField.__init__(self, 1137, data)

class Account(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1)
		else:
			quickfix.StringField.__init__(self, 1, data)

class AdvId(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 2)
		else:
			quickfix.StringField.__init__(self, 2, data)

class AdvRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 3)
		else:
			quickfix.StringField.__init__(self, 3, data)

class AdvSide(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 4)
		else:
			quickfix.CharField.__init__(self, 4, data)

class AdvTransType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 5)
		else:
			quickfix.StringField.__init__(self, 5, data)

class AvgPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 6)
		else:
			quickfix.DoubleField.__init__(self, 6, data)

class ClOrdID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 11)
		else:
			quickfix.StringField.__init__(self, 11, data)

class Commission(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 12)
		else:
			quickfix.DoubleField.__init__(self, 12, data)

class CommType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 13)
		else:
			quickfix.CharField.__init__(self, 13, data)

class CumQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 14)
		else:
			quickfix.DoubleField.__init__(self, 14, data)

class Currency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 15)
		else:
			quickfix.StringField.__init__(self, 15, data)

class ExecID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 17)
		else:
			quickfix.StringField.__init__(self, 17, data)

class ExecInst(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 18)
		else:
			quickfix.StringField.__init__(self, 18, data)

class ExecRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 19)
		else:
			quickfix.StringField.__init__(self, 19, data)

class ExecTransType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 20)
		else:
			quickfix.CharField.__init__(self, 20, data)

class HandlInst(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 21)
		else:
			quickfix.CharField.__init__(self, 21, data)

class IDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 22)
		else:
			quickfix.StringField.__init__(self, 22, data)

class IOIid(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 23)
		else:
			quickfix.StringField.__init__(self, 23, data)

class IOIOthSvc(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 24)
		else:
			quickfix.CharField.__init__(self, 24, data)

class IOIQltyInd(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 25)
		else:
			quickfix.CharField.__init__(self, 25, data)

class IOIRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 26)
		else:
			quickfix.StringField.__init__(self, 26, data)

class IOIShares(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 27)
		else:
			quickfix.StringField.__init__(self, 27, data)

class IOITransType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 28)
		else:
			quickfix.CharField.__init__(self, 28, data)

class LastCapacity(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 29)
		else:
			quickfix.CharField.__init__(self, 29, data)

class LastMkt(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 30)
		else:
			quickfix.StringField.__init__(self, 30, data)

class LastPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 31)
		else:
			quickfix.DoubleField.__init__(self, 31, data)

class LastShares(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 32)
		else:
			quickfix.DoubleField.__init__(self, 32, data)

class LinesOfText(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 33)
		else:
			quickfix.IntField.__init__(self, 33, data)

class OrderID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 37)
		else:
			quickfix.StringField.__init__(self, 37, data)

class OrderQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 38)
		else:
			quickfix.DoubleField.__init__(self, 38, data)

class OrdStatus(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 39)
		else:
			quickfix.CharField.__init__(self, 39, data)

class OrdType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 40)
		else:
			quickfix.CharField.__init__(self, 40, data)

class OrigClOrdID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 41)
		else:
			quickfix.StringField.__init__(self, 41, data)

class OrigTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 42)
		else:
			quickfix.UtcTimeStampField.__init__(self, 42, data)

class Price(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 44)
		else:
			quickfix.DoubleField.__init__(self, 44, data)

class RelatdSym(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 46)
		else:
			quickfix.StringField.__init__(self, 46, data)

class Rule80A(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 47)
		else:
			quickfix.CharField.__init__(self, 47, data)

class SecurityID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 48)
		else:
			quickfix.StringField.__init__(self, 48, data)

class Shares(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 53)
		else:
			quickfix.DoubleField.__init__(self, 53, data)

class Side(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 54)
		else:
			quickfix.CharField.__init__(self, 54, data)

class Symbol(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 55)
		else:
			quickfix.StringField.__init__(self, 55, data)

class TimeInForce(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 59)
		else:
			quickfix.CharField.__init__(self, 59, data)

class TransactTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 60)
		else:
			quickfix.UtcTimeStampField.__init__(self, 60, data)

class Urgency(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 61)
		else:
			quickfix.CharField.__init__(self, 61, data)

class ValidUntilTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 62)
		else:
			quickfix.UtcTimeStampField.__init__(self, 62, data)

class SettlmntTyp(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 63)
		else:
			quickfix.CharField.__init__(self, 63, data)

class FutSettDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 64)
		else:
			quickfix.StringField.__init__(self, 64, data)

class SymbolSfx(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 65)
		else:
			quickfix.StringField.__init__(self, 65, data)

class ListID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 66)
		else:
			quickfix.StringField.__init__(self, 66, data)

class ListSeqNo(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 67)
		else:
			quickfix.IntField.__init__(self, 67, data)

class ListNoOrds(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 68)
		else:
			quickfix.IntField.__init__(self, 68, data)

class ListExecInst(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 69)
		else:
			quickfix.StringField.__init__(self, 69, data)

class AllocID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 70)
		else:
			quickfix.StringField.__init__(self, 70, data)

class AllocTransType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 71)
		else:
			quickfix.CharField.__init__(self, 71, data)

class RefAllocID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 72)
		else:
			quickfix.StringField.__init__(self, 72, data)

class NoOrders(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 73)
		else:
			quickfix.IntField.__init__(self, 73, data)

class AvgPrxPrecision(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 74)
		else:
			quickfix.IntField.__init__(self, 74, data)

class TradeDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 75)
		else:
			quickfix.StringField.__init__(self, 75, data)

class ExecBroker(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 76)
		else:
			quickfix.StringField.__init__(self, 76, data)

class OpenClose(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 77)
		else:
			quickfix.CharField.__init__(self, 77, data)

class NoAllocs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 78)
		else:
			quickfix.IntField.__init__(self, 78, data)

class AllocAccount(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 79)
		else:
			quickfix.StringField.__init__(self, 79, data)

class AllocShares(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 80)
		else:
			quickfix.DoubleField.__init__(self, 80, data)

class ProcessCode(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 81)
		else:
			quickfix.CharField.__init__(self, 81, data)

class NoRpts(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 82)
		else:
			quickfix.IntField.__init__(self, 82, data)

class RptSeq(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 83)
		else:
			quickfix.IntField.__init__(self, 83, data)

class CxlQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 84)
		else:
			quickfix.DoubleField.__init__(self, 84, data)

class NoDlvyInst(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 85)
		else:
			quickfix.IntField.__init__(self, 85, data)

class DlvyInst(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 86)
		else:
			quickfix.StringField.__init__(self, 86, data)

class AllocStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 87)
		else:
			quickfix.IntField.__init__(self, 87, data)

class AllocRejCode(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 88)
		else:
			quickfix.IntField.__init__(self, 88, data)

class BrokerOfCredit(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 92)
		else:
			quickfix.StringField.__init__(self, 92, data)

class EmailType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 94)
		else:
			quickfix.CharField.__init__(self, 94, data)

class StopPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 99)
		else:
			quickfix.DoubleField.__init__(self, 99, data)

class ExDestination(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 100)
		else:
			quickfix.StringField.__init__(self, 100, data)

class CxlRejReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 102)
		else:
			quickfix.IntField.__init__(self, 102, data)

class OrdRejReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 103)
		else:
			quickfix.IntField.__init__(self, 103, data)

class IOIQualifier(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 104)
		else:
			quickfix.CharField.__init__(self, 104, data)

class WaveNo(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 105)
		else:
			quickfix.StringField.__init__(self, 105, data)

class Issuer(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 106)
		else:
			quickfix.StringField.__init__(self, 106, data)

class SecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 107)
		else:
			quickfix.StringField.__init__(self, 107, data)

class ClientID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 109)
		else:
			quickfix.StringField.__init__(self, 109, data)

class MinQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 110)
		else:
			quickfix.DoubleField.__init__(self, 110, data)

class MaxFloor(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 111)
		else:
			quickfix.DoubleField.__init__(self, 111, data)

class ReportToExch(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 113)
		else:
			quickfix.BoolField.__init__(self, 113, data)

class LocateReqd(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 114)
		else:
			quickfix.BoolField.__init__(self, 114, data)

class QuoteID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 117)
		else:
			quickfix.StringField.__init__(self, 117, data)

class NetMoney(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 118)
		else:
			quickfix.DoubleField.__init__(self, 118, data)

class SettlCurrAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 119)
		else:
			quickfix.DoubleField.__init__(self, 119, data)

class SettlCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 120)
		else:
			quickfix.StringField.__init__(self, 120, data)

class ForexReq(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 121)
		else:
			quickfix.BoolField.__init__(self, 121, data)

class NoExecs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 124)
		else:
			quickfix.IntField.__init__(self, 124, data)

class CxlType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 125)
		else:
			quickfix.CharField.__init__(self, 125, data)

class ExpireTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 126)
		else:
			quickfix.UtcTimeStampField.__init__(self, 126, data)

class DKReason(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 127)
		else:
			quickfix.CharField.__init__(self, 127, data)

class IOINaturalFlag(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 130)
		else:
			quickfix.BoolField.__init__(self, 130, data)

class QuoteReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 131)
		else:
			quickfix.StringField.__init__(self, 131, data)

class BidPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 132)
		else:
			quickfix.DoubleField.__init__(self, 132, data)

class OfferPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 133)
		else:
			quickfix.DoubleField.__init__(self, 133, data)

class BidSize(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 134)
		else:
			quickfix.DoubleField.__init__(self, 134, data)

class OfferSize(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 135)
		else:
			quickfix.DoubleField.__init__(self, 135, data)

class NoMiscFees(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 136)
		else:
			quickfix.IntField.__init__(self, 136, data)

class MiscFeeAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 137)
		else:
			quickfix.DoubleField.__init__(self, 137, data)

class MiscFeeCurr(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 138)
		else:
			quickfix.StringField.__init__(self, 138, data)

class MiscFeeType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 139)
		else:
			quickfix.StringField.__init__(self, 139, data)

class PrevClosePx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 140)
		else:
			quickfix.DoubleField.__init__(self, 140, data)

class NoRelatedSym(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 146)
		else:
			quickfix.IntField.__init__(self, 146, data)

class Subject(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 147)
		else:
			quickfix.StringField.__init__(self, 147, data)

class Headline(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 148)
		else:
			quickfix.StringField.__init__(self, 148, data)

class URLLink(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 149)
		else:
			quickfix.StringField.__init__(self, 149, data)

class ExecType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 150)
		else:
			quickfix.CharField.__init__(self, 150, data)

class LeavesQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 151)
		else:
			quickfix.DoubleField.__init__(self, 151, data)

class CashOrderQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 152)
		else:
			quickfix.DoubleField.__init__(self, 152, data)

class AllocAvgPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 153)
		else:
			quickfix.DoubleField.__init__(self, 153, data)

class AllocNetMoney(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 154)
		else:
			quickfix.DoubleField.__init__(self, 154, data)

class SettlCurrFxRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 155)
		else:
			quickfix.DoubleField.__init__(self, 155, data)

class SettlCurrFxRateCalc(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 156)
		else:
			quickfix.CharField.__init__(self, 156, data)

class NumDaysInterest(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 157)
		else:
			quickfix.IntField.__init__(self, 157, data)

class AccruedInterestRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 158)
		else:
			quickfix.DoubleField.__init__(self, 158, data)

class AccruedInterestAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 159)
		else:
			quickfix.DoubleField.__init__(self, 159, data)

class SettlInstMode(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 160)
		else:
			quickfix.CharField.__init__(self, 160, data)

class AllocText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 161)
		else:
			quickfix.StringField.__init__(self, 161, data)

class SettlInstID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 162)
		else:
			quickfix.StringField.__init__(self, 162, data)

class SettlInstTransType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 163)
		else:
			quickfix.CharField.__init__(self, 163, data)

class EmailThreadID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 164)
		else:
			quickfix.StringField.__init__(self, 164, data)

class SettlInstSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 165)
		else:
			quickfix.CharField.__init__(self, 165, data)

class SettlLocation(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 166)
		else:
			quickfix.StringField.__init__(self, 166, data)

class SecurityType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 167)
		else:
			quickfix.StringField.__init__(self, 167, data)

class EffectiveTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 168)
		else:
			quickfix.UtcTimeStampField.__init__(self, 168, data)

class StandInstDbType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 169)
		else:
			quickfix.IntField.__init__(self, 169, data)

class StandInstDbName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 170)
		else:
			quickfix.StringField.__init__(self, 170, data)

class StandInstDbID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 171)
		else:
			quickfix.StringField.__init__(self, 171, data)

class SettlDeliveryType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 172)
		else:
			quickfix.IntField.__init__(self, 172, data)

class SettlDepositoryCode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 173)
		else:
			quickfix.StringField.__init__(self, 173, data)

class SettlBrkrCode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 174)
		else:
			quickfix.StringField.__init__(self, 174, data)

class SettlInstCode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 175)
		else:
			quickfix.StringField.__init__(self, 175, data)

class SecuritySettlAgentName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 176)
		else:
			quickfix.StringField.__init__(self, 176, data)

class SecuritySettlAgentCode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 177)
		else:
			quickfix.StringField.__init__(self, 177, data)

class SecuritySettlAgentAcctNum(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 178)
		else:
			quickfix.StringField.__init__(self, 178, data)

class SecuritySettlAgentAcctName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 179)
		else:
			quickfix.StringField.__init__(self, 179, data)

class SecuritySettlAgentContactName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 180)
		else:
			quickfix.StringField.__init__(self, 180, data)

class SecuritySettlAgentContactPhone(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 181)
		else:
			quickfix.StringField.__init__(self, 181, data)

class CashSettlAgentName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 182)
		else:
			quickfix.StringField.__init__(self, 182, data)

class CashSettlAgentCode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 183)
		else:
			quickfix.StringField.__init__(self, 183, data)

class CashSettlAgentAcctNum(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 184)
		else:
			quickfix.StringField.__init__(self, 184, data)

class CashSettlAgentAcctName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 185)
		else:
			quickfix.StringField.__init__(self, 185, data)

class CashSettlAgentContactName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 186)
		else:
			quickfix.StringField.__init__(self, 186, data)

class CashSettlAgentContactPhone(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 187)
		else:
			quickfix.StringField.__init__(self, 187, data)

class BidSpotRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 188)
		else:
			quickfix.DoubleField.__init__(self, 188, data)

class BidForwardPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 189)
		else:
			quickfix.DoubleField.__init__(self, 189, data)

class OfferSpotRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 190)
		else:
			quickfix.DoubleField.__init__(self, 190, data)

class OfferForwardPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 191)
		else:
			quickfix.DoubleField.__init__(self, 191, data)

class OrderQty2(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 192)
		else:
			quickfix.DoubleField.__init__(self, 192, data)

class FutSettDate2(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 193)
		else:
			quickfix.StringField.__init__(self, 193, data)

class LastSpotRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 194)
		else:
			quickfix.DoubleField.__init__(self, 194, data)

class LastForwardPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 195)
		else:
			quickfix.DoubleField.__init__(self, 195, data)

class AllocLinkID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 196)
		else:
			quickfix.StringField.__init__(self, 196, data)

class AllocLinkType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 197)
		else:
			quickfix.IntField.__init__(self, 197, data)

class SecondaryOrderID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 198)
		else:
			quickfix.StringField.__init__(self, 198, data)

class NoIOIQualifiers(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 199)
		else:
			quickfix.IntField.__init__(self, 199, data)

class MaturityMonthYear(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 200)
		else:
			quickfix.StringField.__init__(self, 200, data)

class PutOrCall(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 201)
		else:
			quickfix.IntField.__init__(self, 201, data)

class StrikePrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 202)
		else:
			quickfix.DoubleField.__init__(self, 202, data)

class CoveredOrUncovered(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 203)
		else:
			quickfix.IntField.__init__(self, 203, data)

class CustomerOrFirm(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 204)
		else:
			quickfix.IntField.__init__(self, 204, data)

class MaturityDay(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 205)
		else:
			quickfix.StringField.__init__(self, 205, data)

class OptAttribute(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 206)
		else:
			quickfix.CharField.__init__(self, 206, data)

class SecurityExchange(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 207)
		else:
			quickfix.StringField.__init__(self, 207, data)

class NotifyBrokerOfCredit(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 208)
		else:
			quickfix.BoolField.__init__(self, 208, data)

class AllocHandlInst(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 209)
		else:
			quickfix.IntField.__init__(self, 209, data)

class MaxShow(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 210)
		else:
			quickfix.DoubleField.__init__(self, 210, data)

class PegDifference(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 211)
		else:
			quickfix.DoubleField.__init__(self, 211, data)

class SendingDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 51)
		else:
			quickfix.StringField.__init__(self, 51, data)

class TotNoOrders(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 68)
		else:
			quickfix.IntField.__init__(self, 68, data)

class SettlInstRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 214)
		else:
			quickfix.StringField.__init__(self, 214, data)

class NoRoutingIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 215)
		else:
			quickfix.IntField.__init__(self, 215, data)

class RoutingType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 216)
		else:
			quickfix.IntField.__init__(self, 216, data)

class RoutingID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 217)
		else:
			quickfix.StringField.__init__(self, 217, data)

class SpreadToBenchmark(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 218)
		else:
			quickfix.DoubleField.__init__(self, 218, data)

class Benchmark(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 219)
		else:
			quickfix.CharField.__init__(self, 219, data)

class CouponRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 223)
		else:
			quickfix.DoubleField.__init__(self, 223, data)

class ContractMultiplier(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 231)
		else:
			quickfix.DoubleField.__init__(self, 231, data)

class MDReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 262)
		else:
			quickfix.StringField.__init__(self, 262, data)

class SubscriptionRequestType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 263)
		else:
			quickfix.CharField.__init__(self, 263, data)

class MarketDepth(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 264)
		else:
			quickfix.IntField.__init__(self, 264, data)

class MDUpdateType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 265)
		else:
			quickfix.IntField.__init__(self, 265, data)

class AggregatedBook(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 266)
		else:
			quickfix.BoolField.__init__(self, 266, data)

class NoMDEntryTypes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 267)
		else:
			quickfix.IntField.__init__(self, 267, data)

class NoMDEntries(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 268)
		else:
			quickfix.IntField.__init__(self, 268, data)

class MDEntryType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 269)
		else:
			quickfix.CharField.__init__(self, 269, data)

class MDEntryPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 270)
		else:
			quickfix.DoubleField.__init__(self, 270, data)

class MDEntrySize(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 271)
		else:
			quickfix.DoubleField.__init__(self, 271, data)

class MDEntryDate(quickfix.UtcDateField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcDateField.__init__(self, 272)
		else:
			quickfix.UtcDateField.__init__(self, 272, data)

class MDEntryTime(quickfix.UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeOnlyField.__init__(self, 273)
		else:
			quickfix.UtcTimeOnlyField.__init__(self, 273, data)

class TickDirection(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 274)
		else:
			quickfix.CharField.__init__(self, 274, data)

class MDMkt(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 275)
		else:
			quickfix.StringField.__init__(self, 275, data)

class QuoteCondition(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 276)
		else:
			quickfix.StringField.__init__(self, 276, data)

class TradeCondition(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 277)
		else:
			quickfix.StringField.__init__(self, 277, data)

class MDEntryID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 278)
		else:
			quickfix.StringField.__init__(self, 278, data)

class MDUpdateAction(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 279)
		else:
			quickfix.CharField.__init__(self, 279, data)

class MDEntryRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 280)
		else:
			quickfix.StringField.__init__(self, 280, data)

class MDReqRejReason(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 281)
		else:
			quickfix.CharField.__init__(self, 281, data)

class MDEntryOriginator(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 282)
		else:
			quickfix.StringField.__init__(self, 282, data)

class LocationID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 283)
		else:
			quickfix.StringField.__init__(self, 283, data)

class DeskID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 284)
		else:
			quickfix.StringField.__init__(self, 284, data)

class DeleteReason(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 285)
		else:
			quickfix.CharField.__init__(self, 285, data)

class OpenCloseSettleFlag(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 286)
		else:
			quickfix.StringField.__init__(self, 286, data)

class SellerDays(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 287)
		else:
			quickfix.IntField.__init__(self, 287, data)

class MDEntryBuyer(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 288)
		else:
			quickfix.StringField.__init__(self, 288, data)

class MDEntrySeller(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 289)
		else:
			quickfix.StringField.__init__(self, 289, data)

class MDEntryPositionNo(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 290)
		else:
			quickfix.IntField.__init__(self, 290, data)

class FinancialStatus(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 291)
		else:
			quickfix.StringField.__init__(self, 291, data)

class CorporateAction(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 292)
		else:
			quickfix.StringField.__init__(self, 292, data)

class DefBidSize(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 293)
		else:
			quickfix.DoubleField.__init__(self, 293, data)

class DefOfferSize(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 294)
		else:
			quickfix.DoubleField.__init__(self, 294, data)

class NoQuoteEntries(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 295)
		else:
			quickfix.IntField.__init__(self, 295, data)

class NoQuoteSets(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 296)
		else:
			quickfix.IntField.__init__(self, 296, data)

class QuoteAckStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 297)
		else:
			quickfix.IntField.__init__(self, 297, data)

class QuoteCancelType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 298)
		else:
			quickfix.IntField.__init__(self, 298, data)

class QuoteEntryID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 299)
		else:
			quickfix.StringField.__init__(self, 299, data)

class QuoteRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 300)
		else:
			quickfix.IntField.__init__(self, 300, data)

class QuoteResponseLevel(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 301)
		else:
			quickfix.IntField.__init__(self, 301, data)

class QuoteSetID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 302)
		else:
			quickfix.StringField.__init__(self, 302, data)

class QuoteRequestType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 303)
		else:
			quickfix.IntField.__init__(self, 303, data)

class TotQuoteEntries(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 304)
		else:
			quickfix.IntField.__init__(self, 304, data)

class UnderlyingIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 305)
		else:
			quickfix.StringField.__init__(self, 305, data)

class UnderlyingIssuer(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 306)
		else:
			quickfix.StringField.__init__(self, 306, data)

class UnderlyingSecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 307)
		else:
			quickfix.StringField.__init__(self, 307, data)

class UnderlyingSecurityExchange(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 308)
		else:
			quickfix.StringField.__init__(self, 308, data)

class UnderlyingSecurityID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 309)
		else:
			quickfix.StringField.__init__(self, 309, data)

class UnderlyingSecurityType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 310)
		else:
			quickfix.StringField.__init__(self, 310, data)

class UnderlyingSymbol(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 311)
		else:
			quickfix.StringField.__init__(self, 311, data)

class UnderlyingSymbolSfx(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 312)
		else:
			quickfix.StringField.__init__(self, 312, data)

class UnderlyingMaturityMonthYear(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 313)
		else:
			quickfix.StringField.__init__(self, 313, data)

class UnderlyingMaturityDay(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 314)
		else:
			quickfix.StringField.__init__(self, 314, data)

class UnderlyingPutOrCall(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 315)
		else:
			quickfix.IntField.__init__(self, 315, data)

class UnderlyingStrikePrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 316)
		else:
			quickfix.DoubleField.__init__(self, 316, data)

class UnderlyingOptAttribute(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 317)
		else:
			quickfix.CharField.__init__(self, 317, data)

class UnderlyingCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 318)
		else:
			quickfix.StringField.__init__(self, 318, data)

class RatioQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 319)
		else:
			quickfix.DoubleField.__init__(self, 319, data)

class SecurityReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 320)
		else:
			quickfix.StringField.__init__(self, 320, data)

class SecurityRequestType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 321)
		else:
			quickfix.IntField.__init__(self, 321, data)

class SecurityResponseID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 322)
		else:
			quickfix.StringField.__init__(self, 322, data)

class SecurityResponseType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 323)
		else:
			quickfix.IntField.__init__(self, 323, data)

class SecurityStatusReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 324)
		else:
			quickfix.StringField.__init__(self, 324, data)

class UnsolicitedIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 325)
		else:
			quickfix.BoolField.__init__(self, 325, data)

class SecurityTradingStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 326)
		else:
			quickfix.IntField.__init__(self, 326, data)

class HaltReasonChar(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 327)
		else:
			quickfix.CharField.__init__(self, 327, data)

class InViewOfCommon(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 328)
		else:
			quickfix.BoolField.__init__(self, 328, data)

class DueToRelated(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 329)
		else:
			quickfix.BoolField.__init__(self, 329, data)

class BuyVolume(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 330)
		else:
			quickfix.DoubleField.__init__(self, 330, data)

class SellVolume(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 331)
		else:
			quickfix.DoubleField.__init__(self, 331, data)

class HighPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 332)
		else:
			quickfix.DoubleField.__init__(self, 332, data)

class LowPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 333)
		else:
			quickfix.DoubleField.__init__(self, 333, data)

class Adjustment(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 334)
		else:
			quickfix.IntField.__init__(self, 334, data)

class TradSesReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 335)
		else:
			quickfix.StringField.__init__(self, 335, data)

class TradingSessionID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 336)
		else:
			quickfix.StringField.__init__(self, 336, data)

class ContraTrader(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 337)
		else:
			quickfix.StringField.__init__(self, 337, data)

class TradSesMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 338)
		else:
			quickfix.IntField.__init__(self, 338, data)

class TradSesMode(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 339)
		else:
			quickfix.IntField.__init__(self, 339, data)

class TradSesStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 340)
		else:
			quickfix.IntField.__init__(self, 340, data)

class TradSesStartTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 341)
		else:
			quickfix.UtcTimeStampField.__init__(self, 341, data)

class TradSesOpenTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 342)
		else:
			quickfix.UtcTimeStampField.__init__(self, 342, data)

class TradSesPreCloseTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 343)
		else:
			quickfix.UtcTimeStampField.__init__(self, 343, data)

class TradSesCloseTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 344)
		else:
			quickfix.UtcTimeStampField.__init__(self, 344, data)

class TradSesEndTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 345)
		else:
			quickfix.UtcTimeStampField.__init__(self, 345, data)

class NumberOfOrders(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 346)
		else:
			quickfix.IntField.__init__(self, 346, data)

class EncodedIssuerLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 348)
		else:
			quickfix.IntField.__init__(self, 348, data)

class EncodedIssuer(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 349)
		else:
			quickfix.StringField.__init__(self, 349, data)

class EncodedSecurityDescLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 350)
		else:
			quickfix.IntField.__init__(self, 350, data)

class EncodedSecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 351)
		else:
			quickfix.StringField.__init__(self, 351, data)

class EncodedListExecInstLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 352)
		else:
			quickfix.IntField.__init__(self, 352, data)

class EncodedListExecInst(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 353)
		else:
			quickfix.StringField.__init__(self, 353, data)

class EncodedSubjectLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 356)
		else:
			quickfix.IntField.__init__(self, 356, data)

class EncodedSubject(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 357)
		else:
			quickfix.StringField.__init__(self, 357, data)

class EncodedHeadlineLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 358)
		else:
			quickfix.IntField.__init__(self, 358, data)

class EncodedHeadline(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 359)
		else:
			quickfix.StringField.__init__(self, 359, data)

class EncodedAllocTextLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 360)
		else:
			quickfix.IntField.__init__(self, 360, data)

class EncodedAllocText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 361)
		else:
			quickfix.StringField.__init__(self, 361, data)

class EncodedUnderlyingIssuerLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 362)
		else:
			quickfix.IntField.__init__(self, 362, data)

class EncodedUnderlyingIssuer(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 363)
		else:
			quickfix.StringField.__init__(self, 363, data)

class EncodedUnderlyingSecurityDescLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 364)
		else:
			quickfix.IntField.__init__(self, 364, data)

class EncodedUnderlyingSecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 365)
		else:
			quickfix.StringField.__init__(self, 365, data)

class AllocPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 366)
		else:
			quickfix.DoubleField.__init__(self, 366, data)

class QuoteSetValidUntilTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 367)
		else:
			quickfix.UtcTimeStampField.__init__(self, 367, data)

class QuoteEntryRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 368)
		else:
			quickfix.IntField.__init__(self, 368, data)

class OnBehalfOfSendingTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 370)
		else:
			quickfix.UtcTimeStampField.__init__(self, 370, data)

class BidRequestTransType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 374)
		else:
			quickfix.CharField.__init__(self, 374, data)

class ContraBroker(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 375)
		else:
			quickfix.StringField.__init__(self, 375, data)

class ComplianceID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 376)
		else:
			quickfix.StringField.__init__(self, 376, data)

class SolicitedFlag(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 377)
		else:
			quickfix.BoolField.__init__(self, 377, data)

class ExecRestatementReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 378)
		else:
			quickfix.IntField.__init__(self, 378, data)

class BusinessRejectRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 379)
		else:
			quickfix.StringField.__init__(self, 379, data)

class BusinessRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 380)
		else:
			quickfix.IntField.__init__(self, 380, data)

class GrossTradeAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 381)
		else:
			quickfix.DoubleField.__init__(self, 381, data)

class NoContraBrokers(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 382)
		else:
			quickfix.IntField.__init__(self, 382, data)

class NoTradingSessions(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 386)
		else:
			quickfix.IntField.__init__(self, 386, data)

class TotalVolumeTraded(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 387)
		else:
			quickfix.DoubleField.__init__(self, 387, data)

class DiscretionInst(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 388)
		else:
			quickfix.CharField.__init__(self, 388, data)

class DiscretionOffset(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 389)
		else:
			quickfix.DoubleField.__init__(self, 389, data)

class BidID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 390)
		else:
			quickfix.StringField.__init__(self, 390, data)

class ClientBidID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 391)
		else:
			quickfix.StringField.__init__(self, 391, data)

class ListName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 392)
		else:
			quickfix.StringField.__init__(self, 392, data)

class TotalNumSecurities(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 393)
		else:
			quickfix.IntField.__init__(self, 393, data)

class BidType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 394)
		else:
			quickfix.IntField.__init__(self, 394, data)

class NumTickets(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 395)
		else:
			quickfix.IntField.__init__(self, 395, data)

class SideValue1(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 396)
		else:
			quickfix.DoubleField.__init__(self, 396, data)

class SideValue2(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 397)
		else:
			quickfix.DoubleField.__init__(self, 397, data)

class NoBidDescriptors(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 398)
		else:
			quickfix.IntField.__init__(self, 398, data)

class BidDescriptorType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 399)
		else:
			quickfix.IntField.__init__(self, 399, data)

class BidDescriptor(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 400)
		else:
			quickfix.StringField.__init__(self, 400, data)

class SideValueInd(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 401)
		else:
			quickfix.IntField.__init__(self, 401, data)

class LiquidityPctLow(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 402)
		else:
			quickfix.DoubleField.__init__(self, 402, data)

class LiquidityPctHigh(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 403)
		else:
			quickfix.DoubleField.__init__(self, 403, data)

class LiquidityValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 404)
		else:
			quickfix.DoubleField.__init__(self, 404, data)

class EFPTrackingError(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 405)
		else:
			quickfix.DoubleField.__init__(self, 405, data)

class FairValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 406)
		else:
			quickfix.DoubleField.__init__(self, 406, data)

class OutsideIndexPct(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 407)
		else:
			quickfix.DoubleField.__init__(self, 407, data)

class ValueOfFutures(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 408)
		else:
			quickfix.DoubleField.__init__(self, 408, data)

class LiquidityIndType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 409)
		else:
			quickfix.IntField.__init__(self, 409, data)

class WtAverageLiquidity(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 410)
		else:
			quickfix.DoubleField.__init__(self, 410, data)

class ExchangeForPhysical(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 411)
		else:
			quickfix.BoolField.__init__(self, 411, data)

class OutMainCntryUIndex(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 412)
		else:
			quickfix.DoubleField.__init__(self, 412, data)

class CrossPercent(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 413)
		else:
			quickfix.DoubleField.__init__(self, 413, data)

class ProgRptReqs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 414)
		else:
			quickfix.IntField.__init__(self, 414, data)

class ProgPeriodInterval(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 415)
		else:
			quickfix.IntField.__init__(self, 415, data)

class IncTaxInd(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 416)
		else:
			quickfix.IntField.__init__(self, 416, data)

class NumBidders(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 417)
		else:
			quickfix.IntField.__init__(self, 417, data)

class TradeType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 418)
		else:
			quickfix.CharField.__init__(self, 418, data)

class BasisPxType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 419)
		else:
			quickfix.CharField.__init__(self, 419, data)

class NoBidComponents(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 420)
		else:
			quickfix.IntField.__init__(self, 420, data)

class Country(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 421)
		else:
			quickfix.StringField.__init__(self, 421, data)

class TotNoStrikes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 422)
		else:
			quickfix.IntField.__init__(self, 422, data)

class PriceType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 423)
		else:
			quickfix.IntField.__init__(self, 423, data)

class DayOrderQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 424)
		else:
			quickfix.DoubleField.__init__(self, 424, data)

class DayCumQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 425)
		else:
			quickfix.DoubleField.__init__(self, 425, data)

class DayAvgPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 426)
		else:
			quickfix.DoubleField.__init__(self, 426, data)

class GTBookingInst(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 427)
		else:
			quickfix.IntField.__init__(self, 427, data)

class NoStrikes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 428)
		else:
			quickfix.IntField.__init__(self, 428, data)

class ListStatusType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 429)
		else:
			quickfix.IntField.__init__(self, 429, data)

class NetGrossInd(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 430)
		else:
			quickfix.IntField.__init__(self, 430, data)

class ListOrderStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 431)
		else:
			quickfix.IntField.__init__(self, 431, data)

class ExpireDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 432)
		else:
			quickfix.StringField.__init__(self, 432, data)

class ListExecInstType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 433)
		else:
			quickfix.CharField.__init__(self, 433, data)

class CxlRejResponseTo(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 434)
		else:
			quickfix.CharField.__init__(self, 434, data)

class UnderlyingCouponRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 435)
		else:
			quickfix.DoubleField.__init__(self, 435, data)

class UnderlyingContractMultiplier(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 436)
		else:
			quickfix.DoubleField.__init__(self, 436, data)

class ContraTradeQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 437)
		else:
			quickfix.DoubleField.__init__(self, 437, data)

class ContraTradeTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 438)
		else:
			quickfix.UtcTimeStampField.__init__(self, 438, data)

class ClearingFirm(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 439)
		else:
			quickfix.StringField.__init__(self, 439, data)

class ClearingAccount(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 440)
		else:
			quickfix.StringField.__init__(self, 440, data)

class LiquidityNumSecurities(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 441)
		else:
			quickfix.IntField.__init__(self, 441, data)

class MultiLegReportingType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 442)
		else:
			quickfix.CharField.__init__(self, 442, data)

class StrikeTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 443)
		else:
			quickfix.UtcTimeStampField.__init__(self, 443, data)

class ListStatusText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 444)
		else:
			quickfix.StringField.__init__(self, 444, data)

class EncodedListStatusTextLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 445)
		else:
			quickfix.IntField.__init__(self, 445, data)

class EncodedListStatusText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 446)
		else:
			quickfix.StringField.__init__(self, 446, data)

class SecurityIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 22)
		else:
			quickfix.StringField.__init__(self, 22, data)

class IOIQty(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 27)
		else:
			quickfix.StringField.__init__(self, 27, data)

class LastQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 32)
		else:
			quickfix.DoubleField.__init__(self, 32, data)

class Quantity(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 53)
		else:
			quickfix.DoubleField.__init__(self, 53, data)

class PositionEffect(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 77)
		else:
			quickfix.CharField.__init__(self, 77, data)

class AllocQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 80)
		else:
			quickfix.DoubleField.__init__(self, 80, data)

class Spread(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 218)
		else:
			quickfix.DoubleField.__init__(self, 218, data)

class BenchmarkCurveCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 220)
		else:
			quickfix.StringField.__init__(self, 220, data)

class BenchmarkCurveName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 221)
		else:
			quickfix.StringField.__init__(self, 221, data)

class BenchmarkCurvePoint(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 222)
		else:
			quickfix.StringField.__init__(self, 222, data)

class CouponPaymentDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 224)
		else:
			quickfix.StringField.__init__(self, 224, data)

class IssueDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 225)
		else:
			quickfix.StringField.__init__(self, 225, data)

class RepurchaseTerm(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 226)
		else:
			quickfix.IntField.__init__(self, 226, data)

class RepurchaseRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 227)
		else:
			quickfix.DoubleField.__init__(self, 227, data)

class Factor(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 228)
		else:
			quickfix.DoubleField.__init__(self, 228, data)

class TradeOriginationDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 229)
		else:
			quickfix.StringField.__init__(self, 229, data)

class ExDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 230)
		else:
			quickfix.StringField.__init__(self, 230, data)

class NoStipulations(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 232)
		else:
			quickfix.IntField.__init__(self, 232, data)

class StipulationType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 233)
		else:
			quickfix.StringField.__init__(self, 233, data)

class StipulationValue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 234)
		else:
			quickfix.StringField.__init__(self, 234, data)

class YieldType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 235)
		else:
			quickfix.StringField.__init__(self, 235, data)

class Yield(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 236)
		else:
			quickfix.DoubleField.__init__(self, 236, data)

class TotalTakedown(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 237)
		else:
			quickfix.DoubleField.__init__(self, 237, data)

class Concession(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 238)
		else:
			quickfix.DoubleField.__init__(self, 238, data)

class RepoCollateralSecurityType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 239)
		else:
			quickfix.StringField.__init__(self, 239, data)

class RedemptionDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 240)
		else:
			quickfix.StringField.__init__(self, 240, data)

class UnderlyingCouponPaymentDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 241)
		else:
			quickfix.StringField.__init__(self, 241, data)

class UnderlyingIssueDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 242)
		else:
			quickfix.StringField.__init__(self, 242, data)

class UnderlyingRepoCollateralSecurityType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 243)
		else:
			quickfix.StringField.__init__(self, 243, data)

class UnderlyingRepurchaseTerm(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 244)
		else:
			quickfix.IntField.__init__(self, 244, data)

class UnderlyingRepurchaseRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 245)
		else:
			quickfix.DoubleField.__init__(self, 245, data)

class UnderlyingFactor(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 246)
		else:
			quickfix.DoubleField.__init__(self, 246, data)

class UnderlyingRedemptionDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 247)
		else:
			quickfix.StringField.__init__(self, 247, data)

class LegCouponPaymentDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 248)
		else:
			quickfix.StringField.__init__(self, 248, data)

class LegIssueDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 249)
		else:
			quickfix.StringField.__init__(self, 249, data)

class LegRepoCollateralSecurityType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 250)
		else:
			quickfix.StringField.__init__(self, 250, data)

class LegRepurchaseTerm(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 251)
		else:
			quickfix.IntField.__init__(self, 251, data)

class LegRepurchaseRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 252)
		else:
			quickfix.DoubleField.__init__(self, 252, data)

class LegFactor(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 253)
		else:
			quickfix.DoubleField.__init__(self, 253, data)

class LegRedemptionDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 254)
		else:
			quickfix.StringField.__init__(self, 254, data)

class CreditRating(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 255)
		else:
			quickfix.StringField.__init__(self, 255, data)

class UnderlyingCreditRating(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 256)
		else:
			quickfix.StringField.__init__(self, 256, data)

class LegCreditRating(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 257)
		else:
			quickfix.StringField.__init__(self, 257, data)

class TradedFlatSwitch(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 258)
		else:
			quickfix.BoolField.__init__(self, 258, data)

class BasisFeatureDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 259)
		else:
			quickfix.StringField.__init__(self, 259, data)

class BasisFeaturePrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 260)
		else:
			quickfix.DoubleField.__init__(self, 260, data)

class QuoteStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 297)
		else:
			quickfix.IntField.__init__(self, 297, data)

class UnderlyingSecurityIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 305)
		else:
			quickfix.StringField.__init__(self, 305, data)

class PartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 447)
		else:
			quickfix.CharField.__init__(self, 447, data)

class PartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 448)
		else:
			quickfix.StringField.__init__(self, 448, data)

class TotalVolumeTradedDate(quickfix.UtcDateField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcDateField.__init__(self, 449)
		else:
			quickfix.UtcDateField.__init__(self, 449, data)

class TotalVolumeTradedTime(quickfix.UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeOnlyField.__init__(self, 450)
		else:
			quickfix.UtcTimeOnlyField.__init__(self, 450, data)

class NetChgPrevDay(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 451)
		else:
			quickfix.DoubleField.__init__(self, 451, data)

class PartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 452)
		else:
			quickfix.IntField.__init__(self, 452, data)

class NoPartyIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 453)
		else:
			quickfix.IntField.__init__(self, 453, data)

class NoSecurityAltID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 454)
		else:
			quickfix.IntField.__init__(self, 454, data)

class SecurityAltID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 455)
		else:
			quickfix.StringField.__init__(self, 455, data)

class SecurityAltIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 456)
		else:
			quickfix.StringField.__init__(self, 456, data)

class NoUnderlyingSecurityAltID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 457)
		else:
			quickfix.IntField.__init__(self, 457, data)

class UnderlyingSecurityAltID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 458)
		else:
			quickfix.StringField.__init__(self, 458, data)

class UnderlyingSecurityAltIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 459)
		else:
			quickfix.StringField.__init__(self, 459, data)

class Product(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 460)
		else:
			quickfix.IntField.__init__(self, 460, data)

class CFICode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 461)
		else:
			quickfix.StringField.__init__(self, 461, data)

class UnderlyingProduct(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 462)
		else:
			quickfix.IntField.__init__(self, 462, data)

class UnderlyingCFICode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 463)
		else:
			quickfix.StringField.__init__(self, 463, data)

class QuantityType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 465)
		else:
			quickfix.IntField.__init__(self, 465, data)

class BookingRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 466)
		else:
			quickfix.StringField.__init__(self, 466, data)

class IndividualAllocID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 467)
		else:
			quickfix.StringField.__init__(self, 467, data)

class RoundingDirection(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 468)
		else:
			quickfix.CharField.__init__(self, 468, data)

class RoundingModulus(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 469)
		else:
			quickfix.DoubleField.__init__(self, 469, data)

class CountryOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 470)
		else:
			quickfix.StringField.__init__(self, 470, data)

class StateOrProvinceOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 471)
		else:
			quickfix.StringField.__init__(self, 471, data)

class LocaleOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 472)
		else:
			quickfix.StringField.__init__(self, 472, data)

class NoRegistDtls(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 473)
		else:
			quickfix.IntField.__init__(self, 473, data)

class MailingDtls(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 474)
		else:
			quickfix.StringField.__init__(self, 474, data)

class InvestorCountryOfResidence(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 475)
		else:
			quickfix.StringField.__init__(self, 475, data)

class PaymentRef(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 476)
		else:
			quickfix.StringField.__init__(self, 476, data)

class DistribPaymentMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 477)
		else:
			quickfix.IntField.__init__(self, 477, data)

class CashDistribCurr(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 478)
		else:
			quickfix.StringField.__init__(self, 478, data)

class CommCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 479)
		else:
			quickfix.StringField.__init__(self, 479, data)

class CancellationRights(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 480)
		else:
			quickfix.CharField.__init__(self, 480, data)

class MoneyLaunderingStatus(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 481)
		else:
			quickfix.CharField.__init__(self, 481, data)

class MailingInst(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 482)
		else:
			quickfix.StringField.__init__(self, 482, data)

class TransBkdTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 483)
		else:
			quickfix.UtcTimeStampField.__init__(self, 483, data)

class ExecPriceType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 484)
		else:
			quickfix.CharField.__init__(self, 484, data)

class ExecPriceAdjustment(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 485)
		else:
			quickfix.DoubleField.__init__(self, 485, data)

class DateOfBirth(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 486)
		else:
			quickfix.StringField.__init__(self, 486, data)

class TradeReportTransType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 487)
		else:
			quickfix.IntField.__init__(self, 487, data)

class CardHolderName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 488)
		else:
			quickfix.StringField.__init__(self, 488, data)

class CardNumber(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 489)
		else:
			quickfix.StringField.__init__(self, 489, data)

class CardExpDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 490)
		else:
			quickfix.StringField.__init__(self, 490, data)

class CardIssNo(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 491)
		else:
			quickfix.StringField.__init__(self, 491, data)

class PaymentMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 492)
		else:
			quickfix.IntField.__init__(self, 492, data)

class RegistAcctType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 493)
		else:
			quickfix.StringField.__init__(self, 493, data)

class Designation(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 494)
		else:
			quickfix.StringField.__init__(self, 494, data)

class TaxAdvantageType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 495)
		else:
			quickfix.IntField.__init__(self, 495, data)

class RegistRejReasonText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 496)
		else:
			quickfix.StringField.__init__(self, 496, data)

class FundRenewWaiv(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 497)
		else:
			quickfix.CharField.__init__(self, 497, data)

class CashDistribAgentName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 498)
		else:
			quickfix.StringField.__init__(self, 498, data)

class CashDistribAgentCode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 499)
		else:
			quickfix.StringField.__init__(self, 499, data)

class CashDistribAgentAcctNumber(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 500)
		else:
			quickfix.StringField.__init__(self, 500, data)

class CashDistribPayRef(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 501)
		else:
			quickfix.StringField.__init__(self, 501, data)

class CardStartDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 503)
		else:
			quickfix.StringField.__init__(self, 503, data)

class PaymentDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 504)
		else:
			quickfix.StringField.__init__(self, 504, data)

class PaymentRemitterID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 505)
		else:
			quickfix.StringField.__init__(self, 505, data)

class RegistStatus(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 506)
		else:
			quickfix.CharField.__init__(self, 506, data)

class RegistRejReasonCode(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 507)
		else:
			quickfix.IntField.__init__(self, 507, data)

class RegistRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 508)
		else:
			quickfix.StringField.__init__(self, 508, data)

class RegistDetls(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 509)
		else:
			quickfix.StringField.__init__(self, 509, data)

class NoDistribInsts(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 510)
		else:
			quickfix.IntField.__init__(self, 510, data)

class RegistEmail(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 511)
		else:
			quickfix.StringField.__init__(self, 511, data)

class DistribPercentage(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 512)
		else:
			quickfix.DoubleField.__init__(self, 512, data)

class RegistID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 513)
		else:
			quickfix.StringField.__init__(self, 513, data)

class RegistTransType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 514)
		else:
			quickfix.CharField.__init__(self, 514, data)

class ExecValuationPoint(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 515)
		else:
			quickfix.UtcTimeStampField.__init__(self, 515, data)

class OrderPercent(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 516)
		else:
			quickfix.DoubleField.__init__(self, 516, data)

class OwnershipType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 517)
		else:
			quickfix.CharField.__init__(self, 517, data)

class NoContAmts(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 518)
		else:
			quickfix.IntField.__init__(self, 518, data)

class ContAmtType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 519)
		else:
			quickfix.IntField.__init__(self, 519, data)

class ContAmtValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 520)
		else:
			quickfix.DoubleField.__init__(self, 520, data)

class ContAmtCurr(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 521)
		else:
			quickfix.StringField.__init__(self, 521, data)

class OwnerType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 522)
		else:
			quickfix.IntField.__init__(self, 522, data)

class PartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 523)
		else:
			quickfix.StringField.__init__(self, 523, data)

class NestedPartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 524)
		else:
			quickfix.StringField.__init__(self, 524, data)

class NestedPartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 525)
		else:
			quickfix.CharField.__init__(self, 525, data)

class SecondaryClOrdID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 526)
		else:
			quickfix.StringField.__init__(self, 526, data)

class SecondaryExecID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 527)
		else:
			quickfix.StringField.__init__(self, 527, data)

class OrderCapacity(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 528)
		else:
			quickfix.CharField.__init__(self, 528, data)

class OrderRestrictions(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 529)
		else:
			quickfix.StringField.__init__(self, 529, data)

class MassCancelRequestType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 530)
		else:
			quickfix.CharField.__init__(self, 530, data)

class MassCancelResponse(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 531)
		else:
			quickfix.CharField.__init__(self, 531, data)

class MassCancelRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 532)
		else:
			quickfix.IntField.__init__(self, 532, data)

class TotalAffectedOrders(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 533)
		else:
			quickfix.IntField.__init__(self, 533, data)

class NoAffectedOrders(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 534)
		else:
			quickfix.IntField.__init__(self, 534, data)

class AffectedOrderID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 535)
		else:
			quickfix.StringField.__init__(self, 535, data)

class AffectedSecondaryOrderID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 536)
		else:
			quickfix.StringField.__init__(self, 536, data)

class QuoteType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 537)
		else:
			quickfix.IntField.__init__(self, 537, data)

class NestedPartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 538)
		else:
			quickfix.IntField.__init__(self, 538, data)

class NoNestedPartyIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 539)
		else:
			quickfix.IntField.__init__(self, 539, data)

class TotalAccruedInterestAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 540)
		else:
			quickfix.DoubleField.__init__(self, 540, data)

class MaturityDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 541)
		else:
			quickfix.StringField.__init__(self, 541, data)

class UnderlyingMaturityDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 542)
		else:
			quickfix.StringField.__init__(self, 542, data)

class InstrRegistry(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 543)
		else:
			quickfix.StringField.__init__(self, 543, data)

class CashMargin(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 544)
		else:
			quickfix.CharField.__init__(self, 544, data)

class NestedPartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 545)
		else:
			quickfix.StringField.__init__(self, 545, data)

class Scope(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 546)
		else:
			quickfix.StringField.__init__(self, 546, data)

class MDImplicitDelete(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 547)
		else:
			quickfix.BoolField.__init__(self, 547, data)

class CrossID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 548)
		else:
			quickfix.StringField.__init__(self, 548, data)

class CrossType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 549)
		else:
			quickfix.IntField.__init__(self, 549, data)

class CrossPrioritization(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 550)
		else:
			quickfix.IntField.__init__(self, 550, data)

class OrigCrossID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 551)
		else:
			quickfix.StringField.__init__(self, 551, data)

class NoSides(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 552)
		else:
			quickfix.IntField.__init__(self, 552, data)

class NoLegs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 555)
		else:
			quickfix.IntField.__init__(self, 555, data)

class LegCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 556)
		else:
			quickfix.StringField.__init__(self, 556, data)

class TotalNumSecurityTypes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 557)
		else:
			quickfix.IntField.__init__(self, 557, data)

class NoSecurityTypes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 558)
		else:
			quickfix.IntField.__init__(self, 558, data)

class SecurityListRequestType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 559)
		else:
			quickfix.IntField.__init__(self, 559, data)

class SecurityRequestResult(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 560)
		else:
			quickfix.IntField.__init__(self, 560, data)

class RoundLot(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 561)
		else:
			quickfix.DoubleField.__init__(self, 561, data)

class MinTradeVol(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 562)
		else:
			quickfix.DoubleField.__init__(self, 562, data)

class MultiLegRptTypeReq(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 563)
		else:
			quickfix.IntField.__init__(self, 563, data)

class LegPositionEffect(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 564)
		else:
			quickfix.CharField.__init__(self, 564, data)

class LegCoveredOrUncovered(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 565)
		else:
			quickfix.IntField.__init__(self, 565, data)

class LegPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 566)
		else:
			quickfix.DoubleField.__init__(self, 566, data)

class TradSesStatusRejReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 567)
		else:
			quickfix.IntField.__init__(self, 567, data)

class TradeRequestID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 568)
		else:
			quickfix.StringField.__init__(self, 568, data)

class TradeRequestType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 569)
		else:
			quickfix.IntField.__init__(self, 569, data)

class PreviouslyReported(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 570)
		else:
			quickfix.BoolField.__init__(self, 570, data)

class TradeReportID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 571)
		else:
			quickfix.StringField.__init__(self, 571, data)

class TradeReportRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 572)
		else:
			quickfix.StringField.__init__(self, 572, data)

class MatchStatus(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 573)
		else:
			quickfix.CharField.__init__(self, 573, data)

class MatchType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 574)
		else:
			quickfix.StringField.__init__(self, 574, data)

class OddLot(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 575)
		else:
			quickfix.BoolField.__init__(self, 575, data)

class NoClearingInstructions(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 576)
		else:
			quickfix.IntField.__init__(self, 576, data)

class ClearingInstruction(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 577)
		else:
			quickfix.IntField.__init__(self, 577, data)

class TradeInputSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 578)
		else:
			quickfix.StringField.__init__(self, 578, data)

class TradeInputDevice(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 579)
		else:
			quickfix.StringField.__init__(self, 579, data)

class NoDates(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 580)
		else:
			quickfix.IntField.__init__(self, 580, data)

class AccountType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 581)
		else:
			quickfix.IntField.__init__(self, 581, data)

class CustOrderCapacity(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 582)
		else:
			quickfix.IntField.__init__(self, 582, data)

class ClOrdLinkID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 583)
		else:
			quickfix.StringField.__init__(self, 583, data)

class MassStatusReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 584)
		else:
			quickfix.StringField.__init__(self, 584, data)

class MassStatusReqType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 585)
		else:
			quickfix.IntField.__init__(self, 585, data)

class OrigOrdModTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 586)
		else:
			quickfix.UtcTimeStampField.__init__(self, 586, data)

class LegSettlmntTyp(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 587)
		else:
			quickfix.CharField.__init__(self, 587, data)

class LegFutSettDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 588)
		else:
			quickfix.StringField.__init__(self, 588, data)

class DayBookingInst(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 589)
		else:
			quickfix.CharField.__init__(self, 589, data)

class BookingUnit(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 590)
		else:
			quickfix.CharField.__init__(self, 590, data)

class PreallocMethod(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 591)
		else:
			quickfix.CharField.__init__(self, 591, data)

class UnderlyingCountryOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 592)
		else:
			quickfix.StringField.__init__(self, 592, data)

class UnderlyingStateOrProvinceOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 593)
		else:
			quickfix.StringField.__init__(self, 593, data)

class UnderlyingLocaleOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 594)
		else:
			quickfix.StringField.__init__(self, 594, data)

class UnderlyingInstrRegistry(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 595)
		else:
			quickfix.StringField.__init__(self, 595, data)

class LegCountryOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 596)
		else:
			quickfix.StringField.__init__(self, 596, data)

class LegStateOrProvinceOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 597)
		else:
			quickfix.StringField.__init__(self, 597, data)

class LegLocaleOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 598)
		else:
			quickfix.StringField.__init__(self, 598, data)

class LegInstrRegistry(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 599)
		else:
			quickfix.StringField.__init__(self, 599, data)

class LegSymbol(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 600)
		else:
			quickfix.StringField.__init__(self, 600, data)

class LegSymbolSfx(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 601)
		else:
			quickfix.StringField.__init__(self, 601, data)

class LegSecurityID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 602)
		else:
			quickfix.StringField.__init__(self, 602, data)

class LegSecurityIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 603)
		else:
			quickfix.StringField.__init__(self, 603, data)

class NoLegSecurityAltID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 604)
		else:
			quickfix.IntField.__init__(self, 604, data)

class LegSecurityAltID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 605)
		else:
			quickfix.StringField.__init__(self, 605, data)

class LegSecurityAltIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 606)
		else:
			quickfix.StringField.__init__(self, 606, data)

class LegProduct(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 607)
		else:
			quickfix.IntField.__init__(self, 607, data)

class LegCFICode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 608)
		else:
			quickfix.StringField.__init__(self, 608, data)

class LegSecurityType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 609)
		else:
			quickfix.StringField.__init__(self, 609, data)

class LegMaturityMonthYear(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 610)
		else:
			quickfix.StringField.__init__(self, 610, data)

class LegMaturityDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 611)
		else:
			quickfix.StringField.__init__(self, 611, data)

class LegStrikePrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 612)
		else:
			quickfix.DoubleField.__init__(self, 612, data)

class LegOptAttribute(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 613)
		else:
			quickfix.CharField.__init__(self, 613, data)

class LegContractMultiplier(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 614)
		else:
			quickfix.DoubleField.__init__(self, 614, data)

class LegCouponRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 615)
		else:
			quickfix.DoubleField.__init__(self, 615, data)

class LegSecurityExchange(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 616)
		else:
			quickfix.StringField.__init__(self, 616, data)

class LegIssuer(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 617)
		else:
			quickfix.StringField.__init__(self, 617, data)

class EncodedLegIssuerLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 618)
		else:
			quickfix.IntField.__init__(self, 618, data)

class EncodedLegIssuer(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 619)
		else:
			quickfix.StringField.__init__(self, 619, data)

class LegSecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 620)
		else:
			quickfix.StringField.__init__(self, 620, data)

class EncodedLegSecurityDescLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 621)
		else:
			quickfix.IntField.__init__(self, 621, data)

class EncodedLegSecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 622)
		else:
			quickfix.StringField.__init__(self, 622, data)

class LegRatioQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 623)
		else:
			quickfix.DoubleField.__init__(self, 623, data)

class LegSide(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 624)
		else:
			quickfix.CharField.__init__(self, 624, data)

class TradingSessionSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 625)
		else:
			quickfix.StringField.__init__(self, 625, data)

class AllocType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 626)
		else:
			quickfix.IntField.__init__(self, 626, data)

class MidPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 631)
		else:
			quickfix.DoubleField.__init__(self, 631, data)

class BidYield(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 632)
		else:
			quickfix.DoubleField.__init__(self, 632, data)

class MidYield(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 633)
		else:
			quickfix.DoubleField.__init__(self, 633, data)

class OfferYield(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 634)
		else:
			quickfix.DoubleField.__init__(self, 634, data)

class ClearingFeeIndicator(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 635)
		else:
			quickfix.StringField.__init__(self, 635, data)

class WorkingIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 636)
		else:
			quickfix.BoolField.__init__(self, 636, data)

class LegLastPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 637)
		else:
			quickfix.DoubleField.__init__(self, 637, data)

class PriorityIndicator(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 638)
		else:
			quickfix.IntField.__init__(self, 638, data)

class PriceImprovement(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 639)
		else:
			quickfix.DoubleField.__init__(self, 639, data)

class Price2(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 640)
		else:
			quickfix.DoubleField.__init__(self, 640, data)

class LastForwardPoints2(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 641)
		else:
			quickfix.DoubleField.__init__(self, 641, data)

class BidForwardPoints2(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 642)
		else:
			quickfix.DoubleField.__init__(self, 642, data)

class OfferForwardPoints2(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 643)
		else:
			quickfix.DoubleField.__init__(self, 643, data)

class RFQReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 644)
		else:
			quickfix.StringField.__init__(self, 644, data)

class MktBidPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 645)
		else:
			quickfix.DoubleField.__init__(self, 645, data)

class MktOfferPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 646)
		else:
			quickfix.DoubleField.__init__(self, 646, data)

class MinBidSize(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 647)
		else:
			quickfix.DoubleField.__init__(self, 647, data)

class MinOfferSize(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 648)
		else:
			quickfix.DoubleField.__init__(self, 648, data)

class QuoteStatusReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 649)
		else:
			quickfix.StringField.__init__(self, 649, data)

class LegalConfirm(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 650)
		else:
			quickfix.BoolField.__init__(self, 650, data)

class UnderlyingLastPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 651)
		else:
			quickfix.DoubleField.__init__(self, 651, data)

class UnderlyingLastQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 652)
		else:
			quickfix.DoubleField.__init__(self, 652, data)

class LegRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 654)
		else:
			quickfix.StringField.__init__(self, 654, data)

class ContraLegRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 655)
		else:
			quickfix.StringField.__init__(self, 655, data)

class SettlCurrBidFxRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 656)
		else:
			quickfix.DoubleField.__init__(self, 656, data)

class SettlCurrOfferFxRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 657)
		else:
			quickfix.DoubleField.__init__(self, 657, data)

class QuoteRequestRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 658)
		else:
			quickfix.IntField.__init__(self, 658, data)

class SideComplianceID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 659)
		else:
			quickfix.StringField.__init__(self, 659, data)

class IOIID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 23)
		else:
			quickfix.StringField.__init__(self, 23, data)

class NoLinesOfText(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 33)
		else:
			quickfix.IntField.__init__(self, 33, data)

class SettlType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 63)
		else:
			quickfix.StringField.__init__(self, 63, data)

class SettlDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 64)
		else:
			quickfix.StringField.__init__(self, 64, data)

class AvgPxPrecision(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 74)
		else:
			quickfix.IntField.__init__(self, 74, data)

class SettlDate2(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 193)
		else:
			quickfix.StringField.__init__(self, 193, data)

class PegOffsetValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 211)
		else:
			quickfix.DoubleField.__init__(self, 211, data)

class OpenCloseSettlFlag(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 286)
		else:
			quickfix.StringField.__init__(self, 286, data)

class TotNoQuoteEntries(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 304)
		else:
			quickfix.IntField.__init__(self, 304, data)

class DiscretionOffsetValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 389)
		else:
			quickfix.DoubleField.__init__(self, 389, data)

class TotNoRelatedSym(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 393)
		else:
			quickfix.IntField.__init__(self, 393, data)

class BidTradeType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 418)
		else:
			quickfix.CharField.__init__(self, 418, data)

class CardIssNum(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 491)
		else:
			quickfix.StringField.__init__(self, 491, data)

class CashDistribAgentAcctName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 502)
		else:
			quickfix.StringField.__init__(self, 502, data)

class RegistDtls(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 509)
		else:
			quickfix.StringField.__init__(self, 509, data)

class TotNoSecurityTypes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 557)
		else:
			quickfix.IntField.__init__(self, 557, data)

class LegSettlType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 587)
		else:
			quickfix.CharField.__init__(self, 587, data)

class LegSettlDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 588)
		else:
			quickfix.StringField.__init__(self, 588, data)

class AcctIDSource(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 660)
		else:
			quickfix.IntField.__init__(self, 660, data)

class AllocAcctIDSource(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 661)
		else:
			quickfix.IntField.__init__(self, 661, data)

class BenchmarkPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 662)
		else:
			quickfix.DoubleField.__init__(self, 662, data)

class BenchmarkPriceType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 663)
		else:
			quickfix.IntField.__init__(self, 663, data)

class ConfirmID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 664)
		else:
			quickfix.StringField.__init__(self, 664, data)

class ConfirmStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 665)
		else:
			quickfix.IntField.__init__(self, 665, data)

class ConfirmTransType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 666)
		else:
			quickfix.IntField.__init__(self, 666, data)

class ContractSettlMonth(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 667)
		else:
			quickfix.StringField.__init__(self, 667, data)

class DeliveryForm(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 668)
		else:
			quickfix.IntField.__init__(self, 668, data)

class LastParPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 669)
		else:
			quickfix.DoubleField.__init__(self, 669, data)

class NoLegAllocs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 670)
		else:
			quickfix.IntField.__init__(self, 670, data)

class LegAllocAccount(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 671)
		else:
			quickfix.StringField.__init__(self, 671, data)

class LegIndividualAllocID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 672)
		else:
			quickfix.StringField.__init__(self, 672, data)

class LegAllocQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 673)
		else:
			quickfix.DoubleField.__init__(self, 673, data)

class LegAllocAcctIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 674)
		else:
			quickfix.StringField.__init__(self, 674, data)

class LegSettlCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 675)
		else:
			quickfix.StringField.__init__(self, 675, data)

class LegBenchmarkCurveCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 676)
		else:
			quickfix.StringField.__init__(self, 676, data)

class LegBenchmarkCurveName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 677)
		else:
			quickfix.StringField.__init__(self, 677, data)

class LegBenchmarkCurvePoint(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 678)
		else:
			quickfix.StringField.__init__(self, 678, data)

class LegBenchmarkPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 679)
		else:
			quickfix.DoubleField.__init__(self, 679, data)

class LegBenchmarkPriceType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 680)
		else:
			quickfix.IntField.__init__(self, 680, data)

class LegBidPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 681)
		else:
			quickfix.DoubleField.__init__(self, 681, data)

class LegIOIQty(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 682)
		else:
			quickfix.StringField.__init__(self, 682, data)

class NoLegStipulations(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 683)
		else:
			quickfix.IntField.__init__(self, 683, data)

class LegOfferPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 684)
		else:
			quickfix.DoubleField.__init__(self, 684, data)

class LegPriceType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 686)
		else:
			quickfix.IntField.__init__(self, 686, data)

class LegQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 687)
		else:
			quickfix.DoubleField.__init__(self, 687, data)

class LegStipulationType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 688)
		else:
			quickfix.StringField.__init__(self, 688, data)

class LegStipulationValue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 689)
		else:
			quickfix.StringField.__init__(self, 689, data)

class LegSwapType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 690)
		else:
			quickfix.IntField.__init__(self, 690, data)

class Pool(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 691)
		else:
			quickfix.StringField.__init__(self, 691, data)

class QuotePriceType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 692)
		else:
			quickfix.IntField.__init__(self, 692, data)

class QuoteRespID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 693)
		else:
			quickfix.StringField.__init__(self, 693, data)

class QuoteRespType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 694)
		else:
			quickfix.IntField.__init__(self, 694, data)

class QuoteQualifier(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 695)
		else:
			quickfix.CharField.__init__(self, 695, data)

class YieldRedemptionDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 696)
		else:
			quickfix.StringField.__init__(self, 696, data)

class YieldRedemptionPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 697)
		else:
			quickfix.DoubleField.__init__(self, 697, data)

class YieldRedemptionPriceType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 698)
		else:
			quickfix.IntField.__init__(self, 698, data)

class BenchmarkSecurityID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 699)
		else:
			quickfix.StringField.__init__(self, 699, data)

class ReversalIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 700)
		else:
			quickfix.BoolField.__init__(self, 700, data)

class YieldCalcDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 701)
		else:
			quickfix.StringField.__init__(self, 701, data)

class NoPositions(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 702)
		else:
			quickfix.IntField.__init__(self, 702, data)

class PosType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 703)
		else:
			quickfix.StringField.__init__(self, 703, data)

class LongQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 704)
		else:
			quickfix.DoubleField.__init__(self, 704, data)

class ShortQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 705)
		else:
			quickfix.DoubleField.__init__(self, 705, data)

class PosQtyStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 706)
		else:
			quickfix.IntField.__init__(self, 706, data)

class PosAmtType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 707)
		else:
			quickfix.StringField.__init__(self, 707, data)

class PosAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 708)
		else:
			quickfix.DoubleField.__init__(self, 708, data)

class PosTransType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 709)
		else:
			quickfix.IntField.__init__(self, 709, data)

class PosReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 710)
		else:
			quickfix.StringField.__init__(self, 710, data)

class NoUnderlyings(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 711)
		else:
			quickfix.IntField.__init__(self, 711, data)

class PosMaintAction(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 712)
		else:
			quickfix.IntField.__init__(self, 712, data)

class OrigPosReqRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 713)
		else:
			quickfix.StringField.__init__(self, 713, data)

class PosMaintRptRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 714)
		else:
			quickfix.StringField.__init__(self, 714, data)

class ClearingBusinessDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 715)
		else:
			quickfix.StringField.__init__(self, 715, data)

class SettlSessID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 716)
		else:
			quickfix.StringField.__init__(self, 716, data)

class SettlSessSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 717)
		else:
			quickfix.StringField.__init__(self, 717, data)

class AdjustmentType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 718)
		else:
			quickfix.IntField.__init__(self, 718, data)

class ContraryInstructionIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 719)
		else:
			quickfix.BoolField.__init__(self, 719, data)

class PriorSpreadIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 720)
		else:
			quickfix.BoolField.__init__(self, 720, data)

class PosMaintRptID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 721)
		else:
			quickfix.StringField.__init__(self, 721, data)

class PosMaintStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 722)
		else:
			quickfix.IntField.__init__(self, 722, data)

class PosMaintResult(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 723)
		else:
			quickfix.IntField.__init__(self, 723, data)

class PosReqType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 724)
		else:
			quickfix.IntField.__init__(self, 724, data)

class ResponseTransportType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 725)
		else:
			quickfix.IntField.__init__(self, 725, data)

class ResponseDestination(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 726)
		else:
			quickfix.StringField.__init__(self, 726, data)

class TotalNumPosReports(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 727)
		else:
			quickfix.IntField.__init__(self, 727, data)

class PosReqResult(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 728)
		else:
			quickfix.IntField.__init__(self, 728, data)

class PosReqStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 729)
		else:
			quickfix.IntField.__init__(self, 729, data)

class SettlPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 730)
		else:
			quickfix.DoubleField.__init__(self, 730, data)

class SettlPriceType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 731)
		else:
			quickfix.IntField.__init__(self, 731, data)

class UnderlyingSettlPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 732)
		else:
			quickfix.DoubleField.__init__(self, 732, data)

class UnderlyingSettlPriceType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 733)
		else:
			quickfix.IntField.__init__(self, 733, data)

class PriorSettlPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 734)
		else:
			quickfix.DoubleField.__init__(self, 734, data)

class NoQuoteQualifiers(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 735)
		else:
			quickfix.IntField.__init__(self, 735, data)

class AllocSettlCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 736)
		else:
			quickfix.StringField.__init__(self, 736, data)

class AllocSettlCurrAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 737)
		else:
			quickfix.DoubleField.__init__(self, 737, data)

class InterestAtMaturity(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 738)
		else:
			quickfix.DoubleField.__init__(self, 738, data)

class LegDatedDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 739)
		else:
			quickfix.StringField.__init__(self, 739, data)

class LegPool(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 740)
		else:
			quickfix.StringField.__init__(self, 740, data)

class AllocInterestAtMaturity(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 741)
		else:
			quickfix.DoubleField.__init__(self, 741, data)

class AllocAccruedInterestAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 742)
		else:
			quickfix.DoubleField.__init__(self, 742, data)

class DeliveryDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 743)
		else:
			quickfix.StringField.__init__(self, 743, data)

class AssignmentMethod(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 744)
		else:
			quickfix.CharField.__init__(self, 744, data)

class AssignmentUnit(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 745)
		else:
			quickfix.DoubleField.__init__(self, 745, data)

class OpenInterest(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 746)
		else:
			quickfix.DoubleField.__init__(self, 746, data)

class ExerciseMethod(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 747)
		else:
			quickfix.CharField.__init__(self, 747, data)

class TotNumTradeReports(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 748)
		else:
			quickfix.IntField.__init__(self, 748, data)

class TradeRequestResult(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 749)
		else:
			quickfix.IntField.__init__(self, 749, data)

class TradeRequestStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 750)
		else:
			quickfix.IntField.__init__(self, 750, data)

class TradeReportRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 751)
		else:
			quickfix.IntField.__init__(self, 751, data)

class SideMultiLegReportingType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 752)
		else:
			quickfix.IntField.__init__(self, 752, data)

class NoPosAmt(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 753)
		else:
			quickfix.IntField.__init__(self, 753, data)

class AutoAcceptIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 754)
		else:
			quickfix.BoolField.__init__(self, 754, data)

class AllocReportID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 755)
		else:
			quickfix.StringField.__init__(self, 755, data)

class NoNested2PartyIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 756)
		else:
			quickfix.IntField.__init__(self, 756, data)

class Nested2PartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 757)
		else:
			quickfix.StringField.__init__(self, 757, data)

class Nested2PartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 758)
		else:
			quickfix.CharField.__init__(self, 758, data)

class Nested2PartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 759)
		else:
			quickfix.IntField.__init__(self, 759, data)

class Nested2PartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 760)
		else:
			quickfix.StringField.__init__(self, 760, data)

class BenchmarkSecurityIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 761)
		else:
			quickfix.StringField.__init__(self, 761, data)

class SecuritySubType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 762)
		else:
			quickfix.StringField.__init__(self, 762, data)

class UnderlyingSecuritySubType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 763)
		else:
			quickfix.StringField.__init__(self, 763, data)

class LegSecuritySubType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 764)
		else:
			quickfix.StringField.__init__(self, 764, data)

class AllowableOneSidednessPct(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 765)
		else:
			quickfix.DoubleField.__init__(self, 765, data)

class AllowableOneSidednessValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 766)
		else:
			quickfix.DoubleField.__init__(self, 766, data)

class AllowableOneSidednessCurr(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 767)
		else:
			quickfix.StringField.__init__(self, 767, data)

class NoTrdRegTimestamps(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 768)
		else:
			quickfix.IntField.__init__(self, 768, data)

class TrdRegTimestamp(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 769)
		else:
			quickfix.UtcTimeStampField.__init__(self, 769, data)

class TrdRegTimestampType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 770)
		else:
			quickfix.IntField.__init__(self, 770, data)

class TrdRegTimestampOrigin(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 771)
		else:
			quickfix.StringField.__init__(self, 771, data)

class ConfirmRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 772)
		else:
			quickfix.StringField.__init__(self, 772, data)

class ConfirmType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 773)
		else:
			quickfix.IntField.__init__(self, 773, data)

class ConfirmRejReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 774)
		else:
			quickfix.IntField.__init__(self, 774, data)

class BookingType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 775)
		else:
			quickfix.IntField.__init__(self, 775, data)

class IndividualAllocRejCode(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 776)
		else:
			quickfix.IntField.__init__(self, 776, data)

class SettlInstMsgID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 777)
		else:
			quickfix.StringField.__init__(self, 777, data)

class NoSettlInst(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 778)
		else:
			quickfix.IntField.__init__(self, 778, data)

class LastUpdateTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 779)
		else:
			quickfix.UtcTimeStampField.__init__(self, 779, data)

class AllocSettlInstType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 780)
		else:
			quickfix.IntField.__init__(self, 780, data)

class NoSettlPartyIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 781)
		else:
			quickfix.IntField.__init__(self, 781, data)

class SettlPartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 782)
		else:
			quickfix.StringField.__init__(self, 782, data)

class SettlPartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 783)
		else:
			quickfix.CharField.__init__(self, 783, data)

class SettlPartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 784)
		else:
			quickfix.IntField.__init__(self, 784, data)

class SettlPartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 785)
		else:
			quickfix.StringField.__init__(self, 785, data)

class SettlPartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 786)
		else:
			quickfix.IntField.__init__(self, 786, data)

class DlvyInstType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 787)
		else:
			quickfix.CharField.__init__(self, 787, data)

class TerminationType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 788)
		else:
			quickfix.IntField.__init__(self, 788, data)

class OrdStatusReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 790)
		else:
			quickfix.StringField.__init__(self, 790, data)

class SettlInstReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 791)
		else:
			quickfix.StringField.__init__(self, 791, data)

class SettlInstReqRejCode(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 792)
		else:
			quickfix.IntField.__init__(self, 792, data)

class SecondaryAllocID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 793)
		else:
			quickfix.StringField.__init__(self, 793, data)

class AllocReportType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 794)
		else:
			quickfix.IntField.__init__(self, 794, data)

class AllocReportRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 795)
		else:
			quickfix.StringField.__init__(self, 795, data)

class AllocCancReplaceReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 796)
		else:
			quickfix.IntField.__init__(self, 796, data)

class CopyMsgIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 797)
		else:
			quickfix.BoolField.__init__(self, 797, data)

class AllocAccountType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 798)
		else:
			quickfix.IntField.__init__(self, 798, data)

class OrderAvgPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 799)
		else:
			quickfix.DoubleField.__init__(self, 799, data)

class OrderBookingQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 800)
		else:
			quickfix.DoubleField.__init__(self, 800, data)

class NoSettlPartySubIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 801)
		else:
			quickfix.IntField.__init__(self, 801, data)

class NoPartySubIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 802)
		else:
			quickfix.IntField.__init__(self, 802, data)

class PartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 803)
		else:
			quickfix.IntField.__init__(self, 803, data)

class NoNestedPartySubIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 804)
		else:
			quickfix.IntField.__init__(self, 804, data)

class NestedPartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 805)
		else:
			quickfix.IntField.__init__(self, 805, data)

class NoNested2PartySubIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 806)
		else:
			quickfix.IntField.__init__(self, 806, data)

class Nested2PartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 807)
		else:
			quickfix.IntField.__init__(self, 807, data)

class AllocIntermedReqType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 808)
		else:
			quickfix.IntField.__init__(self, 808, data)

class UnderlyingPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 810)
		else:
			quickfix.DoubleField.__init__(self, 810, data)

class PriceDelta(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 811)
		else:
			quickfix.DoubleField.__init__(self, 811, data)

class ApplQueueMax(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 812)
		else:
			quickfix.IntField.__init__(self, 812, data)

class ApplQueueDepth(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 813)
		else:
			quickfix.IntField.__init__(self, 813, data)

class ApplQueueResolution(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 814)
		else:
			quickfix.IntField.__init__(self, 814, data)

class ApplQueueAction(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 815)
		else:
			quickfix.IntField.__init__(self, 815, data)

class NoAltMDSource(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 816)
		else:
			quickfix.IntField.__init__(self, 816, data)

class AltMDSourceID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 817)
		else:
			quickfix.StringField.__init__(self, 817, data)

class SecondaryTradeReportID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 818)
		else:
			quickfix.StringField.__init__(self, 818, data)

class AvgPxIndicator(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 819)
		else:
			quickfix.IntField.__init__(self, 819, data)

class TradeLinkID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 820)
		else:
			quickfix.StringField.__init__(self, 820, data)

class OrderInputDevice(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 821)
		else:
			quickfix.StringField.__init__(self, 821, data)

class UnderlyingTradingSessionID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 822)
		else:
			quickfix.StringField.__init__(self, 822, data)

class UnderlyingTradingSessionSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 823)
		else:
			quickfix.StringField.__init__(self, 823, data)

class TradeLegRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 824)
		else:
			quickfix.StringField.__init__(self, 824, data)

class ExchangeRule(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 825)
		else:
			quickfix.StringField.__init__(self, 825, data)

class TradeAllocIndicator(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 826)
		else:
			quickfix.IntField.__init__(self, 826, data)

class ExpirationCycle(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 827)
		else:
			quickfix.IntField.__init__(self, 827, data)

class TrdType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 828)
		else:
			quickfix.IntField.__init__(self, 828, data)

class TrdSubType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 829)
		else:
			quickfix.IntField.__init__(self, 829, data)

class TransferReason(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 830)
		else:
			quickfix.StringField.__init__(self, 830, data)

class TotNumAssignmentReports(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 832)
		else:
			quickfix.IntField.__init__(self, 832, data)

class AsgnRptID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 833)
		else:
			quickfix.StringField.__init__(self, 833, data)

class ThresholdAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 834)
		else:
			quickfix.DoubleField.__init__(self, 834, data)

class PegMoveType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 835)
		else:
			quickfix.IntField.__init__(self, 835, data)

class PegOffsetType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 836)
		else:
			quickfix.IntField.__init__(self, 836, data)

class PegLimitType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 837)
		else:
			quickfix.IntField.__init__(self, 837, data)

class PegRoundDirection(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 838)
		else:
			quickfix.IntField.__init__(self, 838, data)

class PeggedPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 839)
		else:
			quickfix.DoubleField.__init__(self, 839, data)

class PegScope(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 840)
		else:
			quickfix.IntField.__init__(self, 840, data)

class DiscretionMoveType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 841)
		else:
			quickfix.IntField.__init__(self, 841, data)

class DiscretionOffsetType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 842)
		else:
			quickfix.IntField.__init__(self, 842, data)

class DiscretionLimitType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 843)
		else:
			quickfix.IntField.__init__(self, 843, data)

class DiscretionRoundDirection(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 844)
		else:
			quickfix.IntField.__init__(self, 844, data)

class DiscretionPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 845)
		else:
			quickfix.DoubleField.__init__(self, 845, data)

class DiscretionScope(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 846)
		else:
			quickfix.IntField.__init__(self, 846, data)

class TargetStrategy(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 847)
		else:
			quickfix.IntField.__init__(self, 847, data)

class TargetStrategyParameters(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 848)
		else:
			quickfix.StringField.__init__(self, 848, data)

class ParticipationRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 849)
		else:
			quickfix.DoubleField.__init__(self, 849, data)

class TargetStrategyPerformance(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 850)
		else:
			quickfix.DoubleField.__init__(self, 850, data)

class LastLiquidityInd(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 851)
		else:
			quickfix.IntField.__init__(self, 851, data)

class PublishTrdIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 852)
		else:
			quickfix.BoolField.__init__(self, 852, data)

class ShortSaleReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 853)
		else:
			quickfix.IntField.__init__(self, 853, data)

class QtyType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 854)
		else:
			quickfix.IntField.__init__(self, 854, data)

class SecondaryTrdType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 855)
		else:
			quickfix.IntField.__init__(self, 855, data)

class TradeReportType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 856)
		else:
			quickfix.IntField.__init__(self, 856, data)

class AllocNoOrdersType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 857)
		else:
			quickfix.IntField.__init__(self, 857, data)

class SharedCommission(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 858)
		else:
			quickfix.DoubleField.__init__(self, 858, data)

class ConfirmReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 859)
		else:
			quickfix.StringField.__init__(self, 859, data)

class AvgParPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 860)
		else:
			quickfix.DoubleField.__init__(self, 860, data)

class ReportedPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 861)
		else:
			quickfix.DoubleField.__init__(self, 861, data)

class NoCapacities(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 862)
		else:
			quickfix.IntField.__init__(self, 862, data)

class OrderCapacityQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 863)
		else:
			quickfix.DoubleField.__init__(self, 863, data)

class NoEvents(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 864)
		else:
			quickfix.IntField.__init__(self, 864, data)

class EventType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 865)
		else:
			quickfix.IntField.__init__(self, 865, data)

class EventDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 866)
		else:
			quickfix.StringField.__init__(self, 866, data)

class EventPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 867)
		else:
			quickfix.DoubleField.__init__(self, 867, data)

class EventText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 868)
		else:
			quickfix.StringField.__init__(self, 868, data)

class PctAtRisk(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 869)
		else:
			quickfix.DoubleField.__init__(self, 869, data)

class NoInstrAttrib(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 870)
		else:
			quickfix.IntField.__init__(self, 870, data)

class InstrAttribType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 871)
		else:
			quickfix.IntField.__init__(self, 871, data)

class InstrAttribValue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 872)
		else:
			quickfix.StringField.__init__(self, 872, data)

class DatedDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 873)
		else:
			quickfix.StringField.__init__(self, 873, data)

class InterestAccrualDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 874)
		else:
			quickfix.StringField.__init__(self, 874, data)

class CPProgram(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 875)
		else:
			quickfix.IntField.__init__(self, 875, data)

class CPRegType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 876)
		else:
			quickfix.StringField.__init__(self, 876, data)

class UnderlyingCPProgram(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 877)
		else:
			quickfix.StringField.__init__(self, 877, data)

class UnderlyingCPRegType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 878)
		else:
			quickfix.StringField.__init__(self, 878, data)

class UnderlyingQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 879)
		else:
			quickfix.DoubleField.__init__(self, 879, data)

class TrdMatchID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 880)
		else:
			quickfix.StringField.__init__(self, 880, data)

class SecondaryTradeReportRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 881)
		else:
			quickfix.StringField.__init__(self, 881, data)

class UnderlyingDirtyPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 882)
		else:
			quickfix.DoubleField.__init__(self, 882, data)

class UnderlyingEndPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 883)
		else:
			quickfix.DoubleField.__init__(self, 883, data)

class UnderlyingStartValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 884)
		else:
			quickfix.DoubleField.__init__(self, 884, data)

class UnderlyingCurrentValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 885)
		else:
			quickfix.DoubleField.__init__(self, 885, data)

class UnderlyingEndValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 886)
		else:
			quickfix.DoubleField.__init__(self, 886, data)

class NoUnderlyingStips(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 887)
		else:
			quickfix.IntField.__init__(self, 887, data)

class UnderlyingStipType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 888)
		else:
			quickfix.StringField.__init__(self, 888, data)

class UnderlyingStipValue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 889)
		else:
			quickfix.StringField.__init__(self, 889, data)

class MaturityNetMoney(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 890)
		else:
			quickfix.DoubleField.__init__(self, 890, data)

class MiscFeeBasis(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 891)
		else:
			quickfix.IntField.__init__(self, 891, data)

class TotNoAllocs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 892)
		else:
			quickfix.IntField.__init__(self, 892, data)

class LastFragment(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 893)
		else:
			quickfix.BoolField.__init__(self, 893, data)

class CollReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 894)
		else:
			quickfix.StringField.__init__(self, 894, data)

class CollAsgnReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 895)
		else:
			quickfix.IntField.__init__(self, 895, data)

class CollInquiryQualifier(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 896)
		else:
			quickfix.IntField.__init__(self, 896, data)

class NoTrades(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 897)
		else:
			quickfix.IntField.__init__(self, 897, data)

class MarginRatio(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 898)
		else:
			quickfix.DoubleField.__init__(self, 898, data)

class MarginExcess(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 899)
		else:
			quickfix.DoubleField.__init__(self, 899, data)

class TotalNetValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 900)
		else:
			quickfix.DoubleField.__init__(self, 900, data)

class CashOutstanding(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 901)
		else:
			quickfix.DoubleField.__init__(self, 901, data)

class CollAsgnID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 902)
		else:
			quickfix.StringField.__init__(self, 902, data)

class CollAsgnTransType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 903)
		else:
			quickfix.IntField.__init__(self, 903, data)

class CollRespID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 904)
		else:
			quickfix.StringField.__init__(self, 904, data)

class CollAsgnRespType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 905)
		else:
			quickfix.IntField.__init__(self, 905, data)

class CollAsgnRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 906)
		else:
			quickfix.IntField.__init__(self, 906, data)

class CollAsgnRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 907)
		else:
			quickfix.StringField.__init__(self, 907, data)

class CollRptID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 908)
		else:
			quickfix.StringField.__init__(self, 908, data)

class CollInquiryID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 909)
		else:
			quickfix.StringField.__init__(self, 909, data)

class CollStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 910)
		else:
			quickfix.IntField.__init__(self, 910, data)

class TotNumReports(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 911)
		else:
			quickfix.IntField.__init__(self, 911, data)

class LastRptRequested(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 912)
		else:
			quickfix.BoolField.__init__(self, 912, data)

class AgreementDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 913)
		else:
			quickfix.StringField.__init__(self, 913, data)

class AgreementID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 914)
		else:
			quickfix.StringField.__init__(self, 914, data)

class AgreementDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 915)
		else:
			quickfix.StringField.__init__(self, 915, data)

class StartDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 916)
		else:
			quickfix.StringField.__init__(self, 916, data)

class EndDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 917)
		else:
			quickfix.StringField.__init__(self, 917, data)

class AgreementCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 918)
		else:
			quickfix.StringField.__init__(self, 918, data)

class DeliveryType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 919)
		else:
			quickfix.IntField.__init__(self, 919, data)

class EndAccruedInterestAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 920)
		else:
			quickfix.DoubleField.__init__(self, 920, data)

class StartCash(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 921)
		else:
			quickfix.DoubleField.__init__(self, 921, data)

class EndCash(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 922)
		else:
			quickfix.DoubleField.__init__(self, 922, data)

class UserRequestID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 923)
		else:
			quickfix.StringField.__init__(self, 923, data)

class UserRequestType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 924)
		else:
			quickfix.IntField.__init__(self, 924, data)

class NewPassword(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 925)
		else:
			quickfix.StringField.__init__(self, 925, data)

class UserStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 926)
		else:
			quickfix.IntField.__init__(self, 926, data)

class UserStatusText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 927)
		else:
			quickfix.StringField.__init__(self, 927, data)

class StatusValue(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 928)
		else:
			quickfix.IntField.__init__(self, 928, data)

class StatusText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 929)
		else:
			quickfix.StringField.__init__(self, 929, data)

class RefCompID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 930)
		else:
			quickfix.StringField.__init__(self, 930, data)

class RefSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 931)
		else:
			quickfix.StringField.__init__(self, 931, data)

class NetworkResponseID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 932)
		else:
			quickfix.StringField.__init__(self, 932, data)

class NetworkRequestID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 933)
		else:
			quickfix.StringField.__init__(self, 933, data)

class LastNetworkResponseID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 934)
		else:
			quickfix.StringField.__init__(self, 934, data)

class NetworkRequestType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 935)
		else:
			quickfix.IntField.__init__(self, 935, data)

class NoCompIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 936)
		else:
			quickfix.IntField.__init__(self, 936, data)

class NetworkStatusResponseType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 937)
		else:
			quickfix.IntField.__init__(self, 937, data)

class NoCollInquiryQualifier(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 938)
		else:
			quickfix.IntField.__init__(self, 938, data)

class TrdRptStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 939)
		else:
			quickfix.IntField.__init__(self, 939, data)

class AffirmStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 940)
		else:
			quickfix.IntField.__init__(self, 940, data)

class UnderlyingStrikeCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 941)
		else:
			quickfix.StringField.__init__(self, 941, data)

class LegStrikeCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 942)
		else:
			quickfix.StringField.__init__(self, 942, data)

class TimeBracket(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 943)
		else:
			quickfix.StringField.__init__(self, 943, data)

class CollAction(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 944)
		else:
			quickfix.IntField.__init__(self, 944, data)

class CollInquiryStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 945)
		else:
			quickfix.IntField.__init__(self, 945, data)

class CollInquiryResult(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 946)
		else:
			quickfix.IntField.__init__(self, 946, data)

class StrikeCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 947)
		else:
			quickfix.StringField.__init__(self, 947, data)

class NoNested3PartyIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 948)
		else:
			quickfix.IntField.__init__(self, 948, data)

class Nested3PartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 949)
		else:
			quickfix.StringField.__init__(self, 949, data)

class Nested3PartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 950)
		else:
			quickfix.CharField.__init__(self, 950, data)

class Nested3PartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 951)
		else:
			quickfix.IntField.__init__(self, 951, data)

class NoNested3PartySubIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 952)
		else:
			quickfix.IntField.__init__(self, 952, data)

class Nested3PartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 953)
		else:
			quickfix.StringField.__init__(self, 953, data)

class Nested3PartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 954)
		else:
			quickfix.IntField.__init__(self, 954, data)

class LegContractSettlMonth(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 955)
		else:
			quickfix.StringField.__init__(self, 955, data)

class LegInterestAccrualDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 956)
		else:
			quickfix.StringField.__init__(self, 956, data)

class LegOrderQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 685)
		else:
			quickfix.DoubleField.__init__(self, 685, data)

class NoStrategyParameters(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 957)
		else:
			quickfix.IntField.__init__(self, 957, data)

class StrategyParameterName(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 958)
		else:
			quickfix.StringField.__init__(self, 958, data)

class StrategyParameterType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 959)
		else:
			quickfix.IntField.__init__(self, 959, data)

class StrategyParameterValue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 960)
		else:
			quickfix.StringField.__init__(self, 960, data)

class HostCrossID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 961)
		else:
			quickfix.StringField.__init__(self, 961, data)

class SideTimeInForce(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 962)
		else:
			quickfix.UtcTimeStampField.__init__(self, 962, data)

class MDReportID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 963)
		else:
			quickfix.IntField.__init__(self, 963, data)

class SecurityReportID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 964)
		else:
			quickfix.IntField.__init__(self, 964, data)

class SecurityStatus(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 965)
		else:
			quickfix.StringField.__init__(self, 965, data)

class SettleOnOpenFlag(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 966)
		else:
			quickfix.StringField.__init__(self, 966, data)

class StrikeMultiplier(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 967)
		else:
			quickfix.DoubleField.__init__(self, 967, data)

class StrikeValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 968)
		else:
			quickfix.DoubleField.__init__(self, 968, data)

class MinPriceIncrement(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 969)
		else:
			quickfix.DoubleField.__init__(self, 969, data)

class PositionLimit(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 970)
		else:
			quickfix.IntField.__init__(self, 970, data)

class NTPositionLimit(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 971)
		else:
			quickfix.IntField.__init__(self, 971, data)

class UnderlyingAllocationPercent(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 972)
		else:
			quickfix.DoubleField.__init__(self, 972, data)

class UnderlyingCashAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 973)
		else:
			quickfix.DoubleField.__init__(self, 973, data)

class UnderlyingCashType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 974)
		else:
			quickfix.StringField.__init__(self, 974, data)

class UnderlyingSettlementType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 975)
		else:
			quickfix.IntField.__init__(self, 975, data)

class QuantityDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 976)
		else:
			quickfix.StringField.__init__(self, 976, data)

class ContIntRptID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 977)
		else:
			quickfix.StringField.__init__(self, 977, data)

class LateIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 978)
		else:
			quickfix.BoolField.__init__(self, 978, data)

class InputSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 979)
		else:
			quickfix.StringField.__init__(self, 979, data)

class SecurityUpdateAction(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 980)
		else:
			quickfix.CharField.__init__(self, 980, data)

class NoExpiration(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 981)
		else:
			quickfix.IntField.__init__(self, 981, data)

class ExpType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 982)
		else:
			quickfix.IntField.__init__(self, 982, data)

class ExpQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 983)
		else:
			quickfix.DoubleField.__init__(self, 983, data)

class NoUnderlyingAmounts(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 984)
		else:
			quickfix.IntField.__init__(self, 984, data)

class UnderlyingPayAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 985)
		else:
			quickfix.DoubleField.__init__(self, 985, data)

class UnderlyingCollectAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 986)
		else:
			quickfix.DoubleField.__init__(self, 986, data)

class UnderlyingSettlementDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 987)
		else:
			quickfix.StringField.__init__(self, 987, data)

class UnderlyingSettlementStatus(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 988)
		else:
			quickfix.StringField.__init__(self, 988, data)

class SecondaryIndividualAllocID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 989)
		else:
			quickfix.StringField.__init__(self, 989, data)

class LegReportID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 990)
		else:
			quickfix.StringField.__init__(self, 990, data)

class RndPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 991)
		else:
			quickfix.DoubleField.__init__(self, 991, data)

class IndividualAllocType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 992)
		else:
			quickfix.IntField.__init__(self, 992, data)

class AllocCustomerCapacity(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 993)
		else:
			quickfix.StringField.__init__(self, 993, data)

class TierCode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 994)
		else:
			quickfix.StringField.__init__(self, 994, data)

class UnitOfMeasure(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 996)
		else:
			quickfix.StringField.__init__(self, 996, data)

class TimeUnit(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 997)
		else:
			quickfix.StringField.__init__(self, 997, data)

class UnderlyingUnitOfMeasure(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 998)
		else:
			quickfix.StringField.__init__(self, 998, data)

class LegUnitOfMeasure(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 999)
		else:
			quickfix.StringField.__init__(self, 999, data)

class UnderlyingTimeUnit(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1000)
		else:
			quickfix.StringField.__init__(self, 1000, data)

class LegTimeUnit(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1001)
		else:
			quickfix.StringField.__init__(self, 1001, data)

class AllocMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1002)
		else:
			quickfix.IntField.__init__(self, 1002, data)

class TradeID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1003)
		else:
			quickfix.StringField.__init__(self, 1003, data)

class SideTradeReportID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1005)
		else:
			quickfix.StringField.__init__(self, 1005, data)

class SideFillStationCd(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1006)
		else:
			quickfix.StringField.__init__(self, 1006, data)

class SideReasonCd(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1007)
		else:
			quickfix.StringField.__init__(self, 1007, data)

class SideTrdSubTyp(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1008)
		else:
			quickfix.IntField.__init__(self, 1008, data)

class SideQty(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1009)
		else:
			quickfix.IntField.__init__(self, 1009, data)

class MessageEventSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1011)
		else:
			quickfix.StringField.__init__(self, 1011, data)

class SideTrdRegTimestamp(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 1012)
		else:
			quickfix.UtcTimeStampField.__init__(self, 1012, data)

class SideTrdRegTimestampType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1013)
		else:
			quickfix.IntField.__init__(self, 1013, data)

class SideTrdRegTimestampSrc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1014)
		else:
			quickfix.StringField.__init__(self, 1014, data)

class AsOfIndicator(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1015)
		else:
			quickfix.CharField.__init__(self, 1015, data)

class NoSideTrdRegTS(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1016)
		else:
			quickfix.IntField.__init__(self, 1016, data)

class LegOptionRatio(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1017)
		else:
			quickfix.DoubleField.__init__(self, 1017, data)

class NoInstrumentParties(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1018)
		else:
			quickfix.IntField.__init__(self, 1018, data)

class InstrumentPartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1019)
		else:
			quickfix.StringField.__init__(self, 1019, data)

class TradeVolume(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1020)
		else:
			quickfix.DoubleField.__init__(self, 1020, data)

class MDBookType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1021)
		else:
			quickfix.IntField.__init__(self, 1021, data)

class MDFeedType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1022)
		else:
			quickfix.StringField.__init__(self, 1022, data)

class MDPriceLevel(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1023)
		else:
			quickfix.IntField.__init__(self, 1023, data)

class MDOriginType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1024)
		else:
			quickfix.IntField.__init__(self, 1024, data)

class FirstPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1025)
		else:
			quickfix.DoubleField.__init__(self, 1025, data)

class MDEntrySpotRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1026)
		else:
			quickfix.DoubleField.__init__(self, 1026, data)

class MDEntryForwardPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1027)
		else:
			quickfix.DoubleField.__init__(self, 1027, data)

class ManualOrderIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1028)
		else:
			quickfix.BoolField.__init__(self, 1028, data)

class CustDirectedOrder(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1029)
		else:
			quickfix.BoolField.__init__(self, 1029, data)

class ReceivedDeptID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1030)
		else:
			quickfix.StringField.__init__(self, 1030, data)

class CustOrderHandlingInst(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1031)
		else:
			quickfix.StringField.__init__(self, 1031, data)

class OrderHandlingInstSource(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1032)
		else:
			quickfix.IntField.__init__(self, 1032, data)

class DeskType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1033)
		else:
			quickfix.StringField.__init__(self, 1033, data)

class DeskTypeSource(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1034)
		else:
			quickfix.IntField.__init__(self, 1034, data)

class DeskOrderHandlingInst(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1035)
		else:
			quickfix.StringField.__init__(self, 1035, data)

class ExecAckStatus(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1036)
		else:
			quickfix.CharField.__init__(self, 1036, data)

class UnderlyingDeliveryAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1037)
		else:
			quickfix.DoubleField.__init__(self, 1037, data)

class UnderlyingCapValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1038)
		else:
			quickfix.DoubleField.__init__(self, 1038, data)

class UnderlyingSettlMethod(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1039)
		else:
			quickfix.StringField.__init__(self, 1039, data)

class SecondaryTradeID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1040)
		else:
			quickfix.StringField.__init__(self, 1040, data)

class FirmTradeID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1041)
		else:
			quickfix.StringField.__init__(self, 1041, data)

class SecondaryFirmTradeID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1042)
		else:
			quickfix.StringField.__init__(self, 1042, data)

class CollApplType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1043)
		else:
			quickfix.IntField.__init__(self, 1043, data)

class UnderlyingAdjustedQuantity(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1044)
		else:
			quickfix.DoubleField.__init__(self, 1044, data)

class UnderlyingFXRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1045)
		else:
			quickfix.DoubleField.__init__(self, 1045, data)

class UnderlyingFXRateCalc(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1046)
		else:
			quickfix.CharField.__init__(self, 1046, data)

class AllocPositionEffect(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1047)
		else:
			quickfix.CharField.__init__(self, 1047, data)

class DealingCapacity(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1048)
		else:
			quickfix.CharField.__init__(self, 1048, data)

class InstrmtAssignmentMethod(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1049)
		else:
			quickfix.CharField.__init__(self, 1049, data)

class InstrumentPartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1050)
		else:
			quickfix.CharField.__init__(self, 1050, data)

class InstrumentPartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1051)
		else:
			quickfix.IntField.__init__(self, 1051, data)

class NoInstrumentPartySubIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1052)
		else:
			quickfix.IntField.__init__(self, 1052, data)

class InstrumentPartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1053)
		else:
			quickfix.StringField.__init__(self, 1053, data)

class InstrumentPartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1054)
		else:
			quickfix.IntField.__init__(self, 1054, data)

class PositionCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1055)
		else:
			quickfix.StringField.__init__(self, 1055, data)

class CalculatedCcyLastQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1056)
		else:
			quickfix.DoubleField.__init__(self, 1056, data)

class AggressorIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1057)
		else:
			quickfix.BoolField.__init__(self, 1057, data)

class NoUndlyInstrumentParties(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1058)
		else:
			quickfix.IntField.__init__(self, 1058, data)

class UndlyInstrumentPartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1059)
		else:
			quickfix.StringField.__init__(self, 1059, data)

class UndlyInstrumentPartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1060)
		else:
			quickfix.CharField.__init__(self, 1060, data)

class UndlyInstrumentPartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1061)
		else:
			quickfix.IntField.__init__(self, 1061, data)

class NoUndlyInstrumentPartySubIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1062)
		else:
			quickfix.IntField.__init__(self, 1062, data)

class UndlyInstrumentPartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1063)
		else:
			quickfix.StringField.__init__(self, 1063, data)

class UndlyInstrumentPartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1064)
		else:
			quickfix.IntField.__init__(self, 1064, data)

class BidSwapPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1065)
		else:
			quickfix.DoubleField.__init__(self, 1065, data)

class OfferSwapPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1066)
		else:
			quickfix.DoubleField.__init__(self, 1066, data)

class LegBidForwardPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1067)
		else:
			quickfix.DoubleField.__init__(self, 1067, data)

class LegOfferForwardPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1068)
		else:
			quickfix.DoubleField.__init__(self, 1068, data)

class SwapPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1069)
		else:
			quickfix.DoubleField.__init__(self, 1069, data)

class MDQuoteType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1070)
		else:
			quickfix.IntField.__init__(self, 1070, data)

class LastSwapPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1071)
		else:
			quickfix.DoubleField.__init__(self, 1071, data)

class SideGrossTradeAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1072)
		else:
			quickfix.DoubleField.__init__(self, 1072, data)

class LegLastForwardPoints(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1073)
		else:
			quickfix.DoubleField.__init__(self, 1073, data)

class LegCalculatedCcyLastQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1074)
		else:
			quickfix.DoubleField.__init__(self, 1074, data)

class LegGrossTradeAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1075)
		else:
			quickfix.DoubleField.__init__(self, 1075, data)

class MaturityTime(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1079)
		else:
			quickfix.StringField.__init__(self, 1079, data)

class RefOrderID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1080)
		else:
			quickfix.StringField.__init__(self, 1080, data)

class RefOrderIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1081)
		else:
			quickfix.CharField.__init__(self, 1081, data)

class SecondaryDisplayQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1082)
		else:
			quickfix.DoubleField.__init__(self, 1082, data)

class DisplayWhen(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1083)
		else:
			quickfix.CharField.__init__(self, 1083, data)

class DisplayMethod(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1084)
		else:
			quickfix.CharField.__init__(self, 1084, data)

class DisplayLowQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1085)
		else:
			quickfix.DoubleField.__init__(self, 1085, data)

class DisplayHighQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1086)
		else:
			quickfix.DoubleField.__init__(self, 1086, data)

class DisplayMinIncr(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1087)
		else:
			quickfix.DoubleField.__init__(self, 1087, data)

class RefreshQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1088)
		else:
			quickfix.DoubleField.__init__(self, 1088, data)

class MatchIncrement(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1089)
		else:
			quickfix.DoubleField.__init__(self, 1089, data)

class MaxPriceLevels(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1090)
		else:
			quickfix.IntField.__init__(self, 1090, data)

class PreTradeAnonymity(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1091)
		else:
			quickfix.BoolField.__init__(self, 1091, data)

class PriceProtectionScope(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1092)
		else:
			quickfix.CharField.__init__(self, 1092, data)

class LotType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1093)
		else:
			quickfix.CharField.__init__(self, 1093, data)

class PegPriceType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1094)
		else:
			quickfix.IntField.__init__(self, 1094, data)

class PeggedRefPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1095)
		else:
			quickfix.DoubleField.__init__(self, 1095, data)

class PegSecurityIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1096)
		else:
			quickfix.StringField.__init__(self, 1096, data)

class PegSecurityID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1097)
		else:
			quickfix.StringField.__init__(self, 1097, data)

class PegSymbol(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1098)
		else:
			quickfix.StringField.__init__(self, 1098, data)

class PegSecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1099)
		else:
			quickfix.StringField.__init__(self, 1099, data)

class TriggerType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1100)
		else:
			quickfix.CharField.__init__(self, 1100, data)

class TriggerAction(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1101)
		else:
			quickfix.CharField.__init__(self, 1101, data)

class TriggerPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1102)
		else:
			quickfix.DoubleField.__init__(self, 1102, data)

class TriggerSymbol(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1103)
		else:
			quickfix.StringField.__init__(self, 1103, data)

class TriggerSecurityID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1104)
		else:
			quickfix.StringField.__init__(self, 1104, data)

class TriggerSecurityIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1105)
		else:
			quickfix.StringField.__init__(self, 1105, data)

class TriggerSecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1106)
		else:
			quickfix.StringField.__init__(self, 1106, data)

class TriggerPriceType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1107)
		else:
			quickfix.CharField.__init__(self, 1107, data)

class TriggerPriceTypeScope(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1108)
		else:
			quickfix.CharField.__init__(self, 1108, data)

class TriggerPriceDirection(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1109)
		else:
			quickfix.CharField.__init__(self, 1109, data)

class TriggerNewPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1110)
		else:
			quickfix.DoubleField.__init__(self, 1110, data)

class TriggerOrderType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1111)
		else:
			quickfix.CharField.__init__(self, 1111, data)

class TriggerNewQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1112)
		else:
			quickfix.DoubleField.__init__(self, 1112, data)

class TriggerTradingSessionID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1113)
		else:
			quickfix.StringField.__init__(self, 1113, data)

class TriggerTradingSessionSubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1114)
		else:
			quickfix.StringField.__init__(self, 1114, data)

class OrderCategory(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1115)
		else:
			quickfix.CharField.__init__(self, 1115, data)

class NoRootPartyIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1116)
		else:
			quickfix.IntField.__init__(self, 1116, data)

class RootPartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1117)
		else:
			quickfix.StringField.__init__(self, 1117, data)

class RootPartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1118)
		else:
			quickfix.CharField.__init__(self, 1118, data)

class RootPartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1119)
		else:
			quickfix.IntField.__init__(self, 1119, data)

class NoRootPartySubIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1120)
		else:
			quickfix.IntField.__init__(self, 1120, data)

class RootPartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1121)
		else:
			quickfix.StringField.__init__(self, 1121, data)

class RootPartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1122)
		else:
			quickfix.IntField.__init__(self, 1122, data)

class TradeHandlingInstr(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1123)
		else:
			quickfix.CharField.__init__(self, 1123, data)

class OrigTradeHandlingInstr(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1124)
		else:
			quickfix.CharField.__init__(self, 1124, data)

class OrigTradeDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1125)
		else:
			quickfix.StringField.__init__(self, 1125, data)

class OrigTradeID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1126)
		else:
			quickfix.StringField.__init__(self, 1126, data)

class OrigSecondaryTradeID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1127)
		else:
			quickfix.StringField.__init__(self, 1127, data)

class TZTransactTime(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1132)
		else:
			quickfix.StringField.__init__(self, 1132, data)

class ExDestinationIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1133)
		else:
			quickfix.CharField.__init__(self, 1133, data)

class ReportedPxDiff(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1134)
		else:
			quickfix.BoolField.__init__(self, 1134, data)

class RptSys(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1135)
		else:
			quickfix.StringField.__init__(self, 1135, data)

class AllocClearingFeeIndicator(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1136)
		else:
			quickfix.StringField.__init__(self, 1136, data)

class DisplayQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1138)
		else:
			quickfix.DoubleField.__init__(self, 1138, data)

class ExchangeSpecialInstructions(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1139)
		else:
			quickfix.StringField.__init__(self, 1139, data)

class NoUsernames(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 809)
		else:
			quickfix.IntField.__init__(self, 809, data)

class ExpirationQtyType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 982)
		else:
			quickfix.IntField.__init__(self, 982, data)

class MaxTradeVol(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1140)
		else:
			quickfix.DoubleField.__init__(self, 1140, data)

class NoMDFeedTypes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1141)
		else:
			quickfix.IntField.__init__(self, 1141, data)

class MatchAlgorithm(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1142)
		else:
			quickfix.StringField.__init__(self, 1142, data)

class MaxPriceVariation(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1143)
		else:
			quickfix.DoubleField.__init__(self, 1143, data)

class ImpliedMarketIndicator(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1144)
		else:
			quickfix.IntField.__init__(self, 1144, data)

class EventTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 1145)
		else:
			quickfix.UtcTimeStampField.__init__(self, 1145, data)

class MinPriceIncrementAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1146)
		else:
			quickfix.DoubleField.__init__(self, 1146, data)

class UnitOfMeasureQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1147)
		else:
			quickfix.DoubleField.__init__(self, 1147, data)

class LowLimitPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1148)
		else:
			quickfix.DoubleField.__init__(self, 1148, data)

class HighLimitPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1149)
		else:
			quickfix.DoubleField.__init__(self, 1149, data)

class TradingReferencePrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1150)
		else:
			quickfix.DoubleField.__init__(self, 1150, data)

class SecurityGroup(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1151)
		else:
			quickfix.StringField.__init__(self, 1151, data)

class LegNumber(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1152)
		else:
			quickfix.IntField.__init__(self, 1152, data)

class SettlementCycleNo(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1153)
		else:
			quickfix.IntField.__init__(self, 1153, data)

class SideCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1154)
		else:
			quickfix.StringField.__init__(self, 1154, data)

class SideSettlCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1155)
		else:
			quickfix.StringField.__init__(self, 1155, data)

class ApplExtID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1156)
		else:
			quickfix.IntField.__init__(self, 1156, data)

class CcyAmt(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1157)
		else:
			quickfix.DoubleField.__init__(self, 1157, data)

class NoSettlDetails(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1158)
		else:
			quickfix.IntField.__init__(self, 1158, data)

class SettlObligMode(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1159)
		else:
			quickfix.IntField.__init__(self, 1159, data)

class SettlObligMsgID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1160)
		else:
			quickfix.StringField.__init__(self, 1160, data)

class SettlObligID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1161)
		else:
			quickfix.StringField.__init__(self, 1161, data)

class SettlObligTransType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1162)
		else:
			quickfix.CharField.__init__(self, 1162, data)

class SettlObligRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1163)
		else:
			quickfix.StringField.__init__(self, 1163, data)

class SettlObligSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1164)
		else:
			quickfix.CharField.__init__(self, 1164, data)

class NoSettlOblig(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1165)
		else:
			quickfix.IntField.__init__(self, 1165, data)

class QuoteMsgID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1166)
		else:
			quickfix.StringField.__init__(self, 1166, data)

class QuoteEntryStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1167)
		else:
			quickfix.IntField.__init__(self, 1167, data)

class TotNoCxldQuotes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1168)
		else:
			quickfix.IntField.__init__(self, 1168, data)

class TotNoAccQuotes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1169)
		else:
			quickfix.IntField.__init__(self, 1169, data)

class TotNoRejQuotes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1170)
		else:
			quickfix.IntField.__init__(self, 1170, data)

class PrivateQuote(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1171)
		else:
			quickfix.BoolField.__init__(self, 1171, data)

class RespondentType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1172)
		else:
			quickfix.IntField.__init__(self, 1172, data)

class MDSubBookType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1173)
		else:
			quickfix.IntField.__init__(self, 1173, data)

class SecurityTradingEvent(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1174)
		else:
			quickfix.IntField.__init__(self, 1174, data)

class NoStatsIndicators(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1175)
		else:
			quickfix.IntField.__init__(self, 1175, data)

class StatsType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1176)
		else:
			quickfix.IntField.__init__(self, 1176, data)

class NoOfSecSizes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1177)
		else:
			quickfix.IntField.__init__(self, 1177, data)

class MDSecSizeType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1178)
		else:
			quickfix.IntField.__init__(self, 1178, data)

class MDSecSize(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1179)
		else:
			quickfix.DoubleField.__init__(self, 1179, data)

class ApplID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1180)
		else:
			quickfix.StringField.__init__(self, 1180, data)

class ApplSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1181)
		else:
			quickfix.IntField.__init__(self, 1181, data)

class ApplBegSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1182)
		else:
			quickfix.IntField.__init__(self, 1182, data)

class ApplEndSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1183)
		else:
			quickfix.IntField.__init__(self, 1183, data)

class SecurityXMLLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1184)
		else:
			quickfix.IntField.__init__(self, 1184, data)

class SecurityXML(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1185)
		else:
			quickfix.StringField.__init__(self, 1185, data)

class SecurityXMLSchema(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1186)
		else:
			quickfix.StringField.__init__(self, 1186, data)

class RefreshIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1187)
		else:
			quickfix.BoolField.__init__(self, 1187, data)

class Volatility(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1188)
		else:
			quickfix.DoubleField.__init__(self, 1188, data)

class TimeToExpiration(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1189)
		else:
			quickfix.DoubleField.__init__(self, 1189, data)

class RiskFreeRate(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1190)
		else:
			quickfix.DoubleField.__init__(self, 1190, data)

class PriceUnitOfMeasure(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1191)
		else:
			quickfix.StringField.__init__(self, 1191, data)

class PriceUnitOfMeasureQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1192)
		else:
			quickfix.DoubleField.__init__(self, 1192, data)

class SettlMethod(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1193)
		else:
			quickfix.CharField.__init__(self, 1193, data)

class ExerciseStyle(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1194)
		else:
			quickfix.IntField.__init__(self, 1194, data)

class OptPayAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1195)
		else:
			quickfix.DoubleField.__init__(self, 1195, data)

class PriceQuoteMethod(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1196)
		else:
			quickfix.StringField.__init__(self, 1196, data)

class FuturesValuationMethod(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1197)
		else:
			quickfix.StringField.__init__(self, 1197, data)

class ListMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1198)
		else:
			quickfix.IntField.__init__(self, 1198, data)

class CapPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1199)
		else:
			quickfix.DoubleField.__init__(self, 1199, data)

class FloorPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1200)
		else:
			quickfix.DoubleField.__init__(self, 1200, data)

class NoStrikeRules(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1201)
		else:
			quickfix.IntField.__init__(self, 1201, data)

class StartStrikePxRange(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1202)
		else:
			quickfix.DoubleField.__init__(self, 1202, data)

class EndStrikePxRange(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1203)
		else:
			quickfix.DoubleField.__init__(self, 1203, data)

class StrikeIncrement(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1204)
		else:
			quickfix.DoubleField.__init__(self, 1204, data)

class NoTickRules(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1205)
		else:
			quickfix.IntField.__init__(self, 1205, data)

class StartTickPriceRange(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1206)
		else:
			quickfix.DoubleField.__init__(self, 1206, data)

class EndTickPriceRange(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1207)
		else:
			quickfix.DoubleField.__init__(self, 1207, data)

class TickIncrement(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1208)
		else:
			quickfix.DoubleField.__init__(self, 1208, data)

class TickRuleType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1209)
		else:
			quickfix.IntField.__init__(self, 1209, data)

class NestedInstrAttribType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1210)
		else:
			quickfix.IntField.__init__(self, 1210, data)

class NestedInstrAttribValue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1211)
		else:
			quickfix.StringField.__init__(self, 1211, data)

class LegMaturityTime(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1212)
		else:
			quickfix.StringField.__init__(self, 1212, data)

class UnderlyingMaturityTime(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1213)
		else:
			quickfix.StringField.__init__(self, 1213, data)

class DerivativeSymbol(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1214)
		else:
			quickfix.StringField.__init__(self, 1214, data)

class DerivativeSymbolSfx(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1215)
		else:
			quickfix.StringField.__init__(self, 1215, data)

class DerivativeSecurityID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1216)
		else:
			quickfix.StringField.__init__(self, 1216, data)

class DerivativeSecurityIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1217)
		else:
			quickfix.StringField.__init__(self, 1217, data)

class NoDerivativeSecurityAltID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1218)
		else:
			quickfix.IntField.__init__(self, 1218, data)

class DerivativeSecurityAltID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1219)
		else:
			quickfix.StringField.__init__(self, 1219, data)

class DerivativeSecurityAltIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1220)
		else:
			quickfix.StringField.__init__(self, 1220, data)

class SecondaryLowLimitPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1221)
		else:
			quickfix.DoubleField.__init__(self, 1221, data)

class MaturityRuleID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1222)
		else:
			quickfix.StringField.__init__(self, 1222, data)

class StrikeRuleID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1223)
		else:
			quickfix.StringField.__init__(self, 1223, data)

class LegUnitOfMeasureQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1224)
		else:
			quickfix.DoubleField.__init__(self, 1224, data)

class DerivativeOptPayAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1225)
		else:
			quickfix.DoubleField.__init__(self, 1225, data)

class EndMaturityMonthYear(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1226)
		else:
			quickfix.StringField.__init__(self, 1226, data)

class ProductComplex(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1227)
		else:
			quickfix.StringField.__init__(self, 1227, data)

class DerivativeProductComplex(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1228)
		else:
			quickfix.StringField.__init__(self, 1228, data)

class MaturityMonthYearIncrement(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1229)
		else:
			quickfix.IntField.__init__(self, 1229, data)

class SecondaryHighLimitPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1230)
		else:
			quickfix.DoubleField.__init__(self, 1230, data)

class MinLotSize(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1231)
		else:
			quickfix.DoubleField.__init__(self, 1231, data)

class NoExecInstRules(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1232)
		else:
			quickfix.IntField.__init__(self, 1232, data)

class NoLotTypeRules(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1234)
		else:
			quickfix.IntField.__init__(self, 1234, data)

class NoMatchRules(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1235)
		else:
			quickfix.IntField.__init__(self, 1235, data)

class NoMaturityRules(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1236)
		else:
			quickfix.IntField.__init__(self, 1236, data)

class NoOrdTypeRules(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1237)
		else:
			quickfix.IntField.__init__(self, 1237, data)

class NoTimeInForceRules(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1239)
		else:
			quickfix.IntField.__init__(self, 1239, data)

class SecondaryTradingReferencePrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1240)
		else:
			quickfix.DoubleField.__init__(self, 1240, data)

class StartMaturityMonthYear(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1241)
		else:
			quickfix.StringField.__init__(self, 1241, data)

class FlexProductEligibilityIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1242)
		else:
			quickfix.BoolField.__init__(self, 1242, data)

class DerivFlexProductEligibilityIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1243)
		else:
			quickfix.BoolField.__init__(self, 1243, data)

class FlexibleIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1244)
		else:
			quickfix.BoolField.__init__(self, 1244, data)

class TradingCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1245)
		else:
			quickfix.StringField.__init__(self, 1245, data)

class DerivativeProduct(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1246)
		else:
			quickfix.IntField.__init__(self, 1246, data)

class DerivativeSecurityGroup(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1247)
		else:
			quickfix.StringField.__init__(self, 1247, data)

class DerivativeCFICode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1248)
		else:
			quickfix.StringField.__init__(self, 1248, data)

class DerivativeSecurityType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1249)
		else:
			quickfix.StringField.__init__(self, 1249, data)

class DerivativeSecuritySubType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1250)
		else:
			quickfix.StringField.__init__(self, 1250, data)

class DerivativeMaturityMonthYear(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1251)
		else:
			quickfix.StringField.__init__(self, 1251, data)

class DerivativeMaturityDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1252)
		else:
			quickfix.StringField.__init__(self, 1252, data)

class DerivativeMaturityTime(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1253)
		else:
			quickfix.StringField.__init__(self, 1253, data)

class DerivativeSettleOnOpenFlag(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1254)
		else:
			quickfix.StringField.__init__(self, 1254, data)

class DerivativeInstrmtAssignmentMethod(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1255)
		else:
			quickfix.CharField.__init__(self, 1255, data)

class DerivativeSecurityStatus(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1256)
		else:
			quickfix.StringField.__init__(self, 1256, data)

class DerivativeInstrRegistry(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1257)
		else:
			quickfix.StringField.__init__(self, 1257, data)

class DerivativeCountryOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1258)
		else:
			quickfix.StringField.__init__(self, 1258, data)

class DerivativeStateOrProvinceOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1259)
		else:
			quickfix.StringField.__init__(self, 1259, data)

class DerivativeLocaleOfIssue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1260)
		else:
			quickfix.StringField.__init__(self, 1260, data)

class DerivativeStrikePrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1261)
		else:
			quickfix.DoubleField.__init__(self, 1261, data)

class DerivativeStrikeCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1262)
		else:
			quickfix.StringField.__init__(self, 1262, data)

class DerivativeStrikeMultiplier(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1263)
		else:
			quickfix.DoubleField.__init__(self, 1263, data)

class DerivativeStrikeValue(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1264)
		else:
			quickfix.DoubleField.__init__(self, 1264, data)

class DerivativeOptAttribute(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1265)
		else:
			quickfix.CharField.__init__(self, 1265, data)

class DerivativeContractMultiplier(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1266)
		else:
			quickfix.DoubleField.__init__(self, 1266, data)

class DerivativeMinPriceIncrement(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1267)
		else:
			quickfix.DoubleField.__init__(self, 1267, data)

class DerivativeMinPriceIncrementAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1268)
		else:
			quickfix.DoubleField.__init__(self, 1268, data)

class DerivativeUnitOfMeasure(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1269)
		else:
			quickfix.StringField.__init__(self, 1269, data)

class DerivativeUnitOfMeasureQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1270)
		else:
			quickfix.DoubleField.__init__(self, 1270, data)

class DerivativeTimeUnit(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1271)
		else:
			quickfix.StringField.__init__(self, 1271, data)

class DerivativeSecurityExchange(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1272)
		else:
			quickfix.StringField.__init__(self, 1272, data)

class DerivativePositionLimit(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1273)
		else:
			quickfix.IntField.__init__(self, 1273, data)

class DerivativeNTPositionLimit(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1274)
		else:
			quickfix.IntField.__init__(self, 1274, data)

class DerivativeIssuer(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1275)
		else:
			quickfix.StringField.__init__(self, 1275, data)

class DerivativeIssueDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1276)
		else:
			quickfix.StringField.__init__(self, 1276, data)

class DerivativeEncodedIssuerLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1277)
		else:
			quickfix.IntField.__init__(self, 1277, data)

class DerivativeEncodedIssuer(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1278)
		else:
			quickfix.StringField.__init__(self, 1278, data)

class DerivativeSecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1279)
		else:
			quickfix.StringField.__init__(self, 1279, data)

class DerivativeEncodedSecurityDescLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1280)
		else:
			quickfix.IntField.__init__(self, 1280, data)

class DerivativeEncodedSecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1281)
		else:
			quickfix.StringField.__init__(self, 1281, data)

class DerivativeSecurityXMLLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1282)
		else:
			quickfix.IntField.__init__(self, 1282, data)

class DerivativeSecurityXML(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1283)
		else:
			quickfix.StringField.__init__(self, 1283, data)

class DerivativeSecurityXMLSchema(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1284)
		else:
			quickfix.StringField.__init__(self, 1284, data)

class DerivativeContractSettlMonth(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1285)
		else:
			quickfix.StringField.__init__(self, 1285, data)

class NoDerivativeEvents(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1286)
		else:
			quickfix.IntField.__init__(self, 1286, data)

class DerivativeEventType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1287)
		else:
			quickfix.IntField.__init__(self, 1287, data)

class DerivativeEventDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1288)
		else:
			quickfix.StringField.__init__(self, 1288, data)

class DerivativeEventTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 1289)
		else:
			quickfix.UtcTimeStampField.__init__(self, 1289, data)

class DerivativeEventPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1290)
		else:
			quickfix.DoubleField.__init__(self, 1290, data)

class DerivativeEventText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1291)
		else:
			quickfix.StringField.__init__(self, 1291, data)

class NoDerivativeInstrumentParties(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1292)
		else:
			quickfix.IntField.__init__(self, 1292, data)

class DerivativeInstrumentPartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1293)
		else:
			quickfix.StringField.__init__(self, 1293, data)

class DerivativeInstrumentPartyIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1294)
		else:
			quickfix.StringField.__init__(self, 1294, data)

class DerivativeInstrumentPartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1295)
		else:
			quickfix.IntField.__init__(self, 1295, data)

class NoDerivativeInstrumentPartySubIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1296)
		else:
			quickfix.IntField.__init__(self, 1296, data)

class DerivativeInstrumentPartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1297)
		else:
			quickfix.StringField.__init__(self, 1297, data)

class DerivativeInstrumentPartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1298)
		else:
			quickfix.IntField.__init__(self, 1298, data)

class DerivativeExerciseStyle(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1299)
		else:
			quickfix.CharField.__init__(self, 1299, data)

class MarketSegmentID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1300)
		else:
			quickfix.StringField.__init__(self, 1300, data)

class MarketID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1301)
		else:
			quickfix.StringField.__init__(self, 1301, data)

class MaturityMonthYearIncrementUnits(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1302)
		else:
			quickfix.IntField.__init__(self, 1302, data)

class MaturityMonthYearFormat(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1303)
		else:
			quickfix.IntField.__init__(self, 1303, data)

class StrikeExerciseStyle(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1304)
		else:
			quickfix.IntField.__init__(self, 1304, data)

class SecondaryPriceLimitType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1305)
		else:
			quickfix.IntField.__init__(self, 1305, data)

class PriceLimitType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1306)
		else:
			quickfix.IntField.__init__(self, 1306, data)

class ExecInstValue(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1308)
		else:
			quickfix.CharField.__init__(self, 1308, data)

class NoTradingSessionRules(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1309)
		else:
			quickfix.IntField.__init__(self, 1309, data)

class NoMarketSegments(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1310)
		else:
			quickfix.IntField.__init__(self, 1310, data)

class NoDerivativeInstrAttrib(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1311)
		else:
			quickfix.IntField.__init__(self, 1311, data)

class NoNestedInstrAttrib(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1312)
		else:
			quickfix.IntField.__init__(self, 1312, data)

class DerivativeInstrAttribType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1313)
		else:
			quickfix.IntField.__init__(self, 1313, data)

class DerivativeInstrAttribValue(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1314)
		else:
			quickfix.StringField.__init__(self, 1314, data)

class DerivativePriceUnitOfMeasure(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1315)
		else:
			quickfix.StringField.__init__(self, 1315, data)

class DerivativePriceUnitOfMeasureQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1316)
		else:
			quickfix.DoubleField.__init__(self, 1316, data)

class DerivativeSettlMethod(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1317)
		else:
			quickfix.CharField.__init__(self, 1317, data)

class DerivativePriceQuoteMethod(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1318)
		else:
			quickfix.StringField.__init__(self, 1318, data)

class DerivativeFuturesValuationMethod(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1319)
		else:
			quickfix.StringField.__init__(self, 1319, data)

class DerivativeListMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1320)
		else:
			quickfix.IntField.__init__(self, 1320, data)

class DerivativeCapPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1321)
		else:
			quickfix.DoubleField.__init__(self, 1321, data)

class DerivativeFloorPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1322)
		else:
			quickfix.DoubleField.__init__(self, 1322, data)

class DerivativePutOrCall(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1323)
		else:
			quickfix.IntField.__init__(self, 1323, data)

class ListUpdateAction(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1324)
		else:
			quickfix.CharField.__init__(self, 1324, data)

class ParentMktSegmID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1325)
		else:
			quickfix.StringField.__init__(self, 1325, data)

class TradingSessionDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1326)
		else:
			quickfix.StringField.__init__(self, 1326, data)

class TradSesUpdateAction(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1327)
		else:
			quickfix.CharField.__init__(self, 1327, data)

class RejectText(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1328)
		else:
			quickfix.StringField.__init__(self, 1328, data)

class FeeMultiplier(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1329)
		else:
			quickfix.DoubleField.__init__(self, 1329, data)

class UnderlyingLegSymbol(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1330)
		else:
			quickfix.StringField.__init__(self, 1330, data)

class UnderlyingLegSymbolSfx(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1331)
		else:
			quickfix.StringField.__init__(self, 1331, data)

class UnderlyingLegSecurityID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1332)
		else:
			quickfix.StringField.__init__(self, 1332, data)

class UnderlyingLegSecurityIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1333)
		else:
			quickfix.StringField.__init__(self, 1333, data)

class NoUnderlyingLegSecurityAltID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1334)
		else:
			quickfix.IntField.__init__(self, 1334, data)

class UnderlyingLegSecurityAltID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1335)
		else:
			quickfix.StringField.__init__(self, 1335, data)

class UnderlyingLegSecurityAltIDSource(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1336)
		else:
			quickfix.StringField.__init__(self, 1336, data)

class UnderlyingLegSecurityType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1337)
		else:
			quickfix.StringField.__init__(self, 1337, data)

class UnderlyingLegSecuritySubType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1338)
		else:
			quickfix.StringField.__init__(self, 1338, data)

class UnderlyingLegMaturityMonthYear(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1339)
		else:
			quickfix.StringField.__init__(self, 1339, data)

class UnderlyingLegStrikePrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1340)
		else:
			quickfix.DoubleField.__init__(self, 1340, data)

class UnderlyingLegSecurityExchange(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1341)
		else:
			quickfix.StringField.__init__(self, 1341, data)

class NoOfLegUnderlyings(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1342)
		else:
			quickfix.IntField.__init__(self, 1342, data)

class UnderlyingLegPutOrCall(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1343)
		else:
			quickfix.IntField.__init__(self, 1343, data)

class UnderlyingLegCFICode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1344)
		else:
			quickfix.StringField.__init__(self, 1344, data)

class UnderlyingLegMaturityDate(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1345)
		else:
			quickfix.StringField.__init__(self, 1345, data)

class ApplReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1346)
		else:
			quickfix.StringField.__init__(self, 1346, data)

class ApplReqType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1347)
		else:
			quickfix.IntField.__init__(self, 1347, data)

class ApplResponseType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1348)
		else:
			quickfix.IntField.__init__(self, 1348, data)

class ApplTotalMessageCount(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1349)
		else:
			quickfix.IntField.__init__(self, 1349, data)

class ApplLastSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1350)
		else:
			quickfix.IntField.__init__(self, 1350, data)

class NoApplIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1351)
		else:
			quickfix.IntField.__init__(self, 1351, data)

class ApplResendFlag(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1352)
		else:
			quickfix.BoolField.__init__(self, 1352, data)

class ApplResponseID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1353)
		else:
			quickfix.StringField.__init__(self, 1353, data)

class ApplResponseError(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1354)
		else:
			quickfix.IntField.__init__(self, 1354, data)

class RefApplID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1355)
		else:
			quickfix.StringField.__init__(self, 1355, data)

class ApplReportID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1356)
		else:
			quickfix.StringField.__init__(self, 1356, data)

class RefApplLastSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1357)
		else:
			quickfix.IntField.__init__(self, 1357, data)

class LegPutOrCall(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1358)
		else:
			quickfix.IntField.__init__(self, 1358, data)

class TotNoFills(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1361)
		else:
			quickfix.IntField.__init__(self, 1361, data)

class NoFills(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1362)
		else:
			quickfix.IntField.__init__(self, 1362, data)

class FillExecID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1363)
		else:
			quickfix.StringField.__init__(self, 1363, data)

class FillPx(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1364)
		else:
			quickfix.DoubleField.__init__(self, 1364, data)

class FillQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1365)
		else:
			quickfix.DoubleField.__init__(self, 1365, data)

class LegAllocID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1366)
		else:
			quickfix.StringField.__init__(self, 1366, data)

class LegAllocSettlCurrency(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1367)
		else:
			quickfix.StringField.__init__(self, 1367, data)

class TradSesEvent(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1368)
		else:
			quickfix.IntField.__init__(self, 1368, data)

class MassActionReportID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1369)
		else:
			quickfix.StringField.__init__(self, 1369, data)

class NoNotAffectedOrders(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1370)
		else:
			quickfix.IntField.__init__(self, 1370, data)

class NotAffectedOrderID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1371)
		else:
			quickfix.StringField.__init__(self, 1371, data)

class NotAffOrigClOrdID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1372)
		else:
			quickfix.StringField.__init__(self, 1372, data)

class MassActionType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1373)
		else:
			quickfix.IntField.__init__(self, 1373, data)

class MassActionScope(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1374)
		else:
			quickfix.IntField.__init__(self, 1374, data)

class MassActionResponse(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1375)
		else:
			quickfix.IntField.__init__(self, 1375, data)

class MassActionRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1376)
		else:
			quickfix.IntField.__init__(self, 1376, data)

class MultilegModel(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1377)
		else:
			quickfix.IntField.__init__(self, 1377, data)

class MultilegPriceMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1378)
		else:
			quickfix.IntField.__init__(self, 1378, data)

class LegVolatility(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1379)
		else:
			quickfix.DoubleField.__init__(self, 1379, data)

class DividendYield(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1380)
		else:
			quickfix.DoubleField.__init__(self, 1380, data)

class LegDividendYield(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1381)
		else:
			quickfix.DoubleField.__init__(self, 1381, data)

class CurrencyRatio(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1382)
		else:
			quickfix.DoubleField.__init__(self, 1382, data)

class LegCurrencyRatio(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1383)
		else:
			quickfix.DoubleField.__init__(self, 1383, data)

class LegExecInst(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1384)
		else:
			quickfix.StringField.__init__(self, 1384, data)

class ContingencyType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1385)
		else:
			quickfix.IntField.__init__(self, 1385, data)

class ListRejectReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1386)
		else:
			quickfix.IntField.__init__(self, 1386, data)

class NoTrdRepIndicators(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1387)
		else:
			quickfix.IntField.__init__(self, 1387, data)

class TrdRepPartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1388)
		else:
			quickfix.IntField.__init__(self, 1388, data)

class TrdRepIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1389)
		else:
			quickfix.BoolField.__init__(self, 1389, data)

class TradePublishIndicator(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1390)
		else:
			quickfix.IntField.__init__(self, 1390, data)

class UnderlyingLegOptAttribute(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1391)
		else:
			quickfix.CharField.__init__(self, 1391, data)

class UnderlyingLegSecurityDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1392)
		else:
			quickfix.StringField.__init__(self, 1392, data)

class MarketReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1393)
		else:
			quickfix.StringField.__init__(self, 1393, data)

class MarketReportID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1394)
		else:
			quickfix.StringField.__init__(self, 1394, data)

class MarketUpdateAction(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1395)
		else:
			quickfix.CharField.__init__(self, 1395, data)

class MarketSegmentDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1396)
		else:
			quickfix.StringField.__init__(self, 1396, data)

class EncodedMktSegmDescLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1397)
		else:
			quickfix.IntField.__init__(self, 1397, data)

class EncodedMktSegmDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1398)
		else:
			quickfix.StringField.__init__(self, 1398, data)

class ApplNewSeqNum(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1399)
		else:
			quickfix.IntField.__init__(self, 1399, data)

class EncryptedPasswordMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1400)
		else:
			quickfix.IntField.__init__(self, 1400, data)

class EncryptedPasswordLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1401)
		else:
			quickfix.IntField.__init__(self, 1401, data)

class EncryptedPassword(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1402)
		else:
			quickfix.StringField.__init__(self, 1402, data)

class EncryptedNewPasswordLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1403)
		else:
			quickfix.IntField.__init__(self, 1403, data)

class EncryptedNewPassword(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1404)
		else:
			quickfix.StringField.__init__(self, 1404, data)

class UnderlyingLegMaturityTime(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1405)
		else:
			quickfix.StringField.__init__(self, 1405, data)

class RefApplExtID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1406)
		else:
			quickfix.IntField.__init__(self, 1406, data)

class DefaultApplExtID(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1407)
		else:
			quickfix.IntField.__init__(self, 1407, data)

class DefaultCstmApplVerID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1408)
		else:
			quickfix.StringField.__init__(self, 1408, data)

class SessionStatus(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1409)
		else:
			quickfix.IntField.__init__(self, 1409, data)

class DefaultVerIndicator(quickfix.BoolField):
	def __init__(self, data = None):
		if data == None:
			quickfix.BoolField.__init__(self, 1410)
		else:
			quickfix.BoolField.__init__(self, 1410, data)

class Nested4PartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1411)
		else:
			quickfix.IntField.__init__(self, 1411, data)

class Nested4PartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1412)
		else:
			quickfix.StringField.__init__(self, 1412, data)

class NoNested4PartySubIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1413)
		else:
			quickfix.IntField.__init__(self, 1413, data)

class NoNested4PartyIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1414)
		else:
			quickfix.IntField.__init__(self, 1414, data)

class Nested4PartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1415)
		else:
			quickfix.StringField.__init__(self, 1415, data)

class Nested4PartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1416)
		else:
			quickfix.CharField.__init__(self, 1416, data)

class Nested4PartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1417)
		else:
			quickfix.IntField.__init__(self, 1417, data)

class LegLastQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1418)
		else:
			quickfix.DoubleField.__init__(self, 1418, data)

class UnderlyingExerciseStyle(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1419)
		else:
			quickfix.IntField.__init__(self, 1419, data)

class LegExerciseStyle(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1420)
		else:
			quickfix.IntField.__init__(self, 1420, data)

class LegPriceUnitOfMeasure(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1421)
		else:
			quickfix.StringField.__init__(self, 1421, data)

class LegPriceUnitOfMeasureQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1422)
		else:
			quickfix.DoubleField.__init__(self, 1422, data)

class UnderlyingUnitOfMeasureQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1423)
		else:
			quickfix.DoubleField.__init__(self, 1423, data)

class UnderlyingPriceUnitOfMeasure(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1424)
		else:
			quickfix.StringField.__init__(self, 1424, data)

class UnderlyingPriceUnitOfMeasureQty(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1425)
		else:
			quickfix.DoubleField.__init__(self, 1425, data)

class ApplReportType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1426)
		else:
			quickfix.IntField.__init__(self, 1426, data)

class HaltReasonInt(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 327)
		else:
			quickfix.IntField.__init__(self, 327, data)

class SideLastQty(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1009)
		else:
			quickfix.IntField.__init__(self, 1009, data)

class UnderlyingInstrumentPartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1059)
		else:
			quickfix.StringField.__init__(self, 1059, data)

class UnderlyingInstrumentPartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1060)
		else:
			quickfix.CharField.__init__(self, 1060, data)

class UnderlyingInstrumentPartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1061)
		else:
			quickfix.IntField.__init__(self, 1061, data)

class UnderlyingInstrumentPartySubID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1063)
		else:
			quickfix.StringField.__init__(self, 1063, data)

class UnderlyingInstrumentPartySubIDType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1064)
		else:
			quickfix.IntField.__init__(self, 1064, data)

class OptPayoutAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1195)
		else:
			quickfix.DoubleField.__init__(self, 1195, data)

class ValuationMethod(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1197)
		else:
			quickfix.StringField.__init__(self, 1197, data)

class DerivativeValuationMethod(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1319)
		else:
			quickfix.StringField.__init__(self, 1319, data)

class SideExecID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1427)
		else:
			quickfix.StringField.__init__(self, 1427, data)

class OrderDelay(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1428)
		else:
			quickfix.IntField.__init__(self, 1428, data)

class OrderDelayUnit(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1429)
		else:
			quickfix.IntField.__init__(self, 1429, data)

class VenueType(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1430)
		else:
			quickfix.CharField.__init__(self, 1430, data)

class RefOrdIDReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1431)
		else:
			quickfix.IntField.__init__(self, 1431, data)

class OrigCustOrderCapacity(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1432)
		else:
			quickfix.IntField.__init__(self, 1432, data)

class RefApplReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1433)
		else:
			quickfix.StringField.__init__(self, 1433, data)

class ModelType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1434)
		else:
			quickfix.IntField.__init__(self, 1434, data)

class ContractMultiplierUnit(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1435)
		else:
			quickfix.IntField.__init__(self, 1435, data)

class LegContractMultiplierUnit(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1436)
		else:
			quickfix.IntField.__init__(self, 1436, data)

class UnderlyingContractMultiplierUnit(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1437)
		else:
			quickfix.IntField.__init__(self, 1437, data)

class DerivativeContractMultiplierUnit(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1438)
		else:
			quickfix.IntField.__init__(self, 1438, data)

class FlowScheduleType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1439)
		else:
			quickfix.IntField.__init__(self, 1439, data)

class LegFlowScheduleType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1440)
		else:
			quickfix.IntField.__init__(self, 1440, data)

class UnderlyingFlowScheduleType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1441)
		else:
			quickfix.IntField.__init__(self, 1441, data)

class DerivativeFlowScheduleType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1442)
		else:
			quickfix.IntField.__init__(self, 1442, data)

class FillLiquidityInd(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1443)
		else:
			quickfix.IntField.__init__(self, 1443, data)

class SideLiquidityInd(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1444)
		else:
			quickfix.IntField.__init__(self, 1444, data)

class NoRateSources(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1445)
		else:
			quickfix.IntField.__init__(self, 1445, data)

class RateSource(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1446)
		else:
			quickfix.IntField.__init__(self, 1446, data)

class RateSourceType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1447)
		else:
			quickfix.IntField.__init__(self, 1447, data)

class ReferencePage(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1448)
		else:
			quickfix.StringField.__init__(self, 1448, data)

class RestructuringType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1449)
		else:
			quickfix.StringField.__init__(self, 1449, data)

class Seniority(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1450)
		else:
			quickfix.StringField.__init__(self, 1450, data)

class NotionalPercentageOutstanding(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1451)
		else:
			quickfix.DoubleField.__init__(self, 1451, data)

class OriginalNotionalPercentageOutstanding(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1452)
		else:
			quickfix.DoubleField.__init__(self, 1452, data)

class UnderlyingRestructuringType(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1453)
		else:
			quickfix.StringField.__init__(self, 1453, data)

class UnderlyingSeniority(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1454)
		else:
			quickfix.StringField.__init__(self, 1454, data)

class UnderlyingNotionalPercentageOutstanding(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1455)
		else:
			quickfix.DoubleField.__init__(self, 1455, data)

class UnderlyingOriginalNotionalPercentageOutstanding(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1456)
		else:
			quickfix.DoubleField.__init__(self, 1456, data)

class AttachmentPoint(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1457)
		else:
			quickfix.DoubleField.__init__(self, 1457, data)

class DetachmentPoint(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1458)
		else:
			quickfix.DoubleField.__init__(self, 1458, data)

class UnderlyingAttachmentPoint(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1459)
		else:
			quickfix.DoubleField.__init__(self, 1459, data)

class UnderlyingDetachmentPoint(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1460)
		else:
			quickfix.DoubleField.__init__(self, 1460, data)

class NoTargetPartyIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1461)
		else:
			quickfix.IntField.__init__(self, 1461, data)

class TargetPartyID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1462)
		else:
			quickfix.StringField.__init__(self, 1462, data)

class TargetPartyIDSource(quickfix.CharField):
	def __init__(self, data = None):
		if data == None:
			quickfix.CharField.__init__(self, 1463)
		else:
			quickfix.CharField.__init__(self, 1463, data)

class TargetPartyRole(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1464)
		else:
			quickfix.IntField.__init__(self, 1464, data)

class SecurityListID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1465)
		else:
			quickfix.StringField.__init__(self, 1465, data)

class SecurityListRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1466)
		else:
			quickfix.StringField.__init__(self, 1466, data)

class SecurityListDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1467)
		else:
			quickfix.StringField.__init__(self, 1467, data)

class EncodedSecurityListDescLen(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1468)
		else:
			quickfix.IntField.__init__(self, 1468, data)

class EncodedSecurityListDesc(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1469)
		else:
			quickfix.StringField.__init__(self, 1469, data)

class SecurityListType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1470)
		else:
			quickfix.IntField.__init__(self, 1470, data)

class SecurityListTypeSource(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1471)
		else:
			quickfix.IntField.__init__(self, 1471, data)

class NewsID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1472)
		else:
			quickfix.StringField.__init__(self, 1472, data)

class NewsCategory(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1473)
		else:
			quickfix.IntField.__init__(self, 1473, data)

class LanguageCode(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1474)
		else:
			quickfix.StringField.__init__(self, 1474, data)

class NoNewsRefIDs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1475)
		else:
			quickfix.IntField.__init__(self, 1475, data)

class NewsRefID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1476)
		else:
			quickfix.StringField.__init__(self, 1476, data)

class NewsRefType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1477)
		else:
			quickfix.IntField.__init__(self, 1477, data)

class StrikePriceDeterminationMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1478)
		else:
			quickfix.IntField.__init__(self, 1478, data)

class StrikePriceBoundaryMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1479)
		else:
			quickfix.IntField.__init__(self, 1479, data)

class StrikePriceBoundaryPrecision(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1480)
		else:
			quickfix.DoubleField.__init__(self, 1480, data)

class UnderlyingPriceDeterminationMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1481)
		else:
			quickfix.IntField.__init__(self, 1481, data)

class OptPayoutType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1482)
		else:
			quickfix.IntField.__init__(self, 1482, data)

class NoComplexEvents(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1483)
		else:
			quickfix.IntField.__init__(self, 1483, data)

class ComplexEventType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1484)
		else:
			quickfix.IntField.__init__(self, 1484, data)

class ComplexOptPayoutAmount(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1485)
		else:
			quickfix.DoubleField.__init__(self, 1485, data)

class ComplexEventPrice(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1486)
		else:
			quickfix.DoubleField.__init__(self, 1486, data)

class ComplexEventPriceBoundaryMethod(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1487)
		else:
			quickfix.IntField.__init__(self, 1487, data)

class ComplexEventPriceBoundaryPrecision(quickfix.DoubleField):
	def __init__(self, data = None):
		if data == None:
			quickfix.DoubleField.__init__(self, 1488)
		else:
			quickfix.DoubleField.__init__(self, 1488, data)

class ComplexEventPriceTimeType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1489)
		else:
			quickfix.IntField.__init__(self, 1489, data)

class ComplexEventCondition(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1490)
		else:
			quickfix.IntField.__init__(self, 1490, data)

class NoComplexEventDates(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1491)
		else:
			quickfix.IntField.__init__(self, 1491, data)

class ComplexEventStartDate(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 1492)
		else:
			quickfix.UtcTimeStampField.__init__(self, 1492, data)

class ComplexEventEndDate(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 1493)
		else:
			quickfix.UtcTimeStampField.__init__(self, 1493, data)

class NoComplexEventTimes(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1494)
		else:
			quickfix.IntField.__init__(self, 1494, data)

class ComplexEventStartTime(quickfix.UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeOnlyField.__init__(self, 1495)
		else:
			quickfix.UtcTimeOnlyField.__init__(self, 1495, data)

class ComplexEventEndTime(quickfix.UtcTimeOnlyField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeOnlyField.__init__(self, 1496)
		else:
			quickfix.UtcTimeOnlyField.__init__(self, 1496, data)

class StreamAsgnReqID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1497)
		else:
			quickfix.StringField.__init__(self, 1497, data)

class StreamAsgnReqType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1498)
		else:
			quickfix.IntField.__init__(self, 1498, data)

class NoAsgnReqs(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1499)
		else:
			quickfix.IntField.__init__(self, 1499, data)

class MDStreamID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1500)
		else:
			quickfix.StringField.__init__(self, 1500, data)

class StreamAsgnRptID(quickfix.StringField):
	def __init__(self, data = None):
		if data == None:
			quickfix.StringField.__init__(self, 1501)
		else:
			quickfix.StringField.__init__(self, 1501, data)

class StreamAsgnRejReason(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1502)
		else:
			quickfix.IntField.__init__(self, 1502, data)

class StreamAsgnAckType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1503)
		else:
			quickfix.IntField.__init__(self, 1503, data)

class RelSymTransactTime(quickfix.UtcTimeStampField):
	def __init__(self, data = None):
		if data == None:
			quickfix.UtcTimeStampField.__init__(self, 1504)
		else:
			quickfix.UtcTimeStampField.__init__(self, 1504, data)

class StreamAsgnType(quickfix.IntField):
	def __init__(self, data = None):
		if data == None:
			quickfix.IntField.__init__(self, 1617)
		else:
			quickfix.IntField.__init__(self, 1617, data)

